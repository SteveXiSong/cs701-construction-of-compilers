space.c:185:25: warning: field '__cd' with variable sized type 'struct __gconv_info' not at the end of a struct or class is a GNU extension [-Wgnu]
    struct __gconv_info __cd;
                        ^
space.c:1990:12: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
 if (error = simgroup(group_ptr)) {
     ~~~~~~^~~~~~~~~~~~~~~~~~~~~
space.c:1990:12: note: place parentheses around the assignment to silence this warning
 if (error = simgroup(group_ptr)) {
           ^
     (                          )
space.c:1990:12: note: use '==' to turn this assignment into an equality comparison
 if (error = simgroup(group_ptr)) {
           ^
           ==
space.c:1993:12: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
 if (error = simamp(group_ptr)) {
     ~~~~~~^~~~~~~~~~~~~~~~~~~
space.c:1993:12: note: place parentheses around the assignment to silence this warning
 if (error = simamp(group_ptr)) {
           ^
     (                        )
space.c:1993:12: note: use '==' to turn this assignment into an equality comparison
 if (error = simamp(group_ptr)) {
           ^
           ==
space.c:1996:12: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
 if (error = simpha(group_ptr)) {
     ~~~~~~^~~~~~~~~~~~~~~~~~~
space.c:1996:12: note: place parentheses around the assignment to silence this warning
 if (error = simpha(group_ptr)) {
           ^
     (                        )
space.c:1996:12: note: use '==' to turn this assignment into an equality comparison
 if (error = simpha(group_ptr)) {
           ^
           ==
space.c:2750:12: warning: equality comparison result unused [-Wunused-comparison]
 *elem_ptr == ((void *)0);
 ~~~~~~~~~~^~~~~~~~~~~~~~
space.c:2750:12: note: use '=' to turn this equality comparison into an assignment
 *elem_ptr == ((void *)0);
           ^~
           =
space.c:5482:18: warning: invalid conversion specifier '	' [-Wformat-invalid-specifier]
  printf("\n%    \t");
            ~~~~~^
6 warnings generated.

FUNCTION gnu_dev_major

BASIC BLOCK entry
%1:	lshr	 __dev XXX
%2:	and	 %1 XXX
%3:	lshr	 __dev XXX
%4:	trunc	 %3
%5:	and	 %4 XXX
%6:	zext	 %5
%7:	or	 %2 %6
%8:	trunc	 %7
%9:	ret	 %8

FUNCTION gnu_dev_minor

BASIC BLOCK entry
%10:	and	 __dev XXX
%11:	lshr	 __dev XXX
%12:	trunc	 %11
%13:	and	 %12 XXX
%14:	zext	 %13
%15:	or	 %10 %14
%16:	trunc	 %15
%17:	ret	 %16

FUNCTION gnu_dev_makedev

BASIC BLOCK entry
%18:	and	 __minor XXX
%19:	and	 __major XXX
%20:	shl	 %19 XXX
%21:	or	 %18 %20
%22:	zext	 %21
%23:	and	 __minor XXX
%24:	zext	 %23
%25:	shl	 %24 XXX
%26:	or	 %22 %25
%27:	and	 __major XXX
%28:	zext	 %27
%29:	shl	 %28 XXX
%30:	or	 %26 %29
%31:	ret	 %30

FUNCTION main

BASIC BLOCK entry
%32:	alloca	 XXX
%33:	alloca	 XXX
%34:	alloca	 XXX
%35:	alloca	 XXX
%36:	alloca	 XXX
%37:	store	 XXX %32
%38:	store	 XXX %33
%39:	store	 XXX %34
%40:	store	 XXX %35
%41:	icmp	 argc XXX
%42:	br	 %41 if.end if.then

BASIC BLOCK if.then
%43:	call	 XXX XXX printf
%44:	call	 XXX exit
%45:	unreachable	

BASIC BLOCK if.end
%46:	getelementptr	 argv XXX
%47:	load	 %46
%48:	call	 XXX %47 strcpy
%49:	call	 glvainit
%50:	getelementptr	 %36 XXX XXX
%51:	call	 %50 nomefile
%52:	getelementptr	 %36 XXX XXX
%53:	call	 %52 %32 %33 readfil3
%54:	icmp	 %53 XXX
%55:	br	 %54 if.end6 if.then5

BASIC BLOCK if.then5
%56:	call	 XXX exit
%57:	unreachable	

BASIC BLOCK if.end6
%58:	load	 %32
%59:	call	 %58 prnfile
%60:	load	 %32
%61:	call	 %60 %34 %35 groupdef
%62:	call	 waitcont
%63:	icmp	 %61 XXX
%64:	br	 %63 if.end10 if.then9

BASIC BLOCK if.then9
%65:	call	 XXX exit
%66:	unreachable	

BASIC BLOCK if.end10
%67:	load	 %35
%68:	call	 %67 simgroup
%69:	icmp	 %68 XXX
%70:	br	 %69 if.end13 if.then12

BASIC BLOCK if.then12
%71:	call	 XXX exit
%72:	unreachable	

BASIC BLOCK if.end13
%73:	load	 %35
%74:	call	 %73 simamp
%75:	icmp	 %74 XXX
%76:	br	 %75 if.end17 if.then16

BASIC BLOCK if.then16
%77:	call	 XXX exit
%78:	unreachable	

BASIC BLOCK if.end17
%79:	load	 %35
%80:	call	 %79 simpha
%81:	icmp	 %80 XXX
%82:	br	 %81 if.end21 if.then20

BASIC BLOCK if.then20
%83:	call	 XXX exit
%84:	unreachable	

BASIC BLOCK if.end21
%85:	load	 %35
%86:	call	 %85 simpol
%87:	call	 waitcont
%88:	load	 %35
%89:	getelementptr	 %36 XXX XXX
%90:	call	 %88 %89 grwrite
%91:	ret	 XXX

FUNCTION glvainit

BASIC BLOCK entry
%92:	call	 floatsup
%93:	call	 kwdsinit
%94:	call	 emsginit
%95:	call	 unaminit
%96:	call	 moseinit
%97:	ret	

FUNCTION nomefile

BASIC BLOCK entry
%98:	call	 fn XXX strcpy
%99:	ret	

FUNCTION readfil3

BASIC BLOCK entry
%100:	alloca	 XXX
%101:	store	 XXX firstel
%102:	store	 XXX lastel
%103:	getelementptr	 %100 XXX XXX
%104:	call	 %103 filename strcpy
%105:	getelementptr	 %100 XXX XXX
%106:	call	 %105 XXX strcat
%107:	getelementptr	 %100 XXX XXX
%108:	call	 %107 XXX fopen
%109:	icmp	 %108 XXX
%110:	br	 %109 if.end if.then

BASIC BLOCK if.then
%111:	getelementptr	 %100 XXX XXX
%112:	call	 XXX XXX %111 printf
%113:	br	 return

BASIC BLOCK if.end
%114:	call	 %108 _IO_getc
%115:	trunc	 %114
%116:	sext	 %115
%117:	icmp	 %116 XXX
%118:	br	 %117 if.end14 if.then11

BASIC BLOCK if.then11
%119:	getelementptr	 %100 XXX XXX
%120:	call	 XXX XXX %119 printf
%121:	br	 return

BASIC BLOCK if.end14
%122:	br	 while.cond

BASIC BLOCK while.cond
%123:	phi	 %115 %148
%124:	phi	 XXX %146
%125:	sext	 %123
%126:	sext	 %125
%127:	call	 __ctype_b_loc
%128:	load	 %127
%129:	getelementptr	 %128 %126
%130:	load	 %129
%131:	zext	 %130
%132:	and	 %131 XXX
%133:	icmp	 %132 XXX
%134:	br	 %133 lor.rhs lor.end

BASIC BLOCK lor.rhs
%135:	sext	 %123
%136:	icmp	 %135 XXX
%137:	br	 lor.end

BASIC BLOCK lor.end
%138:	phi	 XXX %136
%139:	br	 %138 while.end while.body

BASIC BLOCK while.body
%140:	sext	 %123
%141:	sext	 XXX
%142:	icmp	 %140 %141
%143:	br	 %142 if.end26 if.then25

BASIC BLOCK if.then25
%144:	add	 %124 XXX
%145:	br	 if.end26

BASIC BLOCK if.end26
%146:	phi	 %144 %124
%147:	call	 %108 _IO_getc
%148:	trunc	 %147
%149:	br	 while.cond

BASIC BLOCK while.end
%150:	call	 XXX malloc
%151:	bitcast	 %150
%152:	icmp	 %151 XXX
%153:	br	 %152 if.end34 if.then32

BASIC BLOCK if.then32
%154:	call	 XXX XXX printf
%155:	br	 return

BASIC BLOCK if.end34
%156:	getelementptr	 %151 XXX XXX
%157:	store	 %123 %156
%158:	getelementptr	 %151 XXX XXX
%159:	store	 %124 %158
%160:	getelementptr	 %151 XXX XXX
%161:	store	 XXX %160
%162:	getelementptr	 %151 XXX XXX
%163:	store	 XXX %162
%164:	store	 %151 firstel
%165:	store	 %151 lastel
%166:	call	 XXX printf
%167:	call	 %108 _IO_getc
%168:	trunc	 %167
%169:	br	 while.cond38

BASIC BLOCK while.cond38
%170:	phi	 %168 %258
%171:	phi	 %124 %259
%172:	sext	 %170
%173:	icmp	 %172 XXX
%174:	br	 %173 while.end100 while.body42

BASIC BLOCK while.body42
%175:	sext	 %170
%176:	sext	 %175
%177:	call	 __ctype_b_loc
%178:	load	 %177
%179:	getelementptr	 %178 %176
%180:	load	 %179
%181:	zext	 %180
%182:	and	 %181 XXX
%183:	icmp	 %182 XXX
%184:	br	 %183 lor.lhs.false if.then53

BASIC BLOCK lor.lhs.false
%185:	sext	 %170
%186:	icmp	 %185 XXX
%187:	br	 %186 if.else if.then53

BASIC BLOCK if.then53
%188:	br	 do.body

BASIC BLOCK do.body
%189:	phi	 %170 %199
%190:	phi	 %171 %197
%191:	sext	 %189
%192:	sext	 XXX
%193:	icmp	 %191 %192
%194:	br	 %193 if.end60 if.then58

BASIC BLOCK if.then58
%195:	add	 %190 XXX
%196:	br	 if.end60

BASIC BLOCK if.end60
%197:	phi	 %195 %190
%198:	call	 %108 _IO_getc
%199:	trunc	 %198
%200:	br	 do.cond

BASIC BLOCK do.cond
%201:	sext	 %199
%202:	sext	 %201
%203:	call	 __ctype_b_loc
%204:	load	 %203
%205:	getelementptr	 %204 %202
%206:	load	 %205
%207:	zext	 %206
%208:	and	 %207 XXX
%209:	icmp	 %208 XXX
%210:	br	 %209 lor.rhs70 lor.end74

BASIC BLOCK lor.rhs70
%211:	sext	 %199
%212:	icmp	 %211 XXX
%213:	br	 lor.end74

BASIC BLOCK lor.end74
%214:	phi	 XXX %212
%215:	br	 %214 do.end do.body

BASIC BLOCK do.end
%216:	call	 XXX malloc
%217:	bitcast	 %216
%218:	icmp	 %217 XXX
%219:	br	 %218 if.end80 if.then78

BASIC BLOCK if.then78
%220:	call	 XXX XXX printf
%221:	br	 return

BASIC BLOCK if.end80
%222:	getelementptr	 %217 XXX XXX
%223:	store	 XXX %222
%224:	getelementptr	 %217 XXX XXX
%225:	store	 %197 %224
%226:	load	 lastel
%227:	getelementptr	 %217 XXX XXX
%228:	store	 %226 %227
%229:	getelementptr	 %217 XXX XXX
%230:	store	 XXX %229
%231:	load	 lastel
%232:	getelementptr	 %231 XXX XXX
%233:	store	 %217 %232
%234:	store	 %217 lastel
%235:	br	 if.end99

BASIC BLOCK if.else
%236:	call	 XXX malloc
%237:	bitcast	 %236
%238:	icmp	 %237 XXX
%239:	br	 %238 if.end91 if.then89

BASIC BLOCK if.then89
%240:	call	 XXX XXX printf
%241:	br	 return

BASIC BLOCK if.end91
%242:	getelementptr	 %237 XXX XXX
%243:	store	 %170 %242
%244:	getelementptr	 %237 XXX XXX
%245:	store	 %171 %244
%246:	load	 lastel
%247:	getelementptr	 %237 XXX XXX
%248:	store	 %246 %247
%249:	getelementptr	 %237 XXX XXX
%250:	store	 XXX %249
%251:	load	 lastel
%252:	getelementptr	 %251 XXX XXX
%253:	store	 %237 %252
%254:	store	 %237 lastel
%255:	call	 %108 _IO_getc
%256:	trunc	 %255
%257:	br	 if.end99

BASIC BLOCK if.end99
%258:	phi	 %199 %256
%259:	phi	 %197 %171
%260:	br	 while.cond38

BASIC BLOCK while.end100
%261:	call	 %108 fclose
%262:	br	 return

BASIC BLOCK return
%263:	phi	 XXX XXX XXX XXX XXX XXX
%264:	ret	 %263

FUNCTION prnfile

BASIC BLOCK entry
%265:	call	 XXX printf
%266:	br	 while.cond

BASIC BLOCK while.cond
%267:	phi	 firstel %287
%268:	phi	 XXX %283
%269:	getelementptr	 %267 XXX XXX
%270:	load	 %269
%271:	icmp	 %270 XXX
%272:	br	 %271 while.end while.body

BASIC BLOCK while.body
%273:	getelementptr	 %267 XXX XXX
%274:	load	 %273
%275:	getelementptr	 %267 XXX XXX
%276:	load	 %275
%277:	icmp	 %276 %268
%278:	br	 %277 if.end if.then

BASIC BLOCK if.then
%279:	getelementptr	 %267 XXX XXX
%280:	load	 %279
%281:	call	 XXX %280 printf
%282:	br	 if.end

BASIC BLOCK if.end
%283:	phi	 %280 %268
%284:	sext	 %274
%285:	call	 %284 putchar
%286:	getelementptr	 %267 XXX XXX
%287:	load	 %286
%288:	br	 while.cond

BASIC BLOCK while.end
%289:	call	 XXX printf
%290:	ret	

FUNCTION groupdef

BASIC BLOCK entry
%291:	alloca	 XXX
%292:	alloca	 XXX
%293:	alloca	 XXX
%294:	alloca	 XXX
%295:	alloca	 XXX
%296:	alloca	 XXX
%297:	alloca	 XXX
%298:	store	 XXX %293
%299:	store	 XXX %294
%300:	store	 XXX %295
%301:	store	 XXX %296
%302:	store	 XXX %297
%303:	store	 p1 %291
%304:	call	 XXX %291 GetKeyword
%305:	icmp	 %304 XXX
%306:	br	 %305 if.end if.then

BASIC BLOCK if.then
%307:	store	 XXX group_ptr
%308:	br	 return

BASIC BLOCK if.end
%309:	getelementptr	 %292 XXX XXX
%310:	call	 %309 %291 GetUName
%311:	icmp	 %310 XXX
%312:	br	 %311 if.end4 if.then3

BASIC BLOCK if.then3
%313:	load	 %291
%314:	call	 %313 XXX XXX parserro
%315:	br	 return

BASIC BLOCK if.end4
%316:	getelementptr	 %292 XXX XXX
%317:	call	 %316 InUNames
%318:	icmp	 %317 XXX
%319:	br	 %318 if.end9 if.then7

BASIC BLOCK if.then7
%320:	load	 %291
%321:	getelementptr	 %292 XXX XXX
%322:	call	 %320 XXX %321 parserro
%323:	br	 return

BASIC BLOCK if.end9
%324:	getelementptr	 %292 XXX XXX
%325:	call	 %324 InserUN
%326:	load	 %291
%327:	call	 %326 %291 %293 %294 greldef
%328:	icmp	 %327 XXX
%329:	br	 %328 if.end15 if.then14

BASIC BLOCK if.then14
%330:	br	 return

BASIC BLOCK if.end15
%331:	icmp	 %327 XXX
%332:	br	 %331 if.end21 if.then17

BASIC BLOCK if.then17
%333:	load	 %293
%334:	getelementptr	 %333 XXX XXX
%335:	store	 XXX %334
%336:	load	 %294
%337:	getelementptr	 %336 XXX XXX
%338:	store	 XXX %337
%339:	load	 %294
%340:	getelementptr	 %339 XXX XXX
%341:	getelementptr	 %340 XXX XXX
%342:	call	 %341 XXX strcpy
%343:	br	 if.end21

BASIC BLOCK if.end21
%344:	load	 %291
%345:	call	 %344 %291 %295 grgeodef
%346:	icmp	 %345 XXX
%347:	br	 %346 if.end26 if.then24

BASIC BLOCK if.then24
%348:	load	 %291
%349:	getelementptr	 %292 XXX XXX
%350:	call	 %348 XXX %349 parserro
%351:	br	 return

BASIC BLOCK if.end26
%352:	load	 %291
%353:	call	 %352 %291 %296 %297 grexcdef
%354:	icmp	 %353 XXX
%355:	br	 %354 if.end30 if.then29

BASIC BLOCK if.then29
%356:	load	 %291
%357:	call	 %356 XXX XXX parserro
%358:	br	 return

BASIC BLOCK if.end30
%359:	call	 XXX %291 GetKeyword
%360:	icmp	 %359 XXX
%361:	br	 %360 if.end34 if.then33

BASIC BLOCK if.then33
%362:	load	 %291
%363:	call	 %362 XXX XXX parserro
%364:	br	 return

BASIC BLOCK if.end34
%365:	call	 XXX malloc
%366:	bitcast	 %365
%367:	store	 %366 group_ptr
%368:	load	 group_ptr
%369:	icmp	 %368 XXX
%370:	br	 %369 if.end38 if.then37

BASIC BLOCK if.then37
%371:	load	 %291
%372:	call	 %371 XXX XXX parserro
%373:	call	 XXX interror
%374:	br	 if.end38

BASIC BLOCK if.end38
%375:	load	 group_ptr
%376:	getelementptr	 %375 XXX XXX
%377:	getelementptr	 %376 XXX XXX
%378:	getelementptr	 %292 XXX XXX
%379:	call	 %377 %378 strcpy
%380:	load	 group_ptr
%381:	getelementptr	 %380 XXX XXX
%382:	store	 XXX %381
%383:	load	 group_ptr
%384:	getelementptr	 %383 XXX XXX
%385:	store	 XXX %384
%386:	load	 group_ptr
%387:	getelementptr	 %386 XXX XXX
%388:	store	 XXX %387
%389:	load	 group_ptr
%390:	getelementptr	 %389 XXX XXX
%391:	store	 XXX %390
%392:	load	 %293
%393:	load	 group_ptr
%394:	getelementptr	 %393 XXX XXX
%395:	store	 %392 %394
%396:	load	 %294
%397:	load	 group_ptr
%398:	getelementptr	 %397 XXX XXX
%399:	store	 %396 %398
%400:	load	 %296
%401:	load	 group_ptr
%402:	getelementptr	 %401 XXX XXX
%403:	store	 %400 %402
%404:	load	 %297
%405:	load	 group_ptr
%406:	getelementptr	 %405 XXX XXX
%407:	store	 %404 %406
%408:	load	 %295
%409:	load	 group_ptr
%410:	getelementptr	 %409 XXX XXX
%411:	store	 %408 %410
%412:	load	 group_ptr
%413:	getelementptr	 %412 XXX XXX
%414:	store	 XXX %413
%415:	load	 group_ptr
%416:	getelementptr	 %415 XXX XXX
%417:	store	 XXX %416
%418:	load	 group_ptr
%419:	getelementptr	 %418 XXX XXX
%420:	store	 XXX %419
%421:	load	 group_ptr
%422:	getelementptr	 %421 XXX XXX
%423:	store	 XXX %422
%424:	load	 group_ptr
%425:	getelementptr	 %424 XXX XXX
%426:	getelementptr	 %425 XXX XXX
%427:	store	 XXX %426
%428:	load	 %291
%429:	store	 %428 pp2
%430:	br	 return

BASIC BLOCK return
%431:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX
%432:	ret	 %431

FUNCTION waitcont

BASIC BLOCK entry
%433:	ret	

FUNCTION simgroup

BASIC BLOCK entry
%434:	call	 group_ptr fixsgrel
%435:	call	 group_ptr addscan
%436:	icmp	 %435 XXX
%437:	br	 %436 if.else if.then

BASIC BLOCK if.then
%438:	getelementptr	 group_ptr XXX XXX
%439:	getelementptr	 %438 XXX XXX
%440:	call	 XXX XXX %439 printf
%441:	br	 return

BASIC BLOCK if.else
%442:	br	 return

BASIC BLOCK return
%443:	phi	 XXX XXX
%444:	ret	 %443

FUNCTION simamp

BASIC BLOCK entry
%445:	getelementptr	 group_ptr XXX XXX
%446:	load	 %445
%447:	call	 %446 fixgramp
%448:	getelementptr	 group_ptr XXX XXX
%449:	load	 %448
%450:	getelementptr	 %449 XXX XXX
%451:	load	 %450
%452:	switch	 %451 sw.epilog XXX sw.bb XXX sw.bb4

BASIC BLOCK sw.bb
%453:	getelementptr	 group_ptr XXX XXX
%454:	load	 %453
%455:	getelementptr	 group_ptr XXX XXX
%456:	load	 %455
%457:	getelementptr	 group_ptr XXX XXX
%458:	load	 %457
%459:	getelementptr	 %458 XXX XXX
%460:	load	 %459
%461:	call	 %454 %456 %460 sgrampun
%462:	br	 sw.epilog

BASIC BLOCK sw.bb4
%463:	getelementptr	 group_ptr XXX XXX
%464:	load	 %463
%465:	getelementptr	 group_ptr XXX XXX
%466:	load	 %465
%467:	getelementptr	 group_ptr XXX XXX
%468:	load	 %467
%469:	getelementptr	 %468 XXX XXX
%470:	load	 %469
%471:	getelementptr	 group_ptr XXX XXX
%472:	load	 %471
%473:	call	 %464 %466 %470 %472 sgramp2n
%474:	br	 sw.epilog

BASIC BLOCK sw.epilog
%475:	phi	 XXX %473 %461
%476:	icmp	 %475 XXX
%477:	br	 %476 if.else if.then

BASIC BLOCK if.then
%478:	getelementptr	 group_ptr XXX XXX
%479:	getelementptr	 %478 XXX XXX
%480:	call	 XXX XXX %479 printf
%481:	br	 return

BASIC BLOCK if.else
%482:	br	 return

BASIC BLOCK return
%483:	phi	 XXX XXX
%484:	ret	 %483

FUNCTION simpha

BASIC BLOCK entry
%485:	getelementptr	 group_ptr XXX XXX
%486:	load	 %485
%487:	call	 %486 fixgrpha
%488:	getelementptr	 group_ptr XXX XXX
%489:	load	 %488
%490:	getelementptr	 %489 XXX XXX
%491:	load	 %490
%492:	switch	 %491 sw.epilog XXX sw.bb XXX sw.bb4 XXX sw.bb10

BASIC BLOCK sw.bb
%493:	getelementptr	 group_ptr XXX XXX
%494:	load	 %493
%495:	getelementptr	 group_ptr XXX XXX
%496:	load	 %495
%497:	getelementptr	 group_ptr XXX XXX
%498:	load	 %497
%499:	getelementptr	 %498 XXX XXX
%500:	load	 %499
%501:	call	 %494 %496 %500 sgrphaun
%502:	br	 sw.epilog

BASIC BLOCK sw.bb4
%503:	getelementptr	 group_ptr XXX XXX
%504:	load	 %503
%505:	getelementptr	 group_ptr XXX XXX
%506:	load	 %505
%507:	getelementptr	 group_ptr XXX XXX
%508:	load	 %507
%509:	getelementptr	 %508 XXX XXX
%510:	load	 %509
%511:	getelementptr	 group_ptr XXX XXX
%512:	load	 %511
%513:	call	 %504 %506 %510 %512 sgrpha2n
%514:	br	 sw.epilog

BASIC BLOCK sw.bb10
%515:	call	 group_ptr sgrphasr
%516:	br	 sw.epilog

BASIC BLOCK sw.epilog
%517:	phi	 XXX %515 %513 %501
%518:	icmp	 %517 XXX
%519:	br	 %518 if.else if.then

BASIC BLOCK if.then
%520:	getelementptr	 group_ptr XXX XXX
%521:	getelementptr	 %520 XXX XXX
%522:	call	 XXX XXX %521 printf
%523:	br	 return

BASIC BLOCK if.else
%524:	br	 return

BASIC BLOCK return
%525:	phi	 XXX XXX
%526:	ret	 %525

FUNCTION simpol

BASIC BLOCK entry
%527:	getelementptr	 group_ptr XXX XXX
%528:	load	 %527
%529:	br	 while.cond

BASIC BLOCK while.cond
%530:	phi	 %528 %554
%531:	icmp	 %530 XXX
%532:	br	 %531 while.end7 while.body

BASIC BLOCK while.body
%533:	getelementptr	 %530 XXX XXX
%534:	load	 %533
%535:	getelementptr	 group_ptr XXX XXX
%536:	load	 %535
%537:	getelementptr	 %536 XXX XXX
%538:	load	 %537
%539:	br	 while.cond1

BASIC BLOCK while.cond1
%540:	phi	 %534 %551
%541:	phi	 %538 %549
%542:	icmp	 %541 XXX
%543:	br	 %542 while.end while.body3

BASIC BLOCK while.body3
%544:	getelementptr	 %541 XXX XXX
%545:	load	 %544
%546:	getelementptr	 %540 XXX XXX
%547:	store	 %545 %546
%548:	getelementptr	 %541 XXX XXX
%549:	load	 %548
%550:	getelementptr	 %540 XXX XXX
%551:	load	 %550
%552:	br	 while.cond1

BASIC BLOCK while.end
%553:	getelementptr	 %530 XXX XXX
%554:	load	 %553
%555:	br	 while.cond

BASIC BLOCK while.end7
%556:	ret	 XXX

FUNCTION grwrite

BASIC BLOCK entry
%557:	alloca	 XXX
%558:	icmp	 group_ptr XXX
%559:	br	 %558 if.end if.then

BASIC BLOCK if.then
%560:	call	 XXX interror
%561:	call	 XXX exit
%562:	unreachable	

BASIC BLOCK if.end
%563:	getelementptr	 group_ptr XXX XXX
%564:	load	 %563
%565:	getelementptr	 %557 XXX XXX
%566:	call	 %565 filename strcpy
%567:	getelementptr	 %557 XXX XXX
%568:	call	 %567 XXX strcat
%569:	getelementptr	 %557 XXX XXX
%570:	call	 XXX %569 printf
%571:	call	 XXX printf
%572:	call	 XXX printf
%573:	call	 XXX printf
%574:	getelementptr	 group_ptr XXX XXX
%575:	load	 %574
%576:	call	 XXX %575 printf
%577:	call	 XXX printf
%578:	call	 XXX %575 printf
%579:	call	 XXX printf
%580:	getelementptr	 group_ptr XXX XXX
%581:	load	 %580
%582:	getelementptr	 %581 XXX XXX
%583:	load	 %582
%584:	call	 XXX %583 printf
%585:	call	 XXX printf
%586:	call	 XXX %583 printf
%587:	call	 XXX printf
%588:	br	 while.cond

BASIC BLOCK while.cond
%589:	phi	 XXX %593
%590:	phi	 %564 %676
%591:	icmp	 %590 XXX
%592:	br	 %591 while.end61 while.body

BASIC BLOCK while.body
%593:	add	 %589 XXX
%594:	call	 XXX %593 printf
%595:	getelementptr	 %590 XXX XXX
%596:	load	 %595
%597:	call	 XXX %596 printf
%598:	getelementptr	 %590 XXX XXX
%599:	load	 %598
%600:	call	 XXX %599 printf
%601:	getelementptr	 %590 XXX XXX
%602:	load	 %601
%603:	call	 XXX %602 printf
%604:	getelementptr	 %590 XXX XXX
%605:	load	 %604
%606:	call	 XXX %605 printf
%607:	getelementptr	 %590 XXX XXX
%608:	load	 %607
%609:	call	 XXX %608 printf
%610:	getelementptr	 %590 XXX XXX
%611:	load	 %610
%612:	call	 XXX %611 printf
%613:	call	 XXX printf
%614:	call	 XXX %593 printf
%615:	getelementptr	 %590 XXX XXX
%616:	load	 %615
%617:	call	 XXX %616 printf
%618:	getelementptr	 %590 XXX XXX
%619:	load	 %618
%620:	call	 XXX %619 printf
%621:	getelementptr	 %590 XXX XXX
%622:	load	 %621
%623:	call	 XXX %622 printf
%624:	getelementptr	 %590 XXX XXX
%625:	load	 %624
%626:	call	 XXX %625 printf
%627:	getelementptr	 %590 XXX XXX
%628:	load	 %627
%629:	call	 XXX %628 printf
%630:	getelementptr	 %590 XXX XXX
%631:	load	 %630
%632:	call	 XXX %631 printf
%633:	call	 XXX printf
%634:	getelementptr	 %590 XXX XXX
%635:	load	 %634
%636:	br	 while.cond40

BASIC BLOCK while.cond40
%637:	phi	 %635 %673
%638:	icmp	 %637 XXX
%639:	br	 %638 while.end while.body42

BASIC BLOCK while.body42
%640:	getelementptr	 %637 XXX XXX
%641:	load	 %640
%642:	call	 XXX %641 printf
%643:	getelementptr	 %637 XXX XXX
%644:	load	 %643
%645:	getelementptr	 %637 XXX XXX
%646:	load	 %645
%647:	fadd	 %644 %646
%648:	call	 XXX %647 printf
%649:	getelementptr	 %637 XXX XXX
%650:	load	 %649
%651:	call	 XXX %650 printf
%652:	getelementptr	 %637 XXX XXX
%653:	load	 %652
%654:	call	 XXX %653 printf
%655:	call	 XXX printf
%656:	getelementptr	 %637 XXX XXX
%657:	load	 %656
%658:	call	 XXX %657 printf
%659:	getelementptr	 %637 XXX XXX
%660:	load	 %659
%661:	getelementptr	 %637 XXX XXX
%662:	load	 %661
%663:	fadd	 %660 %662
%664:	call	 XXX %663 printf
%665:	getelementptr	 %637 XXX XXX
%666:	load	 %665
%667:	call	 XXX %666 printf
%668:	getelementptr	 %637 XXX XXX
%669:	load	 %668
%670:	call	 XXX %669 printf
%671:	call	 XXX printf
%672:	getelementptr	 %637 XXX XXX
%673:	load	 %672
%674:	br	 while.cond40

BASIC BLOCK while.end
%675:	getelementptr	 %590 XXX XXX
%676:	load	 %675
%677:	br	 while.cond

BASIC BLOCK while.end61
%678:	getelementptr	 %557 XXX XXX
%679:	call	 XXX %678 printf
%680:	ret	 XXX

FUNCTION adddef

BASIC BLOCK entry
%681:	alloca	 XXX
%682:	alloca	 XXX
%683:	store	 XXX %682
%684:	store	 p1 %681
%685:	call	 XXX %681 GetKeyword
%686:	icmp	 %685 XXX
%687:	br	 %686 if.end if.then

BASIC BLOCK if.then
%688:	store	 XXX addrem_ptr
%689:	br	 return

BASIC BLOCK if.end
%690:	load	 %681
%691:	call	 %690 %681 %682 nodedef
%692:	icmp	 %691 XXX
%693:	br	 %692 if.end4 if.then3

BASIC BLOCK if.then3
%694:	store	 XXX addrem_ptr
%695:	load	 %681
%696:	call	 %695 XXX XXX parserro
%697:	br	 return

BASIC BLOCK if.end4
%698:	icmp	 %691 XXX
%699:	br	 %698 if.end11 if.then6

BASIC BLOCK if.then6
%700:	call	 XXX malloc
%701:	bitcast	 %700
%702:	store	 %701 addrem_ptr
%703:	load	 addrem_ptr
%704:	icmp	 %703 XXX
%705:	br	 %704 if.end10 if.then9

BASIC BLOCK if.then9
%706:	load	 %681
%707:	call	 %706 XXX XXX parserro
%708:	call	 XXX interror
%709:	br	 if.end10

BASIC BLOCK if.end10
%710:	load	 addrem_ptr
%711:	getelementptr	 %710 XXX XXX
%712:	store	 XXX %711
%713:	load	 addrem_ptr
%714:	getelementptr	 %713 XXX XXX
%715:	store	 XXX %714
%716:	load	 %682
%717:	load	 addrem_ptr
%718:	getelementptr	 %717 XXX XXX
%719:	store	 %716 %718
%720:	load	 addrem_ptr
%721:	getelementptr	 %720 XXX XXX
%722:	store	 XXX %721
%723:	load	 %681
%724:	store	 %723 pp2
%725:	br	 return

BASIC BLOCK if.end11
%726:	load	 %681
%727:	call	 %726 %681 %682 blockdef
%728:	icmp	 %727 XXX
%729:	br	 %728 if.end15 if.then14

BASIC BLOCK if.then14
%730:	store	 XXX addrem_ptr
%731:	load	 %681
%732:	call	 %731 XXX XXX parserro
%733:	br	 return

BASIC BLOCK if.end15
%734:	icmp	 %727 XXX
%735:	br	 %734 if.end26 if.then17

BASIC BLOCK if.then17
%736:	call	 XXX malloc
%737:	bitcast	 %736
%738:	store	 %737 addrem_ptr
%739:	load	 addrem_ptr
%740:	icmp	 %739 XXX
%741:	br	 %740 if.end21 if.then20

BASIC BLOCK if.then20
%742:	load	 %681
%743:	call	 %742 XXX XXX parserro
%744:	call	 XXX interror
%745:	br	 if.end21

BASIC BLOCK if.end21
%746:	load	 addrem_ptr
%747:	getelementptr	 %746 XXX XXX
%748:	store	 XXX %747
%749:	load	 addrem_ptr
%750:	getelementptr	 %749 XXX XXX
%751:	store	 XXX %750
%752:	load	 %682
%753:	load	 addrem_ptr
%754:	getelementptr	 %753 XXX XXX
%755:	store	 %752 %754
%756:	load	 addrem_ptr
%757:	getelementptr	 %756 XXX XXX
%758:	store	 XXX %757
%759:	load	 %681
%760:	store	 %759 pp2
%761:	br	 return

BASIC BLOCK if.end26
%762:	load	 %681
%763:	call	 %762 %681 %682 polydef
%764:	icmp	 %763 XXX
%765:	br	 %764 if.end30 if.then29

BASIC BLOCK if.then29
%766:	store	 XXX addrem_ptr
%767:	load	 %681
%768:	call	 %767 XXX XXX parserro
%769:	br	 return

BASIC BLOCK if.end30
%770:	icmp	 %763 XXX
%771:	br	 %770 if.end41 if.then32

BASIC BLOCK if.then32
%772:	call	 XXX malloc
%773:	bitcast	 %772
%774:	store	 %773 addrem_ptr
%775:	load	 addrem_ptr
%776:	icmp	 %775 XXX
%777:	br	 %776 if.end36 if.then35

BASIC BLOCK if.then35
%778:	load	 %681
%779:	call	 %778 XXX XXX parserro
%780:	call	 XXX interror
%781:	br	 if.end36

BASIC BLOCK if.end36
%782:	load	 addrem_ptr
%783:	getelementptr	 %782 XXX XXX
%784:	store	 XXX %783
%785:	load	 addrem_ptr
%786:	getelementptr	 %785 XXX XXX
%787:	store	 XXX %786
%788:	load	 %682
%789:	load	 addrem_ptr
%790:	getelementptr	 %789 XXX XXX
%791:	store	 %788 %790
%792:	load	 addrem_ptr
%793:	getelementptr	 %792 XXX XXX
%794:	store	 XXX %793
%795:	load	 %681
%796:	store	 %795 pp2
%797:	br	 return

BASIC BLOCK if.end41
%798:	load	 %681
%799:	call	 %798 %681 %682 hexdef
%800:	icmp	 %799 XXX
%801:	br	 %800 if.end45 if.then44

BASIC BLOCK if.then44
%802:	store	 XXX addrem_ptr
%803:	load	 %681
%804:	call	 %803 XXX XXX parserro
%805:	br	 return

BASIC BLOCK if.end45
%806:	icmp	 %799 XXX
%807:	br	 %806 if.end56 if.then47

BASIC BLOCK if.then47
%808:	call	 XXX malloc
%809:	bitcast	 %808
%810:	store	 %809 addrem_ptr
%811:	load	 addrem_ptr
%812:	icmp	 %811 XXX
%813:	br	 %812 if.end51 if.then50

BASIC BLOCK if.then50
%814:	load	 %681
%815:	call	 %814 XXX XXX parserro
%816:	call	 XXX interror
%817:	br	 if.end51

BASIC BLOCK if.end51
%818:	load	 addrem_ptr
%819:	getelementptr	 %818 XXX XXX
%820:	store	 XXX %819
%821:	load	 addrem_ptr
%822:	getelementptr	 %821 XXX XXX
%823:	store	 XXX %822
%824:	load	 %682
%825:	load	 addrem_ptr
%826:	getelementptr	 %825 XXX XXX
%827:	store	 %824 %826
%828:	load	 addrem_ptr
%829:	getelementptr	 %828 XXX XXX
%830:	store	 XXX %829
%831:	load	 %681
%832:	store	 %831 pp2
%833:	br	 return

BASIC BLOCK if.end56
%834:	store	 XXX addrem_ptr
%835:	load	 %681
%836:	call	 %835 XXX XXX parserro
%837:	br	 return

BASIC BLOCK return
%838:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
%839:	ret	 %838

FUNCTION GetKeyword

BASIC BLOCK entry
%840:	alloca	 XXX
%841:	alloca	 XXX
%842:	load	 tp
%843:	store	 %842 %840
%844:	call	 %840 TapeGet
%845:	br	 while.cond

BASIC BLOCK while.cond
%846:	phi	 %844 %872
%847:	phi	 XXX %871
%848:	sext	 %846
%849:	sext	 %848
%850:	call	 __ctype_b_loc
%851:	load	 %850
%852:	getelementptr	 %851 %849
%853:	load	 %852
%854:	zext	 %853
%855:	and	 %854 XXX
%856:	icmp	 %855 XXX
%857:	br	 %856 lor.lhs.false land.lhs.true

BASIC BLOCK lor.lhs.false
%858:	sext	 %846
%859:	icmp	 %858 XXX
%860:	br	 %859 land.end land.lhs.true

BASIC BLOCK land.lhs.true
%861:	icmp	 %847 XXX
%862:	br	 %861 land.end land.rhs

BASIC BLOCK land.rhs
%863:	load	 %840
%864:	icmp	 %863 XXX
%865:	br	 land.end

BASIC BLOCK land.end
%866:	phi	 XXX XXX %864
%867:	br	 %866 while.end while.body

BASIC BLOCK while.body
%868:	sext	 %847
%869:	getelementptr	 %841 XXX %868
%870:	store	 %846 %869
%871:	add	 %847 XXX
%872:	call	 %840 TapeGet
%873:	br	 while.cond

BASIC BLOCK while.end
%874:	sext	 %847
%875:	getelementptr	 %841 XXX %874
%876:	store	 XXX %875
%877:	getelementptr	 %841 XXX XXX
%878:	call	 kw %877 strcmp
%879:	icmp	 %878 XXX
%880:	br	 %879 if.else if.then

BASIC BLOCK if.then
%881:	load	 %840
%882:	store	 %881 tp
%883:	br	 return

BASIC BLOCK if.else
%884:	br	 return

BASIC BLOCK return
%885:	phi	 XXX XXX
%886:	ret	 %885

FUNCTION nodedef

BASIC BLOCK entry
%887:	alloca	 XXX
%888:	alloca	 XXX
%889:	alloca	 XXX
%890:	alloca	 XXX
%891:	alloca	 XXX
%892:	alloca	 XXX
%893:	alloca	 XXX
%894:	store	 p1 %887
%895:	store	 XXX node_ptr
%896:	call	 XXX %887 GetKeyword
%897:	icmp	 %896 XXX
%898:	br	 %897 if.end if.then

BASIC BLOCK if.then
%899:	br	 return

BASIC BLOCK if.end
%900:	load	 %887
%901:	call	 %900 %887 %888 %889 nodecoor
%902:	icmp	 %901 XXX
%903:	br	 %902 if.end4 if.then3

BASIC BLOCK if.then3
%904:	load	 %887
%905:	call	 %904 XXX XXX parserro
%906:	br	 return

BASIC BLOCK if.end4
%907:	icmp	 %901 XXX
%908:	br	 %907 if.end7 if.then6

BASIC BLOCK if.then6
%909:	load	 %887
%910:	call	 %909 XXX XXX parserro
%911:	br	 return

BASIC BLOCK if.end7
%912:	icmp	 %901 XXX
%913:	br	 %912 if.end11 if.then9

BASIC BLOCK if.then9
%914:	load	 %887
%915:	call	 %914 %887 %890 %891 %892 %893 nodorien
%916:	br	 if.end11

BASIC BLOCK if.end11
%917:	phi	 %915 %901
%918:	icmp	 %917 XXX
%919:	br	 %918 if.end15 if.then13

BASIC BLOCK if.then13
%920:	call	 XXX XXX printf
%921:	br	 return

BASIC BLOCK if.end15
%922:	icmp	 %917 XXX
%923:	br	 %922 if.end18 if.then17

BASIC BLOCK if.then17
%924:	br	 if.end18

BASIC BLOCK if.end18
%925:	phi	 XXX XXX
%926:	call	 XXX malloc
%927:	bitcast	 %926
%928:	store	 %927 node_ptr
%929:	load	 node_ptr
%930:	icmp	 %929 XXX
%931:	br	 %930 if.end22 if.then21

BASIC BLOCK if.then21
%932:	load	 %887
%933:	call	 %932 XXX XXX parserro
%934:	call	 XXX interror
%935:	br	 if.end22

BASIC BLOCK if.end22
%936:	load	 node_ptr
%937:	getelementptr	 %936 XXX XXX
%938:	store	 XXX %937
%939:	load	 %888
%940:	load	 node_ptr
%941:	getelementptr	 %940 XXX XXX
%942:	store	 %939 %941
%943:	load	 %889
%944:	load	 node_ptr
%945:	getelementptr	 %944 XXX XXX
%946:	store	 %943 %945
%947:	load	 %890
%948:	load	 node_ptr
%949:	getelementptr	 %948 XXX XXX
%950:	store	 %947 %949
%951:	load	 %891
%952:	load	 node_ptr
%953:	getelementptr	 %952 XXX XXX
%954:	store	 %951 %953
%955:	load	 %892
%956:	load	 node_ptr
%957:	getelementptr	 %956 XXX XXX
%958:	store	 %955 %957
%959:	load	 %893
%960:	load	 node_ptr
%961:	getelementptr	 %960 XXX XXX
%962:	store	 %959 %961
%963:	load	 node_ptr
%964:	getelementptr	 %963 XXX XXX
%965:	store	 %925 %964
%966:	load	 %887
%967:	store	 %966 pp2
%968:	br	 return

BASIC BLOCK return
%969:	phi	 XXX XXX XXX XXX XXX
%970:	ret	 %969

FUNCTION parserro

BASIC BLOCK entry
%971:	load	 parserro.errline_printed
%972:	icmp	 %971 XXX
%973:	br	 %972 if.then if.end

BASIC BLOCK if.then
%974:	store	 XXX parserro.errline_printed
%975:	getelementptr	 err_ptr XXX XXX
%976:	load	 %975
%977:	call	 XXX %976 printf
%978:	br	 while.cond

BASIC BLOCK while.cond
%979:	phi	 err_ptr %997
%980:	phi	 XXX %995
%981:	getelementptr	 %979 XXX XXX
%982:	load	 %981
%983:	icmp	 %982 XXX
%984:	br	 %983 land.end land.rhs

BASIC BLOCK land.rhs
%985:	getelementptr	 %979 XXX XXX
%986:	load	 %985
%987:	getelementptr	 %986 XXX XXX
%988:	load	 %987
%989:	getelementptr	 err_ptr XXX XXX
%990:	load	 %989
%991:	icmp	 %988 %990
%992:	br	 land.end

BASIC BLOCK land.end
%993:	phi	 XXX %991
%994:	br	 %993 while.end while.body

BASIC BLOCK while.body
%995:	add	 %980 XXX
%996:	getelementptr	 %979 XXX XXX
%997:	load	 %996
%998:	br	 while.cond

BASIC BLOCK while.end
%999:	getelementptr	 %979 XXX XXX
%1000:	load	 %999
%1001:	call	 XXX %1000 printf
%1002:	br	 while.cond8

BASIC BLOCK while.cond8
%1003:	phi	 %979 %1019
%1004:	icmp	 %1003 XXX
%1005:	br	 %1004 land.end14 land.rhs10

BASIC BLOCK land.rhs10
%1006:	getelementptr	 %1003 XXX XXX
%1007:	load	 %1006
%1008:	getelementptr	 err_ptr XXX XXX
%1009:	load	 %1008
%1010:	icmp	 %1007 %1009
%1011:	br	 land.end14

BASIC BLOCK land.end14
%1012:	phi	 XXX %1010
%1013:	br	 %1012 while.end17 while.body15

BASIC BLOCK while.body15
%1014:	getelementptr	 %1003 XXX XXX
%1015:	load	 %1014
%1016:	sext	 %1015
%1017:	call	 XXX %1016 printf
%1018:	getelementptr	 %1003 XXX XXX
%1019:	load	 %1018
%1020:	br	 while.cond8

BASIC BLOCK while.end17
%1021:	call	 XXX printf
%1022:	br	 for.cond

BASIC BLOCK for.cond
%1023:	phi	 XXX %1028
%1024:	icmp	 %1023 %980
%1025:	br	 %1024 for.end for.body

BASIC BLOCK for.body
%1026:	call	 XXX printf
%1027:	br	 for.inc

BASIC BLOCK for.inc
%1028:	add	 %1023 XXX
%1029:	br	 for.cond

BASIC BLOCK for.end
%1030:	call	 XXX printf
%1031:	br	 if.end

BASIC BLOCK if.end
%1032:	icmp	 s XXX
%1033:	br	 %1032 if.else if.then26

BASIC BLOCK if.then26
%1034:	sext	 errcode
%1035:	getelementptr	 ErrorMessages XXX %1034
%1036:	getelementptr	 %1035 XXX XXX
%1037:	call	 XXX %1036 printf
%1038:	br	 if.end32

BASIC BLOCK if.else
%1039:	sext	 errcode
%1040:	getelementptr	 ErrorMessages XXX %1039
%1041:	getelementptr	 %1040 XXX XXX
%1042:	call	 XXX %1041 s printf
%1043:	br	 if.end32

BASIC BLOCK if.end32
%1044:	ret	

FUNCTION interror

BASIC BLOCK entry
%1045:	call	 XXX subname printf
%1046:	call	 XXX printf
%1047:	call	 XXX exit
%1048:	unreachable	

BASIC BLOCK return
%1049:	ret	

FUNCTION blockdef

BASIC BLOCK entry
%1050:	alloca	 XXX
%1051:	alloca	 XXX
%1052:	alloca	 XXX
%1053:	store	 p1 %1050
%1054:	store	 XXX node_ptr
%1055:	call	 XXX %1050 GetKeyword
%1056:	icmp	 %1055 XXX
%1057:	br	 %1056 if.end if.then

BASIC BLOCK if.then
%1058:	br	 return

BASIC BLOCK if.end
%1059:	load	 %1050
%1060:	call	 %1059 %1050 %1051 %1052 nodecoor
%1061:	icmp	 %1060 XXX
%1062:	br	 %1061 if.end4 if.then3

BASIC BLOCK if.then3
%1063:	load	 %1050
%1064:	call	 %1063 XXX XXX parserro
%1065:	br	 return

BASIC BLOCK if.end4
%1066:	icmp	 %1060 XXX
%1067:	br	 %1066 if.end7 if.then6

BASIC BLOCK if.then6
%1068:	load	 %1050
%1069:	call	 %1068 XXX XXX parserro
%1070:	br	 return

BASIC BLOCK if.end7
%1071:	call	 XXX malloc
%1072:	bitcast	 %1071
%1073:	icmp	 %1072 XXX
%1074:	br	 %1073 if.end11 if.then10

BASIC BLOCK if.then10
%1075:	load	 %1050
%1076:	call	 %1075 XXX XXX parserro
%1077:	call	 XXX interror
%1078:	call	 XXX exit
%1079:	unreachable	

BASIC BLOCK if.end11
%1080:	load	 %1051
%1081:	getelementptr	 %1072 XXX XXX
%1082:	store	 %1080 %1081
%1083:	load	 %1052
%1084:	getelementptr	 %1072 XXX XXX
%1085:	store	 %1083 %1084
%1086:	getelementptr	 %1072 XXX XXX
%1087:	store	 XXX %1086
%1088:	getelementptr	 %1072 XXX XXX
%1089:	store	 XXX %1088
%1090:	getelementptr	 %1072 XXX XXX
%1091:	store	 XXX %1090
%1092:	getelementptr	 %1072 XXX XXX
%1093:	store	 XXX %1092
%1094:	getelementptr	 %1072 XXX XXX
%1095:	store	 XXX %1094
%1096:	load	 %1050
%1097:	call	 %1096 %1050 %1051 %1052 nodecoor
%1098:	icmp	 %1097 XXX
%1099:	br	 %1098 if.end15 if.then14

BASIC BLOCK if.then14
%1100:	load	 %1050
%1101:	call	 %1100 XXX XXX parserro
%1102:	br	 return

BASIC BLOCK if.end15
%1103:	icmp	 %1097 XXX
%1104:	br	 %1103 if.end18 if.then17

BASIC BLOCK if.then17
%1105:	load	 %1050
%1106:	call	 %1105 XXX XXX parserro
%1107:	br	 return

BASIC BLOCK if.end18
%1108:	call	 XXX malloc
%1109:	bitcast	 %1108
%1110:	icmp	 %1109 XXX
%1111:	br	 %1110 if.end22 if.then21

BASIC BLOCK if.then21
%1112:	load	 %1050
%1113:	call	 %1112 XXX XXX parserro
%1114:	call	 XXX interror
%1115:	call	 XXX exit
%1116:	unreachable	

BASIC BLOCK if.end22
%1117:	load	 %1051
%1118:	getelementptr	 %1109 XXX XXX
%1119:	store	 %1117 %1118
%1120:	load	 %1052
%1121:	getelementptr	 %1109 XXX XXX
%1122:	store	 %1120 %1121
%1123:	getelementptr	 %1109 XXX XXX
%1124:	store	 XXX %1123
%1125:	getelementptr	 %1109 XXX XXX
%1126:	store	 XXX %1125
%1127:	getelementptr	 %1109 XXX XXX
%1128:	store	 XXX %1127
%1129:	getelementptr	 %1109 XXX XXX
%1130:	store	 XXX %1129
%1131:	getelementptr	 %1109 XXX XXX
%1132:	store	 XXX %1131
%1133:	getelementptr	 %1072 XXX XXX
%1134:	store	 %1109 %1133
%1135:	store	 %1072 node_ptr
%1136:	load	 %1050
%1137:	store	 %1136 pp2
%1138:	br	 return

BASIC BLOCK return
%1139:	phi	 XXX XXX XXX XXX XXX XXX
%1140:	ret	 %1139

FUNCTION polydef

BASIC BLOCK entry
%1141:	alloca	 XXX
%1142:	alloca	 XXX
%1143:	alloca	 XXX
%1144:	store	 p1 %1141
%1145:	store	 XXX node_ptr
%1146:	call	 XXX %1141 GetKeyword
%1147:	icmp	 %1146 XXX
%1148:	br	 %1147 if.end if.then

BASIC BLOCK if.then
%1149:	br	 return

BASIC BLOCK if.end
%1150:	br	 while.body

BASIC BLOCK while.body
%1151:	phi	 XXX %1193
%1152:	phi	 XXX %1194
%1153:	phi	 XXX %1195
%1154:	load	 %1141
%1155:	call	 %1154 %1141 %1142 %1143 nodecoor
%1156:	icmp	 %1155 XXX
%1157:	br	 %1156 if.end13 if.then3

BASIC BLOCK if.then3
%1158:	add	 %1151 XXX
%1159:	call	 XXX malloc
%1160:	bitcast	 %1159
%1161:	icmp	 %1160 XXX
%1162:	br	 %1161 if.end7 if.then6

BASIC BLOCK if.then6
%1163:	load	 %1141
%1164:	call	 %1163 XXX XXX parserro
%1165:	call	 XXX interror
%1166:	br	 if.end7

BASIC BLOCK if.end7
%1167:	load	 %1142
%1168:	getelementptr	 %1160 XXX XXX
%1169:	store	 %1167 %1168
%1170:	load	 %1143
%1171:	getelementptr	 %1160 XXX XXX
%1172:	store	 %1170 %1171
%1173:	getelementptr	 %1160 XXX XXX
%1174:	store	 XXX %1173
%1175:	getelementptr	 %1160 XXX XXX
%1176:	store	 XXX %1175
%1177:	getelementptr	 %1160 XXX XXX
%1178:	store	 XXX %1177
%1179:	getelementptr	 %1160 XXX XXX
%1180:	store	 XXX %1179
%1181:	icmp	 %1152 XXX
%1182:	br	 %1181 if.else if.then9

BASIC BLOCK if.then9
%1183:	getelementptr	 %1160 XXX XXX
%1184:	store	 XXX %1183
%1185:	br	 if.end12

BASIC BLOCK if.else
%1186:	getelementptr	 %1153 XXX XXX
%1187:	store	 %1160 %1186
%1188:	getelementptr	 %1160 XXX XXX
%1189:	store	 XXX %1188
%1190:	br	 if.end12

BASIC BLOCK if.end12
%1191:	phi	 %1160 %1152
%1192:	br	 if.end13

BASIC BLOCK if.end13
%1193:	phi	 %1158 %1151
%1194:	phi	 %1191 %1152
%1195:	phi	 %1160 %1153
%1196:	icmp	 %1155 XXX
%1197:	br	 %1196 if.end16 if.then15

BASIC BLOCK if.then15
%1198:	br	 while.end

BASIC BLOCK if.end16
%1199:	br	 while.body

BASIC BLOCK while.end
%1200:	icmp	 %1193 XXX
%1201:	br	 %1200 if.end19 if.then18

BASIC BLOCK if.then18
%1202:	store	 XXX node_ptr
%1203:	load	 %1141
%1204:	call	 %1203 XXX XXX parserro
%1205:	br	 return

BASIC BLOCK if.end19
%1206:	store	 %1194 node_ptr
%1207:	load	 %1141
%1208:	store	 %1207 pp2
%1209:	br	 return

BASIC BLOCK return
%1210:	phi	 XXX XXX XXX
%1211:	ret	 %1210

FUNCTION hexdef

BASIC BLOCK entry
%1212:	alloca	 XXX
%1213:	alloca	 XXX
%1214:	alloca	 XXX
%1215:	store	 p1 %1212
%1216:	store	 XXX node_ptr
%1217:	call	 XXX %1212 GetKeyword
%1218:	icmp	 %1217 XXX
%1219:	br	 %1218 if.end if.then

BASIC BLOCK if.then
%1220:	br	 return

BASIC BLOCK if.end
%1221:	load	 %1212
%1222:	call	 %1221 %1212 %1213 %1214 nodecoor
%1223:	icmp	 %1222 XXX
%1224:	br	 %1223 if.end4 if.then3

BASIC BLOCK if.then3
%1225:	load	 %1212
%1226:	call	 %1225 XXX XXX parserro
%1227:	br	 return

BASIC BLOCK if.end4
%1228:	icmp	 %1222 XXX
%1229:	br	 %1228 if.end7 if.then6

BASIC BLOCK if.then6
%1230:	load	 %1212
%1231:	call	 %1230 XXX XXX parserro
%1232:	br	 return

BASIC BLOCK if.end7
%1233:	call	 XXX malloc
%1234:	bitcast	 %1233
%1235:	store	 %1234 node_ptr
%1236:	load	 node_ptr
%1237:	icmp	 %1236 XXX
%1238:	br	 %1237 if.end11 if.then10

BASIC BLOCK if.then10
%1239:	load	 %1212
%1240:	call	 %1239 XXX XXX parserro
%1241:	call	 XXX interror
%1242:	br	 if.end11

BASIC BLOCK if.end11
%1243:	load	 node_ptr
%1244:	getelementptr	 %1243 XXX XXX
%1245:	store	 XXX %1244
%1246:	load	 %1213
%1247:	load	 node_ptr
%1248:	getelementptr	 %1247 XXX XXX
%1249:	store	 %1246 %1248
%1250:	load	 %1214
%1251:	load	 node_ptr
%1252:	getelementptr	 %1251 XXX XXX
%1253:	store	 %1250 %1252
%1254:	load	 node_ptr
%1255:	getelementptr	 %1254 XXX XXX
%1256:	store	 XXX %1255
%1257:	load	 node_ptr
%1258:	getelementptr	 %1257 XXX XXX
%1259:	store	 XXX %1258
%1260:	load	 node_ptr
%1261:	getelementptr	 %1260 XXX XXX
%1262:	store	 XXX %1261
%1263:	load	 node_ptr
%1264:	getelementptr	 %1263 XXX XXX
%1265:	store	 XXX %1264
%1266:	load	 %1212
%1267:	store	 %1266 pp2
%1268:	br	 return

BASIC BLOCK return
%1269:	phi	 XXX XXX XXX XXX
%1270:	ret	 %1269

FUNCTION addscan

BASIC BLOCK entry
%1271:	alloca	 XXX
%1272:	alloca	 XXX
%1273:	alloca	 XXX
%1274:	alloca	 XXX
%1275:	alloca	 XXX
%1276:	alloca	 XXX
%1277:	alloca	 XXX
%1278:	store	 XXX %1271
%1279:	store	 XXX %1272
%1280:	store	 XXX %1273
%1281:	store	 XXX %1274
%1282:	store	 XXX %1275
%1283:	getelementptr	 group_ptr XXX XXX
%1284:	load	 %1283
%1285:	getelementptr	 %1284 XXX XXX
%1286:	load	 %1285
%1287:	getelementptr	 group_ptr XXX XXX
%1288:	load	 %1287
%1289:	getelementptr	 %1288 XXX XXX
%1290:	load	 %1289
%1291:	getelementptr	 group_ptr XXX XXX
%1292:	load	 %1291
%1293:	getelementptr	 %1292 XXX XXX
%1294:	load	 %1293
%1295:	getelementptr	 group_ptr XXX XXX
%1296:	load	 %1295
%1297:	getelementptr	 %1296 XXX XXX
%1298:	load	 %1297
%1299:	getelementptr	 group_ptr XXX XXX
%1300:	load	 %1299
%1301:	getelementptr	 %1300 XXX XXX
%1302:	load	 %1301
%1303:	getelementptr	 group_ptr XXX XXX
%1304:	load	 %1303
%1305:	getelementptr	 %1304 XXX XXX
%1306:	load	 %1305
%1307:	getelementptr	 group_ptr XXX XXX
%1308:	load	 %1307
%1309:	getelementptr	 %1308 XXX XXX
%1310:	load	 %1309
%1311:	icmp	 %1310 XXX
%1312:	br	 %1311 if.else if.then

BASIC BLOCK if.then
%1313:	br	 if.end

BASIC BLOCK if.else
%1314:	br	 if.end

BASIC BLOCK if.end
%1315:	phi	 XXX XXX
%1316:	getelementptr	 group_ptr XXX XXX
%1317:	load	 %1316
%1318:	br	 while.cond

BASIC BLOCK while.cond
%1319:	phi	 XXX %1319 %1389
%1320:	phi	 XXX %1320 %1388
%1321:	phi	 XXX %1321 %1379
%1322:	phi	 %1317 %1331 %1393
%1323:	phi	 XXX XXX %1377
%1324:	icmp	 %1322 XXX
%1325:	br	 %1324 while.end while.body

BASIC BLOCK while.body
%1326:	getelementptr	 %1322 XXX XXX
%1327:	load	 %1326
%1328:	icmp	 %1327 XXX
%1329:	br	 %1328 if.end9 if.then8

BASIC BLOCK if.then8
%1330:	getelementptr	 %1322 XXX XXX
%1331:	load	 %1330
%1332:	br	 while.cond

BASIC BLOCK if.end9
%1333:	getelementptr	 %1322 XXX XXX
%1334:	load	 %1333
%1335:	switch	 %1334 sw.default XXX sw.bb XXX sw.bb20 XXX sw.bb27 XXX sw.bb29

BASIC BLOCK sw.bb
%1336:	call	 %1322 %1271 %1272 %1286 %1290 %1294 %1273 %1315 %1302 %1306 mksnode
%1337:	icmp	 %1323 XXX
%1338:	br	 %1337 if.else18 if.then11

BASIC BLOCK if.then11
%1339:	getelementptr	 group_ptr XXX XXX
%1340:	load	 %1339
%1341:	getelementptr	 %1340 XXX XXX
%1342:	load	 %1341
%1343:	icmp	 %1342 XXX
%1344:	br	 %1343 if.else16 if.then15

BASIC BLOCK if.then15
%1345:	br	 if.end17

BASIC BLOCK if.else16
%1346:	br	 if.end17

BASIC BLOCK if.end17
%1347:	phi	 XXX XXX
%1348:	br	 if.end19

BASIC BLOCK if.else18
%1349:	br	 if.end19

BASIC BLOCK if.end19
%1350:	phi	 %1347 XXX
%1351:	br	 sw.epilog

BASIC BLOCK sw.bb20
%1352:	call	 %1322 %1271 %1272 %1286 %1290 %1294 %1273 %1315 %1302 %1306 mksblock
%1353:	icmp	 %1323 XXX
%1354:	br	 %1353 if.else25 land.lhs.true

BASIC BLOCK land.lhs.true
%1355:	fcmp	 %1294 XXX
%1356:	br	 %1355 if.else25 if.then24

BASIC BLOCK if.then24
%1357:	br	 if.end26

BASIC BLOCK if.else25
%1358:	br	 if.end26

BASIC BLOCK if.end26
%1359:	phi	 XXX XXX
%1360:	br	 sw.epilog

BASIC BLOCK sw.bb27
%1361:	call	 XXX printf
%1362:	call	 XXX exit
%1363:	unreachable	

BASIC BLOCK sw.bb29
%1364:	icmp	 %1315 XXX
%1365:	br	 %1364 if.end33 if.then31

BASIC BLOCK if.then31
%1366:	call	 XXX XXX printf
%1367:	br	 return

BASIC BLOCK if.end33
%1368:	call	 %1322 %1271 %1272 %1286 %1290 %1294 %1273 %1315 %1302 %1306 mkshex
%1369:	icmp	 %1323 XXX
%1370:	br	 %1369 if.else37 if.then36

BASIC BLOCK if.then36
%1371:	br	 if.end38

BASIC BLOCK if.else37
%1372:	br	 if.end38

BASIC BLOCK if.end38
%1373:	phi	 XXX XXX
%1374:	br	 sw.epilog

BASIC BLOCK sw.default
%1375:	call	 XXX interror
%1376:	br	 sw.epilog

BASIC BLOCK sw.epilog
%1377:	phi	 %1323 %1373 %1359 %1350
%1378:	load	 %1273
%1379:	add	 %1321 %1378
%1380:	icmp	 %1320 XXX
%1381:	br	 %1380 if.else41 if.then40

BASIC BLOCK if.then40
%1382:	load	 %1271
%1383:	br	 if.end43

BASIC BLOCK if.else41
%1384:	load	 %1271
%1385:	getelementptr	 %1319 XXX XXX
%1386:	store	 %1384 %1385
%1387:	br	 if.end43

BASIC BLOCK if.end43
%1388:	phi	 %1382 %1320
%1389:	load	 %1272
%1390:	getelementptr	 %1389 XXX XXX
%1391:	store	 XXX %1390
%1392:	getelementptr	 %1322 XXX XXX
%1393:	load	 %1392
%1394:	br	 while.cond

BASIC BLOCK while.end
%1395:	fcmp	 %1298 XXX
%1396:	br	 %1395 if.end49 if.then47

BASIC BLOCK if.then47
%1397:	call	 %1320 XXX XXX %1298 sgrrot
%1398:	br	 if.end49

BASIC BLOCK if.end49
%1399:	phi	 XXX %1323
%1400:	icmp	 %1399 XXX
%1401:	br	 %1400 if.else54 if.then51

BASIC BLOCK if.then51
%1402:	fmul	 XXX %1286
%1403:	fdiv	 %1302 XXX
%1404:	fmul	 XXX %1403
%1405:	fadd	 %1402 %1404
%1406:	store	 %1405 %1276
%1407:	load	 %1276
%1408:	store	 %1407 %1277
%1409:	br	 if.end71

BASIC BLOCK if.else54
%1410:	icmp	 %1399 XXX
%1411:	br	 %1410 if.else68 if.then56

BASIC BLOCK if.then56
%1412:	call	 %1320 %1274 %1275 extremes
%1413:	load	 %1274
%1414:	sub	 %1413 XXX
%1415:	sitofp	 %1414
%1416:	fmul	 %1415 %1286
%1417:	fdiv	 %1302 XXX
%1418:	fmul	 XXX %1417
%1419:	fadd	 %1416 %1418
%1420:	store	 %1419 %1276
%1421:	load	 %1275
%1422:	sub	 %1421 XXX
%1423:	sitofp	 %1422
%1424:	fmul	 %1423 %1290
%1425:	fdiv	 %1306 XXX
%1426:	fmul	 XXX %1425
%1427:	fadd	 %1424 %1426
%1428:	store	 %1427 %1277
%1429:	br	 if.end70

BASIC BLOCK if.else68
%1430:	call	 %1320 %1302 %1306 %1276 %1277 extsize
%1431:	br	 if.end70

BASIC BLOCK if.end70
%1432:	br	 if.end71

BASIC BLOCK if.end71
%1433:	getelementptr	 group_ptr XXX XXX
%1434:	store	 %1321 %1433
%1435:	getelementptr	 group_ptr XXX XXX
%1436:	store	 %1399 %1435
%1437:	load	 %1276
%1438:	getelementptr	 group_ptr XXX XXX
%1439:	store	 %1437 %1438
%1440:	load	 %1277
%1441:	getelementptr	 group_ptr XXX XXX
%1442:	store	 %1440 %1441
%1443:	getelementptr	 group_ptr XXX XXX
%1444:	store	 %1320 %1443
%1445:	br	 return

BASIC BLOCK return
%1446:	phi	 XXX XXX
%1447:	ret	 %1446

FUNCTION mksnode

BASIC BLOCK entry
%1448:	getelementptr	 addrem_ptr XXX XXX
%1449:	load	 %1448
%1450:	getelementptr	 %1449 XXX XXX
%1451:	load	 %1450
%1452:	getelementptr	 addrem_ptr XXX XXX
%1453:	load	 %1452
%1454:	getelementptr	 %1453 XXX XXX
%1455:	load	 %1454
%1456:	store	 XXX nodes_num_ptr
%1457:	call	 XXX malloc
%1458:	bitcast	 %1457
%1459:	icmp	 %1458 XXX
%1460:	br	 %1459 if.end if.then

BASIC BLOCK if.then
%1461:	call	 XXX XXX printf
%1462:	call	 XXX interror
%1463:	br	 if.end

BASIC BLOCK if.end
%1464:	sitofp	 %1451
%1465:	fmul	 %1464 pstep
%1466:	sitofp	 %1455
%1467:	fmul	 %1466 qstep
%1468:	call	 angle dcos
%1469:	fmul	 %1467 %1468
%1470:	fadd	 %1465 %1469
%1471:	sitofp	 %1455
%1472:	fmul	 %1471 qstep
%1473:	call	 angle dsin
%1474:	fmul	 %1472 %1473
%1475:	load	 nodes_num_ptr
%1476:	add	 %1475 XXX
%1477:	store	 %1476 nodes_num_ptr
%1478:	getelementptr	 %1458 XXX XXX
%1479:	store	 %1451 %1478
%1480:	getelementptr	 %1458 XXX XXX
%1481:	store	 %1455 %1480
%1482:	getelementptr	 %1458 XXX XXX
%1483:	store	 %1470 %1482
%1484:	getelementptr	 %1458 XXX XXX
%1485:	store	 %1474 %1484
%1486:	getelementptr	 %1458 XXX XXX
%1487:	store	 XXX %1486
%1488:	getelementptr	 %1458 XXX XXX
%1489:	store	 XXX %1488
%1490:	getelementptr	 %1458 XXX XXX
%1491:	store	 XXX %1490
%1492:	getelementptr	 %1458 XXX XXX
%1493:	store	 elem_shape %1492
%1494:	getelementptr	 %1458 XXX XXX
%1495:	store	 elem_pdim %1494
%1496:	getelementptr	 %1458 XXX XXX
%1497:	store	 elem_qdim %1496
%1498:	getelementptr	 addrem_ptr XXX XXX
%1499:	load	 %1498
%1500:	call	 %1499 fixnodor
%1501:	getelementptr	 addrem_ptr XXX XXX
%1502:	load	 %1501
%1503:	getelementptr	 %1502 XXX XXX
%1504:	load	 %1503
%1505:	getelementptr	 %1458 XXX XXX
%1506:	store	 %1504 %1505
%1507:	getelementptr	 addrem_ptr XXX XXX
%1508:	load	 %1507
%1509:	getelementptr	 %1508 XXX XXX
%1510:	load	 %1509
%1511:	getelementptr	 %1458 XXX XXX
%1512:	store	 %1510 %1511
%1513:	getelementptr	 addrem_ptr XXX XXX
%1514:	load	 %1513
%1515:	getelementptr	 %1514 XXX XXX
%1516:	load	 %1515
%1517:	getelementptr	 %1458 XXX XXX
%1518:	store	 %1516 %1517
%1519:	store	 %1458 first_node_ptr
%1520:	store	 %1458 last_node_ptr
%1521:	ret	 XXX

FUNCTION mksblock

BASIC BLOCK entry
%1522:	getelementptr	 addrem_ptr XXX XXX
%1523:	load	 %1522
%1524:	getelementptr	 %1523 XXX XXX
%1525:	load	 %1524
%1526:	getelementptr	 addrem_ptr XXX XXX
%1527:	load	 %1526
%1528:	getelementptr	 %1527 XXX XXX
%1529:	load	 %1528
%1530:	getelementptr	 addrem_ptr XXX XXX
%1531:	load	 %1530
%1532:	getelementptr	 %1531 XXX XXX
%1533:	load	 %1532
%1534:	getelementptr	 %1533 XXX XXX
%1535:	load	 %1534
%1536:	getelementptr	 addrem_ptr XXX XXX
%1537:	load	 %1536
%1538:	getelementptr	 %1537 XXX XXX
%1539:	load	 %1538
%1540:	getelementptr	 %1539 XXX XXX
%1541:	load	 %1540
%1542:	store	 XXX nodes_num_ptr
%1543:	call	 %1529 %1541 intmin
%1544:	br	 for.cond

BASIC BLOCK for.cond
%1545:	phi	 XXX %1553
%1546:	phi	 XXX %1554
%1547:	phi	 %1543 %1617
%1548:	call	 %1529 %1541 intmax
%1549:	icmp	 %1547 %1548
%1550:	br	 %1549 for.end33 for.body

BASIC BLOCK for.body
%1551:	call	 %1525 %1535 intmin
%1552:	br	 for.cond9

BASIC BLOCK for.cond9
%1553:	phi	 %1545 %1610
%1554:	phi	 %1546 %1560
%1555:	phi	 %1551 %1614
%1556:	call	 %1525 %1535 intmax
%1557:	icmp	 %1555 %1556
%1558:	br	 %1557 for.end for.body12

BASIC BLOCK for.body12
%1559:	call	 XXX malloc
%1560:	bitcast	 %1559
%1561:	icmp	 %1560 XXX
%1562:	br	 %1561 if.end if.then

BASIC BLOCK if.then
%1563:	call	 XXX XXX printf
%1564:	call	 XXX interror
%1565:	br	 if.end

BASIC BLOCK if.end
%1566:	sitofp	 %1547
%1567:	fmul	 %1566 qstep
%1568:	call	 angle dsin
%1569:	fmul	 %1567 %1568
%1570:	sitofp	 %1555
%1571:	fmul	 %1570 pstep
%1572:	sitofp	 %1547
%1573:	fmul	 %1572 qstep
%1574:	call	 angle dcos
%1575:	fmul	 %1573 %1574
%1576:	fadd	 %1571 %1575
%1577:	load	 nodes_num_ptr
%1578:	add	 %1577 XXX
%1579:	store	 %1578 nodes_num_ptr
%1580:	getelementptr	 %1560 XXX XXX
%1581:	store	 %1555 %1580
%1582:	getelementptr	 %1560 XXX XXX
%1583:	store	 %1547 %1582
%1584:	getelementptr	 %1560 XXX XXX
%1585:	store	 %1576 %1584
%1586:	getelementptr	 %1560 XXX XXX
%1587:	store	 %1569 %1586
%1588:	getelementptr	 %1560 XXX XXX
%1589:	store	 XXX %1588
%1590:	getelementptr	 %1560 XXX XXX
%1591:	store	 XXX %1590
%1592:	getelementptr	 %1560 XXX XXX
%1593:	store	 elem_shape %1592
%1594:	getelementptr	 %1560 XXX XXX
%1595:	store	 elem_pdim %1594
%1596:	getelementptr	 %1560 XXX XXX
%1597:	store	 elem_qdim %1596
%1598:	getelementptr	 %1560 XXX XXX
%1599:	store	 XXX %1598
%1600:	getelementptr	 %1560 XXX XXX
%1601:	store	 XXX %1600
%1602:	getelementptr	 %1560 XXX XXX
%1603:	store	 XXX %1602
%1604:	icmp	 %1553 XXX
%1605:	br	 %1604 if.else if.then27

BASIC BLOCK if.then27
%1606:	br	 if.end29

BASIC BLOCK if.else
%1607:	getelementptr	 %1554 XXX XXX
%1608:	store	 %1560 %1607
%1609:	br	 if.end29

BASIC BLOCK if.end29
%1610:	phi	 %1560 %1553
%1611:	getelementptr	 %1560 XXX XXX
%1612:	store	 XXX %1611
%1613:	br	 for.inc

BASIC BLOCK for.inc
%1614:	add	 %1555 XXX
%1615:	br	 for.cond9

BASIC BLOCK for.end
%1616:	br	 for.inc31

BASIC BLOCK for.inc31
%1617:	add	 %1547 XXX
%1618:	br	 for.cond

BASIC BLOCK for.end33
%1619:	store	 %1545 first_node_ptr
%1620:	store	 %1546 last_node_ptr
%1621:	ret	 XXX

FUNCTION mkshex

BASIC BLOCK entry
%1622:	alloca	 XXX
%1623:	alloca	 XXX
%1624:	getelementptr	 addrem_ptr XXX XXX
%1625:	load	 %1624
%1626:	getelementptr	 %1625 XXX XXX
%1627:	load	 %1626
%1628:	getelementptr	 addrem_ptr XXX XXX
%1629:	load	 %1628
%1630:	getelementptr	 %1629 XXX XXX
%1631:	load	 %1630
%1632:	store	 XXX nodes_num_ptr
%1633:	sub	 %1627 XXX
%1634:	getelementptr	 %1622 XXX XXX
%1635:	store	 %1633 %1634
%1636:	add	 %1631 XXX
%1637:	getelementptr	 %1623 XXX XXX
%1638:	store	 %1636 %1637
%1639:	getelementptr	 %1622 XXX XXX
%1640:	store	 %1627 %1639
%1641:	add	 %1631 XXX
%1642:	getelementptr	 %1623 XXX XXX
%1643:	store	 %1641 %1642
%1644:	add	 %1627 XXX
%1645:	getelementptr	 %1622 XXX XXX
%1646:	store	 %1644 %1645
%1647:	getelementptr	 %1623 XXX XXX
%1648:	store	 %1631 %1647
%1649:	add	 %1627 XXX
%1650:	getelementptr	 %1622 XXX XXX
%1651:	store	 %1649 %1650
%1652:	sub	 %1631 XXX
%1653:	getelementptr	 %1623 XXX XXX
%1654:	store	 %1652 %1653
%1655:	getelementptr	 %1622 XXX XXX
%1656:	store	 %1627 %1655
%1657:	sub	 %1631 XXX
%1658:	getelementptr	 %1623 XXX XXX
%1659:	store	 %1657 %1658
%1660:	sub	 %1627 XXX
%1661:	getelementptr	 %1622 XXX XXX
%1662:	store	 %1660 %1661
%1663:	getelementptr	 %1623 XXX XXX
%1664:	store	 %1631 %1663
%1665:	getelementptr	 %1622 XXX XXX
%1666:	store	 %1627 %1665
%1667:	getelementptr	 %1623 XXX XXX
%1668:	store	 %1631 %1667
%1669:	br	 for.cond

BASIC BLOCK for.cond
%1670:	phi	 XXX %1741
%1671:	phi	 XXX %1676
%1672:	phi	 XXX %1745
%1673:	icmp	 %1672 XXX
%1674:	br	 %1673 for.end for.body

BASIC BLOCK for.body
%1675:	call	 XXX malloc
%1676:	bitcast	 %1675
%1677:	icmp	 %1676 XXX
%1678:	br	 %1677 if.end if.then

BASIC BLOCK if.then
%1679:	call	 XXX XXX printf
%1680:	call	 XXX interror
%1681:	br	 if.end

BASIC BLOCK if.end
%1682:	sext	 %1672
%1683:	getelementptr	 %1622 XXX %1682
%1684:	load	 %1683
%1685:	sitofp	 %1684
%1686:	fmul	 %1685 pstep
%1687:	sext	 %1672
%1688:	getelementptr	 %1623 XXX %1687
%1689:	load	 %1688
%1690:	sitofp	 %1689
%1691:	fmul	 %1690 qstep
%1692:	call	 angle dcos
%1693:	fmul	 %1691 %1692
%1694:	fadd	 %1686 %1693
%1695:	sext	 %1672
%1696:	getelementptr	 %1623 XXX %1695
%1697:	load	 %1696
%1698:	sitofp	 %1697
%1699:	fmul	 %1698 qstep
%1700:	call	 angle dsin
%1701:	fmul	 %1699 %1700
%1702:	load	 nodes_num_ptr
%1703:	add	 %1702 XXX
%1704:	store	 %1703 nodes_num_ptr
%1705:	sext	 %1672
%1706:	getelementptr	 %1622 XXX %1705
%1707:	load	 %1706
%1708:	getelementptr	 %1676 XXX XXX
%1709:	store	 %1707 %1708
%1710:	sext	 %1672
%1711:	getelementptr	 %1623 XXX %1710
%1712:	load	 %1711
%1713:	getelementptr	 %1676 XXX XXX
%1714:	store	 %1712 %1713
%1715:	getelementptr	 %1676 XXX XXX
%1716:	store	 %1694 %1715
%1717:	getelementptr	 %1676 XXX XXX
%1718:	store	 %1701 %1717
%1719:	getelementptr	 %1676 XXX XXX
%1720:	store	 XXX %1719
%1721:	getelementptr	 %1676 XXX XXX
%1722:	store	 XXX %1721
%1723:	getelementptr	 %1676 XXX XXX
%1724:	store	 elem_shape %1723
%1725:	getelementptr	 %1676 XXX XXX
%1726:	store	 elem_pdim %1725
%1727:	getelementptr	 %1676 XXX XXX
%1728:	store	 elem_qdim %1727
%1729:	getelementptr	 %1676 XXX XXX
%1730:	store	 XXX %1729
%1731:	getelementptr	 %1676 XXX XXX
%1732:	store	 XXX %1731
%1733:	getelementptr	 %1676 XXX XXX
%1734:	store	 XXX %1733
%1735:	icmp	 %1670 XXX
%1736:	br	 %1735 if.else if.then44

BASIC BLOCK if.then44
%1737:	br	 if.end45

BASIC BLOCK if.else
%1738:	getelementptr	 %1671 XXX XXX
%1739:	store	 %1676 %1738
%1740:	br	 if.end45

BASIC BLOCK if.end45
%1741:	phi	 %1676 %1670
%1742:	getelementptr	 %1676 XXX XXX
%1743:	store	 XXX %1742
%1744:	br	 for.inc

BASIC BLOCK for.inc
%1745:	add	 %1672 XXX
%1746:	br	 for.cond

BASIC BLOCK for.end
%1747:	store	 %1670 first_node_ptr
%1748:	store	 %1671 last_node_ptr
%1749:	ret	 XXX

FUNCTION sgrrot

BASIC BLOCK entry
%1750:	icmp	 start_ptr XXX
%1751:	br	 %1750 if.end if.then

BASIC BLOCK if.then
%1752:	call	 XXX interror
%1753:	br	 if.end

BASIC BLOCK if.end
%1754:	br	 while.cond

BASIC BLOCK while.cond
%1755:	phi	 start_ptr %1787
%1756:	icmp	 %1755 XXX
%1757:	br	 %1756 while.end while.body

BASIC BLOCK while.body
%1758:	getelementptr	 %1755 XXX XXX
%1759:	load	 %1758
%1760:	getelementptr	 %1755 XXX XXX
%1761:	load	 %1760
%1762:	fsub	 %1759 XC
%1763:	call	 phi dcos
%1764:	fmul	 %1762 %1763
%1765:	fsub	 %1761 YC
%1766:	call	 phi dsin
%1767:	fmul	 %1765 %1766
%1768:	fsub	 %1764 %1767
%1769:	fadd	 %1768 XC
%1770:	fsub	 %1759 XC
%1771:	call	 phi dsin
%1772:	fmul	 %1770 %1771
%1773:	fsub	 %1761 YC
%1774:	call	 phi dcos
%1775:	fmul	 %1773 %1774
%1776:	fadd	 %1772 %1775
%1777:	fadd	 %1776 YC
%1778:	getelementptr	 %1755 XXX XXX
%1779:	store	 %1769 %1778
%1780:	getelementptr	 %1755 XXX XXX
%1781:	store	 %1777 %1780
%1782:	getelementptr	 %1755 XXX XXX
%1783:	load	 %1782
%1784:	fadd	 %1783 phi
%1785:	store	 %1784 %1782
%1786:	getelementptr	 %1755 XXX XXX
%1787:	load	 %1786
%1788:	br	 while.cond

BASIC BLOCK while.end
%1789:	ret	 XXX

FUNCTION extremes

BASIC BLOCK entry
%1790:	br	 while.cond

BASIC BLOCK while.cond
%1791:	phi	 XXX %1805
%1792:	phi	 gnode_ptr %1831
%1793:	phi	 XXX %1813
%1794:	phi	 XXX %1821
%1795:	phi	 XXX %1829
%1796:	icmp	 %1792 XXX
%1797:	br	 %1796 while.end while.body

BASIC BLOCK while.body
%1798:	getelementptr	 %1792 XXX XXX
%1799:	load	 %1798
%1800:	icmp	 %1799 %1791
%1801:	br	 %1800 if.end if.then

BASIC BLOCK if.then
%1802:	getelementptr	 %1792 XXX XXX
%1803:	load	 %1802
%1804:	br	 if.end

BASIC BLOCK if.end
%1805:	phi	 %1803 %1791
%1806:	getelementptr	 %1792 XXX XXX
%1807:	load	 %1806
%1808:	icmp	 %1807 %1793
%1809:	br	 %1808 if.end7 if.then5

BASIC BLOCK if.then5
%1810:	getelementptr	 %1792 XXX XXX
%1811:	load	 %1810
%1812:	br	 if.end7

BASIC BLOCK if.end7
%1813:	phi	 %1811 %1793
%1814:	getelementptr	 %1792 XXX XXX
%1815:	load	 %1814
%1816:	icmp	 %1815 %1794
%1817:	br	 %1816 if.end11 if.then9

BASIC BLOCK if.then9
%1818:	getelementptr	 %1792 XXX XXX
%1819:	load	 %1818
%1820:	br	 if.end11

BASIC BLOCK if.end11
%1821:	phi	 %1819 %1794
%1822:	getelementptr	 %1792 XXX XXX
%1823:	load	 %1822
%1824:	icmp	 %1823 %1795
%1825:	br	 %1824 if.end16 if.then14

BASIC BLOCK if.then14
%1826:	getelementptr	 %1792 XXX XXX
%1827:	load	 %1826
%1828:	br	 if.end16

BASIC BLOCK if.end16
%1829:	phi	 %1827 %1795
%1830:	getelementptr	 %1792 XXX XXX
%1831:	load	 %1830
%1832:	br	 while.cond

BASIC BLOCK while.end
%1833:	sub	 %1793 %1791
%1834:	add	 %1833 XXX
%1835:	store	 %1834 pnum_ptr
%1836:	sub	 %1795 %1794
%1837:	add	 %1836 XXX
%1838:	store	 %1837 qnum_ptr
%1839:	ret	 XXX

FUNCTION extsize

BASIC BLOCK entry
%1840:	br	 while.cond

BASIC BLOCK while.cond
%1841:	phi	 gnode_ptr %1881
%1842:	phi	 XXX %1855
%1843:	phi	 XXX %1863
%1844:	phi	 XXX %1871
%1845:	phi	 XXX %1879
%1846:	icmp	 %1841 XXX
%1847:	br	 %1846 while.end while.body

BASIC BLOCK while.body
%1848:	getelementptr	 %1841 XXX XXX
%1849:	load	 %1848
%1850:	fcmp	 %1849 %1842
%1851:	br	 %1850 if.end if.then

BASIC BLOCK if.then
%1852:	getelementptr	 %1841 XXX XXX
%1853:	load	 %1852
%1854:	br	 if.end

BASIC BLOCK if.end
%1855:	phi	 %1853 %1842
%1856:	getelementptr	 %1841 XXX XXX
%1857:	load	 %1856
%1858:	fcmp	 %1857 %1843
%1859:	br	 %1858 if.end7 if.then5

BASIC BLOCK if.then5
%1860:	getelementptr	 %1841 XXX XXX
%1861:	load	 %1860
%1862:	br	 if.end7

BASIC BLOCK if.end7
%1863:	phi	 %1861 %1843
%1864:	getelementptr	 %1841 XXX XXX
%1865:	load	 %1864
%1866:	fcmp	 %1865 %1844
%1867:	br	 %1866 if.end11 if.then9

BASIC BLOCK if.then9
%1868:	getelementptr	 %1841 XXX XXX
%1869:	load	 %1868
%1870:	br	 if.end11

BASIC BLOCK if.end11
%1871:	phi	 %1869 %1844
%1872:	getelementptr	 %1841 XXX XXX
%1873:	load	 %1872
%1874:	fcmp	 %1873 %1845
%1875:	br	 %1874 if.end16 if.then14

BASIC BLOCK if.then14
%1876:	getelementptr	 %1841 XXX XXX
%1877:	load	 %1876
%1878:	br	 if.end16

BASIC BLOCK if.end16
%1879:	phi	 %1877 %1845
%1880:	getelementptr	 %1841 XXX XXX
%1881:	load	 %1880
%1882:	br	 while.cond

BASIC BLOCK while.end
%1883:	fsub	 %1843 %1842
%1884:	fdiv	 elem_pdim XXX
%1885:	fmul	 XXX %1884
%1886:	fadd	 %1883 %1885
%1887:	store	 %1886 xsize_ptr
%1888:	fsub	 %1845 %1844
%1889:	fdiv	 elem_qdim XXX
%1890:	fmul	 XXX %1889
%1891:	fadd	 %1888 %1890
%1892:	store	 %1891 ysize_ptr
%1893:	ret	 XXX

FUNCTION adremdef

BASIC BLOCK entry
%1894:	alloca	 XXX
%1895:	store	 p1 %1894
%1896:	store	 XXX addrem_ptr
%1897:	load	 %1894
%1898:	call	 %1897 %1894 addrem_ptr adddef
%1899:	icmp	 %1898 XXX
%1900:	br	 %1899 if.end if.then

BASIC BLOCK if.then
%1901:	load	 %1894
%1902:	store	 %1901 pp2
%1903:	br	 return

BASIC BLOCK if.end
%1904:	icmp	 %1898 XXX
%1905:	br	 %1904 if.end4 if.then2

BASIC BLOCK if.then2
%1906:	call	 XXX XXX printf
%1907:	br	 return

BASIC BLOCK if.end4
%1908:	icmp	 %1898 XXX
%1909:	br	 %1908 if.end8 if.then6

BASIC BLOCK if.then6
%1910:	load	 %1894
%1911:	call	 %1910 %1894 addrem_ptr remdef
%1912:	br	 if.end8

BASIC BLOCK if.end8
%1913:	phi	 %1911 %1898
%1914:	icmp	 %1913 XXX
%1915:	br	 %1914 if.end11 if.then10

BASIC BLOCK if.then10
%1916:	load	 %1894
%1917:	store	 %1916 pp2
%1918:	br	 return

BASIC BLOCK if.end11
%1919:	icmp	 %1913 XXX
%1920:	br	 %1919 if.end15 if.then13

BASIC BLOCK if.then13
%1921:	call	 XXX XXX printf
%1922:	br	 return

BASIC BLOCK if.end15
%1923:	icmp	 %1913 XXX
%1924:	br	 %1923 if.end18 if.then17

BASIC BLOCK if.then17
%1925:	br	 return

BASIC BLOCK if.end18
%1926:	br	 return

BASIC BLOCK return
%1927:	phi	 XXX XXX XXX XXX XXX XXX
%1928:	ret	 %1927

FUNCTION remdef

BASIC BLOCK entry
%1929:	alloca	 XXX
%1930:	alloca	 XXX
%1931:	store	 XXX %1930
%1932:	store	 p1 %1929
%1933:	call	 XXX %1929 GetKeyword
%1934:	icmp	 %1933 XXX
%1935:	br	 %1934 if.end if.then

BASIC BLOCK if.then
%1936:	store	 XXX addrem_ptr
%1937:	br	 return

BASIC BLOCK if.end
%1938:	load	 %1929
%1939:	call	 %1938 %1929 %1930 nodedef
%1940:	icmp	 %1939 XXX
%1941:	br	 %1940 if.end5 if.then3

BASIC BLOCK if.then3
%1942:	store	 XXX addrem_ptr
%1943:	call	 XXX XXX printf
%1944:	br	 return

BASIC BLOCK if.end5
%1945:	icmp	 %1939 XXX
%1946:	br	 %1945 if.end12 if.then7

BASIC BLOCK if.then7
%1947:	call	 XXX malloc
%1948:	bitcast	 %1947
%1949:	store	 %1948 addrem_ptr
%1950:	load	 addrem_ptr
%1951:	icmp	 %1950 XXX
%1952:	br	 %1951 if.end11 if.then10

BASIC BLOCK if.then10
%1953:	load	 %1929
%1954:	call	 %1953 XXX XXX parserro
%1955:	call	 XXX interror
%1956:	br	 if.end11

BASIC BLOCK if.end11
%1957:	load	 addrem_ptr
%1958:	getelementptr	 %1957 XXX XXX
%1959:	store	 XXX %1958
%1960:	load	 addrem_ptr
%1961:	getelementptr	 %1960 XXX XXX
%1962:	store	 XXX %1961
%1963:	load	 %1930
%1964:	load	 addrem_ptr
%1965:	getelementptr	 %1964 XXX XXX
%1966:	store	 %1963 %1965
%1967:	load	 addrem_ptr
%1968:	getelementptr	 %1967 XXX XXX
%1969:	store	 XXX %1968
%1970:	load	 %1929
%1971:	store	 %1970 pp2
%1972:	br	 return

BASIC BLOCK if.end12
%1973:	load	 %1929
%1974:	call	 %1973 %1929 %1930 blockdef
%1975:	icmp	 %1974 XXX
%1976:	br	 %1975 if.end17 if.then15

BASIC BLOCK if.then15
%1977:	store	 XXX addrem_ptr
%1978:	call	 XXX XXX printf
%1979:	br	 return

BASIC BLOCK if.end17
%1980:	icmp	 %1974 XXX
%1981:	br	 %1980 if.end28 if.then19

BASIC BLOCK if.then19
%1982:	call	 XXX malloc
%1983:	bitcast	 %1982
%1984:	store	 %1983 addrem_ptr
%1985:	load	 addrem_ptr
%1986:	icmp	 %1985 XXX
%1987:	br	 %1986 if.end23 if.then22

BASIC BLOCK if.then22
%1988:	load	 %1929
%1989:	call	 %1988 XXX XXX parserro
%1990:	call	 XXX interror
%1991:	br	 if.end23

BASIC BLOCK if.end23
%1992:	load	 addrem_ptr
%1993:	getelementptr	 %1992 XXX XXX
%1994:	store	 XXX %1993
%1995:	load	 addrem_ptr
%1996:	getelementptr	 %1995 XXX XXX
%1997:	store	 XXX %1996
%1998:	load	 %1930
%1999:	load	 addrem_ptr
%2000:	getelementptr	 %1999 XXX XXX
%2001:	store	 %1998 %2000
%2002:	load	 addrem_ptr
%2003:	getelementptr	 %2002 XXX XXX
%2004:	store	 XXX %2003
%2005:	load	 %1929
%2006:	store	 %2005 pp2
%2007:	br	 return

BASIC BLOCK if.end28
%2008:	load	 %1929
%2009:	call	 %2008 %1929 %1930 polydef
%2010:	icmp	 %2009 XXX
%2011:	br	 %2010 if.end33 if.then31

BASIC BLOCK if.then31
%2012:	store	 XXX addrem_ptr
%2013:	call	 XXX XXX printf
%2014:	br	 return

BASIC BLOCK if.end33
%2015:	icmp	 %2009 XXX
%2016:	br	 %2015 if.end44 if.then35

BASIC BLOCK if.then35
%2017:	call	 XXX malloc
%2018:	bitcast	 %2017
%2019:	store	 %2018 addrem_ptr
%2020:	load	 addrem_ptr
%2021:	icmp	 %2020 XXX
%2022:	br	 %2021 if.end39 if.then38

BASIC BLOCK if.then38
%2023:	load	 %1929
%2024:	call	 %2023 XXX XXX parserro
%2025:	call	 XXX interror
%2026:	br	 if.end39

BASIC BLOCK if.end39
%2027:	load	 addrem_ptr
%2028:	getelementptr	 %2027 XXX XXX
%2029:	store	 XXX %2028
%2030:	load	 addrem_ptr
%2031:	getelementptr	 %2030 XXX XXX
%2032:	store	 XXX %2031
%2033:	load	 %1930
%2034:	load	 addrem_ptr
%2035:	getelementptr	 %2034 XXX XXX
%2036:	store	 %2033 %2035
%2037:	load	 addrem_ptr
%2038:	getelementptr	 %2037 XXX XXX
%2039:	store	 XXX %2038
%2040:	load	 %1929
%2041:	store	 %2040 pp2
%2042:	br	 return

BASIC BLOCK if.end44
%2043:	load	 %1929
%2044:	call	 %2043 %1929 %1930 hexdef
%2045:	icmp	 %2044 XXX
%2046:	br	 %2045 if.end49 if.then47

BASIC BLOCK if.then47
%2047:	store	 XXX addrem_ptr
%2048:	call	 XXX XXX printf
%2049:	br	 return

BASIC BLOCK if.end49
%2050:	icmp	 %2044 XXX
%2051:	br	 %2050 if.end60 if.then51

BASIC BLOCK if.then51
%2052:	call	 XXX malloc
%2053:	bitcast	 %2052
%2054:	store	 %2053 addrem_ptr
%2055:	load	 addrem_ptr
%2056:	icmp	 %2055 XXX
%2057:	br	 %2056 if.end55 if.then54

BASIC BLOCK if.then54
%2058:	load	 %1929
%2059:	call	 %2058 XXX XXX parserro
%2060:	call	 XXX interror
%2061:	br	 if.end55

BASIC BLOCK if.end55
%2062:	load	 addrem_ptr
%2063:	getelementptr	 %2062 XXX XXX
%2064:	store	 XXX %2063
%2065:	load	 addrem_ptr
%2066:	getelementptr	 %2065 XXX XXX
%2067:	store	 XXX %2066
%2068:	load	 %1930
%2069:	load	 addrem_ptr
%2070:	getelementptr	 %2069 XXX XXX
%2071:	store	 %2068 %2070
%2072:	load	 addrem_ptr
%2073:	getelementptr	 %2072 XXX XXX
%2074:	store	 XXX %2073
%2075:	load	 %1929
%2076:	store	 %2075 pp2
%2077:	br	 return

BASIC BLOCK if.end60
%2078:	store	 XXX addrem_ptr
%2079:	load	 %1929
%2080:	call	 %2079 XXX XXX parserro
%2081:	br	 return

BASIC BLOCK return
%2082:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
%2083:	ret	 %2082

FUNCTION ampunit

BASIC BLOCK entry
%2084:	alloca	 XXX
%2085:	load	 tp
%2086:	store	 %2085 %2084
%2087:	store	 XXX unit_ptr
%2088:	call	 XXX %2084 GetKeyword
%2089:	icmp	 %2088 XXX
%2090:	br	 %2089 if.else if.then

BASIC BLOCK if.then
%2091:	store	 XXX unit_ptr
%2092:	br	 if.end10

BASIC BLOCK if.else
%2093:	call	 XXX %2084 GetKeyword
%2094:	icmp	 %2093 XXX
%2095:	br	 %2094 if.else4 if.then3

BASIC BLOCK if.then3
%2096:	store	 XXX unit_ptr
%2097:	br	 if.end9

BASIC BLOCK if.else4
%2098:	call	 XXX %2084 GetKeyword
%2099:	icmp	 %2098 XXX
%2100:	br	 %2099 if.else8 if.then7

BASIC BLOCK if.then7
%2101:	store	 XXX unit_ptr
%2102:	br	 if.end

BASIC BLOCK if.else8
%2103:	br	 return

BASIC BLOCK if.end
%2104:	br	 if.end9

BASIC BLOCK if.end9
%2105:	br	 if.end10

BASIC BLOCK if.end10
%2106:	load	 %2084
%2107:	store	 %2106 tp
%2108:	br	 return

BASIC BLOCK return
%2109:	phi	 XXX XXX
%2110:	ret	 %2109

FUNCTION ampval

BASIC BLOCK entry
%2111:	alloca	 XXX
%2112:	store	 p1 %2111
%2113:	call	 amp_ptr %2111 GetReal
%2114:	icmp	 %2113 XXX
%2115:	br	 %2114 if.end if.then

BASIC BLOCK if.then
%2116:	br	 return

BASIC BLOCK if.end
%2117:	call	 %2111 amp_unit_ptr ampunit
%2118:	icmp	 %2117 XXX
%2119:	br	 %2118 if.end4 if.then3

BASIC BLOCK if.then3
%2120:	store	 XXX amp_unit_ptr
%2121:	br	 if.end4

BASIC BLOCK if.end4
%2122:	load	 %2111
%2123:	store	 %2122 pp2
%2124:	br	 return

BASIC BLOCK return
%2125:	phi	 XXX XXX
%2126:	ret	 %2125

FUNCTION GetReal

BASIC BLOCK entry
%2127:	alloca	 XXX
%2128:	alloca	 XXX
%2129:	load	 tp
%2130:	store	 %2129 %2127
%2131:	call	 %2127 TapeGet
%2132:	sext	 %2131
%2133:	sext	 %2132
%2134:	call	 __ctype_b_loc
%2135:	load	 %2134
%2136:	getelementptr	 %2135 %2133
%2137:	load	 %2136
%2138:	zext	 %2137
%2139:	and	 %2138 XXX
%2140:	icmp	 %2139 XXX
%2141:	br	 %2140 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%2142:	sext	 %2131
%2143:	icmp	 %2142 XXX
%2144:	br	 %2143 if.end land.lhs.true7

BASIC BLOCK land.lhs.true7
%2145:	sext	 %2131
%2146:	icmp	 %2145 XXX
%2147:	br	 %2146 if.end land.lhs.true11

BASIC BLOCK land.lhs.true11
%2148:	sext	 %2131
%2149:	icmp	 %2148 XXX
%2150:	br	 %2149 if.end if.then

BASIC BLOCK if.then
%2151:	br	 return

BASIC BLOCK if.end
%2152:	sext	 XXX
%2153:	getelementptr	 %2128 XXX %2152
%2154:	store	 %2131 %2153
%2155:	add	 XXX XXX
%2156:	call	 %2127 TapeGet
%2157:	br	 while.cond

BASIC BLOCK while.cond
%2158:	phi	 %2155 %2193
%2159:	phi	 %2156 %2194
%2160:	sext	 %2159
%2161:	sext	 %2160
%2162:	call	 __ctype_b_loc
%2163:	load	 %2162
%2164:	getelementptr	 %2163 %2161
%2165:	load	 %2164
%2166:	zext	 %2165
%2167:	and	 %2166 XXX
%2168:	icmp	 %2167 XXX
%2169:	br	 %2168 lor.lhs.false land.rhs

BASIC BLOCK lor.lhs.false
%2170:	sext	 %2159
%2171:	icmp	 %2170 XXX
%2172:	br	 %2171 lor.lhs.false27 land.rhs

BASIC BLOCK lor.lhs.false27
%2173:	sext	 %2159
%2174:	icmp	 %2173 XXX
%2175:	br	 %2174 lor.lhs.false31 land.rhs

BASIC BLOCK lor.lhs.false31
%2176:	sext	 %2159
%2177:	icmp	 %2176 XXX
%2178:	br	 %2177 lor.lhs.false35 land.rhs

BASIC BLOCK lor.lhs.false35
%2179:	sext	 %2159
%2180:	icmp	 %2179 XXX
%2181:	br	 %2180 land.end land.rhs

BASIC BLOCK land.rhs
%2182:	load	 %2127
%2183:	icmp	 %2182 XXX
%2184:	br	 land.end

BASIC BLOCK land.end
%2185:	phi	 XXX %2183
%2186:	br	 %2185 while.end while.body

BASIC BLOCK while.body
%2187:	icmp	 %2158 XXX
%2188:	br	 %2187 if.end46 if.then43

BASIC BLOCK if.then43
%2189:	sext	 %2158
%2190:	getelementptr	 %2128 XXX %2189
%2191:	store	 %2159 %2190
%2192:	br	 if.end46

BASIC BLOCK if.end46
%2193:	add	 %2158 XXX
%2194:	call	 %2127 TapeGet
%2195:	br	 while.cond

BASIC BLOCK while.end
%2196:	icmp	 %2158 XXX
%2197:	br	 %2196 if.else if.then51

BASIC BLOCK if.then51
%2198:	getelementptr	 %2128 XXX XXX
%2199:	store	 XXX %2198
%2200:	br	 if.end55

BASIC BLOCK if.else
%2201:	sext	 %2158
%2202:	getelementptr	 %2128 XXX %2201
%2203:	store	 XXX %2202
%2204:	br	 if.end55

BASIC BLOCK if.end55
%2205:	getelementptr	 %2128 XXX XXX
%2206:	call	 %2205 atof
%2207:	store	 %2206 reale
%2208:	load	 %2127
%2209:	store	 %2208 tp
%2210:	br	 return

BASIC BLOCK return
%2211:	phi	 XXX XXX
%2212:	ret	 %2211

FUNCTION angclaus

BASIC BLOCK entry
%2213:	alloca	 XXX
%2214:	store	 p1 %2213
%2215:	store	 XXX angle_ptr
%2216:	store	 XXX angle_unit_ptr
%2217:	call	 XXX %2213 GetKeyword
%2218:	icmp	 %2217 XXX
%2219:	br	 %2218 if.end if.then

BASIC BLOCK if.then
%2220:	br	 return

BASIC BLOCK if.end
%2221:	call	 angle_ptr %2213 GetReal
%2222:	icmp	 %2221 XXX
%2223:	br	 %2222 if.end4 if.then3

BASIC BLOCK if.then3
%2224:	store	 XXX angle_ptr
%2225:	br	 return

BASIC BLOCK if.end4
%2226:	load	 %2213
%2227:	call	 %2226 %2213 angle_unit_ptr angunit
%2228:	icmp	 %2227 XXX
%2229:	br	 %2228 if.end8 if.then7

BASIC BLOCK if.then7
%2230:	store	 XXX angle_unit_ptr
%2231:	br	 if.end8

BASIC BLOCK if.end8
%2232:	load	 %2213
%2233:	store	 %2232 pp2
%2234:	br	 return

BASIC BLOCK return
%2235:	phi	 XXX XXX XXX
%2236:	ret	 %2235

FUNCTION angunit

BASIC BLOCK entry
%2237:	alloca	 XXX
%2238:	store	 p1 %2237
%2239:	store	 XXX angle_unit_ptr
%2240:	call	 XXX %2237 GetKeyword
%2241:	icmp	 %2240 XXX
%2242:	br	 %2241 if.else if.then

BASIC BLOCK if.then
%2243:	store	 XXX angle_unit_ptr
%2244:	br	 if.end5

BASIC BLOCK if.else
%2245:	call	 XXX %2237 GetKeyword
%2246:	icmp	 %2245 XXX
%2247:	br	 %2246 if.else4 if.then3

BASIC BLOCK if.then3
%2248:	store	 XXX angle_unit_ptr
%2249:	br	 if.end

BASIC BLOCK if.else4
%2250:	br	 return

BASIC BLOCK if.end
%2251:	br	 if.end5

BASIC BLOCK if.end5
%2252:	load	 %2237
%2253:	store	 %2252 pp2
%2254:	br	 return

BASIC BLOCK return
%2255:	phi	 XXX XXX
%2256:	ret	 %2255

FUNCTION angledir

BASIC BLOCK entry
%2257:	alloca	 XXX
%2258:	store	 p1 %2257
%2259:	call	 XXX %2257 GetKeyword
%2260:	icmp	 %2259 XXX
%2261:	br	 %2260 if.end if.then

BASIC BLOCK if.then
%2262:	br	 return

BASIC BLOCK if.end
%2263:	call	 theta_ptr %2257 GetReal
%2264:	icmp	 %2263 XXX
%2265:	br	 %2264 if.end4 if.then3

BASIC BLOCK if.then3
%2266:	load	 %2257
%2267:	call	 %2266 XXX XXX parserro
%2268:	br	 return

BASIC BLOCK if.end4
%2269:	call	 XXX %2257 GetKeyword
%2270:	icmp	 %2269 XXX
%2271:	br	 %2270 if.end8 if.then7

BASIC BLOCK if.then7
%2272:	load	 %2257
%2273:	call	 %2272 XXX XXX parserro
%2274:	br	 return

BASIC BLOCK if.end8
%2275:	load	 %2257
%2276:	call	 %2275 %2257 phi_ptr angle_unit_ptr angval
%2277:	icmp	 %2276 XXX
%2278:	br	 %2277 if.end12 if.then11

BASIC BLOCK if.then11
%2279:	load	 %2257
%2280:	call	 %2279 XXX XXX parserro
%2281:	br	 return

BASIC BLOCK if.end12
%2282:	load	 %2257
%2283:	store	 %2282 pp2
%2284:	br	 return

BASIC BLOCK return
%2285:	phi	 XXX XXX XXX XXX XXX
%2286:	ret	 %2285

FUNCTION angval

BASIC BLOCK entry
%2287:	alloca	 XXX
%2288:	store	 p1 %2287
%2289:	call	 angle_ptr %2287 GetReal
%2290:	icmp	 %2289 XXX
%2291:	br	 %2290 if.end if.then

BASIC BLOCK if.then
%2292:	br	 return

BASIC BLOCK if.end
%2293:	load	 %2287
%2294:	call	 %2293 %2287 angle_unit_ptr angunit
%2295:	icmp	 %2294 XXX
%2296:	br	 %2295 if.end4 if.then3

BASIC BLOCK if.then3
%2297:	store	 XXX angle_unit_ptr
%2298:	br	 if.end4

BASIC BLOCK if.end4
%2299:	load	 %2287
%2300:	store	 %2299 pp2
%2301:	br	 return

BASIC BLOCK return
%2302:	phi	 XXX XXX
%2303:	ret	 %2302

FUNCTION anglerot

BASIC BLOCK entry
%2304:	alloca	 XXX
%2305:	store	 p1 %2304
%2306:	call	 XXX %2304 GetKeyword
%2307:	icmp	 %2306 XXX
%2308:	br	 %2307 if.end if.then

BASIC BLOCK if.then
%2309:	br	 return

BASIC BLOCK if.end
%2310:	call	 XXX %2304 GetKeyword
%2311:	call	 angle_start_ptr %2304 GetReal
%2312:	icmp	 %2311 XXX
%2313:	br	 %2312 if.end5 if.then4

BASIC BLOCK if.then4
%2314:	load	 %2304
%2315:	call	 %2314 XXX XXX parserro
%2316:	br	 return

BASIC BLOCK if.end5
%2317:	call	 XXX %2304 GetKeyword
%2318:	load	 %2304
%2319:	call	 %2318 %2304 angle_step_ptr angle_unit_ptr angval
%2320:	icmp	 %2319 XXX
%2321:	br	 %2320 if.end10 if.then9

BASIC BLOCK if.then9
%2322:	load	 %2304
%2323:	call	 %2322 XXX XXX parserro
%2324:	br	 return

BASIC BLOCK if.end10
%2325:	load	 %2304
%2326:	store	 %2325 pp2
%2327:	br	 return

BASIC BLOCK return
%2328:	phi	 XXX XXX XXX XXX
%2329:	ret	 %2328

FUNCTION angstep

BASIC BLOCK entry
%2330:	alloca	 XXX
%2331:	store	 p1 %2330
%2332:	store	 XXX angle_ptr
%2333:	store	 XXX angle_unit_ptr
%2334:	store	 XXX pstep_ptr
%2335:	store	 XXX qstep_ptr
%2336:	store	 XXX pqstep_unit_ptr
%2337:	load	 %2330
%2338:	call	 %2337 %2330 angle_ptr angle_unit_ptr angclaus
%2339:	icmp	 %2338 XXX
%2340:	br	 %2339 if.end if.then

BASIC BLOCK if.then
%2341:	store	 XXX angle_ptr
%2342:	store	 XXX angle_unit_ptr
%2343:	br	 if.end

BASIC BLOCK if.end
%2344:	load	 %2330
%2345:	call	 %2344 %2330 pstep_ptr qstep_ptr pqstep_unit_ptr doubstep
%2346:	icmp	 %2338 XXX
%2347:	br	 %2346 if.end5 land.lhs.true

BASIC BLOCK land.lhs.true
%2348:	icmp	 %2345 XXX
%2349:	br	 %2348 if.end5 if.then4

BASIC BLOCK if.then4
%2350:	store	 XXX angle_ptr
%2351:	store	 XXX angle_unit_ptr
%2352:	store	 XXX pstep_ptr
%2353:	store	 XXX qstep_ptr
%2354:	store	 XXX pqstep_unit_ptr
%2355:	br	 return

BASIC BLOCK if.end5
%2356:	icmp	 %2345 XXX
%2357:	br	 %2356 if.end8 if.then7

BASIC BLOCK if.then7
%2358:	load	 %2330
%2359:	call	 %2358 %2345 XXX parserro
%2360:	store	 XXX angle_ptr
%2361:	store	 XXX angle_unit_ptr
%2362:	store	 XXX pstep_ptr
%2363:	store	 XXX qstep_ptr
%2364:	store	 XXX pqstep_unit_ptr
%2365:	br	 return

BASIC BLOCK if.end8
%2366:	load	 %2330
%2367:	store	 %2366 pp2
%2368:	br	 return

BASIC BLOCK return
%2369:	phi	 XXX XXX XXX
%2370:	ret	 %2369

FUNCTION doubstep

BASIC BLOCK entry
%2371:	alloca	 XXX
%2372:	store	 p1 %2371
%2373:	store	 XXX pstep_ptr
%2374:	store	 XXX qstep_ptr
%2375:	store	 XXX pqstep_unit_ptr
%2376:	call	 XXX %2371 GetKeyword
%2377:	icmp	 %2376 XXX
%2378:	br	 %2377 if.end if.then

BASIC BLOCK if.then
%2379:	br	 return

BASIC BLOCK if.end
%2380:	load	 %2371
%2381:	call	 %2380 %2371 pstep_ptr GetUReal
%2382:	icmp	 %2381 XXX
%2383:	br	 %2382 if.end4 if.then3

BASIC BLOCK if.then3
%2384:	store	 XXX pstep_ptr
%2385:	store	 XXX qstep_ptr
%2386:	store	 XXX pqstep_unit_ptr
%2387:	br	 return

BASIC BLOCK if.end4
%2388:	call	 XXX %2371 GetKeyword
%2389:	icmp	 %2388 XXX
%2390:	br	 %2389 if.end8 if.then7

BASIC BLOCK if.then7
%2391:	br	 return

BASIC BLOCK if.end8
%2392:	load	 %2371
%2393:	call	 %2392 %2371 qstep_ptr GetUReal
%2394:	icmp	 %2393 XXX
%2395:	br	 %2394 if.end12 if.then11

BASIC BLOCK if.then11
%2396:	store	 XXX pstep_ptr
%2397:	store	 XXX qstep_ptr
%2398:	store	 XXX pqstep_unit_ptr
%2399:	br	 return

BASIC BLOCK if.end12
%2400:	call	 %2371 pqstep_unit_ptr lenunit
%2401:	icmp	 %2400 XXX
%2402:	br	 %2401 if.end16 if.then15

BASIC BLOCK if.then15
%2403:	store	 XXX pqstep_unit_ptr
%2404:	br	 if.end16

BASIC BLOCK if.end16
%2405:	load	 %2371
%2406:	store	 %2405 pp2
%2407:	br	 return

BASIC BLOCK return
%2408:	phi	 XXX %2381 XXX %2393 XXX
%2409:	ret	 %2408

FUNCTION answer

BASIC BLOCK entry
%2410:	alloca	 XXX
%2411:	call	 XXX domanda printf
%2412:	getelementptr	 %2410 XXX XXX
%2413:	call	 %2412 gets
%2414:	getelementptr	 %2410 XXX XXX
%2415:	load	 %2414
%2416:	sext	 %2415
%2417:	icmp	 %2416 XXX
%2418:	br	 %2417 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%2419:	getelementptr	 %2410 XXX XXX
%2420:	load	 %2419
%2421:	sext	 %2420
%2422:	icmp	 %2421 XXX
%2423:	br	 %2422 if.else if.then

BASIC BLOCK if.then
%2424:	br	 return

BASIC BLOCK if.else
%2425:	br	 return

BASIC BLOCK return
%2426:	phi	 XXX XXX
%2427:	ret	 %2426

FUNCTION beampha

BASIC BLOCK entry
%2428:	alloca	 XXX
%2429:	store	 p1 %2428
%2430:	call	 XXX %2428 GetKeyword
%2431:	load	 %2428
%2432:	call	 %2431 %2428 u_ptr v_ptr uvdir
%2433:	icmp	 %2432 XXX
%2434:	br	 %2433 if.end if.then

BASIC BLOCK if.then
%2435:	load	 %2428
%2436:	store	 %2435 pp2
%2437:	br	 return

BASIC BLOCK if.end
%2438:	icmp	 %2432 XXX
%2439:	br	 %2438 if.end5 if.then3

BASIC BLOCK if.then3
%2440:	call	 XXX XXX printf
%2441:	br	 return

BASIC BLOCK if.end5
%2442:	icmp	 %2432 XXX
%2443:	br	 %2442 if.end9 if.then7

BASIC BLOCK if.then7
%2444:	load	 %2428
%2445:	call	 %2444 %2428 theta_ptr phi_ptr angle_unit_ptr angledir
%2446:	br	 if.end9

BASIC BLOCK if.end9
%2447:	phi	 %2445 %2432
%2448:	icmp	 %2447 XXX
%2449:	br	 %2448 if.end12 if.then11

BASIC BLOCK if.then11
%2450:	load	 %2428
%2451:	store	 %2450 pp2
%2452:	br	 return

BASIC BLOCK if.end12
%2453:	icmp	 %2447 XXX
%2454:	br	 %2453 if.end16 if.then14

BASIC BLOCK if.then14
%2455:	call	 XXX XXX printf
%2456:	br	 return

BASIC BLOCK if.end16
%2457:	load	 %2428
%2458:	call	 %2457 XXX XXX parserro
%2459:	br	 return

BASIC BLOCK return
%2460:	phi	 XXX XXX XXX XXX XXX
%2461:	ret	 %2460

FUNCTION uvdir

BASIC BLOCK entry
%2462:	alloca	 XXX
%2463:	store	 p1 %2462
%2464:	call	 XXX %2462 GetKeyword
%2465:	icmp	 %2464 XXX
%2466:	br	 %2465 if.end if.then

BASIC BLOCK if.then
%2467:	br	 return

BASIC BLOCK if.end
%2468:	load	 %2462
%2469:	call	 %2468 %2462 u_ptr uvval
%2470:	icmp	 %2469 XXX
%2471:	br	 %2470 if.end4 if.then3

BASIC BLOCK if.then3
%2472:	load	 %2462
%2473:	call	 %2472 XXX XXX parserro
%2474:	br	 return

BASIC BLOCK if.end4
%2475:	call	 XXX %2462 GetKeyword
%2476:	icmp	 %2475 XXX
%2477:	br	 %2476 if.end8 if.then7

BASIC BLOCK if.then7
%2478:	load	 %2462
%2479:	call	 %2478 XXX XXX parserro
%2480:	br	 return

BASIC BLOCK if.end8
%2481:	load	 %2462
%2482:	call	 %2481 %2462 v_ptr uvval
%2483:	icmp	 %2482 XXX
%2484:	br	 %2483 if.end13 if.then11

BASIC BLOCK if.then11
%2485:	call	 XXX XXX printf
%2486:	br	 return

BASIC BLOCK if.end13
%2487:	load	 %2462
%2488:	store	 %2487 pp2
%2489:	br	 return

BASIC BLOCK return
%2490:	phi	 XXX XXX XXX XXX XXX
%2491:	ret	 %2490

FUNCTION nodecoor

BASIC BLOCK entry
%2492:	alloca	 XXX
%2493:	store	 p1 %2492
%2494:	call	 XXX %2492 GetKeyword
%2495:	load	 %2492
%2496:	call	 %2495 %2492 pcoord_ptr GetInt
%2497:	icmp	 %2496 XXX
%2498:	br	 %2497 if.end if.then

BASIC BLOCK if.then
%2499:	br	 return

BASIC BLOCK if.end
%2500:	call	 XXX %2492 GetKeyword
%2501:	load	 %2492
%2502:	call	 %2501 %2492 qcoord_ptr GetInt
%2503:	icmp	 %2502 XXX
%2504:	br	 %2503 if.end6 if.then5

BASIC BLOCK if.then5
%2505:	br	 return

BASIC BLOCK if.end6
%2506:	load	 %2492
%2507:	store	 %2506 pp2
%2508:	br	 return

BASIC BLOCK return
%2509:	phi	 XXX XXX XXX
%2510:	ret	 %2509

FUNCTION circpol

BASIC BLOCK entry
%2511:	alloca	 XXX
%2512:	store	 p1 %2511
%2513:	store	 XXX direction_ptr
%2514:	call	 XXX %2511 GetKeyword
%2515:	icmp	 %2514 XXX
%2516:	br	 %2515 if.end if.then

BASIC BLOCK if.then
%2517:	br	 return

BASIC BLOCK if.end
%2518:	call	 XXX %2511 GetKeyword
%2519:	icmp	 %2518 XXX
%2520:	br	 %2519 if.end4 if.then3

BASIC BLOCK if.then3
%2521:	store	 XXX direction_ptr
%2522:	load	 %2511
%2523:	store	 %2522 pp2
%2524:	br	 return

BASIC BLOCK if.end4
%2525:	call	 XXX %2511 GetKeyword
%2526:	icmp	 %2525 XXX
%2527:	br	 %2526 if.end8 if.then7

BASIC BLOCK if.then7
%2528:	store	 XXX direction_ptr
%2529:	load	 %2511
%2530:	store	 %2529 pp2
%2531:	br	 return

BASIC BLOCK if.end8
%2532:	load	 %2511
%2533:	store	 %2532 pp2
%2534:	br	 return

BASIC BLOCK return
%2535:	phi	 XXX XXX XXX XXX
%2536:	ret	 %2535

FUNCTION circspec

BASIC BLOCK entry
%2537:	alloca	 XXX
%2538:	store	 p1 %2537
%2539:	call	 XXX %2537 GetKeyword
%2540:	icmp	 %2539 XXX
%2541:	br	 %2540 if.end if.then

BASIC BLOCK if.then
%2542:	br	 return

BASIC BLOCK if.end
%2543:	call	 XXX %2537 GetKeyword
%2544:	load	 %2537
%2545:	call	 %2544 %2537 radius_ptr Get1Real
%2546:	icmp	 %2545 XXX
%2547:	br	 %2546 if.end5 if.then4

BASIC BLOCK if.then4
%2548:	load	 %2537
%2549:	call	 %2548 %2545 XXX parserro
%2550:	br	 return

BASIC BLOCK if.end5
%2551:	call	 %2537 radius_unit_ptr lenunit
%2552:	icmp	 %2551 XXX
%2553:	br	 %2552 if.end9 if.then8

BASIC BLOCK if.then8
%2554:	store	 XXX radius_unit_ptr
%2555:	br	 if.end9

BASIC BLOCK if.end9
%2556:	load	 %2537
%2557:	store	 %2556 pp2
%2558:	br	 return

BASIC BLOCK return
%2559:	phi	 XXX XXX XXX
%2560:	ret	 %2559

FUNCTION Get1Real

BASIC BLOCK entry
%2561:	alloca	 XXX
%2562:	store	 p1 %2561
%2563:	call	 ureal_ptr %2561 GetReal
%2564:	icmp	 %2563 XXX
%2565:	br	 %2564 if.end if.then

BASIC BLOCK if.then
%2566:	br	 return

BASIC BLOCK if.end
%2567:	load	 ureal_ptr
%2568:	fcmp	 %2567 XXX
%2569:	br	 %2568 if.end3 if.then2

BASIC BLOCK if.then2
%2570:	br	 return

BASIC BLOCK if.end3
%2571:	load	 %2561
%2572:	store	 %2571 pp2
%2573:	br	 return

BASIC BLOCK return
%2574:	phi	 XXX XXX XXX
%2575:	ret	 %2574

FUNCTION lenunit

BASIC BLOCK entry
%2576:	alloca	 XXX
%2577:	load	 tp
%2578:	store	 %2577 %2576
%2579:	store	 XXX unit
%2580:	call	 XXX %2576 GetKeyword
%2581:	icmp	 %2580 XXX
%2582:	br	 %2581 if.else if.then

BASIC BLOCK if.then
%2583:	store	 XXX unit
%2584:	br	 if.end15

BASIC BLOCK if.else
%2585:	call	 XXX %2576 GetKeyword
%2586:	icmp	 %2585 XXX
%2587:	br	 %2586 if.else4 if.then3

BASIC BLOCK if.then3
%2588:	store	 XXX unit
%2589:	br	 if.end14

BASIC BLOCK if.else4
%2590:	call	 XXX %2576 GetKeyword
%2591:	icmp	 %2590 XXX
%2592:	br	 %2591 if.else8 if.then7

BASIC BLOCK if.then7
%2593:	store	 XXX unit
%2594:	br	 if.end13

BASIC BLOCK if.else8
%2595:	call	 XXX %2576 GetKeyword
%2596:	icmp	 %2595 XXX
%2597:	br	 %2596 if.else12 if.then11

BASIC BLOCK if.then11
%2598:	store	 XXX unit
%2599:	br	 if.end

BASIC BLOCK if.else12
%2600:	br	 return

BASIC BLOCK if.end
%2601:	br	 if.end13

BASIC BLOCK if.end13
%2602:	br	 if.end14

BASIC BLOCK if.end14
%2603:	br	 if.end15

BASIC BLOCK if.end15
%2604:	load	 %2576
%2605:	store	 %2604 tp
%2606:	br	 return

BASIC BLOCK return
%2607:	phi	 XXX XXX
%2608:	ret	 %2607

FUNCTION cosinus

BASIC BLOCK entry
%2609:	alloca	 XXX
%2610:	store	 p1 %2609
%2611:	call	 XXX %2609 GetKeyword
%2612:	icmp	 %2611 XXX
%2613:	br	 %2612 if.end if.then

BASIC BLOCK if.then
%2614:	br	 return

BASIC BLOCK if.end
%2615:	call	 exp_ptr %2609 GetReal
%2616:	icmp	 %2615 XXX
%2617:	br	 %2616 if.end4 if.then3

BASIC BLOCK if.then3
%2618:	load	 %2609
%2619:	call	 %2618 XXX XXX parserro
%2620:	br	 return

BASIC BLOCK if.end4
%2621:	load	 %2609
%2622:	store	 %2621 pp2
%2623:	br	 return

BASIC BLOCK return
%2624:	phi	 XXX XXX XXX
%2625:	ret	 %2624

FUNCTION dacos

BASIC BLOCK entry
%2626:	call	 x acos
%2627:	fmul	 %2626 XXX
%2628:	fdiv	 %2627 XXX
%2629:	ret	 %2628

FUNCTION dasin

BASIC BLOCK entry
%2630:	call	 x asin
%2631:	fmul	 %2630 XXX
%2632:	fdiv	 %2631 XXX
%2633:	ret	 %2632

FUNCTION datan

BASIC BLOCK entry
%2634:	call	 x atan
%2635:	fmul	 %2634 XXX
%2636:	fdiv	 %2635 XXX
%2637:	ret	 %2636

FUNCTION dcos

BASIC BLOCK entry
%2638:	fmul	 x XXX
%2639:	fdiv	 %2638 XXX
%2640:	call	 %2639 cos
%2641:	ret	 %2640

FUNCTION degconv

BASIC BLOCK entry
%2642:	switch	 unit sw.default XXX sw.bb XXX sw.bb1

BASIC BLOCK sw.bb
%2643:	br	 sw.epilog

BASIC BLOCK sw.bb1
%2644:	load	 x_ptr
%2645:	fmul	 %2644 XXX
%2646:	store	 %2645 x_ptr
%2647:	br	 sw.epilog

BASIC BLOCK sw.default
%2648:	call	 XXX interror
%2649:	br	 sw.epilog

BASIC BLOCK sw.epilog
%2650:	ret	 XXX

FUNCTION doubmax

BASIC BLOCK entry
%2651:	fcmp	 a b
%2652:	br	 %2651 if.else if.then

BASIC BLOCK if.then
%2653:	br	 return

BASIC BLOCK if.else
%2654:	br	 return

BASIC BLOCK return
%2655:	phi	 a b
%2656:	ret	 %2655

FUNCTION doubmin

BASIC BLOCK entry
%2657:	fcmp	 a b
%2658:	br	 %2657 if.else if.then

BASIC BLOCK if.then
%2659:	br	 return

BASIC BLOCK if.else
%2660:	br	 return

BASIC BLOCK return
%2661:	phi	 a b
%2662:	ret	 %2661

FUNCTION GetUReal

BASIC BLOCK entry
%2663:	alloca	 XXX
%2664:	alloca	 XXX
%2665:	store	 p1 %2663
%2666:	call	 %2664 %2663 GetReal
%2667:	icmp	 %2666 XXX
%2668:	br	 %2667 if.end if.then

BASIC BLOCK if.then
%2669:	br	 return

BASIC BLOCK if.end
%2670:	load	 %2664
%2671:	fcmp	 %2670 XXX
%2672:	br	 %2671 if.end3 if.then2

BASIC BLOCK if.then2
%2673:	br	 return

BASIC BLOCK if.end3
%2674:	load	 %2664
%2675:	store	 %2674 ureal_ptr
%2676:	load	 %2663
%2677:	store	 %2676 pp2
%2678:	br	 return

BASIC BLOCK return
%2679:	phi	 XXX XXX XXX
%2680:	ret	 %2679

FUNCTION dsin

BASIC BLOCK entry
%2681:	fmul	 x XXX
%2682:	fdiv	 %2681 XXX
%2683:	call	 %2682 sin
%2684:	ret	 %2683

FUNCTION elemdef

BASIC BLOCK entry
%2685:	alloca	 XXX
%2686:	alloca	 XXX
%2687:	store	 p1 %2685
%2688:	call	 XXX malloc
%2689:	bitcast	 %2688
%2690:	store	 %2689 elem_ptr
%2691:	load	 elem_ptr
%2692:	icmp	 %2691 XXX
%2693:	br	 %2692 if.end if.then

BASIC BLOCK if.then
%2694:	load	 %2685
%2695:	call	 %2694 XXX XXX parserro
%2696:	call	 XXX interror
%2697:	br	 if.end

BASIC BLOCK if.end
%2698:	call	 XXX %2685 GetKeyword
%2699:	icmp	 %2698 XXX
%2700:	br	 %2699 if.end4 if.then3

BASIC BLOCK if.then3
%2701:	store	 XXX elem_ptr
%2702:	br	 return

BASIC BLOCK if.end4
%2703:	getelementptr	 %2686 XXX XXX
%2704:	call	 %2703 %2685 GetUName
%2705:	icmp	 %2704 XXX
%2706:	br	 %2705 if.end11 if.then7

BASIC BLOCK if.then7
%2707:	load	 elem_ptr
%2708:	getelementptr	 %2707 XXX XXX
%2709:	getelementptr	 %2708 XXX XXX
%2710:	getelementptr	 %2686 XXX XXX
%2711:	call	 %2709 %2710 strcpy
%2712:	load	 elem_ptr
%2713:	getelementptr	 %2712 XXX XXX
%2714:	store	 XXX %2713
%2715:	load	 %2685
%2716:	store	 %2715 pp2
%2717:	br	 return

BASIC BLOCK if.end11
%2718:	load	 %2685
%2719:	call	 %2718 %2685 elem_ptr sinelem
%2720:	icmp	 %2719 XXX
%2721:	br	 %2720 if.end15 if.then14

BASIC BLOCK if.then14
%2722:	load	 %2685
%2723:	store	 %2722 pp2
%2724:	br	 return

BASIC BLOCK if.end15
%2725:	load	 elem_ptr
%2726:	icmp	 %2725 XXX
%2727:	zext	 %2726
%2728:	br	 return

BASIC BLOCK return
%2729:	phi	 XXX XXX XXX XXX
%2730:	ret	 %2729

FUNCTION GetUName

BASIC BLOCK entry
%2731:	alloca	 XXX
%2732:	load	 tp
%2733:	store	 %2732 %2731
%2734:	call	 %2731 TapeGet
%2735:	br	 while.cond

BASIC BLOCK while.cond
%2736:	phi	 %2734 %2763
%2737:	phi	 XXX %2762
%2738:	call	 %2736 isletter
%2739:	icmp	 %2738 XXX
%2740:	br	 %2739 lor.lhs.false land.rhs

BASIC BLOCK lor.lhs.false
%2741:	sext	 %2736
%2742:	sext	 %2741
%2743:	call	 __ctype_b_loc
%2744:	load	 %2743
%2745:	getelementptr	 %2744 %2742
%2746:	load	 %2745
%2747:	zext	 %2746
%2748:	and	 %2747 XXX
%2749:	icmp	 %2748 XXX
%2750:	br	 %2749 land.end land.rhs

BASIC BLOCK land.rhs
%2751:	load	 %2731
%2752:	icmp	 %2751 XXX
%2753:	br	 land.end

BASIC BLOCK land.end
%2754:	phi	 XXX %2752
%2755:	br	 %2754 while.end while.body

BASIC BLOCK while.body
%2756:	icmp	 %2737 XXX
%2757:	br	 %2756 if.end if.then

BASIC BLOCK if.then
%2758:	sext	 %2737
%2759:	getelementptr	 word %2758
%2760:	store	 %2736 %2759
%2761:	br	 if.end

BASIC BLOCK if.end
%2762:	add	 %2737 XXX
%2763:	call	 %2731 TapeGet
%2764:	br	 while.cond

BASIC BLOCK while.end
%2765:	icmp	 %2737 XXX
%2766:	br	 %2765 if.else if.then13

BASIC BLOCK if.then13
%2767:	getelementptr	 word XXX
%2768:	store	 XXX %2767
%2769:	br	 if.end17

BASIC BLOCK if.else
%2770:	sext	 %2737
%2771:	getelementptr	 word %2770
%2772:	store	 XXX %2771
%2773:	br	 if.end17

BASIC BLOCK if.end17
%2774:	icmp	 %2737 XXX
%2775:	br	 %2774 if.end21 if.then20

BASIC BLOCK if.then20
%2776:	load	 tp
%2777:	call	 %2776 XXX word parserro
%2778:	br	 if.end21

BASIC BLOCK if.end21
%2779:	call	 word strlen
%2780:	icmp	 %2779 XXX
%2781:	br	 %2780 if.end26 if.then25

BASIC BLOCK if.then25
%2782:	br	 return

BASIC BLOCK if.end26
%2783:	getelementptr	 word XXX
%2784:	load	 %2783
%2785:	call	 %2784 isletter
%2786:	icmp	 %2785 XXX
%2787:	br	 %2786 if.end32 if.then31

BASIC BLOCK if.then31
%2788:	br	 return

BASIC BLOCK if.end32
%2789:	call	 word InKWords
%2790:	icmp	 %2789 XXX
%2791:	br	 %2790 if.end37 if.then36

BASIC BLOCK if.then36
%2792:	br	 return

BASIC BLOCK if.end37
%2793:	load	 %2731
%2794:	store	 %2793 tp
%2795:	br	 return

BASIC BLOCK return
%2796:	phi	 XXX XXX XXX XXX
%2797:	ret	 %2796

FUNCTION sinelem

BASIC BLOCK entry
%2798:	alloca	 XXX
%2799:	alloca	 XXX
%2800:	alloca	 XXX
%2801:	alloca	 XXX
%2802:	alloca	 XXX
%2803:	alloca	 XXX
%2804:	alloca	 XXX
%2805:	alloca	 XXX
%2806:	alloca	 XXX
%2807:	alloca	 XXX
%2808:	alloca	 XXX
%2809:	alloca	 XXX
%2810:	alloca	 XXX
%2811:	store	 p1 %2798
%2812:	load	 %2798
%2813:	call	 %2812 %2798 %2799 %2800 %2801 %2802 %2803 %2804 geomspec
%2814:	icmp	 %2813 XXX
%2815:	br	 %2814 if.end if.then

BASIC BLOCK if.then
%2816:	br	 return

BASIC BLOCK if.end
%2817:	icmp	 %2813 XXX
%2818:	br	 %2817 if.end4 if.then2

BASIC BLOCK if.then2
%2819:	call	 XXX XXX printf
%2820:	br	 return

BASIC BLOCK if.end4
%2821:	icmp	 %2813 XXX
%2822:	br	 %2821 if.end8 if.then6

BASIC BLOCK if.then6
%2823:	load	 %2798
%2824:	call	 %2823 %2798 %2805 %2806 %2807 %2808 polspec
%2825:	br	 if.end8

BASIC BLOCK if.end8
%2826:	phi	 %2824 %2813
%2827:	icmp	 %2826 XXX
%2828:	br	 %2827 if.end12 if.then10

BASIC BLOCK if.then10
%2829:	call	 XXX XXX printf
%2830:	br	 return

BASIC BLOCK if.end12
%2831:	icmp	 %2826 XXX
%2832:	br	 %2831 if.end15 if.then14

BASIC BLOCK if.then14
%2833:	store	 XXX %2805
%2834:	store	 XXX %2806
%2835:	store	 XXX %2807
%2836:	store	 XXX %2808
%2837:	br	 if.end15

BASIC BLOCK if.end15
%2838:	phi	 XXX %2826
%2839:	icmp	 %2838 XXX
%2840:	br	 %2839 if.end19 if.then17

BASIC BLOCK if.then17
%2841:	load	 %2798
%2842:	call	 %2841 %2798 %2809 %2810 portspec
%2843:	br	 if.end19

BASIC BLOCK if.end19
%2844:	phi	 %2842 %2838
%2845:	icmp	 %2844 XXX
%2846:	br	 %2845 if.end23 if.then21

BASIC BLOCK if.then21
%2847:	call	 XXX XXX printf
%2848:	br	 return

BASIC BLOCK if.end23
%2849:	icmp	 %2844 XXX
%2850:	br	 %2849 if.end26 if.then25

BASIC BLOCK if.then25
%2851:	store	 XXX %2809
%2852:	store	 XXX %2810
%2853:	br	 if.end26

BASIC BLOCK if.end26
%2854:	load	 elem_ptr
%2855:	getelementptr	 %2854 XXX XXX
%2856:	store	 XXX %2855
%2857:	load	 elem_ptr
%2858:	getelementptr	 %2857 XXX XXX
%2859:	getelementptr	 %2858 XXX XXX
%2860:	call	 %2859 XXX strcpy
%2861:	load	 %2799
%2862:	load	 elem_ptr
%2863:	getelementptr	 %2862 XXX XXX
%2864:	store	 %2861 %2863
%2865:	load	 %2800
%2866:	load	 elem_ptr
%2867:	getelementptr	 %2866 XXX XXX
%2868:	store	 %2865 %2867
%2869:	load	 %2801
%2870:	load	 elem_ptr
%2871:	getelementptr	 %2870 XXX XXX
%2872:	store	 %2869 %2871
%2873:	load	 %2802
%2874:	load	 elem_ptr
%2875:	getelementptr	 %2874 XXX XXX
%2876:	store	 %2873 %2875
%2877:	load	 %2803
%2878:	load	 elem_ptr
%2879:	getelementptr	 %2878 XXX XXX
%2880:	store	 %2877 %2879
%2881:	load	 %2804
%2882:	load	 elem_ptr
%2883:	getelementptr	 %2882 XXX XXX
%2884:	store	 %2881 %2883
%2885:	load	 elem_ptr
%2886:	getelementptr	 %2885 XXX XXX
%2887:	store	 XXX %2886
%2888:	load	 elem_ptr
%2889:	getelementptr	 %2888 XXX XXX
%2890:	store	 XXX %2889
%2891:	load	 elem_ptr
%2892:	getelementptr	 %2891 XXX XXX
%2893:	store	 XXX %2892
%2894:	load	 elem_ptr
%2895:	getelementptr	 %2894 XXX XXX
%2896:	store	 XXX %2895
%2897:	load	 elem_ptr
%2898:	getelementptr	 %2897 XXX XXX
%2899:	store	 XXX %2898
%2900:	load	 elem_ptr
%2901:	getelementptr	 %2900 XXX XXX
%2902:	store	 XXX %2901
%2903:	load	 elem_ptr
%2904:	getelementptr	 %2903 XXX XXX
%2905:	store	 XXX %2904
%2906:	load	 elem_ptr
%2907:	getelementptr	 %2906 XXX XXX
%2908:	store	 XXX %2907
%2909:	load	 %2805
%2910:	load	 elem_ptr
%2911:	getelementptr	 %2910 XXX XXX
%2912:	store	 %2909 %2911
%2913:	load	 %2806
%2914:	load	 elem_ptr
%2915:	getelementptr	 %2914 XXX XXX
%2916:	store	 %2913 %2915
%2917:	load	 %2807
%2918:	load	 elem_ptr
%2919:	getelementptr	 %2918 XXX XXX
%2920:	store	 %2917 %2919
%2921:	load	 %2808
%2922:	load	 elem_ptr
%2923:	getelementptr	 %2922 XXX XXX
%2924:	store	 %2921 %2923
%2925:	load	 elem_ptr
%2926:	getelementptr	 %2925 XXX XXX
%2927:	store	 XXX %2926
%2928:	load	 elem_ptr
%2929:	getelementptr	 %2928 XXX XXX
%2930:	store	 XXX %2929
%2931:	load	 %2809
%2932:	load	 elem_ptr
%2933:	getelementptr	 %2932 XXX XXX
%2934:	store	 %2931 %2933
%2935:	load	 %2810
%2936:	load	 elem_ptr
%2937:	getelementptr	 %2936 XXX XXX
%2938:	store	 %2935 %2937
%2939:	load	 %2798
%2940:	store	 %2939 pp2
%2941:	br	 return

BASIC BLOCK return
%2942:	phi	 XXX XXX XXX XXX XXX
%2943:	ret	 %2942

FUNCTION emsginit

BASIC BLOCK entry
%2944:	br	 for.cond

BASIC BLOCK for.cond
%2945:	phi	 XXX %2953
%2946:	icmp	 %2945 XXX
%2947:	br	 %2946 for.end for.body

BASIC BLOCK for.body
%2948:	sext	 %2945
%2949:	getelementptr	 ErrorMessages XXX %2948
%2950:	getelementptr	 %2949 XXX XXX
%2951:	store	 XXX %2950
%2952:	br	 for.inc

BASIC BLOCK for.inc
%2953:	add	 %2945 XXX
%2954:	br	 for.cond

BASIC BLOCK for.end
%2955:	call	 XXX XXX strcpy
%2956:	call	 XXX XXX strcpy
%2957:	call	 XXX XXX strcpy
%2958:	call	 XXX XXX strcpy
%2959:	call	 XXX XXX strcpy
%2960:	call	 XXX XXX strcpy
%2961:	call	 XXX XXX strcpy
%2962:	call	 XXX XXX strcpy
%2963:	call	 XXX XXX strcpy
%2964:	call	 XXX XXX strcpy
%2965:	call	 XXX XXX strcpy
%2966:	call	 XXX XXX strcpy
%2967:	call	 XXX XXX strcpy
%2968:	call	 XXX XXX strcpy
%2969:	call	 XXX XXX strcpy
%2970:	call	 XXX XXX strcpy
%2971:	call	 XXX XXX strcpy
%2972:	call	 XXX XXX strcpy
%2973:	call	 XXX XXX strcpy
%2974:	call	 XXX XXX strcpy
%2975:	call	 XXX XXX strcpy
%2976:	call	 XXX XXX strcpy
%2977:	call	 XXX XXX strcpy
%2978:	call	 XXX XXX strcpy
%2979:	call	 XXX XXX strcpy
%2980:	call	 XXX XXX strcpy
%2981:	call	 XXX XXX strcpy
%2982:	call	 XXX XXX strcpy
%2983:	call	 XXX XXX strcpy
%2984:	call	 XXX XXX strcpy
%2985:	call	 XXX XXX strcpy
%2986:	call	 XXX XXX strcpy
%2987:	call	 XXX XXX strcpy
%2988:	call	 XXX XXX strcpy
%2989:	call	 XXX XXX strcpy
%2990:	call	 XXX XXX strcpy
%2991:	call	 XXX XXX strcpy
%2992:	call	 XXX XXX strcpy
%2993:	call	 XXX XXX strcpy
%2994:	call	 XXX XXX strcpy
%2995:	call	 XXX XXX strcpy
%2996:	call	 XXX XXX strcpy
%2997:	call	 XXX XXX strcpy
%2998:	call	 XXX XXX strcpy
%2999:	call	 XXX XXX strcpy
%3000:	call	 XXX XXX strcpy
%3001:	call	 XXX XXX strcpy
%3002:	call	 XXX XXX strcpy
%3003:	call	 XXX XXX strcpy
%3004:	call	 XXX XXX strcpy
%3005:	call	 XXX XXX strcpy
%3006:	call	 XXX XXX strcpy
%3007:	call	 XXX XXX strcpy
%3008:	call	 XXX XXX strcpy
%3009:	call	 XXX XXX strcpy
%3010:	call	 XXX XXX strcpy
%3011:	call	 XXX XXX strcpy
%3012:	call	 XXX XXX strcpy
%3013:	call	 XXX XXX strcpy
%3014:	call	 XXX XXX strcpy
%3015:	call	 XXX XXX strcpy
%3016:	call	 XXX XXX strcpy
%3017:	call	 XXX XXX strcpy
%3018:	call	 XXX XXX strcpy
%3019:	call	 XXX XXX strcpy
%3020:	call	 XXX XXX strcpy
%3021:	call	 XXX XXX strcpy
%3022:	call	 XXX XXX strcpy
%3023:	call	 XXX XXX strcpy
%3024:	call	 XXX XXX strcpy
%3025:	call	 XXX XXX strcpy
%3026:	call	 XXX XXX strcpy
%3027:	call	 XXX XXX strcpy
%3028:	call	 XXX XXX strcpy
%3029:	call	 XXX XXX strcpy
%3030:	call	 XXX XXX strcpy
%3031:	call	 XXX XXX strcpy
%3032:	call	 XXX XXX strcpy
%3033:	call	 XXX XXX strcpy
%3034:	call	 XXX XXX strcpy
%3035:	call	 XXX XXX strcpy
%3036:	call	 XXX XXX strcpy
%3037:	call	 XXX XXX strcpy
%3038:	call	 XXX XXX strcpy
%3039:	call	 XXX XXX strcpy
%3040:	call	 XXX XXX strcpy
%3041:	call	 XXX XXX strcpy
%3042:	call	 XXX XXX strcpy
%3043:	call	 XXX XXX strcpy
%3044:	call	 XXX XXX strcpy
%3045:	call	 XXX XXX strcpy
%3046:	call	 XXX XXX strcpy
%3047:	call	 XXX XXX strcpy
%3048:	call	 XXX XXX strcpy
%3049:	call	 XXX XXX strcpy
%3050:	call	 XXX XXX strcpy
%3051:	call	 XXX XXX strcpy
%3052:	call	 XXX XXX strcpy
%3053:	call	 XXX XXX strcpy
%3054:	call	 XXX XXX strcpy
%3055:	ret	

FUNCTION EndOfTape

BASIC BLOCK entry
%3056:	load	 p
%3057:	icmp	 %3056 XXX
%3058:	br	 %3057 if.end if.then

BASIC BLOCK if.then
%3059:	br	 return

BASIC BLOCK if.end
%3060:	br	 return

BASIC BLOCK return
%3061:	phi	 XXX XXX
%3062:	ret	 %3061

FUNCTION extmod

BASIC BLOCK entry
%3063:	alloca	 XXX
%3064:	store	 p1 %3063
%3065:	call	 XXX %3063 GetKeyword
%3066:	icmp	 %3065 XXX
%3067:	br	 %3066 if.end if.then

BASIC BLOCK if.then
%3068:	br	 return

BASIC BLOCK if.end
%3069:	load	 %3063
%3070:	store	 %3069 pp2
%3071:	br	 return

BASIC BLOCK return
%3072:	phi	 XXX XXX
%3073:	ret	 %3072

FUNCTION fixgramp

BASIC BLOCK entry
%3074:	alloca	 XXX
%3075:	alloca	 XXX
%3076:	alloca	 XXX
%3077:	alloca	 XXX
%3078:	alloca	 XXX
%3079:	alloca	 XXX
%3080:	getelementptr	 g XXX XXX
%3081:	load	 %3080
%3082:	store	 %3081 %3074
%3083:	getelementptr	 g XXX XXX
%3084:	load	 %3083
%3085:	store	 %3084 %3075
%3086:	getelementptr	 g XXX XXX
%3087:	load	 %3086
%3088:	store	 %3087 %3076
%3089:	getelementptr	 g XXX XXX
%3090:	load	 %3089
%3091:	store	 %3090 %3077
%3092:	getelementptr	 g XXX XXX
%3093:	load	 %3092
%3094:	store	 %3093 %3078
%3095:	getelementptr	 g XXX XXX
%3096:	load	 %3095
%3097:	store	 %3096 %3079
%3098:	getelementptr	 g XXX XXX
%3099:	load	 %3098
%3100:	getelementptr	 g XXX XXX
%3101:	load	 %3100
%3102:	switch	 %3101 sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb7

BASIC BLOCK sw.bb
%3103:	load	 %3074
%3104:	fcmp	 %3103 XXX
%3105:	br	 %3104 if.end if.then

BASIC BLOCK if.then
%3106:	store	 XXX %3074
%3107:	br	 if.end

BASIC BLOCK if.end
%3108:	call	 %3074 %3099 linconv
%3109:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3110:	call	 %3075 %3099 linconv
%3111:	call	 %3076 %3099 linconv
%3112:	call	 %3077 %3099 linconv
%3113:	call	 %3078 %3099 linconv
%3114:	call	 %3079 %3099 linconv
%3115:	br	 sw.epilog

BASIC BLOCK sw.bb7
%3116:	call	 XXX printf
%3117:	call	 XXX exit
%3118:	unreachable	

BASIC BLOCK sw.default
%3119:	call	 XXX interror
%3120:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3121:	load	 %3074
%3122:	getelementptr	 g XXX XXX
%3123:	store	 %3121 %3122
%3124:	load	 %3075
%3125:	getelementptr	 g XXX XXX
%3126:	store	 %3124 %3125
%3127:	load	 %3076
%3128:	getelementptr	 g XXX XXX
%3129:	store	 %3127 %3128
%3130:	load	 %3077
%3131:	getelementptr	 g XXX XXX
%3132:	store	 %3130 %3131
%3133:	load	 %3078
%3134:	getelementptr	 g XXX XXX
%3135:	store	 %3133 %3134
%3136:	load	 %3079
%3137:	getelementptr	 g XXX XXX
%3138:	store	 %3136 %3137
%3139:	getelementptr	 g XXX XXX
%3140:	store	 XXX %3139
%3141:	ret	 XXX

FUNCTION linconv

BASIC BLOCK entry
%3142:	switch	 unit sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb2

BASIC BLOCK sw.bb
%3143:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3144:	load	 x_ptr
%3145:	call	 %3144 sqrt
%3146:	store	 %3145 x_ptr
%3147:	br	 sw.epilog

BASIC BLOCK sw.bb2
%3148:	load	 x_ptr
%3149:	fdiv	 %3148 XXX
%3150:	call	 XXX %3149 pow
%3151:	store	 %3150 x_ptr
%3152:	br	 sw.epilog

BASIC BLOCK sw.default
%3153:	call	 XXX interror
%3154:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3155:	ret	 XXX

FUNCTION fixgrpha

BASIC BLOCK entry
%3156:	getelementptr	 g XXX XXX
%3157:	load	 %3156
%3158:	switch	 %3157 sw.default XXX sw.bb XXX sw.bb3 XXX sw.bb14 XXX sw.bb16 XXX sw.bb30

BASIC BLOCK sw.bb
%3159:	getelementptr	 g XXX XXX
%3160:	load	 %3159
%3161:	fcmp	 %3160 XXX
%3162:	br	 %3161 if.end if.then

BASIC BLOCK if.then
%3163:	getelementptr	 g XXX XXX
%3164:	store	 XXX %3163
%3165:	br	 if.end

BASIC BLOCK if.end
%3166:	getelementptr	 g XXX XXX
%3167:	getelementptr	 g XXX XXX
%3168:	load	 %3167
%3169:	call	 %3166 %3168 degconv
%3170:	br	 sw.epilog

BASIC BLOCK sw.bb3
%3171:	getelementptr	 g XXX XXX
%3172:	getelementptr	 g XXX XXX
%3173:	load	 %3172
%3174:	call	 %3171 %3173 degconv
%3175:	getelementptr	 g XXX XXX
%3176:	getelementptr	 g XXX XXX
%3177:	load	 %3176
%3178:	call	 %3175 %3177 degconv
%3179:	getelementptr	 g XXX XXX
%3180:	getelementptr	 g XXX XXX
%3181:	load	 %3180
%3182:	call	 %3179 %3181 degconv
%3183:	getelementptr	 g XXX XXX
%3184:	getelementptr	 g XXX XXX
%3185:	load	 %3184
%3186:	call	 %3183 %3185 degconv
%3187:	getelementptr	 g XXX XXX
%3188:	getelementptr	 g XXX XXX
%3189:	load	 %3188
%3190:	call	 %3187 %3189 degconv
%3191:	br	 sw.epilog

BASIC BLOCK sw.bb14
%3192:	call	 XXX printf
%3193:	call	 XXX exit
%3194:	unreachable	

BASIC BLOCK sw.bb16
%3195:	getelementptr	 g XXX XXX
%3196:	load	 %3195
%3197:	icmp	 %3196 XXX
%3198:	br	 %3197 if.end22 if.then18

BASIC BLOCK if.then18
%3199:	getelementptr	 g XXX XXX
%3200:	getelementptr	 g XXX XXX
%3201:	load	 %3200
%3202:	call	 %3199 %3201 degconv
%3203:	getelementptr	 g XXX XXX
%3204:	getelementptr	 g XXX XXX
%3205:	load	 %3204
%3206:	call	 %3203 %3205 degconv
%3207:	br	 if.end22

BASIC BLOCK if.end22
%3208:	getelementptr	 g XXX XXX
%3209:	load	 %3208
%3210:	icmp	 %3209 XXX
%3211:	br	 %3210 if.end29 if.then24

BASIC BLOCK if.then24
%3212:	getelementptr	 g XXX XXX
%3213:	getelementptr	 g XXX XXX
%3214:	load	 %3213
%3215:	call	 %3212 %3214 degconv
%3216:	getelementptr	 g XXX XXX
%3217:	getelementptr	 g XXX XXX
%3218:	load	 %3217
%3219:	call	 %3216 %3218 degconv
%3220:	br	 if.end29

BASIC BLOCK if.end29
%3221:	br	 sw.epilog

BASIC BLOCK sw.bb30
%3222:	getelementptr	 g XXX XXX
%3223:	getelementptr	 g XXX XXX
%3224:	load	 %3223
%3225:	call	 %3222 %3224 degconv
%3226:	getelementptr	 g XXX XXX
%3227:	getelementptr	 g XXX XXX
%3228:	load	 %3227
%3229:	call	 %3226 %3228 degconv
%3230:	br	 sw.epilog

BASIC BLOCK sw.default
%3231:	call	 XXX interror
%3232:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3233:	getelementptr	 g XXX XXX
%3234:	store	 XXX %3233
%3235:	ret	 XXX

FUNCTION fixnodor

BASIC BLOCK entry
%3236:	getelementptr	 node_ptr XXX XXX
%3237:	load	 %3236
%3238:	icmp	 %3237 XXX
%3239:	br	 %3238 if.else if.then

BASIC BLOCK if.then
%3240:	getelementptr	 node_ptr XXX XXX
%3241:	store	 XXX %3240
%3242:	getelementptr	 node_ptr XXX XXX
%3243:	store	 XXX %3242
%3244:	getelementptr	 node_ptr XXX XXX
%3245:	store	 XXX %3244
%3246:	getelementptr	 node_ptr XXX XXX
%3247:	store	 XXX %3246
%3248:	br	 if.end10

BASIC BLOCK if.else
%3249:	getelementptr	 node_ptr XXX XXX
%3250:	load	 %3249
%3251:	icmp	 %3250 XXX
%3252:	br	 %3251 if.end if.then3

BASIC BLOCK if.then3
%3253:	getelementptr	 node_ptr XXX XXX
%3254:	load	 %3253
%3255:	fmul	 %3254 XXX
%3256:	store	 %3255 %3253
%3257:	getelementptr	 node_ptr XXX XXX
%3258:	load	 %3257
%3259:	fmul	 %3258 XXX
%3260:	store	 %3259 %3257
%3261:	getelementptr	 node_ptr XXX XXX
%3262:	load	 %3261
%3263:	fmul	 %3262 XXX
%3264:	store	 %3263 %3261
%3265:	getelementptr	 node_ptr XXX XXX
%3266:	store	 XXX %3265
%3267:	br	 if.end

BASIC BLOCK if.end
%3268:	br	 if.end10

BASIC BLOCK if.end10
%3269:	ret	 XXX

FUNCTION fixport

BASIC BLOCK entry
%3270:	alloca	 XXX
%3271:	alloca	 XXX
%3272:	getelementptr	 elem_ptr XXX XXX
%3273:	load	 %3272
%3274:	br	 while.cond

BASIC BLOCK while.cond
%3275:	phi	 %3273 %3352
%3276:	icmp	 %3275 XXX
%3277:	br	 %3276 while.end while.body

BASIC BLOCK while.body
%3278:	getelementptr	 %3275 XXX XXX
%3279:	load	 %3278
%3280:	store	 %3279 %3270
%3281:	getelementptr	 %3275 XXX XXX
%3282:	load	 %3281
%3283:	call	 %3270 %3282 linconv
%3284:	load	 %3270
%3285:	getelementptr	 %3275 XXX XXX
%3286:	store	 %3284 %3285
%3287:	getelementptr	 %3275 XXX XXX
%3288:	load	 %3287
%3289:	store	 %3288 %3271
%3290:	getelementptr	 %3275 XXX XXX
%3291:	load	 %3290
%3292:	call	 %3271 %3291 degconv
%3293:	load	 %3271
%3294:	getelementptr	 %3275 XXX XXX
%3295:	store	 %3293 %3294
%3296:	getelementptr	 %3275 XXX XXX
%3297:	load	 %3296
%3298:	store	 %3297 %3271
%3299:	getelementptr	 %3275 XXX XXX
%3300:	load	 %3299
%3301:	call	 %3271 %3300 degconv
%3302:	load	 %3271
%3303:	getelementptr	 %3275 XXX XXX
%3304:	store	 %3302 %3303
%3305:	getelementptr	 %3275 XXX XXX
%3306:	load	 %3305
%3307:	store	 %3306 %3271
%3308:	getelementptr	 %3275 XXX XXX
%3309:	load	 %3308
%3310:	call	 %3271 %3309 degconv
%3311:	load	 %3271
%3312:	getelementptr	 %3275 XXX XXX
%3313:	store	 %3311 %3312
%3314:	getelementptr	 elem_ptr XXX XXX
%3315:	load	 %3314
%3316:	icmp	 %3315 XXX
%3317:	br	 %3316 if.end17 if.then

BASIC BLOCK if.then
%3318:	getelementptr	 %3275 XXX XXX
%3319:	load	 %3318
%3320:	icmp	 %3319 XXX
%3321:	br	 %3320 if.end if.then10

BASIC BLOCK if.then10
%3322:	getelementptr	 elem_ptr XXX XXX
%3323:	load	 %3322
%3324:	getelementptr	 %3275 XXX XXX
%3325:	store	 %3323 %3324
%3326:	getelementptr	 elem_ptr XXX XXX
%3327:	load	 %3326
%3328:	getelementptr	 %3275 XXX XXX
%3329:	store	 %3327 %3328
%3330:	br	 if.end

BASIC BLOCK if.end
%3331:	getelementptr	 %3275 XXX XXX
%3332:	load	 %3331
%3333:	store	 %3332 %3271
%3334:	getelementptr	 %3275 XXX XXX
%3335:	load	 %3334
%3336:	call	 %3271 %3335 degconv
%3337:	load	 %3271
%3338:	getelementptr	 %3275 XXX XXX
%3339:	store	 %3337 %3338
%3340:	br	 if.end17

BASIC BLOCK if.end17
%3341:	getelementptr	 %3275 XXX XXX
%3342:	store	 XXX %3341
%3343:	getelementptr	 %3275 XXX XXX
%3344:	store	 XXX %3343
%3345:	getelementptr	 %3275 XXX XXX
%3346:	store	 XXX %3345
%3347:	getelementptr	 %3275 XXX XXX
%3348:	store	 XXX %3347
%3349:	getelementptr	 %3275 XXX XXX
%3350:	store	 XXX %3349
%3351:	getelementptr	 %3275 XXX XXX
%3352:	load	 %3351
%3353:	br	 while.cond

BASIC BLOCK while.end
%3354:	ret	 XXX

FUNCTION fixselem

BASIC BLOCK entry
%3355:	alloca	 XXX
%3356:	alloca	 XXX
%3357:	alloca	 XXX
%3358:	getelementptr	 elem_ptr XXX XXX
%3359:	load	 %3358
%3360:	store	 %3359 %3355
%3361:	getelementptr	 elem_ptr XXX XXX
%3362:	load	 %3361
%3363:	getelementptr	 elem_ptr XXX XXX
%3364:	load	 %3363
%3365:	store	 %3364 %3356
%3366:	getelementptr	 elem_ptr XXX XXX
%3367:	load	 %3366
%3368:	store	 %3367 %3357
%3369:	getelementptr	 elem_ptr XXX XXX
%3370:	load	 %3369
%3371:	getelementptr	 elem_ptr XXX XXX
%3372:	load	 %3371
%3373:	switch	 %3372 sw.default XXX sw.bb XXX sw.bb4

BASIC BLOCK sw.bb
%3374:	call	 %3356 %3370 mmconv
%3375:	call	 %3357 %3370 mmconv
%3376:	load	 %3356
%3377:	load	 %3356
%3378:	fmul	 %3376 %3377
%3379:	load	 %3357
%3380:	load	 %3357
%3381:	fmul	 %3379 %3380
%3382:	fadd	 %3378 %3381
%3383:	call	 %3382 sqrt
%3384:	store	 %3383 %3355
%3385:	br	 sw.epilog

BASIC BLOCK sw.bb4
%3386:	call	 %3355 %3362 mmconv
%3387:	load	 %3355
%3388:	fmul	 XXX %3387
%3389:	store	 %3388 %3356
%3390:	load	 %3355
%3391:	fmul	 XXX %3390
%3392:	store	 %3391 %3357
%3393:	br	 sw.epilog

BASIC BLOCK sw.default
%3394:	call	 XXX interror
%3395:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3396:	getelementptr	 elem_ptr XXX XXX
%3397:	load	 %3396
%3398:	icmp	 %3397 XXX
%3399:	br	 %3398 if.end13 if.then

BASIC BLOCK if.then
%3400:	call	 XXX malloc
%3401:	bitcast	 %3400
%3402:	icmp	 %3401 XXX
%3403:	br	 %3402 if.end if.then10

BASIC BLOCK if.then10
%3404:	call	 XXX XXX printf
%3405:	call	 XXX interror
%3406:	br	 if.end

BASIC BLOCK if.end
%3407:	getelementptr	 %3401 XXX XXX
%3408:	store	 XXX %3407
%3409:	getelementptr	 %3401 XXX XXX
%3410:	store	 XXX %3409
%3411:	getelementptr	 %3401 XXX XXX
%3412:	store	 XXX %3411
%3413:	getelementptr	 %3401 XXX XXX
%3414:	store	 XXX %3413
%3415:	getelementptr	 %3401 XXX XXX
%3416:	store	 XXX %3415
%3417:	getelementptr	 %3401 XXX XXX
%3418:	store	 XXX %3417
%3419:	getelementptr	 %3401 XXX XXX
%3420:	store	 XXX %3419
%3421:	getelementptr	 %3401 XXX XXX
%3422:	store	 XXX %3421
%3423:	getelementptr	 %3401 XXX XXX
%3424:	store	 XXX %3423
%3425:	getelementptr	 %3401 XXX XXX
%3426:	store	 XXX %3425
%3427:	getelementptr	 %3401 XXX XXX
%3428:	store	 XXX %3427
%3429:	getelementptr	 %3401 XXX XXX
%3430:	store	 XXX %3429
%3431:	getelementptr	 %3401 XXX XXX
%3432:	store	 XXX %3431
%3433:	getelementptr	 elem_ptr XXX XXX
%3434:	store	 XXX %3433
%3435:	getelementptr	 elem_ptr XXX XXX
%3436:	store	 %3401 %3435
%3437:	br	 if.end13

BASIC BLOCK if.end13
%3438:	call	 elem_ptr fixport
%3439:	load	 %3355
%3440:	getelementptr	 elem_ptr XXX XXX
%3441:	store	 %3439 %3440
%3442:	getelementptr	 elem_ptr XXX XXX
%3443:	store	 XXX %3442
%3444:	load	 %3356
%3445:	getelementptr	 elem_ptr XXX XXX
%3446:	store	 %3444 %3445
%3447:	load	 %3357
%3448:	getelementptr	 elem_ptr XXX XXX
%3449:	store	 %3447 %3448
%3450:	getelementptr	 elem_ptr XXX XXX
%3451:	store	 XXX %3450
%3452:	ret	 XXX

FUNCTION mmconv

BASIC BLOCK entry
%3453:	switch	 unit sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb2 XXX sw.bb4

BASIC BLOCK sw.bb
%3454:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3455:	load	 x_ptr
%3456:	fmul	 %3455 XXX
%3457:	store	 %3456 x_ptr
%3458:	br	 sw.epilog

BASIC BLOCK sw.bb2
%3459:	load	 x_ptr
%3460:	fmul	 %3459 XXX
%3461:	store	 %3460 x_ptr
%3462:	br	 sw.epilog

BASIC BLOCK sw.bb4
%3463:	load	 x_ptr
%3464:	fmul	 %3463 XXX
%3465:	store	 %3464 x_ptr
%3466:	br	 sw.epilog

BASIC BLOCK sw.default
%3467:	call	 XXX interror
%3468:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3469:	ret	 XXX

FUNCTION fixsgrel

BASIC BLOCK entry
%3470:	getelementptr	 group_ptr XXX XXX
%3471:	load	 %3470
%3472:	getelementptr	 group_ptr XXX XXX
%3473:	load	 %3472
%3474:	call	 %3473 fixselem
%3475:	call	 %3471 fixsgrid
%3476:	getelementptr	 %3471 XXX XXX
%3477:	store	 XXX %3476
%3478:	getelementptr	 %3471 XXX XXX
%3479:	load	 %3478
%3480:	switch	 %3479 sw.epilog289 XXX sw.bb XXX sw.bb37 XXX sw.bb83 XXX sw.bb108

BASIC BLOCK sw.bb
%3481:	getelementptr	 %3471 XXX XXX
%3482:	load	 %3481
%3483:	fcmp	 %3482 XXX
%3484:	br	 %3483 if.else13 if.then

BASIC BLOCK if.then
%3485:	getelementptr	 group_ptr XXX XXX
%3486:	load	 %3485
%3487:	getelementptr	 %3486 XXX XXX
%3488:	load	 %3487
%3489:	icmp	 %3488 XXX
%3490:	br	 %3489 if.else if.then4

BASIC BLOCK if.then4
%3491:	getelementptr	 %3473 XXX XXX
%3492:	load	 %3491
%3493:	getelementptr	 %3471 XXX XXX
%3494:	store	 %3492 %3493
%3495:	getelementptr	 %3473 XXX XXX
%3496:	load	 %3495
%3497:	getelementptr	 %3471 XXX XXX
%3498:	store	 %3496 %3497
%3499:	br	 if.end

BASIC BLOCK if.else
%3500:	getelementptr	 %3473 XXX XXX
%3501:	load	 %3500
%3502:	getelementptr	 %3473 XXX XXX
%3503:	load	 %3502
%3504:	call	 %3501 %3503 doubmax
%3505:	getelementptr	 %3471 XXX XXX
%3506:	store	 %3504 %3505
%3507:	getelementptr	 %3473 XXX XXX
%3508:	load	 %3507
%3509:	getelementptr	 %3473 XXX XXX
%3510:	load	 %3509
%3511:	call	 %3508 %3510 doubmax
%3512:	getelementptr	 %3471 XXX XXX
%3513:	store	 %3511 %3512
%3514:	br	 if.end

BASIC BLOCK if.end
%3515:	br	 if.end36

BASIC BLOCK if.else13
%3516:	getelementptr	 group_ptr XXX XXX
%3517:	load	 %3516
%3518:	getelementptr	 %3517 XXX XXX
%3519:	load	 %3518
%3520:	icmp	 %3519 XXX
%3521:	br	 %3520 if.else24 if.then17

BASIC BLOCK if.then17
%3522:	getelementptr	 %3471 XXX XXX
%3523:	load	 %3522
%3524:	getelementptr	 %3473 XXX XXX
%3525:	load	 %3524
%3526:	fcmp	 %3523 %3525
%3527:	br	 %3526 if.end23 if.then21

BASIC BLOCK if.then21
%3528:	getelementptr	 group_ptr XXX XXX
%3529:	getelementptr	 %3528 XXX XXX
%3530:	call	 XXX XXX %3529 printf
%3531:	br	 if.end23

BASIC BLOCK if.end23
%3532:	br	 if.end35

BASIC BLOCK if.else24
%3533:	getelementptr	 %3471 XXX XXX
%3534:	load	 %3533
%3535:	getelementptr	 %3473 XXX XXX
%3536:	load	 %3535
%3537:	getelementptr	 %3473 XXX XXX
%3538:	load	 %3537
%3539:	call	 %3536 %3538 doubmax
%3540:	fcmp	 %3534 %3539
%3541:	br	 %3540 if.end34 if.then30

BASIC BLOCK if.then30
%3542:	getelementptr	 group_ptr XXX XXX
%3543:	getelementptr	 %3542 XXX XXX
%3544:	call	 XXX XXX %3543 printf
%3545:	br	 if.end34

BASIC BLOCK if.end34
%3546:	br	 if.end35

BASIC BLOCK if.end35
%3547:	br	 if.end36

BASIC BLOCK if.end36
%3548:	getelementptr	 %3471 XXX XXX
%3549:	store	 XXX %3548
%3550:	br	 sw.epilog289

BASIC BLOCK sw.bb37
%3551:	getelementptr	 %3471 XXX XXX
%3552:	load	 %3551
%3553:	fcmp	 %3552 XXX
%3554:	br	 %3553 if.else55 if.then40

BASIC BLOCK if.then40
%3555:	getelementptr	 group_ptr XXX XXX
%3556:	load	 %3555
%3557:	getelementptr	 %3556 XXX XXX
%3558:	load	 %3557
%3559:	icmp	 %3558 XXX
%3560:	br	 %3559 if.else49 if.then44

BASIC BLOCK if.then44
%3561:	getelementptr	 %3473 XXX XXX
%3562:	load	 %3561
%3563:	getelementptr	 %3471 XXX XXX
%3564:	store	 %3562 %3563
%3565:	getelementptr	 %3473 XXX XXX
%3566:	load	 %3565
%3567:	getelementptr	 %3471 XXX XXX
%3568:	store	 %3566 %3567
%3569:	br	 if.end54

BASIC BLOCK if.else49
%3570:	getelementptr	 %3473 XXX XXX
%3571:	load	 %3570
%3572:	getelementptr	 %3471 XXX XXX
%3573:	store	 %3571 %3572
%3574:	getelementptr	 %3473 XXX XXX
%3575:	load	 %3574
%3576:	getelementptr	 %3471 XXX XXX
%3577:	store	 %3575 %3576
%3578:	br	 if.end54

BASIC BLOCK if.end54
%3579:	br	 if.end81

BASIC BLOCK if.else55
%3580:	getelementptr	 group_ptr XXX XXX
%3581:	load	 %3580
%3582:	getelementptr	 %3581 XXX XXX
%3583:	load	 %3582
%3584:	icmp	 %3583 XXX
%3585:	br	 %3584 if.else68 if.then59

BASIC BLOCK if.then59
%3586:	getelementptr	 %3471 XXX XXX
%3587:	load	 %3586
%3588:	getelementptr	 %3473 XXX XXX
%3589:	load	 %3588
%3590:	fcmp	 %3587 %3589
%3591:	br	 %3590 if.end67 if.then63

BASIC BLOCK if.then63
%3592:	getelementptr	 group_ptr XXX XXX
%3593:	getelementptr	 %3592 XXX XXX
%3594:	call	 XXX XXX %3593 printf
%3595:	br	 if.end67

BASIC BLOCK if.end67
%3596:	br	 if.end80

BASIC BLOCK if.else68
%3597:	getelementptr	 %3471 XXX XXX
%3598:	load	 %3597
%3599:	getelementptr	 %3473 XXX XXX
%3600:	load	 %3599
%3601:	fcmp	 %3598 %3600
%3602:	br	 %3601 lor.lhs.false if.then75

BASIC BLOCK lor.lhs.false
%3603:	getelementptr	 %3471 XXX XXX
%3604:	load	 %3603
%3605:	getelementptr	 %3473 XXX XXX
%3606:	load	 %3605
%3607:	fcmp	 %3604 %3606
%3608:	br	 %3607 if.end79 if.then75

BASIC BLOCK if.then75
%3609:	getelementptr	 group_ptr XXX XXX
%3610:	getelementptr	 %3609 XXX XXX
%3611:	call	 XXX XXX %3610 printf
%3612:	br	 if.end79

BASIC BLOCK if.end79
%3613:	br	 if.end80

BASIC BLOCK if.end80
%3614:	br	 if.end81

BASIC BLOCK if.end81
%3615:	getelementptr	 %3471 XXX XXX
%3616:	store	 XXX %3615
%3617:	br	 sw.epilog289

BASIC BLOCK sw.bb83
%3618:	getelementptr	 %3473 XXX XXX
%3619:	load	 %3618
%3620:	icmp	 %3619 XXX
%3621:	br	 %3620 if.end89 if.then85

BASIC BLOCK if.then85
%3622:	getelementptr	 group_ptr XXX XXX
%3623:	getelementptr	 %3622 XXX XXX
%3624:	call	 XXX XXX %3623 printf
%3625:	call	 XXX exit
%3626:	unreachable	

BASIC BLOCK if.end89
%3627:	getelementptr	 %3471 XXX XXX
%3628:	load	 %3627
%3629:	fcmp	 %3628 XXX
%3630:	br	 %3629 if.else97 if.then92

BASIC BLOCK if.then92
%3631:	getelementptr	 %3473 XXX XXX
%3632:	load	 %3631
%3633:	getelementptr	 %3471 XXX XXX
%3634:	store	 %3632 %3633
%3635:	getelementptr	 %3473 XXX XXX
%3636:	load	 %3635
%3637:	getelementptr	 %3471 XXX XXX
%3638:	store	 %3636 %3637
%3639:	br	 if.end106

BASIC BLOCK if.else97
%3640:	getelementptr	 %3471 XXX XXX
%3641:	load	 %3640
%3642:	getelementptr	 %3473 XXX XXX
%3643:	load	 %3642
%3644:	fcmp	 %3641 %3643
%3645:	br	 %3644 if.end105 if.then101

BASIC BLOCK if.then101
%3646:	getelementptr	 group_ptr XXX XXX
%3647:	getelementptr	 %3646 XXX XXX
%3648:	call	 XXX XXX %3647 printf
%3649:	br	 if.end105

BASIC BLOCK if.end105
%3650:	br	 if.end106

BASIC BLOCK if.end106
%3651:	getelementptr	 %3471 XXX XXX
%3652:	store	 XXX %3651
%3653:	br	 sw.epilog289

BASIC BLOCK sw.bb108
%3654:	getelementptr	 %3471 XXX XXX
%3655:	load	 %3654
%3656:	fcmp	 %3655 XXX
%3657:	br	 %3656 if.else129 if.then110

BASIC BLOCK if.then110
%3658:	getelementptr	 %3471 XXX XXX
%3659:	load	 %3658
%3660:	getelementptr	 %3471 XXX XXX
%3661:	load	 %3660
%3662:	getelementptr	 %3471 XXX XXX
%3663:	load	 %3662
%3664:	getelementptr	 %3471 XXX XXX
%3665:	load	 %3664
%3666:	fmul	 %3659 %3659
%3667:	fmul	 %3661 %3661
%3668:	fadd	 %3666 %3667
%3669:	call	 %3668 sqrt
%3670:	fmul	 %3663 %3663
%3671:	fmul	 %3665 %3665
%3672:	fadd	 %3670 %3671
%3673:	call	 %3672 sqrt
%3674:	fmul	 %3659 %3663
%3675:	fmul	 %3661 %3665
%3676:	fadd	 %3674 %3675
%3677:	fmul	 %3669 %3673
%3678:	fdiv	 %3676 %3677
%3679:	call	 %3678 dacos
%3680:	fdiv	 %3659 %3669
%3681:	call	 %3680 dacos
%3682:	getelementptr	 %3471 XXX XXX
%3683:	store	 %3669 %3682
%3684:	getelementptr	 %3471 XXX XXX
%3685:	store	 %3673 %3684
%3686:	getelementptr	 %3471 XXX XXX
%3687:	store	 %3679 %3686
%3688:	getelementptr	 %3471 XXX XXX
%3689:	store	 %3681 %3688
%3690:	br	 if.end236

BASIC BLOCK if.else129
%3691:	getelementptr	 %3471 XXX XXX
%3692:	load	 %3691
%3693:	fcmp	 %3692 XXX
%3694:	br	 %3693 if.else174 land.lhs.true

BASIC BLOCK land.lhs.true
%3695:	getelementptr	 %3471 XXX XXX
%3696:	load	 %3695
%3697:	fcmp	 %3696 XXX
%3698:	br	 %3697 if.else174 land.lhs.true134

BASIC BLOCK land.lhs.true134
%3699:	getelementptr	 %3471 XXX XXX
%3700:	load	 %3699
%3701:	fcmp	 %3700 XXX
%3702:	br	 %3701 if.else174 if.then137

BASIC BLOCK if.then137
%3703:	getelementptr	 %3473 XXX XXX
%3704:	load	 %3703
%3705:	switch	 %3704 sw.epilog XXX sw.bb139 XXX sw.bb163

BASIC BLOCK sw.bb139
%3706:	getelementptr	 %3473 XXX XXX
%3707:	load	 %3706
%3708:	fdiv	 %3707 XXX
%3709:	fmul	 XXX %3708
%3710:	fcmp	 XXX XXX
%3711:	br	 %3710 if.else151 land.lhs.true144

BASIC BLOCK land.lhs.true144
%3712:	fcmp	 XXX XXX
%3713:	br	 %3712 if.else151 if.then146

BASIC BLOCK if.then146
%3714:	fmul	 XXX %3708
%3715:	fmul	 %3714 XXX
%3716:	call	 XXX dcos
%3717:	fmul	 %3715 %3716
%3718:	br	 if.end159

BASIC BLOCK if.else151
%3719:	fcmp	 XXX XXX
%3720:	br	 %3719 if.else157 land.lhs.true153

BASIC BLOCK land.lhs.true153
%3721:	fcmp	 XXX XXX
%3722:	br	 %3721 if.else157 if.then155

BASIC BLOCK if.then155
%3723:	fmul	 XXX %3708
%3724:	br	 if.end158

BASIC BLOCK if.else157
%3725:	call	 XXX interror
%3726:	br	 if.end158

BASIC BLOCK if.end158
%3727:	phi	 %3723 XXX
%3728:	br	 if.end159

BASIC BLOCK if.end159
%3729:	phi	 %3717 %3727
%3730:	getelementptr	 %3471 XXX XXX
%3731:	store	 %3709 %3730
%3732:	getelementptr	 %3471 XXX XXX
%3733:	store	 %3729 %3732
%3734:	getelementptr	 %3471 XXX XXX
%3735:	store	 XXX %3734
%3736:	br	 sw.epilog

BASIC BLOCK sw.bb163
%3737:	getelementptr	 %3473 XXX XXX
%3738:	load	 %3737
%3739:	getelementptr	 %3473 XXX XXX
%3740:	load	 %3739
%3741:	fmul	 XXX %3740
%3742:	fdiv	 %3741 %3738
%3743:	call	 %3742 datan
%3744:	call	 %3743 dsin
%3745:	fdiv	 %3740 %3744
%3746:	getelementptr	 %3471 XXX XXX
%3747:	store	 %3738 %3746
%3748:	getelementptr	 %3471 XXX XXX
%3749:	store	 %3745 %3748
%3750:	getelementptr	 %3471 XXX XXX
%3751:	store	 %3743 %3750
%3752:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3753:	br	 if.end235

BASIC BLOCK if.else174
%3754:	getelementptr	 %3471 XXX XXX
%3755:	load	 %3754
%3756:	fcmp	 %3755 XXX
%3757:	br	 %3756 if.end234 land.lhs.true177

BASIC BLOCK land.lhs.true177
%3758:	getelementptr	 %3471 XXX XXX
%3759:	load	 %3758
%3760:	fcmp	 %3759 XXX
%3761:	br	 %3760 if.end234 land.lhs.true180

BASIC BLOCK land.lhs.true180
%3762:	getelementptr	 %3471 XXX XXX
%3763:	load	 %3762
%3764:	fcmp	 %3763 XXX
%3765:	br	 %3764 if.end234 if.then183

BASIC BLOCK if.then183
%3766:	getelementptr	 %3473 XXX XXX
%3767:	load	 %3766
%3768:	icmp	 %3767 XXX
%3769:	br	 %3768 if.else213 if.then186

BASIC BLOCK if.then186
%3770:	getelementptr	 %3471 XXX XXX
%3771:	load	 %3770
%3772:	getelementptr	 %3471 XXX XXX
%3773:	load	 %3772
%3774:	getelementptr	 %3473 XXX XXX
%3775:	load	 %3774
%3776:	fdiv	 %3775 XXX
%3777:	fmul	 XXX %3776
%3778:	fcmp	 %3771 %3777
%3779:	br	 %3778 lor.lhs.false193 if.then196

BASIC BLOCK lor.lhs.false193
%3780:	fmul	 XXX %3776
%3781:	fcmp	 %3773 %3780
%3782:	br	 %3781 if.end202 if.then196

BASIC BLOCK if.then196
%3783:	getelementptr	 group_ptr XXX XXX
%3784:	getelementptr	 %3783 XXX XXX
%3785:	call	 XXX XXX %3784 printf
%3786:	fmul	 XXX %3776
%3787:	fmul	 XXX %3776
%3788:	br	 if.end202

BASIC BLOCK if.end202
%3789:	phi	 %3787 %3773
%3790:	phi	 %3786 %3771
%3791:	fmul	 %3789 %3789
%3792:	fmul	 %3790 %3790
%3793:	fadd	 %3791 %3792
%3794:	fmul	 XXX %3776
%3795:	fmul	 %3794 %3776
%3796:	fsub	 %3793 %3795
%3797:	fmul	 XXX %3790
%3798:	fmul	 %3797 %3789
%3799:	fdiv	 %3796 %3798
%3800:	call	 %3799 dacos
%3801:	getelementptr	 %3471 XXX XXX
%3802:	store	 %3800 %3801
%3803:	br	 if.end233

BASIC BLOCK if.else213
%3804:	getelementptr	 %3473 XXX XXX
%3805:	load	 %3804
%3806:	icmp	 %3805 XXX
%3807:	br	 %3806 if.end232 if.then216

BASIC BLOCK if.then216
%3808:	getelementptr	 %3471 XXX XXX
%3809:	load	 %3808
%3810:	getelementptr	 %3471 XXX XXX
%3811:	load	 %3810
%3812:	getelementptr	 %3473 XXX XXX
%3813:	load	 %3812
%3814:	getelementptr	 %3473 XXX XXX
%3815:	load	 %3814
%3816:	fcmp	 %3811 %3815
%3817:	br	 %3816 lor.lhs.false222 if.then224

BASIC BLOCK lor.lhs.false222
%3818:	fcmp	 %3809 %3813
%3819:	br	 %3818 if.end228 if.then224

BASIC BLOCK if.then224
%3820:	getelementptr	 group_ptr XXX XXX
%3821:	getelementptr	 %3820 XXX XXX
%3822:	call	 XXX XXX %3821 printf
%3823:	br	 if.end228

BASIC BLOCK if.end228
%3824:	phi	 %3815 %3811
%3825:	fdiv	 %3815 %3824
%3826:	call	 %3825 dasin
%3827:	getelementptr	 %3471 XXX XXX
%3828:	store	 %3826 %3827
%3829:	br	 if.end232

BASIC BLOCK if.end232
%3830:	br	 if.end233

BASIC BLOCK if.end233
%3831:	br	 if.end234

BASIC BLOCK if.end234
%3832:	br	 if.end235

BASIC BLOCK if.end235
%3833:	br	 if.end236

BASIC BLOCK if.end236
%3834:	getelementptr	 %3473 XXX XXX
%3835:	load	 %3834
%3836:	switch	 %3835 sw.epilog288 XXX sw.bb238 XXX sw.bb262

BASIC BLOCK sw.bb238
%3837:	getelementptr	 %3471 XXX XXX
%3838:	load	 %3837
%3839:	getelementptr	 %3471 XXX XXX
%3840:	load	 %3839
%3841:	getelementptr	 %3473 XXX XXX
%3842:	load	 %3841
%3843:	fdiv	 %3842 XXX
%3844:	fmul	 XXX %3843
%3845:	fcmp	 %3838 %3844
%3846:	br	 %3845 lor.lhs.false245 if.then248

BASIC BLOCK lor.lhs.false245
%3847:	fmul	 XXX %3843
%3848:	fcmp	 %3840 %3847
%3849:	br	 %3848 if.end252 if.then248

BASIC BLOCK if.then248
%3850:	getelementptr	 group_ptr XXX XXX
%3851:	getelementptr	 %3850 XXX XXX
%3852:	call	 XXX XXX %3851 printf
%3853:	br	 if.end252

BASIC BLOCK if.end252
%3854:	getelementptr	 %3471 XXX XXX
%3855:	load	 %3854
%3856:	fcmp	 %3855 XXX
%3857:	br	 %3856 lor.lhs.false255 if.then258

BASIC BLOCK lor.lhs.false255
%3858:	getelementptr	 %3471 XXX XXX
%3859:	load	 %3858
%3860:	fcmp	 %3859 XXX
%3861:	br	 %3860 if.end261 if.then258

BASIC BLOCK if.then258
%3862:	getelementptr	 %3471 XXX XXX
%3863:	load	 %3862
%3864:	call	 XXX XXX %3863 printf
%3865:	call	 XXX exit
%3866:	unreachable	

BASIC BLOCK if.end261
%3867:	br	 sw.epilog288

BASIC BLOCK sw.bb262
%3868:	getelementptr	 %3471 XXX XXX
%3869:	load	 %3868
%3870:	getelementptr	 %3471 XXX XXX
%3871:	load	 %3870
%3872:	getelementptr	 %3473 XXX XXX
%3873:	load	 %3872
%3874:	getelementptr	 %3473 XXX XXX
%3875:	load	 %3874
%3876:	fcmp	 %3871 %3875
%3877:	br	 %3876 lor.lhs.false268 if.then270

BASIC BLOCK lor.lhs.false268
%3878:	fcmp	 %3869 %3873
%3879:	br	 %3878 if.end274 if.then270

BASIC BLOCK if.then270
%3880:	getelementptr	 group_ptr XXX XXX
%3881:	getelementptr	 %3880 XXX XXX
%3882:	call	 XXX XXX %3881 printf
%3883:	br	 if.end274

BASIC BLOCK if.end274
%3884:	getelementptr	 %3471 XXX XXX
%3885:	load	 %3884
%3886:	getelementptr	 %3473 XXX XXX
%3887:	load	 %3886
%3888:	getelementptr	 %3473 XXX XXX
%3889:	load	 %3888
%3890:	fdiv	 %3887 %3889
%3891:	call	 %3890 datan
%3892:	fcmp	 %3885 %3891
%3893:	br	 %3892 lor.lhs.false281 if.then284

BASIC BLOCK lor.lhs.false281
%3894:	getelementptr	 %3471 XXX XXX
%3895:	load	 %3894
%3896:	fcmp	 %3895 XXX
%3897:	br	 %3896 if.end287 if.then284

BASIC BLOCK if.then284
%3898:	getelementptr	 %3471 XXX XXX
%3899:	load	 %3898
%3900:	call	 XXX XXX %3899 printf
%3901:	call	 XXX exit
%3902:	unreachable	

BASIC BLOCK if.end287
%3903:	br	 sw.epilog288

BASIC BLOCK sw.epilog288
%3904:	br	 sw.epilog289

BASIC BLOCK sw.epilog289
%3905:	getelementptr	 group_ptr XXX XXX
%3906:	getelementptr	 %3905 XXX XXX
%3907:	call	 XXX %3906 printf
%3908:	getelementptr	 %3471 XXX XXX
%3909:	load	 %3908
%3910:	getelementptr	 %3471 XXX XXX
%3911:	load	 %3910
%3912:	call	 XXX %3909 %3911 printf
%3913:	getelementptr	 %3471 XXX XXX
%3914:	load	 %3913
%3915:	call	 XXX %3914 printf
%3916:	getelementptr	 %3471 XXX XXX
%3917:	load	 %3916
%3918:	call	 XXX %3917 printf
%3919:	ret	 XXX

FUNCTION fixsgrid

BASIC BLOCK entry
%3920:	alloca	 XXX
%3921:	alloca	 XXX
%3922:	alloca	 XXX
%3923:	alloca	 XXX
%3924:	alloca	 XXX
%3925:	alloca	 XXX
%3926:	alloca	 XXX
%3927:	getelementptr	 grid XXX XXX
%3928:	load	 %3927
%3929:	store	 %3928 %3920
%3930:	getelementptr	 grid XXX XXX
%3931:	load	 %3930
%3932:	getelementptr	 grid XXX XXX
%3933:	load	 %3932
%3934:	store	 %3933 %3921
%3935:	getelementptr	 grid XXX XXX
%3936:	load	 %3935
%3937:	store	 %3936 %3922
%3938:	getelementptr	 grid XXX XXX
%3939:	load	 %3938
%3940:	getelementptr	 grid XXX XXX
%3941:	load	 %3940
%3942:	store	 %3941 %3923
%3943:	getelementptr	 grid XXX XXX
%3944:	load	 %3943
%3945:	store	 %3944 %3924
%3946:	getelementptr	 grid XXX XXX
%3947:	load	 %3946
%3948:	store	 %3947 %3925
%3949:	getelementptr	 grid XXX XXX
%3950:	load	 %3949
%3951:	store	 %3950 %3926
%3952:	getelementptr	 grid XXX XXX
%3953:	load	 %3952
%3954:	getelementptr	 grid XXX XXX
%3955:	load	 %3954
%3956:	getelementptr	 grid XXX XXX
%3957:	load	 %3956
%3958:	switch	 %3957 sw.epilog XXX sw.bb XXX sw.bb1 XXX sw.bb2 XXX sw.bb9 XXX sw.bb15

BASIC BLOCK sw.bb
%3959:	call	 XXX interror
%3960:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3961:	load	 %3921
%3962:	fcmp	 %3961 XXX
%3963:	br	 %3962 if.else if.then

BASIC BLOCK if.then
%3964:	call	 %3921 %3939 mmconv
%3965:	load	 %3921
%3966:	store	 %3965 %3922
%3967:	br	 if.end

BASIC BLOCK if.else
%3968:	store	 XXX %3922
%3969:	br	 if.end

BASIC BLOCK if.end
%3970:	store	 XXX %3920
%3971:	br	 sw.epilog

BASIC BLOCK sw.bb2
%3972:	load	 %3921
%3973:	fcmp	 %3972 XXX
%3974:	br	 %3973 if.else7 if.then4

BASIC BLOCK if.then4
%3975:	call	 %3921 %3939 mmconv
%3976:	call	 %3922 %3939 mmconv
%3977:	br	 if.end8

BASIC BLOCK if.else7
%3978:	store	 XXX %3922
%3979:	br	 if.end8

BASIC BLOCK if.end8
%3980:	store	 XXX %3920
%3981:	br	 sw.epilog

BASIC BLOCK sw.bb9
%3982:	load	 %3921
%3983:	fcmp	 %3982 XXX
%3984:	br	 %3983 if.else13 if.then11

BASIC BLOCK if.then11
%3985:	call	 %3921 %3939 mmconv
%3986:	load	 %3921
%3987:	store	 %3986 %3922
%3988:	br	 if.end14

BASIC BLOCK if.else13
%3989:	store	 XXX %3922
%3990:	br	 if.end14

BASIC BLOCK if.end14
%3991:	store	 XXX %3920
%3992:	br	 sw.epilog

BASIC BLOCK sw.bb15
%3993:	load	 %3920
%3994:	fcmp	 %3993 XXX
%3995:	br	 %3994 if.end19 if.then17

BASIC BLOCK if.then17
%3996:	call	 %3920 %3931 degconv
%3997:	store	 XXX %3923
%3998:	store	 XXX %3924
%3999:	store	 XXX %3925
%4000:	store	 XXX %3926
%4001:	br	 if.end19

BASIC BLOCK if.end19
%4002:	load	 %3921
%4003:	fcmp	 %4002 XXX
%4004:	br	 %4003 if.end24 if.then21

BASIC BLOCK if.then21
%4005:	call	 %3921 %3939 mmconv
%4006:	call	 %3922 %3939 mmconv
%4007:	store	 XXX %3923
%4008:	store	 XXX %3924
%4009:	store	 XXX %3925
%4010:	store	 XXX %3926
%4011:	br	 if.end24

BASIC BLOCK if.end24
%4012:	load	 %3923
%4013:	fcmp	 %4012 XXX
%4014:	br	 %4013 if.end31 if.then26

BASIC BLOCK if.then26
%4015:	call	 %3923 %3953 mmconv
%4016:	call	 %3924 %3953 mmconv
%4017:	call	 %3925 %3953 mmconv
%4018:	call	 %3926 %3953 mmconv
%4019:	store	 XXX %3921
%4020:	store	 XXX %3922
%4021:	store	 XXX %3920
%4022:	br	 if.end31

BASIC BLOCK if.end31
%4023:	br	 sw.epilog

BASIC BLOCK sw.epilog
%4024:	load	 %3920
%4025:	getelementptr	 grid XXX XXX
%4026:	store	 %4024 %4025
%4027:	getelementptr	 grid XXX XXX
%4028:	store	 XXX %4027
%4029:	load	 %3921
%4030:	getelementptr	 grid XXX XXX
%4031:	store	 %4029 %4030
%4032:	load	 %3922
%4033:	getelementptr	 grid XXX XXX
%4034:	store	 %4032 %4033
%4035:	getelementptr	 grid XXX XXX
%4036:	store	 XXX %4035
%4037:	load	 %3923
%4038:	getelementptr	 grid XXX XXX
%4039:	store	 %4037 %4038
%4040:	load	 %3924
%4041:	getelementptr	 grid XXX XXX
%4042:	store	 %4040 %4041
%4043:	load	 %3925
%4044:	getelementptr	 grid XXX XXX
%4045:	store	 %4043 %4044
%4046:	load	 %3926
%4047:	getelementptr	 grid XXX XXX
%4048:	store	 %4046 %4047
%4049:	getelementptr	 grid XXX XXX
%4050:	store	 XXX %4049
%4051:	getelementptr	 grid XXX XXX
%4052:	store	 XXX %4051
%4053:	ret	 XXX

FUNCTION floatsup

BASIC BLOCK entry
%4054:	call	 XXX printf
%4055:	call	 XXX XXX printf
%4056:	call	 XXX printf
%4057:	ret	

FUNCTION gainspec

BASIC BLOCK entry
%4058:	alloca	 XXX
%4059:	store	 p1 %4058
%4060:	call	 XXX %4058 GetKeyword
%4061:	icmp	 %4060 XXX
%4062:	br	 %4061 if.end if.then

BASIC BLOCK if.then
%4063:	br	 return

BASIC BLOCK if.end
%4064:	load	 %4058
%4065:	call	 %4064 %4058 gain_ptr gain_unit_ptr gainval
%4066:	icmp	 %4065 XXX
%4067:	br	 %4066 if.end4 if.then3

BASIC BLOCK if.then3
%4068:	load	 %4058
%4069:	call	 %4068 XXX XXX parserro
%4070:	br	 return

BASIC BLOCK if.end4
%4071:	load	 %4058
%4072:	store	 %4071 pp2
%4073:	br	 return

BASIC BLOCK return
%4074:	phi	 XXX XXX XXX
%4075:	ret	 %4074

FUNCTION gainval

BASIC BLOCK entry
%4076:	alloca	 XXX
%4077:	store	 p1 %4076
%4078:	call	 gain_ptr %4076 GetReal
%4079:	icmp	 %4078 XXX
%4080:	br	 %4079 if.end if.then

BASIC BLOCK if.then
%4081:	br	 return

BASIC BLOCK if.end
%4082:	load	 %4076
%4083:	call	 %4082 %4076 gain_unit_ptr gainunit
%4084:	icmp	 %4083 XXX
%4085:	br	 %4084 if.end4 if.then3

BASIC BLOCK if.then3
%4086:	store	 XXX gain_unit_ptr
%4087:	br	 if.end4

BASIC BLOCK if.end4
%4088:	load	 %4076
%4089:	store	 %4088 pp2
%4090:	br	 return

BASIC BLOCK return
%4091:	phi	 XXX XXX
%4092:	ret	 %4091

FUNCTION gainunit

BASIC BLOCK entry
%4093:	alloca	 XXX
%4094:	store	 p1 %4093
%4095:	store	 XXX gain_unit_ptr
%4096:	call	 XXX %4093 GetKeyword
%4097:	icmp	 %4096 XXX
%4098:	br	 %4097 if.else if.then

BASIC BLOCK if.then
%4099:	store	 XXX gain_unit_ptr
%4100:	br	 if.end5

BASIC BLOCK if.else
%4101:	call	 XXX %4093 GetKeyword
%4102:	icmp	 %4101 XXX
%4103:	br	 %4102 if.else4 if.then3

BASIC BLOCK if.then3
%4104:	store	 XXX gain_unit_ptr
%4105:	br	 if.end

BASIC BLOCK if.else4
%4106:	br	 return

BASIC BLOCK if.end
%4107:	br	 if.end5

BASIC BLOCK if.end5
%4108:	load	 %4093
%4109:	store	 %4108 pp2
%4110:	br	 return

BASIC BLOCK return
%4111:	phi	 XXX XXX
%4112:	ret	 %4111

FUNCTION gaussel

BASIC BLOCK entry
%4113:	alloca	 XXX
%4114:	store	 p1 %4113
%4115:	call	 XXX %4113 GetKeyword
%4116:	icmp	 %4115 XXX
%4117:	br	 %4116 if.end if.then

BASIC BLOCK if.then
%4118:	br	 return

BASIC BLOCK if.end
%4119:	call	 XXX %4113 GetKeyword
%4120:	call	 anglee_ptr %4113 GetReal
%4121:	icmp	 %4120 XXX
%4122:	br	 %4121 if.end6 if.then4

BASIC BLOCK if.then4
%4123:	load	 %4113
%4124:	call	 %4123 XXX XXX parserro
%4125:	call	 XXX XXX printf
%4126:	br	 return

BASIC BLOCK if.end6
%4127:	call	 XXX %4113 GetKeyword
%4128:	call	 angleh_ptr %4113 GetReal
%4129:	icmp	 %4128 XXX
%4130:	br	 %4129 if.end12 if.then10

BASIC BLOCK if.then10
%4131:	load	 %4113
%4132:	call	 %4131 XXX XXX parserro
%4133:	call	 XXX XXX printf
%4134:	br	 return

BASIC BLOCK if.end12
%4135:	load	 %4113
%4136:	call	 %4135 %4113 angle_unit_ptr angunit
%4137:	icmp	 %4136 XXX
%4138:	br	 %4137 if.end16 if.then15

BASIC BLOCK if.then15
%4139:	store	 XXX angle_unit_ptr
%4140:	br	 if.end16

BASIC BLOCK if.end16
%4141:	call	 XXX %4113 GetKeyword
%4142:	call	 tapere_ptr %4113 GetReal
%4143:	icmp	 %4142 XXX
%4144:	br	 %4143 if.end22 if.then20

BASIC BLOCK if.then20
%4145:	load	 %4113
%4146:	call	 %4145 XXX XXX parserro
%4147:	call	 XXX XXX printf
%4148:	br	 return

BASIC BLOCK if.end22
%4149:	call	 XXX %4113 GetKeyword
%4150:	call	 taperh_ptr %4113 GetReal
%4151:	icmp	 %4150 XXX
%4152:	br	 %4151 if.end28 if.then26

BASIC BLOCK if.then26
%4153:	load	 %4113
%4154:	call	 %4153 XXX XXX parserro
%4155:	call	 XXX XXX printf
%4156:	br	 return

BASIC BLOCK if.end28
%4157:	call	 %4113 taper_unit_ptr ampunit
%4158:	icmp	 %4157 XXX
%4159:	br	 %4158 if.end32 if.then31

BASIC BLOCK if.then31
%4160:	store	 XXX taper_unit_ptr
%4161:	br	 if.end32

BASIC BLOCK if.end32
%4162:	load	 %4113
%4163:	store	 %4162 pp2
%4164:	br	 return

BASIC BLOCK return
%4165:	phi	 XXX XXX XXX XXX XXX XXX
%4166:	ret	 %4165

FUNCTION geomspec

BASIC BLOCK entry
%4167:	alloca	 XXX
%4168:	store	 p1 %4167
%4169:	call	 XXX %4167 GetKeyword
%4170:	icmp	 %4169 XXX
%4171:	br	 %4170 if.end if.then

BASIC BLOCK if.then
%4172:	load	 %4167
%4173:	call	 %4172 XXX XXX parserro
%4174:	br	 return

BASIC BLOCK if.end
%4175:	store	 XXX geometry_ptr
%4176:	load	 %4167
%4177:	call	 %4176 %4167 pdim_ptr qdim_ptr pqdim_unit_ptr recspec
%4178:	icmp	 %4177 XXX
%4179:	br	 %4178 if.end4 if.then3

BASIC BLOCK if.then3
%4180:	load	 %4167
%4181:	store	 %4180 pp2
%4182:	br	 return

BASIC BLOCK if.end4
%4183:	icmp	 %4177 XXX
%4184:	br	 %4183 if.end8 if.then6

BASIC BLOCK if.then6
%4185:	call	 XXX XXX printf
%4186:	br	 return

BASIC BLOCK if.end8
%4187:	store	 XXX geometry_ptr
%4188:	load	 %4167
%4189:	call	 %4188 %4167 radius_ptr radius_unit_ptr circspec
%4190:	icmp	 %4189 XXX
%4191:	br	 %4190 if.end12 if.then11

BASIC BLOCK if.then11
%4192:	load	 %4167
%4193:	store	 %4192 pp2
%4194:	br	 return

BASIC BLOCK if.end12
%4195:	icmp	 %4189 XXX
%4196:	br	 %4195 if.end16 if.then14

BASIC BLOCK if.then14
%4197:	call	 XXX XXX printf
%4198:	br	 return

BASIC BLOCK if.end16
%4199:	br	 return

BASIC BLOCK return
%4200:	phi	 XXX XXX XXX XXX XXX XXX
%4201:	ret	 %4200

FUNCTION recspec

BASIC BLOCK entry
%4202:	alloca	 XXX
%4203:	store	 p1 %4202
%4204:	call	 XXX %4202 GetKeyword
%4205:	icmp	 %4204 XXX
%4206:	br	 %4205 if.end if.then

BASIC BLOCK if.then
%4207:	br	 return

BASIC BLOCK if.end
%4208:	call	 XXX %4202 GetKeyword
%4209:	load	 %4202
%4210:	call	 %4209 %4202 pdim_ptr Get1Real
%4211:	icmp	 %4210 XXX
%4212:	br	 %4211 if.end5 if.then4

BASIC BLOCK if.then4
%4213:	load	 %4202
%4214:	call	 %4213 %4210 XXX parserro
%4215:	br	 return

BASIC BLOCK if.end5
%4216:	call	 XXX %4202 GetKeyword
%4217:	load	 %4202
%4218:	call	 %4217 %4202 qdim_ptr Get1Real
%4219:	icmp	 %4218 XXX
%4220:	br	 %4219 if.end10 if.then9

BASIC BLOCK if.then9
%4221:	load	 %4202
%4222:	call	 %4221 %4218 XXX parserro
%4223:	br	 return

BASIC BLOCK if.end10
%4224:	call	 %4202 pqdim_unit_ptr lenunit
%4225:	icmp	 %4224 XXX
%4226:	br	 %4225 if.end14 if.then13

BASIC BLOCK if.then13
%4227:	store	 XXX pqdim_unit_ptr
%4228:	br	 if.end14

BASIC BLOCK if.end14
%4229:	load	 %4202
%4230:	store	 %4229 pp2
%4231:	br	 return

BASIC BLOCK return
%4232:	phi	 XXX XXX XXX XXX
%4233:	ret	 %4232

FUNCTION GetInt

BASIC BLOCK entry
%4234:	alloca	 XXX
%4235:	alloca	 XXX
%4236:	store	 p1 %4234
%4237:	call	 %4234 TapeGet
%4238:	sext	 %4237
%4239:	sext	 %4238
%4240:	call	 __ctype_b_loc
%4241:	load	 %4240
%4242:	getelementptr	 %4241 %4239
%4243:	load	 %4242
%4244:	zext	 %4243
%4245:	and	 %4244 XXX
%4246:	icmp	 %4245 XXX
%4247:	br	 %4246 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%4248:	sext	 %4237
%4249:	icmp	 %4248 XXX
%4250:	br	 %4249 if.end land.lhs.true7

BASIC BLOCK land.lhs.true7
%4251:	sext	 %4237
%4252:	icmp	 %4251 XXX
%4253:	br	 %4252 if.end if.then

BASIC BLOCK if.then
%4254:	br	 return

BASIC BLOCK if.end
%4255:	sext	 XXX
%4256:	getelementptr	 %4235 XXX %4255
%4257:	store	 %4237 %4256
%4258:	add	 XXX XXX
%4259:	call	 %4234 TapeGet
%4260:	br	 while.cond

BASIC BLOCK while.cond
%4261:	phi	 %4258 %4284
%4262:	phi	 %4259 %4285
%4263:	sext	 %4262
%4264:	sext	 %4263
%4265:	call	 __ctype_b_loc
%4266:	load	 %4265
%4267:	getelementptr	 %4266 %4264
%4268:	load	 %4267
%4269:	zext	 %4268
%4270:	and	 %4269 XXX
%4271:	icmp	 %4270 XXX
%4272:	br	 %4271 land.end land.rhs

BASIC BLOCK land.rhs
%4273:	load	 %4234
%4274:	icmp	 %4273 XXX
%4275:	br	 land.end

BASIC BLOCK land.end
%4276:	phi	 XXX %4274
%4277:	br	 %4276 while.end while.body

BASIC BLOCK while.body
%4278:	icmp	 %4261 XXX
%4279:	br	 %4278 if.end27 if.then24

BASIC BLOCK if.then24
%4280:	sext	 %4261
%4281:	getelementptr	 %4235 XXX %4280
%4282:	store	 %4262 %4281
%4283:	br	 if.end27

BASIC BLOCK if.end27
%4284:	add	 %4261 XXX
%4285:	call	 %4234 TapeGet
%4286:	br	 while.cond

BASIC BLOCK while.end
%4287:	icmp	 %4261 XXX
%4288:	br	 %4287 if.else if.then32

BASIC BLOCK if.then32
%4289:	getelementptr	 %4235 XXX XXX
%4290:	store	 XXX %4289
%4291:	getelementptr	 %4235 XXX XXX
%4292:	call	 p1 XXX %4291 parserro
%4293:	br	 return

BASIC BLOCK if.else
%4294:	sext	 %4261
%4295:	getelementptr	 %4235 XXX %4294
%4296:	store	 XXX %4295
%4297:	br	 if.end36

BASIC BLOCK if.end36
%4298:	getelementptr	 %4235 XXX XXX
%4299:	call	 %4298 atoi
%4300:	store	 %4299 intero
%4301:	load	 %4234
%4302:	store	 %4301 pp2
%4303:	br	 return

BASIC BLOCK return
%4304:	phi	 XXX XXX XXX
%4305:	ret	 %4304

FUNCTION TapeGet

BASIC BLOCK entry
%4306:	load	 tp
%4307:	icmp	 %4306 XXX
%4308:	br	 %4307 if.else if.then

BASIC BLOCK if.then
%4309:	br	 if.end

BASIC BLOCK if.else
%4310:	load	 tp
%4311:	getelementptr	 %4310 XXX XXX
%4312:	load	 %4311
%4313:	load	 tp
%4314:	getelementptr	 %4313 XXX XXX
%4315:	load	 %4314
%4316:	store	 %4315 tp
%4317:	br	 if.end

BASIC BLOCK if.end
%4318:	phi	 XXX %4312
%4319:	ret	 %4318

FUNCTION GetNatur

BASIC BLOCK entry
%4320:	alloca	 XXX
%4321:	alloca	 XXX
%4322:	store	 p1 %4320
%4323:	load	 %4320
%4324:	call	 %4323 %4320 %4321 GetInt
%4325:	icmp	 %4324 XXX
%4326:	br	 %4325 if.end if.then

BASIC BLOCK if.then
%4327:	br	 return

BASIC BLOCK if.end
%4328:	load	 %4321
%4329:	icmp	 %4328 XXX
%4330:	br	 %4329 if.end3 if.then2

BASIC BLOCK if.then2
%4331:	br	 return

BASIC BLOCK if.end3
%4332:	load	 %4321
%4333:	icmp	 %4332 XXX
%4334:	br	 %4333 if.end6 if.then5

BASIC BLOCK if.then5
%4335:	br	 return

BASIC BLOCK if.end6
%4336:	load	 %4321
%4337:	store	 %4336 natur_ptr
%4338:	load	 %4320
%4339:	store	 %4338 pp2
%4340:	br	 return

BASIC BLOCK return
%4341:	phi	 XXX XXX XXX XXX
%4342:	ret	 %4341

FUNCTION isletter

BASIC BLOCK entry
%4343:	sext	 ch
%4344:	sext	 %4343
%4345:	call	 __ctype_b_loc
%4346:	load	 %4345
%4347:	getelementptr	 %4346 %4344
%4348:	load	 %4347
%4349:	zext	 %4348
%4350:	and	 %4349 XXX
%4351:	icmp	 %4350 XXX
%4352:	br	 %4351 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4353:	sext	 ch
%4354:	icmp	 %4353 XXX
%4355:	br	 %4354 lor.lhs.false4 if.then

BASIC BLOCK lor.lhs.false4
%4356:	sext	 ch
%4357:	icmp	 %4356 XXX
%4358:	br	 %4357 if.else if.then

BASIC BLOCK if.then
%4359:	br	 return

BASIC BLOCK if.else
%4360:	br	 return

BASIC BLOCK return
%4361:	phi	 XXX XXX
%4362:	ret	 %4361

FUNCTION InKWords

BASIC BLOCK entry
%4363:	call	 WORD strlen
%4364:	icmp	 %4363 XXX
%4365:	br	 %4364 if.end if.then

BASIC BLOCK if.then
%4366:	call	 XXX printf
%4367:	call	 XXX exit
%4368:	unreachable	

BASIC BLOCK if.end
%4369:	br	 for.cond

BASIC BLOCK for.cond
%4370:	phi	 XXX %4381
%4371:	icmp	 %4370 XXX
%4372:	br	 %4371 for.end for.body

BASIC BLOCK for.body
%4373:	sext	 %4370
%4374:	getelementptr	 Keywords XXX %4373
%4375:	getelementptr	 %4374 XXX XXX
%4376:	call	 WORD %4375 strcmp
%4377:	icmp	 %4376 XXX
%4378:	br	 %4377 if.end6 if.then5

BASIC BLOCK if.then5
%4379:	br	 return

BASIC BLOCK if.end6
%4380:	br	 for.inc

BASIC BLOCK for.inc
%4381:	add	 %4370 XXX
%4382:	br	 for.cond

BASIC BLOCK for.end
%4383:	br	 return

BASIC BLOCK return
%4384:	phi	 XXX XXX
%4385:	ret	 %4384

FUNCTION kwdsinit

BASIC BLOCK entry
%4386:	br	 for.cond

BASIC BLOCK for.cond
%4387:	phi	 XXX %4396
%4388:	sext	 %4387
%4389:	icmp	 %4388 XXX
%4390:	br	 %4389 for.end for.body

BASIC BLOCK for.body
%4391:	sext	 %4387
%4392:	getelementptr	 Keywords XXX %4391
%4393:	getelementptr	 %4392 XXX XXX
%4394:	store	 XXX %4393
%4395:	br	 for.inc

BASIC BLOCK for.inc
%4396:	add	 %4387 XXX
%4397:	br	 for.cond

BASIC BLOCK for.end
%4398:	call	 XXX XXX strcpy
%4399:	call	 XXX XXX strcpy
%4400:	call	 XXX XXX strcpy
%4401:	call	 XXX XXX strcpy
%4402:	call	 XXX XXX strcpy
%4403:	call	 XXX XXX strcpy
%4404:	call	 XXX XXX strcpy
%4405:	call	 XXX XXX strcpy
%4406:	call	 XXX XXX strcpy
%4407:	call	 XXX XXX strcpy
%4408:	call	 XXX XXX strcpy
%4409:	call	 XXX XXX strcpy
%4410:	call	 XXX XXX strcpy
%4411:	call	 XXX XXX strcpy
%4412:	call	 XXX XXX strcpy
%4413:	call	 XXX XXX strcpy
%4414:	call	 XXX XXX strcpy
%4415:	call	 XXX XXX strcpy
%4416:	call	 XXX XXX strcpy
%4417:	call	 XXX XXX strcpy
%4418:	call	 XXX XXX strcpy
%4419:	call	 XXX XXX strcpy
%4420:	call	 XXX XXX strcpy
%4421:	call	 XXX XXX strcpy
%4422:	call	 XXX XXX strcpy
%4423:	call	 XXX XXX strcpy
%4424:	call	 XXX XXX strcpy
%4425:	call	 XXX XXX strcpy
%4426:	call	 XXX XXX strcpy
%4427:	call	 XXX XXX strcpy
%4428:	call	 XXX XXX strcpy
%4429:	call	 XXX XXX strcpy
%4430:	call	 XXX XXX strcpy
%4431:	call	 XXX XXX strcpy
%4432:	call	 XXX XXX strcpy
%4433:	call	 XXX XXX strcpy
%4434:	call	 XXX XXX strcpy
%4435:	call	 XXX XXX strcpy
%4436:	call	 XXX XXX strcpy
%4437:	call	 XXX XXX strcpy
%4438:	call	 XXX XXX strcpy
%4439:	call	 XXX XXX strcpy
%4440:	call	 XXX XXX strcpy
%4441:	call	 XXX XXX strcpy
%4442:	call	 XXX XXX strcpy
%4443:	call	 XXX XXX strcpy
%4444:	call	 XXX XXX strcpy
%4445:	call	 XXX XXX strcpy
%4446:	call	 XXX XXX strcpy
%4447:	call	 XXX XXX strcpy
%4448:	call	 XXX XXX strcpy
%4449:	call	 XXX XXX strcpy
%4450:	call	 XXX XXX strcpy
%4451:	call	 XXX XXX strcpy
%4452:	call	 XXX XXX strcpy
%4453:	call	 XXX XXX strcpy
%4454:	call	 XXX XXX strcpy
%4455:	call	 XXX XXX strcpy
%4456:	call	 XXX XXX strcpy
%4457:	call	 XXX XXX strcpy
%4458:	call	 XXX XXX strcpy
%4459:	call	 XXX XXX strcpy
%4460:	call	 XXX XXX strcpy
%4461:	call	 XXX XXX strcpy
%4462:	call	 XXX XXX strcpy
%4463:	call	 XXX XXX strcpy
%4464:	call	 XXX XXX strcpy
%4465:	call	 XXX XXX strcpy
%4466:	call	 XXX XXX strcpy
%4467:	call	 XXX XXX strcpy
%4468:	call	 XXX XXX strcpy
%4469:	call	 XXX XXX strcpy
%4470:	call	 XXX XXX strcpy
%4471:	call	 XXX XXX strcpy
%4472:	call	 XXX XXX strcpy
%4473:	call	 XXX XXX strcpy
%4474:	call	 XXX XXX strcpy
%4475:	call	 XXX XXX strcpy
%4476:	call	 XXX XXX strcpy
%4477:	call	 XXX XXX strcpy
%4478:	call	 XXX XXX strcpy
%4479:	call	 XXX XXX strcpy
%4480:	call	 XXX XXX strcpy
%4481:	call	 XXX XXX strcpy
%4482:	call	 XXX XXX strcpy
%4483:	call	 XXX XXX strcpy
%4484:	call	 XXX XXX strcpy
%4485:	call	 XXX XXX strcpy
%4486:	call	 XXX XXX strcpy
%4487:	call	 XXX XXX strcpy
%4488:	call	 XXX XXX strcpy
%4489:	call	 XXX XXX strcpy
%4490:	call	 XXX XXX strcpy
%4491:	call	 XXX XXX strcpy
%4492:	call	 XXX XXX strcpy
%4493:	call	 XXX XXX strcpy
%4494:	call	 XXX XXX strcpy
%4495:	call	 XXX XXX strcpy
%4496:	call	 XXX XXX strcpy
%4497:	call	 XXX XXX strcpy
%4498:	call	 XXX XXX strcpy
%4499:	call	 XXX XXX strcpy
%4500:	call	 XXX XXX strcpy
%4501:	call	 XXX XXX strcpy
%4502:	call	 XXX XXX strcpy
%4503:	call	 XXX XXX strcpy
%4504:	call	 XXX XXX strcpy
%4505:	call	 XXX XXX strcpy
%4506:	call	 XXX XXX strcpy
%4507:	call	 XXX XXX strcpy
%4508:	call	 XXX XXX strcpy
%4509:	call	 XXX XXX strcpy
%4510:	call	 XXX XXX strcpy
%4511:	call	 XXX XXX strcpy
%4512:	call	 XXX XXX strcpy
%4513:	call	 XXX XXX strcpy
%4514:	call	 XXX XXX strcpy
%4515:	call	 XXX XXX strcpy
%4516:	call	 XXX XXX strcpy
%4517:	call	 XXX XXX strcpy
%4518:	call	 XXX XXX strcpy
%4519:	call	 XXX XXX strcpy
%4520:	call	 XXX XXX strcpy
%4521:	call	 XXX XXX strcpy
%4522:	call	 XXX XXX strcpy
%4523:	call	 XXX XXX strcpy
%4524:	br	 for.cond128

BASIC BLOCK for.cond128
%4525:	phi	 XXX %4540
%4526:	sext	 %4525
%4527:	icmp	 %4526 XXX
%4528:	br	 %4527 for.end142 for.body132

BASIC BLOCK for.body132
%4529:	sext	 %4525
%4530:	getelementptr	 Keywords XXX %4529
%4531:	getelementptr	 %4530 XXX XXX
%4532:	call	 %4531 strlen
%4533:	icmp	 %4532 XXX
%4534:	br	 %4533 if.end if.then

BASIC BLOCK if.then
%4535:	sext	 %4525
%4536:	call	 XXX %4535 printf
%4537:	call	 XXX interror
%4538:	br	 if.end

BASIC BLOCK if.end
%4539:	br	 for.inc140

BASIC BLOCK for.inc140
%4540:	add	 %4525 XXX
%4541:	br	 for.cond128

BASIC BLOCK for.end142
%4542:	ret	

FUNCTION unaminit

BASIC BLOCK entry
%4543:	br	 for.cond

BASIC BLOCK for.cond
%4544:	phi	 XXX %4553
%4545:	sext	 %4544
%4546:	icmp	 %4545 XXX
%4547:	br	 %4546 for.end for.body

BASIC BLOCK for.body
%4548:	sext	 %4544
%4549:	getelementptr	 UserNames XXX %4548
%4550:	getelementptr	 %4549 XXX XXX
%4551:	call	 %4550 XXX strcpy
%4552:	br	 for.inc

BASIC BLOCK for.inc
%4553:	add	 %4544 XXX
%4554:	br	 for.cond

BASIC BLOCK for.end
%4555:	ret	

FUNCTION moseinit

BASIC BLOCK entry
%4556:	br	 for.cond

BASIC BLOCK for.cond
%4557:	phi	 XXX %4565
%4558:	icmp	 %4557 XXX
%4559:	br	 %4558 for.end for.body

BASIC BLOCK for.body
%4560:	sext	 %4557
%4561:	getelementptr	 MOSErrors XXX %4560
%4562:	getelementptr	 %4561 XXX XXX
%4563:	store	 XXX %4562
%4564:	br	 for.inc

BASIC BLOCK for.inc
%4565:	add	 %4557 XXX
%4566:	br	 for.cond

BASIC BLOCK for.end
%4567:	call	 XXX XXX strcpy
%4568:	call	 XXX XXX strcpy
%4569:	call	 XXX XXX strcpy
%4570:	call	 XXX XXX strcpy
%4571:	call	 XXX XXX strcpy
%4572:	call	 XXX XXX strcpy
%4573:	call	 XXX XXX strcpy
%4574:	call	 XXX XXX strcpy
%4575:	call	 XXX XXX strcpy
%4576:	call	 XXX XXX strcpy
%4577:	call	 XXX XXX strcpy
%4578:	call	 XXX XXX strcpy
%4579:	call	 XXX XXX strcpy
%4580:	call	 XXX XXX strcpy
%4581:	call	 XXX XXX strcpy
%4582:	call	 XXX XXX strcpy
%4583:	call	 XXX XXX strcpy
%4584:	call	 XXX XXX strcpy
%4585:	call	 XXX XXX strcpy
%4586:	call	 XXX XXX strcpy
%4587:	ret	

FUNCTION gnodevis

BASIC BLOCK entry
%4588:	alloca	 XXX
%4589:	call	 gnode_list_start_ptr %4588 p q gnodfind
%4590:	icmp	 %4589 XXX
%4591:	br	 %4590 if.end if.then

BASIC BLOCK if.then
%4592:	call	 XXX interror
%4593:	call	 XXX exit
%4594:	unreachable	

BASIC BLOCK if.end
%4595:	load	 %4588
%4596:	getelementptr	 %4595 XXX XXX
%4597:	load	 %4596
%4598:	getelementptr	 %4597 XXX XXX
%4599:	store	 phase %4598
%4600:	load	 %4588
%4601:	getelementptr	 %4600 XXX XXX
%4602:	load	 %4601
%4603:	fadd	 %4602 angle
%4604:	store	 %4603 %4601
%4605:	ret	

FUNCTION gnodfind

BASIC BLOCK entry
%4606:	store	 gnode_list_start_ptr gnode_ptr
%4607:	br	 while.cond

BASIC BLOCK while.cond
%4608:	load	 gnode_ptr
%4609:	getelementptr	 %4608 XXX XXX
%4610:	load	 %4609
%4611:	icmp	 %4610 p
%4612:	br	 %4611 land.rhs land.lhs.true

BASIC BLOCK land.lhs.true
%4613:	load	 gnode_ptr
%4614:	getelementptr	 %4613 XXX XXX
%4615:	load	 %4614
%4616:	icmp	 %4615 q
%4617:	br	 %4616 land.rhs land.end

BASIC BLOCK land.rhs
%4618:	load	 gnode_ptr
%4619:	getelementptr	 %4618 XXX XXX
%4620:	load	 %4619
%4621:	icmp	 %4620 XXX
%4622:	br	 land.end

BASIC BLOCK land.end
%4623:	phi	 XXX %4621
%4624:	br	 %4623 while.end while.body

BASIC BLOCK while.body
%4625:	load	 gnode_ptr
%4626:	getelementptr	 %4625 XXX XXX
%4627:	load	 %4626
%4628:	store	 %4627 gnode_ptr
%4629:	br	 while.cond

BASIC BLOCK while.end
%4630:	load	 gnode_ptr
%4631:	getelementptr	 %4630 XXX XXX
%4632:	load	 %4631
%4633:	icmp	 %4632 p
%4634:	br	 %4633 if.then land.lhs.true6

BASIC BLOCK land.lhs.true6
%4635:	load	 gnode_ptr
%4636:	getelementptr	 %4635 XXX XXX
%4637:	load	 %4636
%4638:	icmp	 %4637 q
%4639:	br	 %4638 if.then if.else

BASIC BLOCK if.then
%4640:	br	 return

BASIC BLOCK if.else
%4641:	br	 return

BASIC BLOCK return
%4642:	phi	 XXX XXX
%4643:	ret	 %4642

FUNCTION grampexc

BASIC BLOCK entry
%4644:	alloca	 XXX
%4645:	alloca	 XXX
%4646:	alloca	 XXX
%4647:	alloca	 XXX
%4648:	alloca	 XXX
%4649:	alloca	 XXX
%4650:	alloca	 XXX
%4651:	alloca	 XXX
%4652:	store	 p1 %4644
%4653:	call	 XXX %4644 GetKeyword
%4654:	icmp	 %4653 XXX
%4655:	br	 %4654 if.end if.then

BASIC BLOCK if.then
%4656:	store	 XXX grampexc_ptr
%4657:	br	 return

BASIC BLOCK if.end
%4658:	load	 %4644
%4659:	call	 %4658 %4644 %4645 %4651 unifamp
%4660:	icmp	 %4659 XXX
%4661:	br	 %4660 if.end8 if.then3

BASIC BLOCK if.then3
%4662:	call	 XXX malloc
%4663:	bitcast	 %4662
%4664:	store	 %4663 grampexc_ptr
%4665:	load	 grampexc_ptr
%4666:	icmp	 %4665 XXX
%4667:	br	 %4666 if.end7 if.then6

BASIC BLOCK if.then6
%4668:	load	 %4644
%4669:	call	 %4668 XXX XXX parserro
%4670:	call	 XXX interror
%4671:	br	 if.end7

BASIC BLOCK if.end7
%4672:	load	 grampexc_ptr
%4673:	getelementptr	 %4672 XXX XXX
%4674:	store	 XXX %4673
%4675:	load	 %4645
%4676:	load	 grampexc_ptr
%4677:	getelementptr	 %4676 XXX XXX
%4678:	store	 %4675 %4677
%4679:	load	 %4651
%4680:	load	 grampexc_ptr
%4681:	getelementptr	 %4680 XXX XXX
%4682:	store	 %4679 %4681
%4683:	load	 grampexc_ptr
%4684:	getelementptr	 %4683 XXX XXX
%4685:	store	 XXX %4684
%4686:	load	 %4644
%4687:	store	 %4686 pp2
%4688:	br	 return

BASIC BLOCK if.end8
%4689:	load	 %4644
%4690:	call	 %4689 %4644 %4646 %4647 %4648 %4649 %4650 %4651 secoramp
%4691:	icmp	 %4690 XXX
%4692:	br	 %4691 if.end13 if.then11

BASIC BLOCK if.then11
%4693:	store	 XXX grampexc_ptr
%4694:	call	 XXX XXX printf
%4695:	br	 return

BASIC BLOCK if.end13
%4696:	icmp	 %4690 XXX
%4697:	br	 %4696 if.end23 if.then15

BASIC BLOCK if.then15
%4698:	call	 XXX malloc
%4699:	bitcast	 %4698
%4700:	store	 %4699 grampexc_ptr
%4701:	load	 grampexc_ptr
%4702:	icmp	 %4701 XXX
%4703:	br	 %4702 if.end19 if.then18

BASIC BLOCK if.then18
%4704:	load	 %4644
%4705:	call	 %4704 XXX XXX parserro
%4706:	call	 XXX interror
%4707:	br	 if.end19

BASIC BLOCK if.end19
%4708:	load	 grampexc_ptr
%4709:	getelementptr	 %4708 XXX XXX
%4710:	store	 XXX %4709
%4711:	load	 %4646
%4712:	load	 grampexc_ptr
%4713:	getelementptr	 %4712 XXX XXX
%4714:	store	 %4711 %4713
%4715:	load	 %4647
%4716:	load	 grampexc_ptr
%4717:	getelementptr	 %4716 XXX XXX
%4718:	store	 %4715 %4717
%4719:	load	 %4648
%4720:	load	 grampexc_ptr
%4721:	getelementptr	 %4720 XXX XXX
%4722:	store	 %4719 %4721
%4723:	load	 %4649
%4724:	load	 grampexc_ptr
%4725:	getelementptr	 %4724 XXX XXX
%4726:	store	 %4723 %4725
%4727:	load	 %4650
%4728:	load	 grampexc_ptr
%4729:	getelementptr	 %4728 XXX XXX
%4730:	store	 %4727 %4729
%4731:	load	 %4651
%4732:	load	 grampexc_ptr
%4733:	getelementptr	 %4732 XXX XXX
%4734:	store	 %4731 %4733
%4735:	load	 grampexc_ptr
%4736:	getelementptr	 %4735 XXX XXX
%4737:	store	 XXX %4736
%4738:	load	 %4644
%4739:	store	 %4738 pp2
%4740:	br	 return

BASIC BLOCK if.end23
%4741:	store	 XXX grampexc_ptr
%4742:	br	 return

BASIC BLOCK return
%4743:	phi	 XXX XXX XXX XXX XXX
%4744:	ret	 %4743

FUNCTION unifamp

BASIC BLOCK entry
%4745:	alloca	 XXX
%4746:	store	 p1 %4745
%4747:	call	 XXX %4745 GetKeyword
%4748:	icmp	 %4747 XXX
%4749:	br	 %4748 if.end if.then

BASIC BLOCK if.then
%4750:	br	 return

BASIC BLOCK if.end
%4751:	load	 %4745
%4752:	call	 %4751 %4745 unif_val_ptr amp_unit_ptr ampval
%4753:	icmp	 %4752 XXX
%4754:	br	 %4753 if.end4 if.then3

BASIC BLOCK if.then3
%4755:	store	 XXX unif_val_ptr
%4756:	store	 XXX amp_unit_ptr
%4757:	br	 if.end4

BASIC BLOCK if.end4
%4758:	load	 %4745
%4759:	store	 %4758 pp2
%4760:	br	 return

BASIC BLOCK return
%4761:	phi	 XXX XXX
%4762:	ret	 %4761

FUNCTION secoramp

BASIC BLOCK entry
%4763:	alloca	 XXX
%4764:	store	 p1 %4763
%4765:	call	 XXX %4763 GetKeyword
%4766:	icmp	 %4765 XXX
%4767:	br	 %4766 if.end if.then

BASIC BLOCK if.then
%4768:	br	 return

BASIC BLOCK if.end
%4769:	call	 XXX %4763 GetKeyword
%4770:	call	 XXX %4763 GetKeyword
%4771:	call	 centre_ptr %4763 GetReal
%4772:	icmp	 %4771 XXX
%4773:	br	 %4772 if.end6 if.then5

BASIC BLOCK if.then5
%4774:	load	 %4763
%4775:	call	 %4774 XXX XXX parserro
%4776:	br	 return

BASIC BLOCK if.end6
%4777:	call	 XXX %4763 GetKeyword
%4778:	call	 p1_et_ptr %4763 GetReal
%4779:	icmp	 %4778 XXX
%4780:	br	 %4779 if.end11 if.then10

BASIC BLOCK if.then10
%4781:	load	 %4763
%4782:	call	 %4781 XXX XXX parserro
%4783:	br	 return

BASIC BLOCK if.end11
%4784:	call	 XXX %4763 GetKeyword
%4785:	call	 p2_et_ptr %4763 GetReal
%4786:	icmp	 %4785 XXX
%4787:	br	 %4786 if.end16 if.then15

BASIC BLOCK if.then15
%4788:	load	 %4763
%4789:	call	 %4788 XXX XXX parserro
%4790:	br	 return

BASIC BLOCK if.end16
%4791:	call	 XXX %4763 GetKeyword
%4792:	call	 q1_et_ptr %4763 GetReal
%4793:	icmp	 %4792 XXX
%4794:	br	 %4793 if.end21 if.then20

BASIC BLOCK if.then20
%4795:	load	 %4763
%4796:	call	 %4795 XXX XXX parserro
%4797:	br	 return

BASIC BLOCK if.end21
%4798:	call	 XXX %4763 GetKeyword
%4799:	load	 %4763
%4800:	call	 %4799 %4763 q2_et_ptr amp_unit_ptr ampval
%4801:	icmp	 %4800 XXX
%4802:	br	 %4801 if.end26 if.then25

BASIC BLOCK if.then25
%4803:	load	 %4763
%4804:	call	 %4803 XXX XXX parserro
%4805:	br	 return

BASIC BLOCK if.end26
%4806:	load	 %4763
%4807:	store	 %4806 pp2
%4808:	br	 return

BASIC BLOCK return
%4809:	phi	 XXX XXX XXX XXX XXX XXX XXX
%4810:	ret	 %4809

FUNCTION greldef

BASIC BLOCK entry
%4811:	alloca	 XXX
%4812:	store	 p1 %4811
%4813:	store	 XXX grid_ptr
%4814:	store	 XXX elem_ptr
%4815:	load	 %4811
%4816:	call	 %4815 %4811 grid_ptr griddef1
%4817:	icmp	 %4816 XXX
%4818:	br	 %4817 if.end if.then

BASIC BLOCK if.then
%4819:	br	 return

BASIC BLOCK if.end
%4820:	icmp	 %4816 XXX
%4821:	br	 %4820 if.end4 if.then2

BASIC BLOCK if.then2
%4822:	call	 XXX XXX printf
%4823:	br	 return

BASIC BLOCK if.end4
%4824:	load	 %4811
%4825:	call	 %4824 %4811 elem_ptr elemdef
%4826:	icmp	 %4825 XXX
%4827:	br	 %4826 if.end8 if.then7

BASIC BLOCK if.then7
%4828:	load	 %4811
%4829:	call	 %4828 XXX XXX parserro
%4830:	br	 return

BASIC BLOCK if.end8
%4831:	icmp	 %4825 XXX
%4832:	br	 %4831 if.end12 if.then10

BASIC BLOCK if.then10
%4833:	call	 XXX XXX printf
%4834:	br	 return

BASIC BLOCK if.end12
%4835:	load	 %4811
%4836:	store	 %4835 pp2
%4837:	br	 return

BASIC BLOCK return
%4838:	phi	 XXX XXX XXX XXX XXX
%4839:	ret	 %4838

FUNCTION griddef1

BASIC BLOCK entry
%4840:	alloca	 XXX
%4841:	alloca	 XXX
%4842:	alloca	 XXX
%4843:	alloca	 XXX
%4844:	alloca	 XXX
%4845:	alloca	 XXX
%4846:	alloca	 XXX
%4847:	alloca	 XXX
%4848:	alloca	 XXX
%4849:	alloca	 XXX
%4850:	alloca	 XXX
%4851:	store	 p1 %4840
%4852:	call	 XXX %4840 GetKeyword
%4853:	icmp	 %4852 XXX
%4854:	br	 %4853 if.end if.then

BASIC BLOCK if.then
%4855:	store	 XXX grid_ptr
%4856:	br	 return

BASIC BLOCK if.end
%4857:	load	 %4840
%4858:	call	 %4857 %4840 %4841 %4843 squgrdef
%4859:	icmp	 %4858 XXX
%4860:	br	 %4859 if.end5 if.then3

BASIC BLOCK if.then3
%4861:	store	 XXX grid_ptr
%4862:	call	 XXX XXX printf
%4863:	br	 return

BASIC BLOCK if.end5
%4864:	icmp	 %4858 XXX
%4865:	br	 %4864 if.end13 if.then7

BASIC BLOCK if.then7
%4866:	load	 %4840
%4867:	call	 %4866 %4840 %4841 %4842 %4843 recgrdef
%4868:	icmp	 %4867 XXX
%4869:	br	 %4868 if.end12 if.then10

BASIC BLOCK if.then10
%4870:	call	 XXX XXX printf
%4871:	store	 XXX grid_ptr
%4872:	br	 return

BASIC BLOCK if.end12
%4873:	br	 if.end13

BASIC BLOCK if.end13
%4874:	phi	 XXX XXX
%4875:	phi	 %4867 %4858
%4876:	icmp	 %4875 XXX
%4877:	br	 %4876 if.end21 if.then15

BASIC BLOCK if.then15
%4878:	load	 %4840
%4879:	call	 %4878 %4840 %4841 %4843 hexgrdef
%4880:	icmp	 %4879 XXX
%4881:	br	 %4880 if.end20 if.then18

BASIC BLOCK if.then18
%4882:	store	 XXX grid_ptr
%4883:	call	 XXX XXX printf
%4884:	br	 return

BASIC BLOCK if.end20
%4885:	br	 if.end21

BASIC BLOCK if.end21
%4886:	phi	 XXX %4874
%4887:	phi	 %4879 %4875
%4888:	icmp	 %4887 XXX
%4889:	br	 %4888 if.end29 if.then23

BASIC BLOCK if.then23
%4890:	load	 %4840
%4891:	call	 %4890 %4840 %4844 %4845 %4841 %4842 %4843 %4846 %4847 %4848 %4849 %4850 trigrdef
%4892:	icmp	 %4891 XXX
%4893:	br	 %4892 if.end28 if.then26

BASIC BLOCK if.then26
%4894:	store	 XXX grid_ptr
%4895:	call	 XXX XXX printf
%4896:	br	 return

BASIC BLOCK if.end28
%4897:	br	 if.end29

BASIC BLOCK if.end29
%4898:	phi	 XXX %4886
%4899:	phi	 %4891 %4887
%4900:	icmp	 %4899 XXX
%4901:	br	 %4900 if.end32 if.then31

BASIC BLOCK if.then31
%4902:	store	 XXX grid_ptr
%4903:	load	 %4840
%4904:	call	 %4903 XXX XXX parserro
%4905:	br	 return

BASIC BLOCK if.end32
%4906:	call	 XXX malloc
%4907:	bitcast	 %4906
%4908:	store	 %4907 grid_ptr
%4909:	load	 grid_ptr
%4910:	icmp	 %4909 XXX
%4911:	br	 %4910 if.end37 if.then35

BASIC BLOCK if.then35
%4912:	call	 XXX XXX printf
%4913:	call	 XXX interror
%4914:	br	 if.end37

BASIC BLOCK if.end37
%4915:	load	 grid_ptr
%4916:	getelementptr	 %4915 XXX XXX
%4917:	store	 %4898 %4916
%4918:	load	 grid_ptr
%4919:	getelementptr	 %4918 XXX XXX
%4920:	store	 XXX %4919
%4921:	load	 %4841
%4922:	load	 grid_ptr
%4923:	getelementptr	 %4922 XXX XXX
%4924:	store	 %4921 %4923
%4925:	load	 %4842
%4926:	load	 grid_ptr
%4927:	getelementptr	 %4926 XXX XXX
%4928:	store	 %4925 %4927
%4929:	load	 %4843
%4930:	load	 grid_ptr
%4931:	getelementptr	 %4930 XXX XXX
%4932:	store	 %4929 %4931
%4933:	load	 %4844
%4934:	load	 grid_ptr
%4935:	getelementptr	 %4934 XXX XXX
%4936:	store	 %4933 %4935
%4937:	load	 %4845
%4938:	load	 grid_ptr
%4939:	getelementptr	 %4938 XXX XXX
%4940:	store	 %4937 %4939
%4941:	load	 %4846
%4942:	load	 grid_ptr
%4943:	getelementptr	 %4942 XXX XXX
%4944:	store	 %4941 %4943
%4945:	load	 %4847
%4946:	load	 grid_ptr
%4947:	getelementptr	 %4946 XXX XXX
%4948:	store	 %4945 %4947
%4949:	load	 %4848
%4950:	load	 grid_ptr
%4951:	getelementptr	 %4950 XXX XXX
%4952:	store	 %4949 %4951
%4953:	load	 %4849
%4954:	load	 grid_ptr
%4955:	getelementptr	 %4954 XXX XXX
%4956:	store	 %4953 %4955
%4957:	load	 %4850
%4958:	load	 grid_ptr
%4959:	getelementptr	 %4958 XXX XXX
%4960:	store	 %4957 %4959
%4961:	load	 %4840
%4962:	store	 %4961 pp2
%4963:	br	 return

BASIC BLOCK return
%4964:	phi	 XXX XXX XXX XXX XXX XXX XXX
%4965:	ret	 %4964

FUNCTION grexcdef

BASIC BLOCK entry
%4966:	alloca	 XXX
%4967:	store	 p1 %4966
%4968:	store	 XXX grampexc_ptr
%4969:	store	 XXX grphaexc_ptr
%4970:	call	 XXX %4966 GetKeyword
%4971:	icmp	 %4970 XXX
%4972:	br	 %4971 if.end if.then

BASIC BLOCK if.then
%4973:	br	 return

BASIC BLOCK if.end
%4974:	load	 %4966
%4975:	call	 %4974 %4966 grampexc_ptr grampexc
%4976:	icmp	 %4975 XXX
%4977:	br	 %4976 if.end5 if.then3

BASIC BLOCK if.then3
%4978:	call	 XXX XXX printf
%4979:	br	 return

BASIC BLOCK if.end5
%4980:	load	 %4966
%4981:	call	 %4980 %4966 grphaexc_ptr grphaexc
%4982:	icmp	 %4981 XXX
%4983:	br	 %4982 if.end10 if.then8

BASIC BLOCK if.then8
%4984:	call	 XXX XXX printf
%4985:	br	 return

BASIC BLOCK if.end10
%4986:	load	 %4966
%4987:	store	 %4986 pp2
%4988:	br	 return

BASIC BLOCK return
%4989:	phi	 XXX XXX XXX XXX
%4990:	ret	 %4989

FUNCTION grphaexc

BASIC BLOCK entry
%4991:	alloca	 XXX
%4992:	alloca	 XXX
%4993:	alloca	 XXX
%4994:	alloca	 XXX
%4995:	alloca	 XXX
%4996:	alloca	 XXX
%4997:	alloca	 XXX
%4998:	alloca	 XXX
%4999:	alloca	 XXX
%5000:	alloca	 XXX
%5001:	alloca	 XXX
%5002:	alloca	 XXX
%5003:	alloca	 XXX
%5004:	alloca	 XXX
%5005:	alloca	 XXX
%5006:	alloca	 XXX
%5007:	alloca	 XXX
%5008:	alloca	 XXX
%5009:	alloca	 XXX
%5010:	alloca	 XXX
%5011:	store	 p1 %4991
%5012:	call	 XXX %4991 GetKeyword
%5013:	icmp	 %5012 XXX
%5014:	br	 %5013 if.end if.then

BASIC BLOCK if.then
%5015:	store	 XXX grphaexc_ptr
%5016:	br	 return

BASIC BLOCK if.end
%5017:	load	 %4991
%5018:	call	 %5017 %4991 %4992 %5010 unifpha
%5019:	icmp	 %5018 XXX
%5020:	br	 %5019 if.end8 if.then3

BASIC BLOCK if.then3
%5021:	call	 XXX malloc
%5022:	bitcast	 %5021
%5023:	store	 %5022 grphaexc_ptr
%5024:	load	 grphaexc_ptr
%5025:	icmp	 %5024 XXX
%5026:	br	 %5025 if.end7 if.then6

BASIC BLOCK if.then6
%5027:	load	 %4991
%5028:	call	 %5027 XXX XXX parserro
%5029:	call	 XXX interror
%5030:	br	 if.end7

BASIC BLOCK if.end7
%5031:	load	 grphaexc_ptr
%5032:	getelementptr	 %5031 XXX XXX
%5033:	store	 XXX %5032
%5034:	load	 %4992
%5035:	load	 grphaexc_ptr
%5036:	getelementptr	 %5035 XXX XXX
%5037:	store	 %5034 %5036
%5038:	load	 %5010
%5039:	load	 grphaexc_ptr
%5040:	getelementptr	 %5039 XXX XXX
%5041:	store	 %5038 %5040
%5042:	load	 grphaexc_ptr
%5043:	getelementptr	 %5042 XXX XXX
%5044:	store	 XXX %5043
%5045:	load	 %4991
%5046:	store	 %5045 pp2
%5047:	br	 return

BASIC BLOCK if.end8
%5048:	load	 %4991
%5049:	call	 %5048 %4991 %4993 %4994 %4995 %4996 %4997 %5010 secorpha
%5050:	icmp	 %5049 XXX
%5051:	br	 %5050 if.end13 if.then11

BASIC BLOCK if.then11
%5052:	store	 XXX grphaexc_ptr
%5053:	call	 XXX XXX printf
%5054:	br	 return

BASIC BLOCK if.end13
%5055:	icmp	 %5049 XXX
%5056:	br	 %5055 if.end23 if.then15

BASIC BLOCK if.then15
%5057:	call	 XXX malloc
%5058:	bitcast	 %5057
%5059:	store	 %5058 grphaexc_ptr
%5060:	load	 grphaexc_ptr
%5061:	icmp	 %5060 XXX
%5062:	br	 %5061 if.end19 if.then18

BASIC BLOCK if.then18
%5063:	load	 %4991
%5064:	call	 %5063 XXX XXX parserro
%5065:	call	 XXX interror
%5066:	br	 if.end19

BASIC BLOCK if.end19
%5067:	load	 grphaexc_ptr
%5068:	getelementptr	 %5067 XXX XXX
%5069:	store	 XXX %5068
%5070:	load	 %4993
%5071:	load	 grphaexc_ptr
%5072:	getelementptr	 %5071 XXX XXX
%5073:	store	 %5070 %5072
%5074:	load	 %4994
%5075:	load	 grphaexc_ptr
%5076:	getelementptr	 %5075 XXX XXX
%5077:	store	 %5074 %5076
%5078:	load	 %4995
%5079:	load	 grphaexc_ptr
%5080:	getelementptr	 %5079 XXX XXX
%5081:	store	 %5078 %5080
%5082:	load	 %4996
%5083:	load	 grphaexc_ptr
%5084:	getelementptr	 %5083 XXX XXX
%5085:	store	 %5082 %5084
%5086:	load	 %4997
%5087:	load	 grphaexc_ptr
%5088:	getelementptr	 %5087 XXX XXX
%5089:	store	 %5086 %5088
%5090:	load	 %5010
%5091:	load	 grphaexc_ptr
%5092:	getelementptr	 %5091 XXX XXX
%5093:	store	 %5090 %5092
%5094:	load	 grphaexc_ptr
%5095:	getelementptr	 %5094 XXX XXX
%5096:	store	 XXX %5095
%5097:	load	 %4991
%5098:	store	 %5097 pp2
%5099:	br	 return

BASIC BLOCK if.end23
%5100:	load	 %4991
%5101:	call	 %5100 %4991 %4999 %5000 %5001 %5002 %5003 %5004 %5005 %4998 %5010 serotpha
%5102:	icmp	 %5101 XXX
%5103:	br	 %5102 if.end28 if.then26

BASIC BLOCK if.then26
%5104:	store	 XXX grphaexc_ptr
%5105:	call	 XXX XXX printf
%5106:	br	 return

BASIC BLOCK if.end28
%5107:	icmp	 %5101 XXX
%5108:	br	 %5107 if.end39 if.then30

BASIC BLOCK if.then30
%5109:	call	 XXX malloc
%5110:	bitcast	 %5109
%5111:	store	 %5110 grphaexc_ptr
%5112:	load	 grphaexc_ptr
%5113:	icmp	 %5112 XXX
%5114:	br	 %5113 if.end35 if.then33

BASIC BLOCK if.then33
%5115:	call	 XXX XXX printf
%5116:	call	 XXX interror
%5117:	br	 if.end35

BASIC BLOCK if.end35
%5118:	load	 grphaexc_ptr
%5119:	getelementptr	 %5118 XXX XXX
%5120:	store	 XXX %5119
%5121:	load	 %4999
%5122:	load	 grphaexc_ptr
%5123:	getelementptr	 %5122 XXX XXX
%5124:	store	 %5121 %5123
%5125:	load	 %5000
%5126:	load	 grphaexc_ptr
%5127:	getelementptr	 %5126 XXX XXX
%5128:	store	 %5125 %5127
%5129:	load	 %5001
%5130:	load	 grphaexc_ptr
%5131:	getelementptr	 %5130 XXX XXX
%5132:	store	 %5129 %5131
%5133:	load	 %5002
%5134:	load	 grphaexc_ptr
%5135:	getelementptr	 %5134 XXX XXX
%5136:	store	 %5133 %5135
%5137:	load	 %5003
%5138:	load	 grphaexc_ptr
%5139:	getelementptr	 %5138 XXX XXX
%5140:	store	 %5137 %5139
%5141:	load	 %5004
%5142:	load	 grphaexc_ptr
%5143:	getelementptr	 %5142 XXX XXX
%5144:	store	 %5141 %5143
%5145:	load	 %5005
%5146:	load	 grphaexc_ptr
%5147:	getelementptr	 %5146 XXX XXX
%5148:	store	 %5145 %5147
%5149:	load	 %4998
%5150:	load	 grphaexc_ptr
%5151:	getelementptr	 %5150 XXX XXX
%5152:	store	 %5149 %5151
%5153:	load	 %5010
%5154:	load	 grphaexc_ptr
%5155:	getelementptr	 %5154 XXX XXX
%5156:	store	 %5153 %5155
%5157:	load	 grphaexc_ptr
%5158:	getelementptr	 %5157 XXX XXX
%5159:	store	 XXX %5158
%5160:	load	 %4991
%5161:	store	 %5160 pp2
%5162:	br	 return

BASIC BLOCK if.end39
%5163:	load	 %4991
%5164:	call	 %5163 %4991 %5006 %5007 %5008 %5009 %4998 beampha
%5165:	icmp	 %5164 XXX
%5166:	br	 %5165 if.end44 if.then42

BASIC BLOCK if.then42
%5167:	store	 XXX grphaexc_ptr
%5168:	call	 XXX XXX printf
%5169:	br	 return

BASIC BLOCK if.end44
%5170:	icmp	 %5164 XXX
%5171:	br	 %5170 if.end55 if.then46

BASIC BLOCK if.then46
%5172:	call	 XXX malloc
%5173:	bitcast	 %5172
%5174:	store	 %5173 grphaexc_ptr
%5175:	load	 grphaexc_ptr
%5176:	icmp	 %5175 XXX
%5177:	br	 %5176 if.end51 if.then49

BASIC BLOCK if.then49
%5178:	call	 XXX XXX printf
%5179:	call	 XXX interror
%5180:	br	 if.end51

BASIC BLOCK if.end51
%5181:	load	 grphaexc_ptr
%5182:	getelementptr	 %5181 XXX XXX
%5183:	store	 XXX %5182
%5184:	load	 %5006
%5185:	load	 grphaexc_ptr
%5186:	getelementptr	 %5185 XXX XXX
%5187:	store	 %5184 %5186
%5188:	load	 %5007
%5189:	load	 grphaexc_ptr
%5190:	getelementptr	 %5189 XXX XXX
%5191:	store	 %5188 %5190
%5192:	load	 %5008
%5193:	load	 grphaexc_ptr
%5194:	getelementptr	 %5193 XXX XXX
%5195:	store	 %5192 %5194
%5196:	load	 %5009
%5197:	load	 grphaexc_ptr
%5198:	getelementptr	 %5197 XXX XXX
%5199:	store	 %5196 %5198
%5200:	load	 %4998
%5201:	load	 grphaexc_ptr
%5202:	getelementptr	 %5201 XXX XXX
%5203:	store	 %5200 %5202
%5204:	load	 grphaexc_ptr
%5205:	getelementptr	 %5204 XXX XXX
%5206:	store	 XXX %5205
%5207:	load	 %4991
%5208:	store	 %5207 pp2
%5209:	br	 return

BASIC BLOCK if.end55
%5210:	store	 XXX grphaexc_ptr
%5211:	br	 return

BASIC BLOCK return
%5212:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX
%5213:	ret	 %5212

FUNCTION grgeodef

BASIC BLOCK entry
%5214:	alloca	 XXX
%5215:	alloca	 XXX
%5216:	store	 XXX %5215
%5217:	store	 p1 %5214
%5218:	store	 XXX addrem_ptr
%5219:	load	 %5214
%5220:	call	 %5219 %5214 addrem_ptr adddef
%5221:	icmp	 %5220 XXX
%5222:	br	 %5221 if.end if.then

BASIC BLOCK if.then
%5223:	load	 %5214
%5224:	call	 %5223 XXX XXX parserro
%5225:	br	 return

BASIC BLOCK if.end
%5226:	icmp	 %5220 XXX
%5227:	br	 %5226 if.end4 if.then2

BASIC BLOCK if.then2
%5228:	call	 XXX XXX printf
%5229:	br	 return

BASIC BLOCK if.end4
%5230:	load	 addrem_ptr
%5231:	store	 %5230 %5215
%5232:	load	 addrem_ptr
%5233:	br	 while.body

BASIC BLOCK while.body
%5234:	phi	 %5232 %5252
%5235:	load	 %5214
%5236:	call	 %5235 %5214 %5215 adremdef
%5237:	icmp	 %5236 XXX
%5238:	br	 %5237 if.end8 if.then7

BASIC BLOCK if.then7
%5239:	getelementptr	 %5234 XXX XXX
%5240:	store	 XXX %5239
%5241:	load	 %5214
%5242:	store	 %5241 pp2
%5243:	br	 return

BASIC BLOCK if.end8
%5244:	icmp	 %5236 XXX
%5245:	br	 %5244 if.end12 if.then10

BASIC BLOCK if.then10
%5246:	store	 XXX addrem_ptr
%5247:	call	 XXX XXX printf
%5248:	br	 return

BASIC BLOCK if.end12
%5249:	load	 %5215
%5250:	getelementptr	 %5234 XXX XXX
%5251:	store	 %5249 %5250
%5252:	load	 %5215
%5253:	getelementptr	 %5252 XXX XXX
%5254:	store	 XXX %5253
%5255:	br	 while.body

BASIC BLOCK return
%5256:	phi	 XXX XXX XXX XXX
%5257:	ret	 %5256

FUNCTION squgrdef

BASIC BLOCK entry
%5258:	alloca	 XXX
%5259:	store	 p1 %5258
%5260:	store	 XXX pstep_ptr
%5261:	store	 XXX pstep_unit_ptr
%5262:	call	 XXX %5258 GetKeyword
%5263:	icmp	 %5262 XXX
%5264:	br	 %5263 if.end if.then

BASIC BLOCK if.then
%5265:	br	 return

BASIC BLOCK if.end
%5266:	load	 %5258
%5267:	call	 %5266 %5258 pstep_ptr pstep_unit_ptr sinstep
%5268:	icmp	 %5267 XXX
%5269:	br	 %5268 if.end4 if.then3

BASIC BLOCK if.then3
%5270:	store	 XXX pstep_ptr
%5271:	store	 XXX pstep_unit_ptr
%5272:	load	 %5258
%5273:	store	 %5272 pp2
%5274:	br	 return

BASIC BLOCK if.end4
%5275:	icmp	 %5267 XXX
%5276:	br	 %5275 if.end7 if.then6

BASIC BLOCK if.then6
%5277:	load	 %5258
%5278:	call	 %5277 %5267 XXX parserro
%5279:	store	 XXX pstep_ptr
%5280:	store	 XXX pstep_unit_ptr
%5281:	br	 return

BASIC BLOCK if.end7
%5282:	load	 %5258
%5283:	store	 %5282 pp2
%5284:	br	 return

BASIC BLOCK return
%5285:	phi	 XXX XXX XXX XXX
%5286:	ret	 %5285

FUNCTION recgrdef

BASIC BLOCK entry
%5287:	alloca	 XXX
%5288:	store	 p1 %5287
%5289:	store	 XXX pstep_ptr
%5290:	store	 XXX qstep_ptr
%5291:	store	 XXX pqstep_unit_ptr
%5292:	call	 XXX %5287 GetKeyword
%5293:	icmp	 %5292 XXX
%5294:	br	 %5293 if.end if.then

BASIC BLOCK if.then
%5295:	br	 return

BASIC BLOCK if.end
%5296:	load	 %5287
%5297:	call	 %5296 %5287 pstep_ptr qstep_ptr pqstep_unit_ptr doubstep
%5298:	icmp	 %5297 XXX
%5299:	br	 %5298 if.end4 if.then3

BASIC BLOCK if.then3
%5300:	store	 XXX pstep_ptr
%5301:	store	 XXX qstep_ptr
%5302:	store	 XXX pqstep_unit_ptr
%5303:	load	 %5287
%5304:	store	 %5303 pp2
%5305:	br	 return

BASIC BLOCK if.end4
%5306:	icmp	 %5297 XXX
%5307:	br	 %5306 if.end7 if.then6

BASIC BLOCK if.then6
%5308:	load	 %5287
%5309:	call	 %5308 %5297 XXX parserro
%5310:	store	 XXX pstep_ptr
%5311:	store	 XXX qstep_ptr
%5312:	store	 XXX pqstep_unit_ptr
%5313:	br	 return

BASIC BLOCK if.end7
%5314:	load	 %5287
%5315:	store	 %5314 pp2
%5316:	br	 return

BASIC BLOCK return
%5317:	phi	 XXX XXX XXX XXX
%5318:	ret	 %5317

FUNCTION hexgrdef

BASIC BLOCK entry
%5319:	alloca	 XXX
%5320:	store	 p1 %5319
%5321:	store	 XXX pstep_ptr
%5322:	store	 XXX pstep_unit_ptr
%5323:	call	 XXX %5319 GetKeyword
%5324:	icmp	 %5323 XXX
%5325:	br	 %5324 if.end if.then

BASIC BLOCK if.then
%5326:	br	 return

BASIC BLOCK if.end
%5327:	load	 %5319
%5328:	call	 %5327 %5319 pstep_ptr pstep_unit_ptr sinstep
%5329:	icmp	 %5328 XXX
%5330:	br	 %5329 if.end4 if.then3

BASIC BLOCK if.then3
%5331:	store	 XXX pstep_ptr
%5332:	store	 XXX pstep_unit_ptr
%5333:	load	 %5319
%5334:	store	 %5333 pp2
%5335:	br	 return

BASIC BLOCK if.end4
%5336:	icmp	 %5328 XXX
%5337:	br	 %5336 if.end7 if.then6

BASIC BLOCK if.then6
%5338:	load	 %5319
%5339:	call	 %5338 %5328 XXX parserro
%5340:	store	 XXX pstep_ptr
%5341:	store	 XXX pstep_unit_ptr
%5342:	br	 return

BASIC BLOCK if.end7
%5343:	load	 %5319
%5344:	store	 %5343 pp2
%5345:	br	 return

BASIC BLOCK return
%5346:	phi	 XXX XXX XXX XXX
%5347:	ret	 %5346

FUNCTION trigrdef

BASIC BLOCK entry
%5348:	alloca	 XXX
%5349:	store	 p1 %5348
%5350:	store	 XXX angle_ptr
%5351:	store	 XXX angle_unit_ptr
%5352:	store	 XXX pstep_ptr
%5353:	store	 XXX qstep_ptr
%5354:	store	 XXX pqstep_unit_ptr
%5355:	store	 XXX px_ptr
%5356:	store	 XXX py_ptr
%5357:	store	 XXX qx_ptr
%5358:	store	 XXX qy_ptr
%5359:	store	 XXX pqxy_unit_ptr
%5360:	call	 XXX %5348 GetKeyword
%5361:	icmp	 %5360 XXX
%5362:	br	 %5361 if.end if.then

BASIC BLOCK if.then
%5363:	br	 return

BASIC BLOCK if.end
%5364:	load	 %5348
%5365:	call	 %5364 %5348 angle_ptr angle_unit_ptr pstep_ptr qstep_ptr pqstep_unit_ptr angstep
%5366:	icmp	 %5365 XXX
%5367:	br	 %5366 if.end4 if.then3

BASIC BLOCK if.then3
%5368:	store	 XXX angle_ptr
%5369:	store	 XXX angle_unit_ptr
%5370:	store	 XXX pstep_ptr
%5371:	store	 XXX qstep_ptr
%5372:	store	 XXX pqstep_unit_ptr
%5373:	load	 %5348
%5374:	call	 %5373 XXX XXX parserro
%5375:	br	 return

BASIC BLOCK if.end4
%5376:	icmp	 %5365 XXX
%5377:	br	 %5376 if.end15 if.then6

BASIC BLOCK if.then6
%5378:	load	 %5348
%5379:	call	 %5378 %5348 px_ptr py_ptr qx_ptr qy_ptr pqxy_unit_ptr versdef
%5380:	icmp	 %5379 XXX
%5381:	br	 %5380 if.end11 land.lhs.true

BASIC BLOCK land.lhs.true
%5382:	icmp	 %5379 XXX
%5383:	br	 %5382 if.end11 if.then10

BASIC BLOCK if.then10
%5384:	load	 %5348
%5385:	call	 %5384 %5379 XXX parserro
%5386:	store	 XXX px_ptr
%5387:	store	 XXX py_ptr
%5388:	store	 XXX qx_ptr
%5389:	store	 XXX qy_ptr
%5390:	store	 XXX pqxy_unit_ptr
%5391:	br	 return

BASIC BLOCK if.end11
%5392:	icmp	 %5379 XXX
%5393:	br	 %5392 if.end14 if.then13

BASIC BLOCK if.then13
%5394:	store	 XXX angle_ptr
%5395:	store	 XXX angle_unit_ptr
%5396:	store	 XXX pstep_ptr
%5397:	store	 XXX qstep_ptr
%5398:	store	 XXX pqstep_unit_ptr
%5399:	store	 XXX px_ptr
%5400:	store	 XXX py_ptr
%5401:	store	 XXX qx_ptr
%5402:	store	 XXX qy_ptr
%5403:	store	 XXX pqxy_unit_ptr
%5404:	br	 if.end14

BASIC BLOCK if.end14
%5405:	br	 if.end15

BASIC BLOCK if.end15
%5406:	load	 %5348
%5407:	store	 %5406 pp2
%5408:	br	 return

BASIC BLOCK return
%5409:	phi	 XXX XXX XXX XXX
%5410:	ret	 %5409

FUNCTION InUNames

BASIC BLOCK entry
%5411:	call	 WORD strlen
%5412:	icmp	 %5411 XXX
%5413:	br	 %5412 if.end if.then

BASIC BLOCK if.then
%5414:	call	 XXX printf
%5415:	call	 XXX exit
%5416:	unreachable	

BASIC BLOCK if.end
%5417:	br	 for.cond

BASIC BLOCK for.cond
%5418:	phi	 XXX %5429
%5419:	icmp	 %5418 XXX
%5420:	br	 %5419 for.end for.body

BASIC BLOCK for.body
%5421:	sext	 %5418
%5422:	getelementptr	 UserNames XXX %5421
%5423:	getelementptr	 %5422 XXX XXX
%5424:	call	 WORD %5423 strcmp
%5425:	icmp	 %5424 XXX
%5426:	br	 %5425 if.end6 if.then5

BASIC BLOCK if.then5
%5427:	br	 return

BASIC BLOCK if.end6
%5428:	br	 for.inc

BASIC BLOCK for.inc
%5429:	add	 %5418 XXX
%5430:	br	 for.cond

BASIC BLOCK for.end
%5431:	br	 return

BASIC BLOCK return
%5432:	phi	 XXX XXX
%5433:	ret	 %5432

FUNCTION InserUN

BASIC BLOCK entry
%5434:	call	 WORD strlen
%5435:	icmp	 %5434 XXX
%5436:	br	 %5435 if.end if.then

BASIC BLOCK if.then
%5437:	call	 XXX printf
%5438:	call	 XXX exit
%5439:	unreachable	

BASIC BLOCK if.end
%5440:	br	 for.cond

BASIC BLOCK for.cond
%5441:	icmp	 XXX XXX
%5442:	br	 %5441 for.end for.body

BASIC BLOCK for.body
%5443:	sext	 XXX
%5444:	getelementptr	 UserNames XXX %5443
%5445:	getelementptr	 %5444 XXX XXX
%5446:	call	 %5445 strlen
%5447:	icmp	 %5446 XXX
%5448:	br	 %5447 if.end10 if.then5

BASIC BLOCK if.then5
%5449:	sext	 XXX
%5450:	getelementptr	 UserNames XXX %5449
%5451:	getelementptr	 %5450 XXX XXX
%5452:	call	 %5451 WORD strcpy
%5453:	br	 if.end10

BASIC BLOCK if.end10
%5454:	ret	 XXX

BASIC BLOCK for.inc
%5455:	load	 XXX
%5456:	add	 %5455 XXX
%5457:	store	 %5456 XXX
%5458:	br	 for.cond

BASIC BLOCK for.end
%5459:	call	 XXX printf
%5460:	call	 XXX exit
%5461:	unreachable	

FUNCTION unifpha

BASIC BLOCK entry
%5462:	alloca	 XXX
%5463:	store	 p1 %5462
%5464:	call	 XXX %5462 GetKeyword
%5465:	icmp	 %5464 XXX
%5466:	br	 %5465 if.end if.then

BASIC BLOCK if.then
%5467:	br	 return

BASIC BLOCK if.end
%5468:	load	 %5462
%5469:	call	 %5468 %5462 unif_val_ptr phase_unit_ptr angval
%5470:	icmp	 %5469 XXX
%5471:	br	 %5470 if.end4 if.then3

BASIC BLOCK if.then3
%5472:	store	 XXX unif_val_ptr
%5473:	store	 XXX phase_unit_ptr
%5474:	br	 if.end4

BASIC BLOCK if.end4
%5475:	load	 %5462
%5476:	store	 %5475 pp2
%5477:	br	 return

BASIC BLOCK return
%5478:	phi	 XXX XXX
%5479:	ret	 %5478

FUNCTION secorpha

BASIC BLOCK entry
%5480:	alloca	 XXX
%5481:	store	 p1 %5480
%5482:	call	 XXX %5480 GetKeyword
%5483:	icmp	 %5482 XXX
%5484:	br	 %5483 if.end if.then

BASIC BLOCK if.then
%5485:	br	 return

BASIC BLOCK if.end
%5486:	call	 XXX %5480 GetKeyword
%5487:	call	 XXX %5480 GetKeyword
%5488:	call	 centre_ptr %5480 GetReal
%5489:	icmp	 %5488 XXX
%5490:	br	 %5489 if.end6 if.then5

BASIC BLOCK if.then5
%5491:	load	 %5480
%5492:	call	 %5491 XXX XXX parserro
%5493:	br	 return

BASIC BLOCK if.end6
%5494:	call	 XXX %5480 GetKeyword
%5495:	call	 p1_ep_ptr %5480 GetReal
%5496:	icmp	 %5495 XXX
%5497:	br	 %5496 if.end11 if.then10

BASIC BLOCK if.then10
%5498:	load	 %5480
%5499:	call	 %5498 XXX XXX parserro
%5500:	br	 return

BASIC BLOCK if.end11
%5501:	call	 XXX %5480 GetKeyword
%5502:	call	 p2_ep_ptr %5480 GetReal
%5503:	icmp	 %5502 XXX
%5504:	br	 %5503 if.end16 if.then15

BASIC BLOCK if.then15
%5505:	load	 %5480
%5506:	call	 %5505 XXX XXX parserro
%5507:	br	 return

BASIC BLOCK if.end16
%5508:	call	 XXX %5480 GetKeyword
%5509:	call	 q1_ep_ptr %5480 GetReal
%5510:	icmp	 %5509 XXX
%5511:	br	 %5510 if.end21 if.then20

BASIC BLOCK if.then20
%5512:	load	 %5480
%5513:	call	 %5512 XXX XXX parserro
%5514:	br	 return

BASIC BLOCK if.end21
%5515:	call	 XXX %5480 GetKeyword
%5516:	load	 %5480
%5517:	call	 %5516 %5480 q2_ep_ptr phase_unit_ptr angval
%5518:	icmp	 %5517 XXX
%5519:	br	 %5518 if.end26 if.then25

BASIC BLOCK if.then25
%5520:	load	 %5480
%5521:	call	 %5520 XXX XXX parserro
%5522:	br	 return

BASIC BLOCK if.end26
%5523:	load	 %5480
%5524:	store	 %5523 pp2
%5525:	br	 return

BASIC BLOCK return
%5526:	phi	 XXX XXX XXX XXX XXX XXX XXX
%5527:	ret	 %5526

FUNCTION serotpha

BASIC BLOCK entry
%5528:	alloca	 XXX
%5529:	store	 p1 %5528
%5530:	store	 XXX omit_angle_ptr
%5531:	store	 XXX omit_phase_ptr
%5532:	call	 XXX %5528 GetKeyword
%5533:	icmp	 %5532 XXX
%5534:	br	 %5533 if.end if.then

BASIC BLOCK if.then
%5535:	br	 return

BASIC BLOCK if.end
%5536:	call	 XXX %5528 GetKeyword
%5537:	icmp	 %5536 XXX
%5538:	br	 %5537 if.end4 if.then3

BASIC BLOCK if.then3
%5539:	load	 %5528
%5540:	call	 %5539 XXX XXX parserro
%5541:	br	 return

BASIC BLOCK if.end4
%5542:	load	 %5528
%5543:	call	 %5542 %5528 direction_ptr serotdir
%5544:	icmp	 %5543 XXX
%5545:	br	 %5544 if.end8 if.then7

BASIC BLOCK if.then7
%5546:	store	 XXX direction_ptr
%5547:	br	 if.end8

BASIC BLOCK if.end8
%5548:	load	 %5528
%5549:	call	 %5548 %5528 angle_start_ptr angle_step_ptr omit_phase_ptr phase_start_ptr phase_step_ptr angle_unit_ptr phase_unit_ptr serotpar
%5550:	icmp	 %5549 XXX
%5551:	br	 %5550 if.end12 if.then11

BASIC BLOCK if.then11
%5552:	br	 return

BASIC BLOCK if.end12
%5553:	icmp	 %5549 XXX
%5554:	br	 %5553 if.end15 if.then14

BASIC BLOCK if.then14
%5555:	store	 XXX omit_angle_ptr
%5556:	br	 if.end15

BASIC BLOCK if.end15
%5557:	load	 %5528
%5558:	store	 %5557 pp2
%5559:	br	 return

BASIC BLOCK return
%5560:	phi	 XXX XXX XXX XXX
%5561:	ret	 %5560

FUNCTION sinstep

BASIC BLOCK entry
%5562:	alloca	 XXX
%5563:	store	 p1 %5562
%5564:	store	 XXX step_ptr
%5565:	store	 XXX step_unit_ptr
%5566:	call	 XXX %5562 GetKeyword
%5567:	icmp	 %5566 XXX
%5568:	br	 %5567 if.end if.then

BASIC BLOCK if.then
%5569:	br	 return

BASIC BLOCK if.end
%5570:	load	 %5562
%5571:	call	 %5570 %5562 step_ptr GetUReal
%5572:	icmp	 %5571 XXX
%5573:	br	 %5572 if.end4 if.then3

BASIC BLOCK if.then3
%5574:	store	 XXX step_ptr
%5575:	br	 return

BASIC BLOCK if.end4
%5576:	call	 %5562 step_unit_ptr lenunit
%5577:	icmp	 %5576 XXX
%5578:	br	 %5577 if.end8 if.then7

BASIC BLOCK if.then7
%5579:	store	 XXX step_unit_ptr
%5580:	br	 if.end8

BASIC BLOCK if.end8
%5581:	load	 %5562
%5582:	store	 %5581 pp2
%5583:	br	 return

BASIC BLOCK return
%5584:	phi	 XXX %5571 XXX
%5585:	ret	 %5584

FUNCTION intmax

BASIC BLOCK entry
%5586:	icmp	 a b
%5587:	br	 %5586 if.else if.then

BASIC BLOCK if.then
%5588:	br	 return

BASIC BLOCK if.else
%5589:	br	 return

BASIC BLOCK return
%5590:	phi	 a b
%5591:	ret	 %5590

FUNCTION intmin

BASIC BLOCK entry
%5592:	icmp	 a b
%5593:	br	 %5592 if.else if.then

BASIC BLOCK if.then
%5594:	br	 return

BASIC BLOCK if.else
%5595:	br	 return

BASIC BLOCK return
%5596:	phi	 a b
%5597:	ret	 %5596

FUNCTION linpol

BASIC BLOCK entry
%5598:	alloca	 XXX
%5599:	store	 p1 %5598
%5600:	call	 XXX %5598 GetKeyword
%5601:	icmp	 %5600 XXX
%5602:	br	 %5601 if.end if.then

BASIC BLOCK if.then
%5603:	br	 return

BASIC BLOCK if.end
%5604:	load	 %5598
%5605:	call	 %5604 %5598 angle_ptr angle_unit_ptr polor
%5606:	icmp	 %5605 XXX
%5607:	br	 %5606 if.end4 if.then3

BASIC BLOCK if.then3
%5608:	store	 XXX angle_ptr
%5609:	store	 XXX angle_unit_ptr
%5610:	load	 %5598
%5611:	store	 %5610 pp2
%5612:	br	 return

BASIC BLOCK if.end4
%5613:	icmp	 %5605 XXX
%5614:	br	 %5613 if.end8 if.then6

BASIC BLOCK if.then6
%5615:	call	 XXX XXX printf
%5616:	br	 return

BASIC BLOCK if.end8
%5617:	load	 %5598
%5618:	store	 %5617 pp2
%5619:	br	 return

BASIC BLOCK return
%5620:	phi	 XXX XXX XXX XXX
%5621:	ret	 %5620

FUNCTION polor

BASIC BLOCK entry
%5622:	alloca	 XXX
%5623:	store	 p1 %5622
%5624:	call	 XXX %5622 GetKeyword
%5625:	icmp	 %5624 XXX
%5626:	br	 %5625 if.end if.then

BASIC BLOCK if.then
%5627:	store	 XXX angle_ptr
%5628:	store	 XXX angle_unit_ptr
%5629:	br	 return

BASIC BLOCK if.end
%5630:	store	 XXX angle_ptr
%5631:	store	 XXX angle_unit_ptr
%5632:	call	 XXX %5622 GetKeyword
%5633:	icmp	 %5632 XXX
%5634:	br	 %5633 if.end4 if.then3

BASIC BLOCK if.then3
%5635:	load	 %5622
%5636:	store	 %5635 pp2
%5637:	br	 return

BASIC BLOCK if.end4
%5638:	store	 XXX angle_ptr
%5639:	store	 XXX angle_unit_ptr
%5640:	call	 XXX %5622 GetKeyword
%5641:	icmp	 %5640 XXX
%5642:	br	 %5641 if.end8 if.then7

BASIC BLOCK if.then7
%5643:	load	 %5622
%5644:	store	 %5643 pp2
%5645:	br	 return

BASIC BLOCK if.end8
%5646:	load	 %5622
%5647:	call	 %5646 %5622 angle_ptr angle_unit_ptr angval
%5648:	icmp	 %5647 XXX
%5649:	br	 %5648 if.end12 if.then11

BASIC BLOCK if.then11
%5650:	load	 %5622
%5651:	store	 %5650 pp2
%5652:	br	 return

BASIC BLOCK if.end12
%5653:	icmp	 %5647 XXX
%5654:	br	 %5653 if.end15 if.then14

BASIC BLOCK if.then14
%5655:	load	 %5622
%5656:	call	 %5655 XXX XXX parserro
%5657:	br	 return

BASIC BLOCK if.end15
%5658:	br	 return

BASIC BLOCK return
%5659:	phi	 XXX XXX XXX XXX XXX XXX
%5660:	ret	 %5659

FUNCTION modspec

BASIC BLOCK entry
%5661:	alloca	 XXX
%5662:	store	 p1 %5661
%5663:	call	 XXX %5661 GetKeyword
%5664:	icmp	 %5663 XXX
%5665:	br	 %5664 if.end if.then

BASIC BLOCK if.then
%5666:	load	 %5661
%5667:	call	 %5666 XXX XXX parserro
%5668:	br	 return

BASIC BLOCK if.end
%5669:	store	 XXX model_ptr
%5670:	load	 %5661
%5671:	call	 %5670 %5661 extmod
%5672:	icmp	 %5671 XXX
%5673:	br	 %5672 if.end4 if.then3

BASIC BLOCK if.then3
%5674:	load	 %5661
%5675:	store	 %5674 pp2
%5676:	br	 return

BASIC BLOCK if.end4
%5677:	icmp	 %5671 XXX
%5678:	br	 %5677 if.end7 if.then6

BASIC BLOCK if.then6
%5679:	br	 return

BASIC BLOCK if.end7
%5680:	store	 XXX model_ptr
%5681:	load	 %5661
%5682:	call	 %5681 %5661 exp_ptr cosinus
%5683:	icmp	 %5682 XXX
%5684:	br	 %5683 if.end11 if.then10

BASIC BLOCK if.then10
%5685:	load	 %5661
%5686:	store	 %5685 pp2
%5687:	br	 return

BASIC BLOCK if.end11
%5688:	icmp	 %5682 XXX
%5689:	br	 %5688 if.end14 if.then13

BASIC BLOCK if.then13
%5690:	br	 return

BASIC BLOCK if.end14
%5691:	store	 XXX model_ptr
%5692:	load	 %5661
%5693:	call	 %5692 %5661 anglee_ptr angleh_ptr angle_unit_ptr tapere_ptr taperh_ptr taper_unit_ptr gaussel
%5694:	icmp	 %5693 XXX
%5695:	br	 %5694 if.end18 if.then17

BASIC BLOCK if.then17
%5696:	load	 %5661
%5697:	store	 %5696 pp2
%5698:	br	 return

BASIC BLOCK if.end18
%5699:	icmp	 %5693 XXX
%5700:	br	 %5699 if.end22 if.then20

BASIC BLOCK if.then20
%5701:	call	 XXX XXX printf
%5702:	br	 return

BASIC BLOCK if.end22
%5703:	store	 XXX model_ptr
%5704:	load	 %5661
%5705:	call	 %5704 XXX XXX parserro
%5706:	br	 return

BASIC BLOCK return
%5707:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX
%5708:	ret	 %5707

FUNCTION nodorien

BASIC BLOCK entry
%5709:	alloca	 XXX
%5710:	store	 p1 %5709
%5711:	call	 XXX %5709 GetKeyword
%5712:	icmp	 %5711 XXX
%5713:	br	 %5712 if.end if.then

BASIC BLOCK if.then
%5714:	br	 return

BASIC BLOCK if.end
%5715:	call	 XXX %5709 GetKeyword
%5716:	call	 theta_ptr %5709 GetReal
%5717:	icmp	 %5716 XXX
%5718:	br	 %5717 if.end5 if.then4

BASIC BLOCK if.then4
%5719:	load	 %5709
%5720:	call	 %5719 XXX XXX parserro
%5721:	br	 return

BASIC BLOCK if.end5
%5722:	call	 XXX %5709 GetKeyword
%5723:	call	 phi_ptr %5709 GetReal
%5724:	icmp	 %5723 XXX
%5725:	br	 %5724 if.end10 if.then9

BASIC BLOCK if.then9
%5726:	load	 %5709
%5727:	call	 %5726 XXX XXX parserro
%5728:	br	 return

BASIC BLOCK if.end10
%5729:	call	 XXX %5709 GetKeyword
%5730:	call	 psi_ptr %5709 GetReal
%5731:	icmp	 %5730 XXX
%5732:	br	 %5731 if.end15 if.then14

BASIC BLOCK if.then14
%5733:	load	 %5709
%5734:	call	 %5733 XXX XXX parserro
%5735:	br	 return

BASIC BLOCK if.end15
%5736:	load	 %5709
%5737:	call	 %5736 %5709 angle_unit_ptr angunit
%5738:	icmp	 %5737 XXX
%5739:	br	 %5738 if.end19 if.then18

BASIC BLOCK if.then18
%5740:	store	 XXX angle_unit_ptr
%5741:	br	 if.end19

BASIC BLOCK if.end19
%5742:	load	 %5709
%5743:	store	 %5742 pp2
%5744:	br	 return

BASIC BLOCK return
%5745:	phi	 XXX XXX XXX XXX XXX
%5746:	ret	 %5745

FUNCTION phaserot

BASIC BLOCK entry
%5747:	alloca	 XXX
%5748:	store	 p1 %5747
%5749:	call	 XXX %5747 GetKeyword
%5750:	icmp	 %5749 XXX
%5751:	br	 %5750 if.end if.then

BASIC BLOCK if.then
%5752:	br	 return

BASIC BLOCK if.end
%5753:	call	 XXX %5747 GetKeyword
%5754:	call	 phase_start_ptr %5747 GetReal
%5755:	icmp	 %5754 XXX
%5756:	br	 %5755 if.end5 if.then4

BASIC BLOCK if.then4
%5757:	load	 %5747
%5758:	call	 %5757 XXX XXX parserro
%5759:	br	 return

BASIC BLOCK if.end5
%5760:	call	 XXX %5747 GetKeyword
%5761:	load	 %5747
%5762:	call	 %5761 %5747 phase_step_ptr phase_unit_ptr angval
%5763:	icmp	 %5762 XXX
%5764:	br	 %5763 if.end10 if.then9

BASIC BLOCK if.then9
%5765:	load	 %5747
%5766:	call	 %5765 XXX XXX parserro
%5767:	br	 return

BASIC BLOCK if.end10
%5768:	load	 %5747
%5769:	store	 %5768 pp2
%5770:	br	 return

BASIC BLOCK return
%5771:	phi	 XXX XXX XXX XXX
%5772:	ret	 %5771

FUNCTION polorbis

BASIC BLOCK entry
%5773:	alloca	 XXX
%5774:	store	 p1 %5773
%5775:	call	 XXX %5773 GetKeyword
%5776:	icmp	 %5775 XXX
%5777:	br	 %5776 if.end if.then

BASIC BLOCK if.then
%5778:	store	 XXX phepol_ptr
%5779:	store	 XXX phepol_unit_ptr
%5780:	br	 return

BASIC BLOCK if.end
%5781:	store	 XXX phepol_ptr
%5782:	store	 XXX phepol_unit_ptr
%5783:	call	 XXX %5773 GetKeyword
%5784:	icmp	 %5783 XXX
%5785:	br	 %5784 if.end4 if.then3

BASIC BLOCK if.then3
%5786:	load	 %5773
%5787:	store	 %5786 pp2
%5788:	br	 return

BASIC BLOCK if.end4
%5789:	store	 XXX phepol_ptr
%5790:	store	 XXX phepol_unit_ptr
%5791:	call	 XXX %5773 GetKeyword
%5792:	icmp	 %5791 XXX
%5793:	br	 %5792 if.end8 if.then7

BASIC BLOCK if.then7
%5794:	load	 %5773
%5795:	store	 %5794 pp2
%5796:	br	 return

BASIC BLOCK if.end8
%5797:	load	 %5773
%5798:	call	 %5797 %5773 phepol_ptr phepol_unit_ptr angval
%5799:	icmp	 %5798 XXX
%5800:	br	 %5799 if.end12 if.then11

BASIC BLOCK if.then11
%5801:	load	 %5773
%5802:	store	 %5801 pp2
%5803:	br	 return

BASIC BLOCK if.end12
%5804:	icmp	 %5798 XXX
%5805:	br	 %5804 if.end15 if.then14

BASIC BLOCK if.then14
%5806:	load	 %5773
%5807:	call	 %5806 XXX XXX parserro
%5808:	br	 return

BASIC BLOCK if.end15
%5809:	br	 return

BASIC BLOCK return
%5810:	phi	 XXX XXX XXX XXX XXX XXX
%5811:	ret	 %5810

FUNCTION polspec

BASIC BLOCK entry
%5812:	alloca	 XXX
%5813:	store	 p1 %5812
%5814:	store	 XXX polarization_ptr
%5815:	store	 XXX phepol_ptr
%5816:	store	 XXX phepol_unit_ptr
%5817:	store	 XXX direction_ptr
%5818:	call	 XXX %5812 GetKeyword
%5819:	icmp	 %5818 XXX
%5820:	br	 %5819 if.end if.then

BASIC BLOCK if.then
%5821:	br	 return

BASIC BLOCK if.end
%5822:	store	 XXX polarization_ptr
%5823:	load	 %5812
%5824:	call	 %5823 %5812 phepol_ptr phepol_unit_ptr linpol
%5825:	icmp	 %5824 XXX
%5826:	br	 %5825 if.end4 if.then3

BASIC BLOCK if.then3
%5827:	load	 %5812
%5828:	store	 %5827 pp2
%5829:	br	 return

BASIC BLOCK if.end4
%5830:	icmp	 %5824 XXX
%5831:	br	 %5830 if.end8 if.then6

BASIC BLOCK if.then6
%5832:	call	 XXX XXX printf
%5833:	br	 return

BASIC BLOCK if.end8
%5834:	store	 XXX polarization_ptr
%5835:	load	 %5812
%5836:	call	 %5835 %5812 direction_ptr circpol
%5837:	icmp	 %5836 XXX
%5838:	br	 %5837 if.end12 if.then11

BASIC BLOCK if.then11
%5839:	load	 %5812
%5840:	store	 %5839 pp2
%5841:	br	 return

BASIC BLOCK if.end12
%5842:	icmp	 %5836 XXX
%5843:	br	 %5842 if.end16 if.then14

BASIC BLOCK if.then14
%5844:	call	 XXX XXX printf
%5845:	br	 return

BASIC BLOCK if.end16
%5846:	br	 return

BASIC BLOCK return
%5847:	phi	 XXX XXX XXX XXX XXX XXX
%5848:	ret	 %5847

FUNCTION portamp

BASIC BLOCK entry
%5849:	alloca	 XXX
%5850:	store	 p1 %5849
%5851:	call	 XXX %5849 GetKeyword
%5852:	icmp	 %5851 XXX
%5853:	br	 %5852 if.end if.then

BASIC BLOCK if.then
%5854:	br	 return

BASIC BLOCK if.end
%5855:	load	 %5849
%5856:	call	 %5855 %5849 amp_ptr amp_unit_ptr ampval
%5857:	icmp	 %5856 XXX
%5858:	br	 %5857 if.end4 if.then3

BASIC BLOCK if.then3
%5859:	load	 %5849
%5860:	call	 %5859 XXX XXX parserro
%5861:	br	 return

BASIC BLOCK if.end4
%5862:	load	 %5849
%5863:	store	 %5862 pp2
%5864:	br	 return

BASIC BLOCK return
%5865:	phi	 XXX XXX XXX
%5866:	ret	 %5865

FUNCTION portdef

BASIC BLOCK entry
%5867:	alloca	 XXX
%5868:	alloca	 XXX
%5869:	alloca	 XXX
%5870:	alloca	 XXX
%5871:	alloca	 XXX
%5872:	alloca	 XXX
%5873:	alloca	 XXX
%5874:	alloca	 XXX
%5875:	alloca	 XXX
%5876:	alloca	 XXX
%5877:	alloca	 XXX
%5878:	store	 p1 %5867
%5879:	call	 XXX %5867 GetKeyword
%5880:	icmp	 %5879 XXX
%5881:	br	 %5880 if.end if.then

BASIC BLOCK if.then
%5882:	load	 %5867
%5883:	call	 %5882 XXX XXX parserro
%5884:	br	 return

BASIC BLOCK if.end
%5885:	load	 %5867
%5886:	call	 %5885 %5867 portnum_ptr GetNatur
%5887:	icmp	 %5886 XXX
%5888:	br	 %5887 if.end4 if.then3

BASIC BLOCK if.then3
%5889:	load	 %5867
%5890:	call	 %5889 %5886 XXX parserro
%5891:	br	 return

BASIC BLOCK if.end4
%5892:	load	 %5867
%5893:	call	 %5892 %5867 %5876 %5877 polorbis
%5894:	icmp	 %5893 XXX
%5895:	br	 %5894 if.end8 if.then7

BASIC BLOCK if.then7
%5896:	store	 XXX %5876
%5897:	store	 XXX %5877
%5898:	br	 if.end8

BASIC BLOCK if.end8
%5899:	phi	 XXX XXX
%5900:	icmp	 %5893 XXX
%5901:	br	 %5900 if.end12 if.then10

BASIC BLOCK if.then10
%5902:	call	 XXX XXX printf
%5903:	br	 return

BASIC BLOCK if.end12
%5904:	load	 %5867
%5905:	call	 %5904 %5867 %5868 %5869 portamp
%5906:	icmp	 %5905 XXX
%5907:	br	 %5906 if.end17 if.then15

BASIC BLOCK if.then15
%5908:	call	 XXX XXX printf
%5909:	br	 return

BASIC BLOCK if.end17
%5910:	load	 %5867
%5911:	call	 %5910 %5867 %5872 %5873 pshdef1
%5912:	icmp	 %5911 XXX
%5913:	br	 %5912 if.end21 if.then20

BASIC BLOCK if.then20
%5914:	store	 XXX %5872
%5915:	store	 XXX %5873
%5916:	br	 if.end21

BASIC BLOCK if.end21
%5917:	icmp	 %5911 XXX
%5918:	br	 %5917 if.end25 if.then23

BASIC BLOCK if.then23
%5919:	call	 XXX XXX printf
%5920:	br	 return

BASIC BLOCK if.end25
%5921:	load	 %5867
%5922:	call	 %5921 %5867 %5870 %5871 pscdef1
%5923:	icmp	 %5922 XXX
%5924:	br	 %5923 if.end29 if.then28

BASIC BLOCK if.then28
%5925:	store	 XXX %5870
%5926:	store	 XXX %5871
%5927:	br	 if.end29

BASIC BLOCK if.end29
%5928:	icmp	 %5922 XXX
%5929:	br	 %5928 if.end33 if.then31

BASIC BLOCK if.then31
%5930:	call	 XXX XXX printf
%5931:	br	 return

BASIC BLOCK if.end33
%5932:	load	 %5867
%5933:	call	 %5932 %5867 %5874 %5875 ppadef1
%5934:	icmp	 %5933 XXX
%5935:	br	 %5934 if.end37 if.then36

BASIC BLOCK if.then36
%5936:	store	 XXX %5874
%5937:	store	 XXX %5875
%5938:	br	 if.end37

BASIC BLOCK if.end37
%5939:	icmp	 %5933 XXX
%5940:	br	 %5939 if.end41 if.then39

BASIC BLOCK if.then39
%5941:	call	 XXX XXX printf
%5942:	br	 return

BASIC BLOCK if.end41
%5943:	load	 %5868
%5944:	getelementptr	 PORT_PTR XXX XXX
%5945:	store	 %5943 %5944
%5946:	load	 %5869
%5947:	getelementptr	 PORT_PTR XXX XXX
%5948:	store	 %5946 %5947
%5949:	load	 %5870
%5950:	getelementptr	 PORT_PTR XXX XXX
%5951:	store	 %5949 %5950
%5952:	load	 %5871
%5953:	getelementptr	 PORT_PTR XXX XXX
%5954:	store	 %5952 %5953
%5955:	load	 %5872
%5956:	getelementptr	 PORT_PTR XXX XXX
%5957:	store	 %5955 %5956
%5958:	load	 %5873
%5959:	getelementptr	 PORT_PTR XXX XXX
%5960:	store	 %5958 %5959
%5961:	load	 %5874
%5962:	getelementptr	 PORT_PTR XXX XXX
%5963:	store	 %5961 %5962
%5964:	load	 %5875
%5965:	getelementptr	 PORT_PTR XXX XXX
%5966:	store	 %5964 %5965
%5967:	load	 %5876
%5968:	getelementptr	 PORT_PTR XXX XXX
%5969:	store	 %5967 %5968
%5970:	load	 %5877
%5971:	getelementptr	 PORT_PTR XXX XXX
%5972:	store	 %5970 %5971
%5973:	getelementptr	 PORT_PTR XXX XXX
%5974:	store	 %5899 %5973
%5975:	load	 %5867
%5976:	store	 %5975 pp2
%5977:	br	 return

BASIC BLOCK return
%5978:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX
%5979:	ret	 %5978

FUNCTION pshdef1

BASIC BLOCK entry
%5980:	alloca	 XXX
%5981:	store	 p1 %5980
%5982:	call	 XXX %5980 GetKeyword
%5983:	icmp	 %5982 XXX
%5984:	br	 %5983 if.end if.then

BASIC BLOCK if.then
%5985:	br	 return

BASIC BLOCK if.end
%5986:	load	 %5980
%5987:	call	 %5986 %5980 psh_ptr psh_unit_ptr angval
%5988:	icmp	 %5987 XXX
%5989:	br	 %5988 if.end4 if.then3

BASIC BLOCK if.then3
%5990:	load	 %5980
%5991:	call	 %5990 XXX XXX parserro
%5992:	br	 return

BASIC BLOCK if.end4
%5993:	load	 %5980
%5994:	store	 %5993 pp2
%5995:	br	 return

BASIC BLOCK return
%5996:	phi	 XXX XXX XXX
%5997:	ret	 %5996

FUNCTION pscdef1

BASIC BLOCK entry
%5998:	alloca	 XXX
%5999:	store	 p1 %5998
%6000:	call	 XXX %5998 GetKeyword
%6001:	icmp	 %6000 XXX
%6002:	br	 %6001 if.end if.then

BASIC BLOCK if.then
%6003:	br	 return

BASIC BLOCK if.end
%6004:	load	 %5998
%6005:	call	 %6004 %5998 psc_ptr psc_unit_ptr angval
%6006:	icmp	 %6005 XXX
%6007:	br	 %6006 if.end4 if.then3

BASIC BLOCK if.then3
%6008:	load	 %5998
%6009:	call	 %6008 XXX XXX parserro
%6010:	br	 return

BASIC BLOCK if.end4
%6011:	load	 %5998
%6012:	store	 %6011 pp2
%6013:	br	 return

BASIC BLOCK return
%6014:	phi	 XXX XXX XXX
%6015:	ret	 %6014

FUNCTION ppadef1

BASIC BLOCK entry
%6016:	alloca	 XXX
%6017:	store	 p1 %6016
%6018:	call	 XXX %6016 GetKeyword
%6019:	icmp	 %6018 XXX
%6020:	br	 %6019 if.end if.then

BASIC BLOCK if.then
%6021:	br	 return

BASIC BLOCK if.end
%6022:	load	 %6016
%6023:	call	 %6022 %6016 ppa_ptr ppa_unit_ptr angval
%6024:	icmp	 %6023 XXX
%6025:	br	 %6024 if.end4 if.then3

BASIC BLOCK if.then3
%6026:	load	 %6016
%6027:	call	 %6026 XXX XXX parserro
%6028:	br	 return

BASIC BLOCK if.end4
%6029:	load	 %6016
%6030:	store	 %6029 pp2
%6031:	br	 return

BASIC BLOCK return
%6032:	phi	 XXX XXX XXX
%6033:	ret	 %6032

FUNCTION portspec

BASIC BLOCK entry
%6034:	alloca	 XXX
%6035:	alloca	 XXX
%6036:	store	 p1 %6034
%6037:	call	 XXX %6034 GetKeyword
%6038:	icmp	 %6037 XXX
%6039:	br	 %6038 if.end if.then

BASIC BLOCK if.then
%6040:	br	 return

BASIC BLOCK if.end
%6041:	load	 %6034
%6042:	call	 %6041 %6034 nports_ptr GetNatur
%6043:	icmp	 %6042 XXX
%6044:	br	 %6043 if.end4 if.then3

BASIC BLOCK if.then3
%6045:	store	 XXX nports_ptr
%6046:	load	 %6034
%6047:	call	 %6046 XXX XXX parserro
%6048:	br	 return

BASIC BLOCK if.end4
%6049:	br	 for.cond

BASIC BLOCK for.cond
%6050:	phi	 XXX %6088
%6051:	phi	 XXX %6084
%6052:	phi	 XXX %6057
%6053:	load	 nports_ptr
%6054:	icmp	 %6050 %6053
%6055:	br	 %6054 for.end for.body

BASIC BLOCK for.body
%6056:	call	 XXX malloc
%6057:	bitcast	 %6056
%6058:	icmp	 %6057 XXX
%6059:	br	 %6058 if.end9 if.then8

BASIC BLOCK if.then8
%6060:	load	 %6034
%6061:	call	 %6060 XXX XXX parserro
%6062:	call	 XXX interror
%6063:	br	 if.end9

BASIC BLOCK if.end9
%6064:	load	 %6034
%6065:	call	 %6064 %6034 %6057 %6035 portdef
%6066:	icmp	 %6065 XXX
%6067:	br	 %6066 if.end13 if.then12

BASIC BLOCK if.then12
%6068:	load	 %6034
%6069:	call	 %6068 XXX XXX parserro
%6070:	br	 return

BASIC BLOCK if.end13
%6071:	icmp	 %6065 XXX
%6072:	br	 %6071 if.end17 if.then15

BASIC BLOCK if.then15
%6073:	call	 XXX XXX %6050 printf
%6074:	br	 return

BASIC BLOCK if.end17
%6075:	load	 %6035
%6076:	getelementptr	 %6057 XXX XXX
%6077:	store	 %6075 %6076
%6078:	icmp	 %6051 XXX
%6079:	br	 %6078 if.else if.then19

BASIC BLOCK if.then19
%6080:	br	 if.end20

BASIC BLOCK if.else
%6081:	getelementptr	 %6052 XXX XXX
%6082:	store	 %6057 %6081
%6083:	br	 if.end20

BASIC BLOCK if.end20
%6084:	phi	 %6057 %6051
%6085:	getelementptr	 %6057 XXX XXX
%6086:	store	 XXX %6085
%6087:	br	 for.inc

BASIC BLOCK for.inc
%6088:	add	 %6050 XXX
%6089:	br	 for.cond

BASIC BLOCK for.end
%6090:	store	 %6051 port_ptr
%6091:	load	 %6034
%6092:	store	 %6091 pp2
%6093:	br	 return

BASIC BLOCK return
%6094:	phi	 XXX XXX XXX XXX XXX
%6095:	ret	 %6094

FUNCTION pqlimits

BASIC BLOCK entry
%6096:	store	 gnode_ptr qmax_ptr
%6097:	store	 gnode_ptr qmin_ptr
%6098:	store	 gnode_ptr pmax_ptr
%6099:	store	 gnode_ptr pmin_ptr
%6100:	br	 while.cond

BASIC BLOCK while.cond
%6101:	phi	 gnode_ptr %6145
%6102:	phi	 XXX %6116
%6103:	phi	 XXX %6125
%6104:	phi	 XXX %6134
%6105:	phi	 XXX %6143
%6106:	icmp	 %6101 XXX
%6107:	br	 %6106 while.end while.body

BASIC BLOCK while.body
%6108:	getelementptr	 %6101 XXX XXX
%6109:	load	 %6108
%6110:	icmp	 %6109 %6102
%6111:	br	 %6110 if.end if.then

BASIC BLOCK if.then
%6112:	getelementptr	 %6101 XXX XXX
%6113:	load	 %6112
%6114:	store	 %6101 pmin_ptr
%6115:	br	 if.end

BASIC BLOCK if.end
%6116:	phi	 %6113 %6102
%6117:	getelementptr	 %6101 XXX XXX
%6118:	load	 %6117
%6119:	icmp	 %6118 %6103
%6120:	br	 %6119 if.end7 if.then5

BASIC BLOCK if.then5
%6121:	getelementptr	 %6101 XXX XXX
%6122:	load	 %6121
%6123:	store	 %6101 pmax_ptr
%6124:	br	 if.end7

BASIC BLOCK if.end7
%6125:	phi	 %6122 %6103
%6126:	getelementptr	 %6101 XXX XXX
%6127:	load	 %6126
%6128:	icmp	 %6127 %6104
%6129:	br	 %6128 if.end11 if.then9

BASIC BLOCK if.then9
%6130:	getelementptr	 %6101 XXX XXX
%6131:	load	 %6130
%6132:	store	 %6101 qmin_ptr
%6133:	br	 if.end11

BASIC BLOCK if.end11
%6134:	phi	 %6131 %6104
%6135:	getelementptr	 %6101 XXX XXX
%6136:	load	 %6135
%6137:	icmp	 %6136 %6105
%6138:	br	 %6137 if.end16 if.then14

BASIC BLOCK if.then14
%6139:	getelementptr	 %6101 XXX XXX
%6140:	load	 %6139
%6141:	store	 %6101 qmax_ptr
%6142:	br	 if.end16

BASIC BLOCK if.end16
%6143:	phi	 %6140 %6105
%6144:	getelementptr	 %6101 XXX XXX
%6145:	load	 %6144
%6146:	br	 while.cond

BASIC BLOCK while.end
%6147:	ret	 XXX

FUNCTION secorder

BASIC BLOCK entry
%6148:	fmul	 a x
%6149:	fmul	 %6148 x
%6150:	fmul	 b y
%6151:	fmul	 %6150 y
%6152:	fadd	 %6149 %6151
%6153:	fmul	 c x
%6154:	fadd	 %6152 %6153
%6155:	fmul	 d y
%6156:	fadd	 %6154 %6155
%6157:	fadd	 %6156 e
%6158:	ret	 %6157

FUNCTION seqrothg

BASIC BLOCK entry
%6159:	br	 while.cond

BASIC BLOCK while.cond
%6160:	phi	 phase_start %6174
%6161:	phi	 angle_start %6175
%6162:	phi	 g %6177
%6163:	icmp	 %6162 XXX
%6164:	br	 %6163 while.end while.body

BASIC BLOCK while.body
%6165:	getelementptr	 %6162 XXX XXX
%6166:	load	 %6165
%6167:	getelementptr	 %6166 XXX XXX
%6168:	store	 %6160 %6167
%6169:	getelementptr	 %6162 XXX XXX
%6170:	load	 %6169
%6171:	fadd	 %6170 %6161
%6172:	getelementptr	 %6162 XXX XXX
%6173:	store	 %6171 %6172
%6174:	fadd	 %6160 phase_step
%6175:	fadd	 %6161 angle_step
%6176:	getelementptr	 %6162 XXX XXX
%6177:	load	 %6176
%6178:	br	 while.cond

BASIC BLOCK while.end
%6179:	ret	

FUNCTION seqrotrg

BASIC BLOCK entry
%6180:	alloca	 XXX
%6181:	alloca	 XXX
%6182:	alloca	 XXX
%6183:	alloca	 XXX
%6184:	call	 g %6180 %6181 %6182 %6183 pqlimits
%6185:	load	 %6180
%6186:	getelementptr	 %6185 XXX XXX
%6187:	load	 %6186
%6188:	load	 %6181
%6189:	getelementptr	 %6188 XXX XXX
%6190:	load	 %6189
%6191:	load	 %6182
%6192:	getelementptr	 %6191 XXX XXX
%6193:	load	 %6192
%6194:	load	 %6183
%6195:	getelementptr	 %6194 XXX XXX
%6196:	load	 %6195
%6197:	icmp	 %6187 %6190
%6198:	br	 %6197 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%6199:	icmp	 %6193 %6196
%6200:	br	 %6199 if.end if.then

BASIC BLOCK if.then
%6201:	call	 XXX interror
%6202:	call	 XXX exit
%6203:	unreachable	

BASIC BLOCK if.end
%6204:	sub	 %6190 %6187
%6205:	add	 %6204 XXX
%6206:	sub	 %6196 %6193
%6207:	add	 %6206 XXX
%6208:	mul	 %6205 %6207
%6209:	br	 while.cond

BASIC BLOCK while.cond
%6210:	phi	 %6196 %6366
%6211:	phi	 %6193 %6365
%6212:	phi	 %6190 %6364
%6213:	phi	 %6187 %6363
%6214:	phi	 XXX %6359
%6215:	phi	 XXX %6360
%6216:	phi	 phase_start %6361
%6217:	phi	 angle_start %6362
%6218:	icmp	 %6214 XXX
%6219:	xor	 %6218 XXX
%6220:	br	 %6219 while.end91 while.body

BASIC BLOCK while.body
%6221:	icmp	 %6213 %6212
%6222:	br	 %6221 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%6223:	icmp	 %6211 %6210
%6224:	br	 %6223 if.else if.then8

BASIC BLOCK if.then8
%6225:	call	 %6213 %6211 %6216 %6217 g gnodevis
%6226:	fadd	 %6216 phase_step
%6227:	fadd	 %6217 angle_step
%6228:	add	 %6215 XXX
%6229:	icmp	 %6228 %6208
%6230:	br	 %6229 if.end13 if.then12

BASIC BLOCK if.then12
%6231:	br	 if.end13

BASIC BLOCK if.end13
%6232:	phi	 XXX %6214
%6233:	br	 if.end86

BASIC BLOCK if.else
%6234:	sub	 %6212 XXX
%6235:	icmp	 %6234 %6213
%6236:	br	 %6235 if.end29 if.then16

BASIC BLOCK if.then16
%6237:	br	 while.cond17

BASIC BLOCK while.cond17
%6238:	phi	 %6213 %6258
%6239:	phi	 %6214 %6257
%6240:	phi	 %6215 %6253
%6241:	phi	 %6216 %6251
%6242:	phi	 %6217 %6252
%6243:	icmp	 %6238 %6234
%6244:	br	 %6243 land.end land.rhs

BASIC BLOCK land.rhs
%6245:	icmp	 %6239 XXX
%6246:	xor	 %6245 XXX
%6247:	br	 land.end

BASIC BLOCK land.end
%6248:	phi	 XXX %6246
%6249:	br	 %6248 while.end while.body21

BASIC BLOCK while.body21
%6250:	call	 %6238 %6210 %6241 %6242 g gnodevis
%6251:	fadd	 %6241 phase_step
%6252:	fadd	 %6242 angle_step
%6253:	add	 %6240 XXX
%6254:	icmp	 %6253 %6208
%6255:	br	 %6254 if.end27 if.then26

BASIC BLOCK if.then26
%6256:	br	 if.end27

BASIC BLOCK if.end27
%6257:	phi	 XXX %6239
%6258:	add	 %6238 XXX
%6259:	br	 while.cond17

BASIC BLOCK while.end
%6260:	br	 if.end29

BASIC BLOCK if.end29
%6261:	phi	 %6239 %6214
%6262:	phi	 %6240 %6215
%6263:	phi	 %6241 %6216
%6264:	phi	 %6242 %6217
%6265:	add	 %6211 XXX
%6266:	icmp	 %6210 %6265
%6267:	br	 %6266 if.end47 if.then32

BASIC BLOCK if.then32
%6268:	br	 while.cond33

BASIC BLOCK while.cond33
%6269:	phi	 %6210 %6289
%6270:	phi	 %6261 %6288
%6271:	phi	 %6262 %6284
%6272:	phi	 %6263 %6282
%6273:	phi	 %6264 %6283
%6274:	icmp	 %6269 %6265
%6275:	br	 %6274 land.end38 land.rhs35

BASIC BLOCK land.rhs35
%6276:	icmp	 %6270 XXX
%6277:	xor	 %6276 XXX
%6278:	br	 land.end38

BASIC BLOCK land.end38
%6279:	phi	 XXX %6277
%6280:	br	 %6279 while.end46 while.body39

BASIC BLOCK while.body39
%6281:	call	 %6212 %6269 %6272 %6273 g gnodevis
%6282:	fadd	 %6272 phase_step
%6283:	fadd	 %6273 angle_step
%6284:	add	 %6271 XXX
%6285:	icmp	 %6284 %6208
%6286:	br	 %6285 if.end45 if.then44

BASIC BLOCK if.then44
%6287:	br	 if.end45

BASIC BLOCK if.end45
%6288:	phi	 XXX %6270
%6289:	add	 %6269 XXX
%6290:	br	 while.cond33

BASIC BLOCK while.end46
%6291:	br	 if.end47

BASIC BLOCK if.end47
%6292:	phi	 %6270 %6261
%6293:	phi	 %6271 %6262
%6294:	phi	 %6272 %6263
%6295:	phi	 %6273 %6264
%6296:	add	 %6213 XXX
%6297:	icmp	 %6212 %6296
%6298:	br	 %6297 if.end66 if.then50

BASIC BLOCK if.then50
%6299:	br	 while.cond51

BASIC BLOCK while.cond51
%6300:	phi	 %6212 %6320
%6301:	phi	 %6292 %6319
%6302:	phi	 %6293 %6315
%6303:	phi	 %6294 %6313
%6304:	phi	 %6295 %6314
%6305:	icmp	 %6300 %6296
%6306:	br	 %6305 land.end56 land.rhs53

BASIC BLOCK land.rhs53
%6307:	icmp	 %6301 XXX
%6308:	xor	 %6307 XXX
%6309:	br	 land.end56

BASIC BLOCK land.end56
%6310:	phi	 XXX %6308
%6311:	br	 %6310 while.end65 while.body57

BASIC BLOCK while.body57
%6312:	call	 %6300 %6211 %6303 %6304 g gnodevis
%6313:	fadd	 %6303 phase_step
%6314:	fadd	 %6304 angle_step
%6315:	add	 %6302 XXX
%6316:	icmp	 %6315 %6208
%6317:	br	 %6316 if.end63 if.then62

BASIC BLOCK if.then62
%6318:	br	 if.end63

BASIC BLOCK if.end63
%6319:	phi	 XXX %6301
%6320:	add	 %6300 XXX
%6321:	br	 while.cond51

BASIC BLOCK while.end65
%6322:	br	 if.end66

BASIC BLOCK if.end66
%6323:	phi	 %6301 %6292
%6324:	phi	 %6302 %6293
%6325:	phi	 %6303 %6294
%6326:	phi	 %6304 %6295
%6327:	sub	 %6210 XXX
%6328:	icmp	 %6327 %6211
%6329:	br	 %6328 if.end85 if.then69

BASIC BLOCK if.then69
%6330:	br	 while.cond70

BASIC BLOCK while.cond70
%6331:	phi	 %6211 %6351
%6332:	phi	 %6323 %6350
%6333:	phi	 %6324 %6346
%6334:	phi	 %6325 %6344
%6335:	phi	 %6326 %6345
%6336:	icmp	 %6331 %6327
%6337:	br	 %6336 land.end75 land.rhs72

BASIC BLOCK land.rhs72
%6338:	icmp	 %6332 XXX
%6339:	xor	 %6338 XXX
%6340:	br	 land.end75

BASIC BLOCK land.end75
%6341:	phi	 XXX %6339
%6342:	br	 %6341 while.end84 while.body76

BASIC BLOCK while.body76
%6343:	call	 %6213 %6331 %6334 %6335 g gnodevis
%6344:	fadd	 %6334 phase_step
%6345:	fadd	 %6335 angle_step
%6346:	add	 %6333 XXX
%6347:	icmp	 %6346 %6208
%6348:	br	 %6347 if.end82 if.then81

BASIC BLOCK if.then81
%6349:	br	 if.end82

BASIC BLOCK if.end82
%6350:	phi	 XXX %6332
%6351:	add	 %6331 XXX
%6352:	br	 while.cond70

BASIC BLOCK while.end84
%6353:	br	 if.end85

BASIC BLOCK if.end85
%6354:	phi	 %6332 %6323
%6355:	phi	 %6333 %6324
%6356:	phi	 %6334 %6325
%6357:	phi	 %6335 %6326
%6358:	br	 if.end86

BASIC BLOCK if.end86
%6359:	phi	 %6232 %6354
%6360:	phi	 %6228 %6355
%6361:	phi	 %6226 %6356
%6362:	phi	 %6227 %6357
%6363:	add	 %6213 XXX
%6364:	add	 %6212 XXX
%6365:	add	 %6211 XXX
%6366:	add	 %6210 XXX
%6367:	br	 while.cond

BASIC BLOCK while.end91
%6368:	ret	

FUNCTION serotdir

BASIC BLOCK entry
%6369:	alloca	 XXX
%6370:	store	 p1 %6369
%6371:	call	 XXX %6369 GetKeyword
%6372:	icmp	 %6371 XXX
%6373:	br	 %6372 if.end if.then

BASIC BLOCK if.then
%6374:	store	 XXX direction_ptr
%6375:	load	 %6369
%6376:	store	 %6375 pp2
%6377:	br	 return

BASIC BLOCK if.end
%6378:	call	 XXX %6369 GetKeyword
%6379:	icmp	 %6378 XXX
%6380:	br	 %6379 if.end4 if.then3

BASIC BLOCK if.then3
%6381:	store	 XXX direction_ptr
%6382:	load	 %6369
%6383:	store	 %6382 pp2
%6384:	br	 return

BASIC BLOCK if.end4
%6385:	br	 return

BASIC BLOCK return
%6386:	phi	 XXX XXX XXX
%6387:	ret	 %6386

FUNCTION serotpar

BASIC BLOCK entry
%6388:	alloca	 XXX
%6389:	store	 p1 %6388
%6390:	store	 XXX omit_phase_ptr
%6391:	load	 %6388
%6392:	call	 %6391 %6388 angle_start_ptr angle_step_ptr angle_unit_ptr anglerot
%6393:	icmp	 %6392 XXX
%6394:	br	 %6393 if.end if.then

BASIC BLOCK if.then
%6395:	br	 return

BASIC BLOCK if.end
%6396:	icmp	 %6392 XXX
%6397:	br	 %6396 if.end3 if.then2

BASIC BLOCK if.then2
%6398:	store	 XXX omit_phase_ptr
%6399:	br	 return

BASIC BLOCK if.end3
%6400:	store	 XXX omit_phase_ptr
%6401:	load	 %6388
%6402:	call	 %6401 %6388 phase_start_ptr phase_step_ptr phase_unit_ptr phaserot
%6403:	icmp	 %6402 XXX
%6404:	br	 %6403 if.end7 if.then6

BASIC BLOCK if.then6
%6405:	br	 return

BASIC BLOCK if.end7
%6406:	icmp	 %6402 XXX
%6407:	br	 %6406 if.end10 if.then9

BASIC BLOCK if.then9
%6408:	store	 XXX omit_phase_ptr
%6409:	load	 %6388
%6410:	store	 %6409 pp2
%6411:	br	 return

BASIC BLOCK if.end10
%6412:	store	 XXX omit_phase_ptr
%6413:	load	 %6388
%6414:	store	 %6413 pp2
%6415:	br	 return

BASIC BLOCK return
%6416:	phi	 XXX XXX XXX XXX XXX
%6417:	ret	 %6416

FUNCTION sgramp2n

BASIC BLOCK entry
%6418:	alloca	 XXX
%6419:	alloca	 XXX
%6420:	alloca	 XXX
%6421:	alloca	 XXX
%6422:	alloca	 XXX
%6423:	alloca	 XXX
%6424:	store	 XXX %6418
%6425:	store	 XXX %6419
%6426:	store	 XXX %6420
%6427:	store	 XXX %6421
%6428:	getelementptr	 grampexc_ptr XXX XXX
%6429:	load	 %6428
%6430:	getelementptr	 grampexc_ptr XXX XXX
%6431:	load	 %6430
%6432:	getelementptr	 grampexc_ptr XXX XXX
%6433:	load	 %6432
%6434:	getelementptr	 grampexc_ptr XXX XXX
%6435:	load	 %6434
%6436:	getelementptr	 grampexc_ptr XXX XXX
%6437:	load	 %6436
%6438:	icmp	 group_shape XXX
%6439:	br	 %6438 if.else if.then

BASIC BLOCK if.then
%6440:	call	 geomnode_ptr %6418 %6419 %6420 %6421 pqlimits
%6441:	load	 %6418
%6442:	getelementptr	 %6441 XXX XXX
%6443:	load	 %6442
%6444:	load	 %6419
%6445:	getelementptr	 %6444 XXX XXX
%6446:	load	 %6445
%6447:	load	 %6420
%6448:	getelementptr	 %6447 XXX XXX
%6449:	load	 %6448
%6450:	load	 %6421
%6451:	getelementptr	 %6450 XXX XXX
%6452:	load	 %6451
%6453:	fadd	 %6449 %6452
%6454:	fdiv	 %6453 XXX
%6455:	fadd	 %6443 %6446
%6456:	fdiv	 %6455 XXX
%6457:	br	 if.end34

BASIC BLOCK if.else
%6458:	icmp	 group_shape XXX
%6459:	br	 %6458 if.else31 if.then6

BASIC BLOCK if.then6
%6460:	br	 for.cond

BASIC BLOCK for.cond
%6461:	phi	 geomnode_ptr %6478
%6462:	phi	 XXX %6484
%6463:	icmp	 %6462 XXX
%6464:	br	 %6463 for.end for.body

BASIC BLOCK for.body
%6465:	icmp	 %6461 XXX
%6466:	br	 %6465 if.else13 if.then8

BASIC BLOCK if.then8
%6467:	getelementptr	 %6461 XXX XXX
%6468:	load	 %6467
%6469:	sext	 %6462
%6470:	getelementptr	 %6422 XXX %6469
%6471:	store	 %6468 %6470
%6472:	getelementptr	 %6461 XXX XXX
%6473:	load	 %6472
%6474:	sext	 %6462
%6475:	getelementptr	 %6423 XXX %6474
%6476:	store	 %6473 %6475
%6477:	getelementptr	 %6461 XXX XXX
%6478:	load	 %6477
%6479:	br	 if.end

BASIC BLOCK if.else13
%6480:	call	 XXX printf
%6481:	call	 XXX exit
%6482:	unreachable	

BASIC BLOCK if.end
%6483:	br	 for.inc

BASIC BLOCK for.inc
%6484:	add	 %6462 XXX
%6485:	br	 for.cond

BASIC BLOCK for.end
%6486:	getelementptr	 %6422 XXX XXX
%6487:	load	 %6486
%6488:	getelementptr	 %6423 XXX XXX
%6489:	load	 %6488
%6490:	getelementptr	 %6422 XXX XXX
%6491:	load	 %6490
%6492:	getelementptr	 %6423 XXX XXX
%6493:	load	 %6492
%6494:	getelementptr	 %6422 XXX XXX
%6495:	load	 %6494
%6496:	getelementptr	 %6422 XXX XXX
%6497:	load	 %6496
%6498:	fadd	 %6495 %6497
%6499:	fdiv	 %6498 XXX
%6500:	getelementptr	 %6423 XXX XXX
%6501:	load	 %6500
%6502:	getelementptr	 %6422 XXX XXX
%6503:	load	 %6502
%6504:	getelementptr	 %6422 XXX XXX
%6505:	load	 %6504
%6506:	fadd	 %6503 %6505
%6507:	fdiv	 %6506 XXX
%6508:	getelementptr	 %6423 XXX XXX
%6509:	load	 %6508
%6510:	getelementptr	 %6422 XXX XXX
%6511:	load	 %6510
%6512:	getelementptr	 %6423 XXX XXX
%6513:	load	 %6512
%6514:	br	 if.end33

BASIC BLOCK if.else31
%6515:	call	 XXX XXX printf
%6516:	br	 return

BASIC BLOCK if.end33
%6517:	br	 if.end34

BASIC BLOCK if.end34
%6518:	phi	 %6446 %6491
%6519:	phi	 %6452 %6509
%6520:	phi	 %6456 %6511
%6521:	phi	 %6454 %6513
%6522:	fsub	 %6518 %6520
%6523:	fsub	 %6519 %6521
%6524:	fcmp	 %6522 XXX
%6525:	br	 %6524 if.else38 if.then37

BASIC BLOCK if.then37
%6526:	br	 if.end49

BASIC BLOCK if.else38
%6527:	fadd	 %6431 %6433
%6528:	fmul	 XXX %6429
%6529:	fsub	 %6527 %6528
%6530:	fmul	 XXX %6522
%6531:	fmul	 %6530 %6522
%6532:	fdiv	 %6529 %6531
%6533:	fmul	 %6532 %6522
%6534:	fmul	 %6533 %6522
%6535:	fadd	 %6534 %6429
%6536:	fsub	 %6535 %6431
%6537:	fdiv	 %6536 %6522
%6538:	br	 if.end49

BASIC BLOCK if.end49
%6539:	phi	 XXX %6532
%6540:	phi	 XXX %6537
%6541:	fcmp	 %6523 XXX
%6542:	br	 %6541 if.else52 if.then51

BASIC BLOCK if.then51
%6543:	br	 if.end64

BASIC BLOCK if.else52
%6544:	fadd	 %6435 %6437
%6545:	fmul	 XXX %6429
%6546:	fsub	 %6544 %6545
%6547:	fmul	 XXX %6523
%6548:	fmul	 %6547 %6523
%6549:	fdiv	 %6546 %6548
%6550:	fmul	 %6549 %6523
%6551:	fmul	 %6550 %6523
%6552:	fadd	 %6551 %6429
%6553:	fsub	 %6552 %6435
%6554:	fdiv	 %6553 %6523
%6555:	br	 if.end64

BASIC BLOCK if.end64
%6556:	phi	 XXX %6549
%6557:	phi	 XXX %6554
%6558:	fmul	 XXX %6539
%6559:	fmul	 %6558 %6520
%6560:	fsub	 %6540 %6559
%6561:	fmul	 XXX %6556
%6562:	fmul	 %6561 %6521
%6563:	fsub	 %6557 %6562
%6564:	fmul	 %6539 %6520
%6565:	fmul	 %6564 %6520
%6566:	fmul	 %6556 %6521
%6567:	fmul	 %6566 %6521
%6568:	fadd	 %6565 %6567
%6569:	fmul	 %6540 %6520
%6570:	fsub	 %6568 %6569
%6571:	fmul	 %6557 %6521
%6572:	fsub	 %6570 %6571
%6573:	fadd	 %6572 %6429
%6574:	br	 while.cond

BASIC BLOCK while.cond
%6575:	phi	 geomnode_ptr %6616
%6576:	icmp	 %6575 XXX
%6577:	br	 %6576 while.end103 while.body

BASIC BLOCK while.body
%6578:	getelementptr	 %6575 XXX XXX
%6579:	load	 %6578
%6580:	getelementptr	 %6575 XXX XXX
%6581:	load	 %6580
%6582:	call	 %6539 %6556 %6560 %6563 %6573 %6579 %6581 secorder
%6583:	br	 while.cond85

BASIC BLOCK while.cond85
%6584:	phi	 port_ptr %6611
%6585:	phi	 XXX %6590
%6586:	phi	 XXX %6607
%6587:	icmp	 %6584 XXX
%6588:	br	 %6587 while.end while.body87

BASIC BLOCK while.body87
%6589:	call	 XXX malloc
%6590:	bitcast	 %6589
%6591:	icmp	 %6590 XXX
%6592:	br	 %6591 if.end92 if.then90

BASIC BLOCK if.then90
%6593:	call	 XXX XXX printf
%6594:	call	 XXX interror
%6595:	br	 if.end92

BASIC BLOCK if.end92
%6596:	getelementptr	 %6584 XXX XXX
%6597:	load	 %6596
%6598:	fmul	 %6582 %6597
%6599:	getelementptr	 %6590 XXX XXX
%6600:	store	 %6598 %6599
%6601:	icmp	 %6586 XXX
%6602:	br	 %6601 if.else97 if.then96

BASIC BLOCK if.then96
%6603:	br	 if.end99

BASIC BLOCK if.else97
%6604:	getelementptr	 %6585 XXX XXX
%6605:	store	 %6590 %6604
%6606:	br	 if.end99

BASIC BLOCK if.end99
%6607:	phi	 %6590 %6586
%6608:	getelementptr	 %6590 XXX XXX
%6609:	store	 XXX %6608
%6610:	getelementptr	 %6584 XXX XXX
%6611:	load	 %6610
%6612:	br	 while.cond85

BASIC BLOCK while.end
%6613:	getelementptr	 %6575 XXX XXX
%6614:	store	 %6586 %6613
%6615:	getelementptr	 %6575 XXX XXX
%6616:	load	 %6615
%6617:	br	 while.cond

BASIC BLOCK while.end103
%6618:	br	 return

BASIC BLOCK return
%6619:	phi	 XXX XXX
%6620:	ret	 %6619

FUNCTION sgrampun

BASIC BLOCK entry
%6621:	getelementptr	 grampexc_ptr XXX XXX
%6622:	load	 %6621
%6623:	br	 while.cond

BASIC BLOCK while.cond
%6624:	phi	 geomnode_ptr %6660
%6625:	icmp	 %6624 XXX
%6626:	br	 %6625 while.end13 while.body

BASIC BLOCK while.body
%6627:	br	 while.cond1

BASIC BLOCK while.cond1
%6628:	phi	 XXX %6651
%6629:	phi	 XXX %6634
%6630:	phi	 port_ptr %6655
%6631:	icmp	 %6630 XXX
%6632:	br	 %6631 while.end while.body3

BASIC BLOCK while.body3
%6633:	call	 XXX malloc
%6634:	bitcast	 %6633
%6635:	icmp	 %6634 XXX
%6636:	br	 %6635 if.end if.then

BASIC BLOCK if.then
%6637:	call	 XXX XXX printf
%6638:	call	 XXX interror
%6639:	br	 if.end

BASIC BLOCK if.end
%6640:	getelementptr	 %6630 XXX XXX
%6641:	load	 %6640
%6642:	fmul	 %6622 %6641
%6643:	getelementptr	 %6634 XXX XXX
%6644:	store	 %6642 %6643
%6645:	icmp	 %6628 XXX
%6646:	br	 %6645 if.else if.then8

BASIC BLOCK if.then8
%6647:	br	 if.end9

BASIC BLOCK if.else
%6648:	getelementptr	 %6629 XXX XXX
%6649:	store	 %6634 %6648
%6650:	br	 if.end9

BASIC BLOCK if.end9
%6651:	phi	 %6634 %6628
%6652:	getelementptr	 %6634 XXX XXX
%6653:	store	 XXX %6652
%6654:	getelementptr	 %6630 XXX XXX
%6655:	load	 %6654
%6656:	br	 while.cond1

BASIC BLOCK while.end
%6657:	getelementptr	 %6624 XXX XXX
%6658:	store	 %6628 %6657
%6659:	getelementptr	 %6624 XXX XXX
%6660:	load	 %6659
%6661:	br	 while.cond

BASIC BLOCK while.end13
%6662:	ret	 XXX

FUNCTION sgrpha2n

BASIC BLOCK entry
%6663:	alloca	 XXX
%6664:	alloca	 XXX
%6665:	alloca	 XXX
%6666:	alloca	 XXX
%6667:	alloca	 XXX
%6668:	alloca	 XXX
%6669:	store	 XXX %6663
%6670:	store	 XXX %6664
%6671:	store	 XXX %6665
%6672:	store	 XXX %6666
%6673:	getelementptr	 grphaexc_ptr XXX XXX
%6674:	load	 %6673
%6675:	getelementptr	 grphaexc_ptr XXX XXX
%6676:	load	 %6675
%6677:	getelementptr	 grphaexc_ptr XXX XXX
%6678:	load	 %6677
%6679:	getelementptr	 grphaexc_ptr XXX XXX
%6680:	load	 %6679
%6681:	getelementptr	 grphaexc_ptr XXX XXX
%6682:	load	 %6681
%6683:	icmp	 group_shape XXX
%6684:	br	 %6683 if.else if.then

BASIC BLOCK if.then
%6685:	call	 geomnode_ptr %6663 %6664 %6665 %6666 pqlimits
%6686:	load	 %6663
%6687:	getelementptr	 %6686 XXX XXX
%6688:	load	 %6687
%6689:	load	 %6664
%6690:	getelementptr	 %6689 XXX XXX
%6691:	load	 %6690
%6692:	load	 %6665
%6693:	getelementptr	 %6692 XXX XXX
%6694:	load	 %6693
%6695:	load	 %6666
%6696:	getelementptr	 %6695 XXX XXX
%6697:	load	 %6696
%6698:	fadd	 %6694 %6697
%6699:	fdiv	 %6698 XXX
%6700:	fadd	 %6688 %6691
%6701:	fdiv	 %6700 XXX
%6702:	br	 if.end34

BASIC BLOCK if.else
%6703:	icmp	 group_shape XXX
%6704:	br	 %6703 if.else31 if.then6

BASIC BLOCK if.then6
%6705:	br	 for.cond

BASIC BLOCK for.cond
%6706:	phi	 geomnode_ptr %6723
%6707:	phi	 XXX %6729
%6708:	icmp	 %6707 XXX
%6709:	br	 %6708 for.end for.body

BASIC BLOCK for.body
%6710:	icmp	 %6706 XXX
%6711:	br	 %6710 if.else13 if.then8

BASIC BLOCK if.then8
%6712:	getelementptr	 %6706 XXX XXX
%6713:	load	 %6712
%6714:	sext	 %6707
%6715:	getelementptr	 %6667 XXX %6714
%6716:	store	 %6713 %6715
%6717:	getelementptr	 %6706 XXX XXX
%6718:	load	 %6717
%6719:	sext	 %6707
%6720:	getelementptr	 %6668 XXX %6719
%6721:	store	 %6718 %6720
%6722:	getelementptr	 %6706 XXX XXX
%6723:	load	 %6722
%6724:	br	 if.end

BASIC BLOCK if.else13
%6725:	call	 XXX printf
%6726:	call	 XXX exit
%6727:	unreachable	

BASIC BLOCK if.end
%6728:	br	 for.inc

BASIC BLOCK for.inc
%6729:	add	 %6707 XXX
%6730:	br	 for.cond

BASIC BLOCK for.end
%6731:	getelementptr	 %6667 XXX XXX
%6732:	load	 %6731
%6733:	getelementptr	 %6668 XXX XXX
%6734:	load	 %6733
%6735:	getelementptr	 %6667 XXX XXX
%6736:	load	 %6735
%6737:	getelementptr	 %6668 XXX XXX
%6738:	load	 %6737
%6739:	getelementptr	 %6667 XXX XXX
%6740:	load	 %6739
%6741:	getelementptr	 %6667 XXX XXX
%6742:	load	 %6741
%6743:	fadd	 %6740 %6742
%6744:	fdiv	 %6743 XXX
%6745:	getelementptr	 %6668 XXX XXX
%6746:	load	 %6745
%6747:	getelementptr	 %6667 XXX XXX
%6748:	load	 %6747
%6749:	getelementptr	 %6667 XXX XXX
%6750:	load	 %6749
%6751:	fadd	 %6748 %6750
%6752:	fdiv	 %6751 XXX
%6753:	getelementptr	 %6668 XXX XXX
%6754:	load	 %6753
%6755:	getelementptr	 %6667 XXX XXX
%6756:	load	 %6755
%6757:	getelementptr	 %6668 XXX XXX
%6758:	load	 %6757
%6759:	br	 if.end33

BASIC BLOCK if.else31
%6760:	call	 XXX XXX printf
%6761:	br	 return

BASIC BLOCK if.end33
%6762:	br	 if.end34

BASIC BLOCK if.end34
%6763:	phi	 %6691 %6736
%6764:	phi	 %6697 %6754
%6765:	phi	 %6701 %6756
%6766:	phi	 %6699 %6758
%6767:	fsub	 %6763 %6765
%6768:	fsub	 %6764 %6766
%6769:	fcmp	 %6767 XXX
%6770:	br	 %6769 if.else38 if.then37

BASIC BLOCK if.then37
%6771:	br	 if.end49

BASIC BLOCK if.else38
%6772:	fadd	 %6676 %6678
%6773:	fmul	 XXX %6674
%6774:	fsub	 %6772 %6773
%6775:	fmul	 XXX %6767
%6776:	fmul	 %6775 %6767
%6777:	fdiv	 %6774 %6776
%6778:	fmul	 %6777 %6767
%6779:	fmul	 %6778 %6767
%6780:	fadd	 %6779 %6674
%6781:	fsub	 %6780 %6676
%6782:	fdiv	 %6781 %6767
%6783:	br	 if.end49

BASIC BLOCK if.end49
%6784:	phi	 XXX %6777
%6785:	phi	 XXX %6782
%6786:	fcmp	 %6768 XXX
%6787:	br	 %6786 if.else52 if.then51

BASIC BLOCK if.then51
%6788:	br	 if.end64

BASIC BLOCK if.else52
%6789:	fadd	 %6680 %6682
%6790:	fmul	 XXX %6674
%6791:	fsub	 %6789 %6790
%6792:	fmul	 XXX %6768
%6793:	fmul	 %6792 %6768
%6794:	fdiv	 %6791 %6793
%6795:	fmul	 %6794 %6768
%6796:	fmul	 %6795 %6768
%6797:	fadd	 %6796 %6674
%6798:	fsub	 %6797 %6680
%6799:	fdiv	 %6798 %6768
%6800:	br	 if.end64

BASIC BLOCK if.end64
%6801:	phi	 XXX %6794
%6802:	phi	 XXX %6799
%6803:	fmul	 XXX %6784
%6804:	fmul	 %6803 %6765
%6805:	fsub	 %6785 %6804
%6806:	fmul	 XXX %6801
%6807:	fmul	 %6806 %6766
%6808:	fsub	 %6802 %6807
%6809:	fmul	 %6784 %6765
%6810:	fmul	 %6809 %6765
%6811:	fmul	 %6801 %6766
%6812:	fmul	 %6811 %6766
%6813:	fadd	 %6810 %6812
%6814:	fmul	 %6785 %6765
%6815:	fsub	 %6813 %6814
%6816:	fmul	 %6802 %6766
%6817:	fsub	 %6815 %6816
%6818:	fadd	 %6817 %6674
%6819:	br	 while.cond

BASIC BLOCK while.cond
%6820:	phi	 geomnode_ptr %6854
%6821:	icmp	 %6820 XXX
%6822:	br	 %6821 while.end95 while.body

BASIC BLOCK while.body
%6823:	getelementptr	 %6820 XXX XXX
%6824:	load	 %6823
%6825:	getelementptr	 %6820 XXX XXX
%6826:	load	 %6825
%6827:	call	 %6784 %6801 %6805 %6808 %6818 %6824 %6826 secorder
%6828:	getelementptr	 %6820 XXX XXX
%6829:	load	 %6828
%6830:	br	 while.cond85

BASIC BLOCK while.cond85
%6831:	phi	 port_ptr %6849
%6832:	phi	 %6829 %6851
%6833:	icmp	 %6831 XXX
%6834:	br	 %6833 while.end while.body87

BASIC BLOCK while.body87
%6835:	getelementptr	 %6831 XXX XXX
%6836:	load	 %6835
%6837:	fadd	 %6827 %6836
%6838:	getelementptr	 %6832 XXX XXX
%6839:	store	 %6837 %6838
%6840:	getelementptr	 %6831 XXX XXX
%6841:	load	 %6840
%6842:	getelementptr	 %6832 XXX XXX
%6843:	store	 %6841 %6842
%6844:	getelementptr	 %6831 XXX XXX
%6845:	load	 %6844
%6846:	getelementptr	 %6832 XXX XXX
%6847:	store	 %6845 %6846
%6848:	getelementptr	 %6831 XXX XXX
%6849:	load	 %6848
%6850:	getelementptr	 %6832 XXX XXX
%6851:	load	 %6850
%6852:	br	 while.cond85

BASIC BLOCK while.end
%6853:	getelementptr	 %6820 XXX XXX
%6854:	load	 %6853
%6855:	br	 while.cond

BASIC BLOCK while.end95
%6856:	br	 return

BASIC BLOCK return
%6857:	phi	 XXX XXX
%6858:	ret	 %6857

FUNCTION sgrphasr

BASIC BLOCK entry
%6859:	getelementptr	 group_ptr XXX XXX
%6860:	load	 %6859
%6861:	getelementptr	 %6860 XXX XXX
%6862:	load	 %6861
%6863:	icmp	 %6862 XXX
%6864:	br	 %6863 if.end if.then

BASIC BLOCK if.then
%6865:	call	 XXX XXX printf
%6866:	br	 return

BASIC BLOCK if.end
%6867:	getelementptr	 group_ptr XXX XXX
%6868:	load	 %6867
%6869:	icmp	 %6868 XXX
%6870:	br	 %6869 if.end4 if.then2

BASIC BLOCK if.then2
%6871:	call	 XXX XXX printf
%6872:	br	 return

BASIC BLOCK if.end4
%6873:	getelementptr	 group_ptr XXX XXX
%6874:	load	 %6873
%6875:	getelementptr	 %6874 XXX XXX
%6876:	load	 %6875
%6877:	icmp	 %6876 XXX
%6878:	br	 %6877 if.else if.then6

BASIC BLOCK if.then6
%6879:	br	 if.end7

BASIC BLOCK if.else
%6880:	br	 if.end7

BASIC BLOCK if.end7
%6881:	phi	 XXX XXX
%6882:	getelementptr	 group_ptr XXX XXX
%6883:	load	 %6882
%6884:	getelementptr	 %6883 XXX XXX
%6885:	load	 %6884
%6886:	icmp	 %6885 XXX
%6887:	br	 %6886 if.else19 land.lhs.true

BASIC BLOCK land.lhs.true
%6888:	getelementptr	 group_ptr XXX XXX
%6889:	load	 %6888
%6890:	getelementptr	 %6889 XXX XXX
%6891:	load	 %6890
%6892:	icmp	 %6891 XXX
%6893:	br	 %6892 if.else19 if.then12

BASIC BLOCK if.then12
%6894:	getelementptr	 group_ptr XXX XXX
%6895:	load	 %6894
%6896:	icmp	 %6895 XXX
%6897:	br	 %6896 if.else15 if.then14

BASIC BLOCK if.then14
%6898:	fmul	 %6881 XXX
%6899:	br	 if.end18

BASIC BLOCK if.else15
%6900:	fmul	 %6881 XXX
%6901:	getelementptr	 group_ptr XXX XXX
%6902:	load	 %6901
%6903:	sitofp	 %6902
%6904:	fdiv	 %6900 %6903
%6905:	br	 if.end18

BASIC BLOCK if.end18
%6906:	phi	 %6898 %6904
%6907:	phi	 %6898 %6904
%6908:	br	 if.end35

BASIC BLOCK if.else19
%6909:	getelementptr	 group_ptr XXX XXX
%6910:	load	 %6909
%6911:	getelementptr	 %6910 XXX XXX
%6912:	load	 %6911
%6913:	icmp	 %6912 XXX
%6914:	br	 %6913 if.else27 if.then24

BASIC BLOCK if.then24
%6915:	getelementptr	 group_ptr XXX XXX
%6916:	load	 %6915
%6917:	getelementptr	 %6916 XXX XXX
%6918:	load	 %6917
%6919:	getelementptr	 group_ptr XXX XXX
%6920:	load	 %6919
%6921:	getelementptr	 %6920 XXX XXX
%6922:	load	 %6921
%6923:	br	 if.end34

BASIC BLOCK if.else27
%6924:	getelementptr	 group_ptr XXX XXX
%6925:	load	 %6924
%6926:	getelementptr	 %6925 XXX XXX
%6927:	load	 %6926
%6928:	getelementptr	 group_ptr XXX XXX
%6929:	load	 %6928
%6930:	getelementptr	 %6929 XXX XXX
%6931:	load	 %6930
%6932:	getelementptr	 group_ptr XXX XXX
%6933:	load	 %6932
%6934:	getelementptr	 %6933 XXX XXX
%6935:	load	 %6934
%6936:	getelementptr	 group_ptr XXX XXX
%6937:	load	 %6936
%6938:	getelementptr	 %6937 XXX XXX
%6939:	load	 %6938
%6940:	br	 if.end34

BASIC BLOCK if.end34
%6941:	phi	 %6922 %6939
%6942:	phi	 %6918 %6935
%6943:	phi	 %6922 %6931
%6944:	phi	 %6918 %6927
%6945:	br	 if.end35

BASIC BLOCK if.end35
%6946:	phi	 %6906 %6941
%6947:	phi	 XXX %6942
%6948:	phi	 %6907 %6943
%6949:	phi	 XXX %6944
%6950:	getelementptr	 group_ptr XXX XXX
%6951:	load	 %6950
%6952:	icmp	 %6951 XXX
%6953:	br	 %6952 if.else40 if.then39

BASIC BLOCK if.then39
%6954:	getelementptr	 group_ptr XXX XXX
%6955:	load	 %6954
%6956:	call	 %6949 %6948 %6947 %6946 %6955 seqrotrg
%6957:	br	 if.end47

BASIC BLOCK if.else40
%6958:	getelementptr	 group_ptr XXX XXX
%6959:	load	 %6958
%6960:	icmp	 %6959 XXX
%6961:	br	 %6960 if.end46 if.then44

BASIC BLOCK if.then44
%6962:	getelementptr	 group_ptr XXX XXX
%6963:	load	 %6962
%6964:	call	 %6949 %6948 %6947 %6946 %6963 seqrothg
%6965:	br	 if.end46

BASIC BLOCK if.end46
%6966:	br	 if.end47

BASIC BLOCK if.end47
%6967:	getelementptr	 group_ptr XXX XXX
%6968:	load	 %6967
%6969:	br	 while.cond

BASIC BLOCK while.cond
%6970:	phi	 %6968 %7006
%6971:	icmp	 %6970 XXX
%6972:	br	 %6971 while.end while.body

BASIC BLOCK while.body
%6973:	getelementptr	 group_ptr XXX XXX
%6974:	load	 %6973
%6975:	getelementptr	 %6974 XXX XXX
%6976:	load	 %6975
%6977:	getelementptr	 %6976 XXX XXX
%6978:	load	 %6977
%6979:	getelementptr	 %6970 XXX XXX
%6980:	load	 %6979
%6981:	getelementptr	 %6980 XXX XXX
%6982:	store	 %6978 %6981
%6983:	getelementptr	 group_ptr XXX XXX
%6984:	load	 %6983
%6985:	getelementptr	 %6984 XXX XXX
%6986:	load	 %6985
%6987:	getelementptr	 %6986 XXX XXX
%6988:	load	 %6987
%6989:	getelementptr	 %6970 XXX XXX
%6990:	load	 %6989
%6991:	getelementptr	 %6990 XXX XXX
%6992:	store	 %6988 %6991
%6993:	getelementptr	 group_ptr XXX XXX
%6994:	load	 %6993
%6995:	getelementptr	 %6994 XXX XXX
%6996:	load	 %6995
%6997:	getelementptr	 %6996 XXX XXX
%6998:	load	 %6997
%6999:	getelementptr	 %6970 XXX XXX
%7000:	load	 %6999
%7001:	getelementptr	 %7000 XXX XXX
%7002:	load	 %7001
%7003:	fadd	 %7002 %6998
%7004:	store	 %7003 %7001
%7005:	getelementptr	 %6970 XXX XXX
%7006:	load	 %7005
%7007:	br	 while.cond

BASIC BLOCK while.end
%7008:	br	 return

BASIC BLOCK return
%7009:	phi	 XXX XXX XXX
%7010:	ret	 %7009

FUNCTION sgrphaun

BASIC BLOCK entry
%7011:	getelementptr	 grphaexc_ptr XXX XXX
%7012:	load	 %7011
%7013:	br	 while.cond

BASIC BLOCK while.cond
%7014:	phi	 geomnode_ptr %7043
%7015:	icmp	 %7014 XXX
%7016:	br	 %7015 while.end9 while.body

BASIC BLOCK while.body
%7017:	getelementptr	 %7014 XXX XXX
%7018:	load	 %7017
%7019:	br	 while.cond1

BASIC BLOCK while.cond1
%7020:	phi	 %7018 %7040
%7021:	phi	 port_ptr %7038
%7022:	icmp	 %7021 XXX
%7023:	br	 %7022 while.end while.body3

BASIC BLOCK while.body3
%7024:	getelementptr	 %7021 XXX XXX
%7025:	load	 %7024
%7026:	fadd	 %7012 %7025
%7027:	getelementptr	 %7020 XXX XXX
%7028:	store	 %7026 %7027
%7029:	getelementptr	 %7021 XXX XXX
%7030:	load	 %7029
%7031:	getelementptr	 %7020 XXX XXX
%7032:	store	 %7030 %7031
%7033:	getelementptr	 %7021 XXX XXX
%7034:	load	 %7033
%7035:	getelementptr	 %7020 XXX XXX
%7036:	store	 %7034 %7035
%7037:	getelementptr	 %7021 XXX XXX
%7038:	load	 %7037
%7039:	getelementptr	 %7020 XXX XXX
%7040:	load	 %7039
%7041:	br	 while.cond1

BASIC BLOCK while.end
%7042:	getelementptr	 %7014 XXX XXX
%7043:	load	 %7042
%7044:	br	 while.cond

BASIC BLOCK while.end9
%7045:	ret	 XXX

FUNCTION versdef

BASIC BLOCK entry
%7046:	alloca	 XXX
%7047:	store	 p1 %7046
%7048:	store	 XXX px_ptr
%7049:	store	 XXX py_ptr
%7050:	store	 XXX qx_ptr
%7051:	store	 XXX qy_ptr
%7052:	store	 XXX pqxy_unit_ptr
%7053:	call	 XXX %7046 GetKeyword
%7054:	icmp	 %7053 XXX
%7055:	br	 %7054 if.end if.then

BASIC BLOCK if.then
%7056:	br	 return

BASIC BLOCK if.end
%7057:	call	 px_ptr %7046 GetReal
%7058:	icmp	 %7057 XXX
%7059:	br	 %7058 if.end4 if.then3

BASIC BLOCK if.then3
%7060:	load	 %7046
%7061:	call	 %7060 %7057 XXX parserro
%7062:	store	 XXX px_ptr
%7063:	store	 XXX py_ptr
%7064:	store	 XXX qx_ptr
%7065:	store	 XXX qy_ptr
%7066:	store	 XXX pqxy_unit_ptr
%7067:	br	 return

BASIC BLOCK if.end4
%7068:	call	 XXX %7046 GetKeyword
%7069:	icmp	 %7068 XXX
%7070:	br	 %7069 if.end8 if.then7

BASIC BLOCK if.then7
%7071:	load	 %7046
%7072:	call	 %7071 %7068 XXX parserro
%7073:	br	 return

BASIC BLOCK if.end8
%7074:	call	 py_ptr %7046 GetReal
%7075:	icmp	 %7074 XXX
%7076:	br	 %7075 if.end12 if.then11

BASIC BLOCK if.then11
%7077:	load	 %7046
%7078:	call	 %7077 %7074 XXX parserro
%7079:	store	 XXX px_ptr
%7080:	store	 XXX py_ptr
%7081:	store	 XXX qx_ptr
%7082:	store	 XXX qy_ptr
%7083:	store	 XXX pqxy_unit_ptr
%7084:	br	 return

BASIC BLOCK if.end12
%7085:	call	 XXX %7046 GetKeyword
%7086:	icmp	 %7085 XXX
%7087:	br	 %7086 if.end16 if.then15

BASIC BLOCK if.then15
%7088:	load	 %7046
%7089:	call	 %7088 %7085 XXX parserro
%7090:	br	 return

BASIC BLOCK if.end16
%7091:	call	 qx_ptr %7046 GetReal
%7092:	icmp	 %7091 XXX
%7093:	br	 %7092 if.end20 if.then19

BASIC BLOCK if.then19
%7094:	load	 %7046
%7095:	call	 %7094 %7091 XXX parserro
%7096:	store	 XXX px_ptr
%7097:	store	 XXX py_ptr
%7098:	store	 XXX qx_ptr
%7099:	store	 XXX qy_ptr
%7100:	store	 XXX pqxy_unit_ptr
%7101:	br	 return

BASIC BLOCK if.end20
%7102:	call	 XXX %7046 GetKeyword
%7103:	icmp	 %7102 XXX
%7104:	br	 %7103 if.end24 if.then23

BASIC BLOCK if.then23
%7105:	load	 %7046
%7106:	call	 %7105 %7102 XXX parserro
%7107:	br	 return

BASIC BLOCK if.end24
%7108:	call	 qy_ptr %7046 GetReal
%7109:	icmp	 %7108 XXX
%7110:	br	 %7109 if.end28 if.then27

BASIC BLOCK if.then27
%7111:	load	 %7046
%7112:	call	 %7111 %7108 XXX parserro
%7113:	store	 XXX px_ptr
%7114:	store	 XXX py_ptr
%7115:	store	 XXX qx_ptr
%7116:	store	 XXX qy_ptr
%7117:	store	 XXX pqxy_unit_ptr
%7118:	br	 return

BASIC BLOCK if.end28
%7119:	call	 %7046 pqxy_unit_ptr lenunit
%7120:	icmp	 %7119 XXX
%7121:	br	 %7120 if.end32 if.then31

BASIC BLOCK if.then31
%7122:	store	 XXX pqxy_unit_ptr
%7123:	br	 if.end32

BASIC BLOCK if.end32
%7124:	load	 %7046
%7125:	store	 %7124 pp2
%7126:	br	 return

BASIC BLOCK return
%7127:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX
%7128:	ret	 %7127

FUNCTION uvval

BASIC BLOCK entry
%7129:	alloca	 XXX
%7130:	store	 p1 %7129
%7131:	call	 val_ptr %7129 GetReal
%7132:	icmp	 %7131 XXX
%7133:	br	 %7132 if.end if.then

BASIC BLOCK if.then
%7134:	br	 return

BASIC BLOCK if.end
%7135:	load	 val_ptr
%7136:	fcmp	 %7135 XXX
%7137:	br	 %7136 lor.lhs.false if.then3

BASIC BLOCK lor.lhs.false
%7138:	load	 val_ptr
%7139:	fcmp	 %7138 XXX
%7140:	br	 %7139 if.end4 if.then3

BASIC BLOCK if.then3
%7141:	load	 %7129
%7142:	call	 %7141 XXX XXX parserro
%7143:	br	 return

BASIC BLOCK if.end4
%7144:	load	 %7129
%7145:	store	 %7144 pp2
%7146:	br	 return

BASIC BLOCK return
%7147:	phi	 XXX XXX XXX
%7148:	ret	 %7147

FUNCTION xycoord

BASIC BLOCK entry
%7149:	alloca	 XXX
%7150:	store	 p1 %7149
%7151:	call	 XXX %7149 GetKeyword
%7152:	call	 xcoord_ptr %7149 GetReal
%7153:	icmp	 %7152 XXX
%7154:	br	 %7153 if.end if.then

BASIC BLOCK if.then
%7155:	br	 return

BASIC BLOCK if.end
%7156:	call	 XXX %7149 GetKeyword
%7157:	call	 ycoord_ptr %7149 GetReal
%7158:	icmp	 %7157 XXX
%7159:	br	 %7158 if.end6 if.then5

BASIC BLOCK if.then5
%7160:	br	 return

BASIC BLOCK if.end6
%7161:	load	 %7149
%7162:	store	 %7161 pp2
%7163:	br	 return

BASIC BLOCK return
%7164:	phi	 XXX XXX XXX
%7165:	ret	 %7164
