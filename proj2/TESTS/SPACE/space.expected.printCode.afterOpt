
FUNCTION gnu_dev_major

BASIC BLOCK entry
%1:	lshr	 __dev XXX
%2:	and	 %1 XXX
%3:	lshr	 __dev XXX
%4:	trunc	 %3
%5:	and	 %4 XXX
%6:	zext	 %5
%7:	or	 %2 %6
%8:	trunc	 %7
%9:	ret	 %8

FUNCTION gnu_dev_minor

BASIC BLOCK entry
%10:	and	 __dev XXX
%11:	lshr	 __dev XXX
%12:	trunc	 %11
%13:	and	 %12 XXX
%14:	zext	 %13
%15:	or	 %10 %14
%16:	trunc	 %15
%17:	ret	 %16

FUNCTION gnu_dev_makedev

BASIC BLOCK entry
%18:	and	 __minor XXX
%19:	and	 __major XXX
%20:	shl	 %19 XXX
%21:	or	 %18 %20
%22:	zext	 %21
%23:	and	 __minor XXX
%24:	zext	 %23
%25:	shl	 %24 XXX
%26:	or	 %22 %25
%27:	and	 __major XXX
%28:	zext	 %27
%29:	shl	 %28 XXX
%30:	or	 %26 %29
%31:	ret	 %30

FUNCTION main

BASIC BLOCK entry
%32:	alloca	 XXX
%33:	alloca	 XXX
%34:	alloca	 XXX
%35:	alloca	 XXX
%36:	alloca	 XXX
%37:	store	 XXX %32
%38:	store	 XXX %33
%39:	store	 XXX %34
%40:	store	 XXX %35
%41:	icmp	 argc XXX
%42:	br	 %41 if.end if.then

BASIC BLOCK if.then
%43:	call	 XXX XXX printf
%44:	call	 XXX exit
%45:	unreachable	

BASIC BLOCK if.end
%46:	getelementptr	 argv XXX
%47:	load	 %46
%48:	call	 XXX %47 strcpy
%49:	call	 glvainit
%50:	getelementptr	 %36 XXX XXX
%51:	call	 %50 nomefile
%52:	getelementptr	 %36 XXX XXX
%53:	call	 %52 %32 %33 readfil3
%54:	icmp	 %53 XXX
%55:	br	 %54 if.end6 if.then5

BASIC BLOCK if.then5
%56:	call	 XXX exit
%57:	unreachable	

BASIC BLOCK if.end6
%58:	load	 %32
%59:	call	 %58 prnfile
%60:	load	 %32
%61:	call	 %60 %34 %35 groupdef
%62:	call	 waitcont
%63:	icmp	 %61 XXX
%64:	br	 %63 if.end10 if.then9

BASIC BLOCK if.then9
%65:	call	 XXX exit
%66:	unreachable	

BASIC BLOCK if.end10
%67:	load	 %35
%68:	call	 %67 simgroup
%69:	icmp	 %68 XXX
%70:	br	 %69 if.end13 if.then12

BASIC BLOCK if.then12
%71:	call	 XXX exit
%72:	unreachable	

BASIC BLOCK if.end13
%73:	load	 %35
%74:	call	 %73 simamp
%75:	icmp	 %74 XXX
%76:	br	 %75 if.end17 if.then16

BASIC BLOCK if.then16
%77:	call	 XXX exit
%78:	unreachable	

BASIC BLOCK if.end17
%79:	load	 %35
%80:	call	 %79 simpha
%81:	icmp	 %80 XXX
%82:	br	 %81 if.end21 if.then20

BASIC BLOCK if.then20
%83:	call	 XXX exit
%84:	unreachable	

BASIC BLOCK if.end21
%85:	load	 %35
%86:	call	 %85 simpol
%87:	call	 waitcont
%88:	load	 %35
%89:	getelementptr	 %36 XXX XXX
%90:	call	 %88 %89 grwrite
%91:	ret	 XXX

FUNCTION glvainit

BASIC BLOCK entry
%92:	call	 floatsup
%93:	call	 kwdsinit
%94:	call	 emsginit
%95:	call	 unaminit
%96:	call	 moseinit
%97:	ret	

FUNCTION nomefile

BASIC BLOCK entry
%98:	call	 fn XXX strcpy
%99:	ret	

FUNCTION readfil3

BASIC BLOCK entry
%100:	alloca	 XXX
%101:	store	 XXX firstel
%102:	store	 XXX lastel
%103:	getelementptr	 %100 XXX XXX
%104:	call	 %103 filename strcpy
%105:	getelementptr	 %100 XXX XXX
%106:	call	 %105 XXX strcat
%107:	getelementptr	 %100 XXX XXX
%108:	call	 %107 XXX fopen
%109:	icmp	 %108 XXX
%110:	br	 %109 if.end if.then

BASIC BLOCK if.then
%111:	getelementptr	 %100 XXX XXX
%112:	call	 XXX XXX %111 printf
%113:	br	 return

BASIC BLOCK if.end
%114:	call	 %108 _IO_getc
%115:	trunc	 %114
%116:	sext	 %115
%117:	icmp	 %116 XXX
%118:	br	 %117 if.end14 if.then11

BASIC BLOCK if.then11
%119:	getelementptr	 %100 XXX XXX
%120:	call	 XXX XXX %119 printf
%121:	br	 return

BASIC BLOCK if.end14
%122:	br	 while.cond

BASIC BLOCK while.cond
%123:	phi	 %115 %148
%124:	phi	 XXX %146
%125:	sext	 %123
%126:	sext	 %125
%127:	call	 __ctype_b_loc
%128:	load	 %127
%129:	getelementptr	 %128 %126
%130:	load	 %129
%131:	zext	 %130
%132:	and	 %131 XXX
%133:	icmp	 %132 XXX
%134:	br	 %133 lor.rhs lor.end

BASIC BLOCK lor.rhs
%135:	sext	 %123
%136:	icmp	 %135 XXX
%137:	br	 lor.end

BASIC BLOCK lor.end
%138:	phi	 XXX %136
%139:	br	 %138 while.end while.body

BASIC BLOCK while.body
%140:	sext	 %123
%141:	sext	 XXX
%142:	icmp	 %140 %141
%143:	br	 %142 if.end26 if.then25

BASIC BLOCK if.then25
%144:	add	 %124 XXX
%145:	br	 if.end26

BASIC BLOCK if.end26
%146:	phi	 %144 %124
%147:	call	 %108 _IO_getc
%148:	trunc	 %147
%149:	br	 while.cond

BASIC BLOCK while.end
%150:	call	 XXX malloc
%151:	bitcast	 %150
%152:	icmp	 %151 XXX
%153:	br	 %152 if.end34 if.then32

BASIC BLOCK if.then32
%154:	call	 XXX XXX printf
%155:	br	 return

BASIC BLOCK if.end34
%156:	getelementptr	 %151 XXX XXX
%157:	store	 %123 %156
%158:	getelementptr	 %151 XXX XXX
%159:	store	 %124 %158
%160:	getelementptr	 %151 XXX XXX
%161:	store	 XXX %160
%162:	getelementptr	 %151 XXX XXX
%163:	store	 XXX %162
%164:	store	 %151 firstel
%165:	store	 %151 lastel
%166:	call	 XXX printf
%167:	call	 %108 _IO_getc
%168:	trunc	 %167
%169:	br	 while.cond38

BASIC BLOCK while.cond38
%170:	phi	 %168 %258
%171:	phi	 %124 %259
%172:	sext	 %170
%173:	icmp	 %172 XXX
%174:	br	 %173 while.end100 while.body42

BASIC BLOCK while.body42
%175:	sext	 %170
%176:	sext	 %175
%177:	call	 __ctype_b_loc
%178:	load	 %177
%179:	getelementptr	 %178 %176
%180:	load	 %179
%181:	zext	 %180
%182:	and	 %181 XXX
%183:	icmp	 %182 XXX
%184:	br	 %183 lor.lhs.false if.then53

BASIC BLOCK lor.lhs.false
%185:	sext	 %170
%186:	icmp	 %185 XXX
%187:	br	 %186 if.else if.then53

BASIC BLOCK if.then53
%188:	br	 do.body

BASIC BLOCK do.body
%189:	phi	 %170 %199
%190:	phi	 %171 %197
%191:	sext	 %189
%192:	sext	 XXX
%193:	icmp	 %191 %192
%194:	br	 %193 if.end60 if.then58

BASIC BLOCK if.then58
%195:	add	 %190 XXX
%196:	br	 if.end60

BASIC BLOCK if.end60
%197:	phi	 %195 %190
%198:	call	 %108 _IO_getc
%199:	trunc	 %198
%200:	br	 do.cond

BASIC BLOCK do.cond
%201:	sext	 %199
%202:	sext	 %201
%203:	call	 __ctype_b_loc
%204:	load	 %203
%205:	getelementptr	 %204 %202
%206:	load	 %205
%207:	zext	 %206
%208:	and	 %207 XXX
%209:	icmp	 %208 XXX
%210:	br	 %209 lor.rhs70 lor.end74

BASIC BLOCK lor.rhs70
%211:	sext	 %199
%212:	icmp	 %211 XXX
%213:	br	 lor.end74

BASIC BLOCK lor.end74
%214:	phi	 XXX %212
%215:	br	 %214 do.end do.body

BASIC BLOCK do.end
%216:	call	 XXX malloc
%217:	bitcast	 %216
%218:	icmp	 %217 XXX
%219:	br	 %218 if.end80 if.then78

BASIC BLOCK if.then78
%220:	call	 XXX XXX printf
%221:	br	 return

BASIC BLOCK if.end80
%222:	getelementptr	 %217 XXX XXX
%223:	store	 XXX %222
%224:	getelementptr	 %217 XXX XXX
%225:	store	 %197 %224
%226:	load	 lastel
%227:	getelementptr	 %217 XXX XXX
%228:	store	 %226 %227
%229:	getelementptr	 %217 XXX XXX
%230:	store	 XXX %229
%231:	load	 lastel
%232:	getelementptr	 %231 XXX XXX
%233:	store	 %217 %232
%234:	store	 %217 lastel
%235:	br	 if.end99

BASIC BLOCK if.else
%236:	call	 XXX malloc
%237:	bitcast	 %236
%238:	icmp	 %237 XXX
%239:	br	 %238 if.end91 if.then89

BASIC BLOCK if.then89
%240:	call	 XXX XXX printf
%241:	br	 return

BASIC BLOCK if.end91
%242:	getelementptr	 %237 XXX XXX
%243:	store	 %170 %242
%244:	getelementptr	 %237 XXX XXX
%245:	store	 %171 %244
%246:	load	 lastel
%247:	getelementptr	 %237 XXX XXX
%248:	store	 %246 %247
%249:	getelementptr	 %237 XXX XXX
%250:	store	 XXX %249
%251:	load	 lastel
%252:	getelementptr	 %251 XXX XXX
%253:	store	 %237 %252
%254:	store	 %237 lastel
%255:	call	 %108 _IO_getc
%256:	trunc	 %255
%257:	br	 if.end99

BASIC BLOCK if.end99
%258:	phi	 %199 %256
%259:	phi	 %197 %171
%260:	br	 while.cond38

BASIC BLOCK while.end100
%261:	call	 %108 fclose
%262:	br	 return

BASIC BLOCK return
%263:	phi	 XXX XXX XXX XXX XXX XXX
%264:	ret	 %263

FUNCTION prnfile

BASIC BLOCK entry
%265:	call	 XXX printf
%266:	br	 while.cond

BASIC BLOCK while.cond
%267:	phi	 firstel %287
%268:	phi	 XXX %283
%269:	getelementptr	 %267 XXX XXX
%270:	load	 %269
%271:	icmp	 %270 XXX
%272:	br	 %271 while.end while.body

BASIC BLOCK while.body
%273:	getelementptr	 %267 XXX XXX
%274:	load	 %273
%275:	getelementptr	 %267 XXX XXX
%276:	load	 %275
%277:	icmp	 %276 %268
%278:	br	 %277 if.end if.then

BASIC BLOCK if.then
%279:	getelementptr	 %267 XXX XXX
%280:	load	 %279
%281:	call	 XXX %280 printf
%282:	br	 if.end

BASIC BLOCK if.end
%283:	phi	 %280 %268
%284:	sext	 %274
%285:	call	 %284 putchar
%286:	getelementptr	 %267 XXX XXX
%287:	load	 %286
%288:	br	 while.cond

BASIC BLOCK while.end
%289:	call	 XXX printf
%290:	ret	

FUNCTION groupdef

BASIC BLOCK entry
%291:	alloca	 XXX
%292:	alloca	 XXX
%293:	alloca	 XXX
%294:	alloca	 XXX
%295:	alloca	 XXX
%296:	alloca	 XXX
%297:	alloca	 XXX
%298:	store	 XXX %293
%299:	store	 XXX %294
%300:	store	 XXX %295
%301:	store	 XXX %296
%302:	store	 XXX %297
%303:	store	 p1 %291
%304:	call	 XXX %291 GetKeyword
%305:	icmp	 %304 XXX
%306:	br	 %305 if.end if.then

BASIC BLOCK if.then
%307:	store	 XXX group_ptr
%308:	br	 return

BASIC BLOCK if.end
%309:	getelementptr	 %292 XXX XXX
%310:	call	 %309 %291 GetUName
%311:	icmp	 %310 XXX
%312:	br	 %311 if.end4 if.then3

BASIC BLOCK if.then3
%313:	load	 %291
%314:	call	 %313 XXX XXX parserro
%315:	br	 return

BASIC BLOCK if.end4
%316:	getelementptr	 %292 XXX XXX
%317:	call	 %316 InUNames
%318:	icmp	 %317 XXX
%319:	br	 %318 if.end9 if.then7

BASIC BLOCK if.then7
%320:	load	 %291
%321:	getelementptr	 %292 XXX XXX
%322:	call	 %320 XXX %321 parserro
%323:	br	 return

BASIC BLOCK if.end9
%324:	getelementptr	 %292 XXX XXX
%325:	call	 %324 InserUN
%326:	load	 %291
%327:	call	 %326 %291 %293 %294 greldef
%328:	icmp	 %327 XXX
%329:	br	 %328 if.end15 if.then14

BASIC BLOCK if.then14
%330:	br	 return

BASIC BLOCK if.end15
%331:	icmp	 %327 XXX
%332:	br	 %331 if.end21 if.then17

BASIC BLOCK if.then17
%333:	load	 %293
%334:	getelementptr	 %333 XXX XXX
%335:	store	 XXX %334
%336:	load	 %294
%337:	getelementptr	 %336 XXX XXX
%338:	store	 XXX %337
%339:	load	 %294
%340:	getelementptr	 %339 XXX XXX
%341:	getelementptr	 %340 XXX XXX
%342:	call	 %341 XXX strcpy
%343:	br	 if.end21

BASIC BLOCK if.end21
%344:	load	 %291
%345:	call	 %344 %291 %295 grgeodef
%346:	icmp	 %345 XXX
%347:	br	 %346 if.end26 if.then24

BASIC BLOCK if.then24
%348:	load	 %291
%349:	getelementptr	 %292 XXX XXX
%350:	call	 %348 XXX %349 parserro
%351:	br	 return

BASIC BLOCK if.end26
%352:	load	 %291
%353:	call	 %352 %291 %296 %297 grexcdef
%354:	icmp	 %353 XXX
%355:	br	 %354 if.end30 if.then29

BASIC BLOCK if.then29
%356:	load	 %291
%357:	call	 %356 XXX XXX parserro
%358:	br	 return

BASIC BLOCK if.end30
%359:	call	 XXX %291 GetKeyword
%360:	icmp	 %359 XXX
%361:	br	 %360 if.end34 if.then33

BASIC BLOCK if.then33
%362:	load	 %291
%363:	call	 %362 XXX XXX parserro
%364:	br	 return

BASIC BLOCK if.end34
%365:	call	 XXX malloc
%366:	bitcast	 %365
%367:	store	 %366 group_ptr
%368:	load	 group_ptr
%369:	icmp	 %368 XXX
%370:	br	 %369 if.end38 if.then37

BASIC BLOCK if.then37
%371:	load	 %291
%372:	call	 %371 XXX XXX parserro
%373:	call	 XXX interror
%374:	br	 if.end38

BASIC BLOCK if.end38
%375:	load	 group_ptr
%376:	getelementptr	 %375 XXX XXX
%377:	getelementptr	 %376 XXX XXX
%378:	getelementptr	 %292 XXX XXX
%379:	call	 %377 %378 strcpy
%380:	load	 group_ptr
%381:	getelementptr	 %380 XXX XXX
%382:	store	 XXX %381
%383:	load	 group_ptr
%384:	getelementptr	 %383 XXX XXX
%385:	store	 XXX %384
%386:	load	 group_ptr
%387:	getelementptr	 %386 XXX XXX
%388:	store	 XXX %387
%389:	load	 group_ptr
%390:	getelementptr	 %389 XXX XXX
%391:	store	 XXX %390
%392:	load	 %293
%393:	load	 group_ptr
%394:	getelementptr	 %393 XXX XXX
%395:	store	 %392 %394
%396:	load	 %294
%397:	load	 group_ptr
%398:	getelementptr	 %397 XXX XXX
%399:	store	 %396 %398
%400:	load	 %296
%401:	load	 group_ptr
%402:	getelementptr	 %401 XXX XXX
%403:	store	 %400 %402
%404:	load	 %297
%405:	load	 group_ptr
%406:	getelementptr	 %405 XXX XXX
%407:	store	 %404 %406
%408:	load	 %295
%409:	load	 group_ptr
%410:	getelementptr	 %409 XXX XXX
%411:	store	 %408 %410
%412:	load	 group_ptr
%413:	getelementptr	 %412 XXX XXX
%414:	store	 XXX %413
%415:	load	 group_ptr
%416:	getelementptr	 %415 XXX XXX
%417:	store	 XXX %416
%418:	load	 group_ptr
%419:	getelementptr	 %418 XXX XXX
%420:	store	 XXX %419
%421:	load	 group_ptr
%422:	getelementptr	 %421 XXX XXX
%423:	store	 XXX %422
%424:	load	 group_ptr
%425:	getelementptr	 %424 XXX XXX
%426:	getelementptr	 %425 XXX XXX
%427:	store	 XXX %426
%428:	load	 %291
%429:	store	 %428 pp2
%430:	br	 return

BASIC BLOCK return
%431:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX
%432:	ret	 %431

FUNCTION waitcont

BASIC BLOCK entry
%433:	ret	

FUNCTION simgroup

BASIC BLOCK entry
%434:	call	 group_ptr fixsgrel
%435:	call	 group_ptr addscan
%436:	icmp	 %435 XXX
%437:	br	 %436 if.else if.then

BASIC BLOCK if.then
%438:	getelementptr	 group_ptr XXX XXX
%439:	getelementptr	 %438 XXX XXX
%440:	call	 XXX XXX %439 printf
%441:	br	 return

BASIC BLOCK if.else
%442:	br	 return

BASIC BLOCK return
%443:	phi	 XXX XXX
%444:	ret	 %443

FUNCTION simamp

BASIC BLOCK entry
%445:	getelementptr	 group_ptr XXX XXX
%446:	load	 %445
%447:	call	 %446 fixgramp
%448:	getelementptr	 group_ptr XXX XXX
%449:	load	 %448
%450:	getelementptr	 %449 XXX XXX
%451:	load	 %450
%452:	switch	 %451 sw.epilog XXX sw.bb XXX sw.bb4

BASIC BLOCK sw.bb
%453:	getelementptr	 group_ptr XXX XXX
%454:	load	 %453
%455:	getelementptr	 group_ptr XXX XXX
%456:	load	 %455
%457:	getelementptr	 group_ptr XXX XXX
%458:	load	 %457
%459:	getelementptr	 %458 XXX XXX
%460:	load	 %459
%461:	call	 %454 %456 %460 sgrampun
%462:	br	 sw.epilog

BASIC BLOCK sw.bb4
%463:	getelementptr	 group_ptr XXX XXX
%464:	load	 %463
%465:	getelementptr	 group_ptr XXX XXX
%466:	load	 %465
%467:	getelementptr	 group_ptr XXX XXX
%468:	load	 %467
%469:	getelementptr	 %468 XXX XXX
%470:	load	 %469
%471:	getelementptr	 group_ptr XXX XXX
%472:	load	 %471
%473:	call	 %464 %466 %470 %472 sgramp2n
%474:	br	 sw.epilog

BASIC BLOCK sw.epilog
%475:	phi	 XXX %473 %461
%476:	icmp	 %475 XXX
%477:	br	 %476 if.else if.then

BASIC BLOCK if.then
%478:	getelementptr	 group_ptr XXX XXX
%479:	getelementptr	 %478 XXX XXX
%480:	call	 XXX XXX %479 printf
%481:	br	 return

BASIC BLOCK if.else
%482:	br	 return

BASIC BLOCK return
%483:	phi	 XXX XXX
%484:	ret	 %483

FUNCTION simpha

BASIC BLOCK entry
%485:	getelementptr	 group_ptr XXX XXX
%486:	load	 %485
%487:	call	 %486 fixgrpha
%488:	getelementptr	 group_ptr XXX XXX
%489:	load	 %488
%490:	getelementptr	 %489 XXX XXX
%491:	load	 %490
%492:	switch	 %491 sw.epilog XXX sw.bb XXX sw.bb4 XXX sw.bb10

BASIC BLOCK sw.bb
%493:	getelementptr	 group_ptr XXX XXX
%494:	load	 %493
%495:	getelementptr	 group_ptr XXX XXX
%496:	load	 %495
%497:	getelementptr	 group_ptr XXX XXX
%498:	load	 %497
%499:	getelementptr	 %498 XXX XXX
%500:	load	 %499
%501:	call	 %494 %496 %500 sgrphaun
%502:	br	 sw.epilog

BASIC BLOCK sw.bb4
%503:	getelementptr	 group_ptr XXX XXX
%504:	load	 %503
%505:	getelementptr	 group_ptr XXX XXX
%506:	load	 %505
%507:	getelementptr	 group_ptr XXX XXX
%508:	load	 %507
%509:	getelementptr	 %508 XXX XXX
%510:	load	 %509
%511:	getelementptr	 group_ptr XXX XXX
%512:	load	 %511
%513:	call	 %504 %506 %510 %512 sgrpha2n
%514:	br	 sw.epilog

BASIC BLOCK sw.bb10
%515:	call	 group_ptr sgrphasr
%516:	br	 sw.epilog

BASIC BLOCK sw.epilog
%517:	phi	 XXX %515 %513 %501
%518:	icmp	 %517 XXX
%519:	br	 %518 if.else if.then

BASIC BLOCK if.then
%520:	getelementptr	 group_ptr XXX XXX
%521:	getelementptr	 %520 XXX XXX
%522:	call	 XXX XXX %521 printf
%523:	br	 return

BASIC BLOCK if.else
%524:	br	 return

BASIC BLOCK return
%525:	phi	 XXX XXX
%526:	ret	 %525

FUNCTION simpol

BASIC BLOCK entry
%527:	getelementptr	 group_ptr XXX XXX
%528:	load	 %527
%529:	br	 while.cond

BASIC BLOCK while.cond
%530:	phi	 %528 %554
%531:	icmp	 %530 XXX
%532:	br	 %531 while.end7 while.body

BASIC BLOCK while.body
%533:	getelementptr	 %530 XXX XXX
%534:	load	 %533
%535:	getelementptr	 group_ptr XXX XXX
%536:	load	 %535
%537:	getelementptr	 %536 XXX XXX
%538:	load	 %537
%539:	br	 while.cond1

BASIC BLOCK while.cond1
%540:	phi	 %534 %551
%541:	phi	 %538 %549
%542:	icmp	 %541 XXX
%543:	br	 %542 while.end while.body3

BASIC BLOCK while.body3
%544:	getelementptr	 %541 XXX XXX
%545:	load	 %544
%546:	getelementptr	 %540 XXX XXX
%547:	store	 %545 %546
%548:	getelementptr	 %541 XXX XXX
%549:	load	 %548
%550:	getelementptr	 %540 XXX XXX
%551:	load	 %550
%552:	br	 while.cond1

BASIC BLOCK while.end
%553:	getelementptr	 %530 XXX XXX
%554:	load	 %553
%555:	br	 while.cond

BASIC BLOCK while.end7
%556:	ret	 XXX

FUNCTION grwrite

BASIC BLOCK entry
%557:	alloca	 XXX
%558:	icmp	 group_ptr XXX
%559:	br	 %558 if.end if.then

BASIC BLOCK if.then
%560:	call	 XXX interror
%561:	call	 XXX exit
%562:	unreachable	

BASIC BLOCK if.end
%563:	getelementptr	 group_ptr XXX XXX
%564:	load	 %563
%565:	getelementptr	 %557 XXX XXX
%566:	call	 %565 filename strcpy
%567:	getelementptr	 %557 XXX XXX
%568:	call	 %567 XXX strcat
%569:	getelementptr	 %557 XXX XXX
%570:	call	 XXX %569 printf
%571:	call	 XXX printf
%572:	call	 XXX printf
%573:	call	 XXX printf
%574:	getelementptr	 group_ptr XXX XXX
%575:	load	 %574
%576:	call	 XXX %575 printf
%577:	call	 XXX printf
%578:	call	 XXX %575 printf
%579:	call	 XXX printf
%580:	getelementptr	 group_ptr XXX XXX
%581:	load	 %580
%582:	getelementptr	 %581 XXX XXX
%583:	load	 %582
%584:	call	 XXX %583 printf
%585:	call	 XXX printf
%586:	call	 XXX %583 printf
%587:	call	 XXX printf
%588:	br	 while.cond

BASIC BLOCK while.cond
%589:	phi	 XXX %593
%590:	phi	 %564 %676
%591:	icmp	 %590 XXX
%592:	br	 %591 while.end61 while.body

BASIC BLOCK while.body
%593:	add	 %589 XXX
%594:	call	 XXX %593 printf
%595:	getelementptr	 %590 XXX XXX
%596:	load	 %595
%597:	call	 XXX %596 printf
%598:	getelementptr	 %590 XXX XXX
%599:	load	 %598
%600:	call	 XXX %599 printf
%601:	getelementptr	 %590 XXX XXX
%602:	load	 %601
%603:	call	 XXX %602 printf
%604:	getelementptr	 %590 XXX XXX
%605:	load	 %604
%606:	call	 XXX %605 printf
%607:	getelementptr	 %590 XXX XXX
%608:	load	 %607
%609:	call	 XXX %608 printf
%610:	getelementptr	 %590 XXX XXX
%611:	load	 %610
%612:	call	 XXX %611 printf
%613:	call	 XXX printf
%614:	call	 XXX %593 printf
%615:	getelementptr	 %590 XXX XXX
%616:	load	 %615
%617:	call	 XXX %616 printf
%618:	getelementptr	 %590 XXX XXX
%619:	load	 %618
%620:	call	 XXX %619 printf
%621:	getelementptr	 %590 XXX XXX
%622:	load	 %621
%623:	call	 XXX %622 printf
%624:	getelementptr	 %590 XXX XXX
%625:	load	 %624
%626:	call	 XXX %625 printf
%627:	getelementptr	 %590 XXX XXX
%628:	load	 %627
%629:	call	 XXX %628 printf
%630:	getelementptr	 %590 XXX XXX
%631:	load	 %630
%632:	call	 XXX %631 printf
%633:	call	 XXX printf
%634:	getelementptr	 %590 XXX XXX
%635:	load	 %634
%636:	br	 while.cond40

BASIC BLOCK while.cond40
%637:	phi	 %635 %673
%638:	icmp	 %637 XXX
%639:	br	 %638 while.end while.body42

BASIC BLOCK while.body42
%640:	getelementptr	 %637 XXX XXX
%641:	load	 %640
%642:	call	 XXX %641 printf
%643:	getelementptr	 %637 XXX XXX
%644:	load	 %643
%645:	getelementptr	 %637 XXX XXX
%646:	load	 %645
%647:	fadd	 %644 %646
%648:	call	 XXX %647 printf
%649:	getelementptr	 %637 XXX XXX
%650:	load	 %649
%651:	call	 XXX %650 printf
%652:	getelementptr	 %637 XXX XXX
%653:	load	 %652
%654:	call	 XXX %653 printf
%655:	call	 XXX printf
%656:	getelementptr	 %637 XXX XXX
%657:	load	 %656
%658:	call	 XXX %657 printf
%659:	getelementptr	 %637 XXX XXX
%660:	load	 %659
%661:	getelementptr	 %637 XXX XXX
%662:	load	 %661
%663:	fadd	 %660 %662
%664:	call	 XXX %663 printf
%665:	getelementptr	 %637 XXX XXX
%666:	load	 %665
%667:	call	 XXX %666 printf
%668:	getelementptr	 %637 XXX XXX
%669:	load	 %668
%670:	call	 XXX %669 printf
%671:	call	 XXX printf
%672:	getelementptr	 %637 XXX XXX
%673:	load	 %672
%674:	br	 while.cond40

BASIC BLOCK while.end
%675:	getelementptr	 %590 XXX XXX
%676:	load	 %675
%677:	br	 while.cond

BASIC BLOCK while.end61
%678:	getelementptr	 %557 XXX XXX
%679:	call	 XXX %678 printf
%680:	ret	 XXX

FUNCTION adddef

BASIC BLOCK entry
%681:	alloca	 XXX
%682:	alloca	 XXX
%683:	store	 XXX %682
%684:	store	 p1 %681
%685:	call	 XXX %681 GetKeyword
%686:	icmp	 %685 XXX
%687:	br	 %686 if.end if.then

BASIC BLOCK if.then
%688:	store	 XXX addrem_ptr
%689:	br	 return

BASIC BLOCK if.end
%690:	load	 %681
%691:	call	 %690 %681 %682 nodedef
%692:	icmp	 %691 XXX
%693:	br	 %692 if.end4 if.then3

BASIC BLOCK if.then3
%694:	store	 XXX addrem_ptr
%695:	load	 %681
%696:	call	 %695 XXX XXX parserro
%697:	br	 return

BASIC BLOCK if.end4
%698:	icmp	 %691 XXX
%699:	br	 %698 if.end11 if.then6

BASIC BLOCK if.then6
%700:	call	 XXX malloc
%701:	bitcast	 %700
%702:	store	 %701 addrem_ptr
%703:	load	 addrem_ptr
%704:	icmp	 %703 XXX
%705:	br	 %704 if.end10 if.then9

BASIC BLOCK if.then9
%706:	load	 %681
%707:	call	 %706 XXX XXX parserro
%708:	call	 XXX interror
%709:	br	 if.end10

BASIC BLOCK if.end10
%710:	load	 addrem_ptr
%711:	getelementptr	 %710 XXX XXX
%712:	store	 XXX %711
%713:	load	 addrem_ptr
%714:	getelementptr	 %713 XXX XXX
%715:	store	 XXX %714
%716:	load	 %682
%717:	load	 addrem_ptr
%718:	getelementptr	 %717 XXX XXX
%719:	store	 %716 %718
%720:	load	 addrem_ptr
%721:	getelementptr	 %720 XXX XXX
%722:	store	 XXX %721
%723:	load	 %681
%724:	store	 %723 pp2
%725:	br	 return

BASIC BLOCK if.end11
%726:	load	 %681
%727:	call	 %726 %681 %682 blockdef
%728:	icmp	 %727 XXX
%729:	br	 %728 if.end15 if.then14

BASIC BLOCK if.then14
%730:	store	 XXX addrem_ptr
%731:	load	 %681
%732:	call	 %731 XXX XXX parserro
%733:	br	 return

BASIC BLOCK if.end15
%734:	icmp	 %727 XXX
%735:	br	 %734 if.end26 if.then17

BASIC BLOCK if.then17
%736:	call	 XXX malloc
%737:	bitcast	 %736
%738:	store	 %737 addrem_ptr
%739:	load	 addrem_ptr
%740:	icmp	 %739 XXX
%741:	br	 %740 if.end21 if.then20

BASIC BLOCK if.then20
%742:	load	 %681
%743:	call	 %742 XXX XXX parserro
%744:	call	 XXX interror
%745:	br	 if.end21

BASIC BLOCK if.end21
%746:	load	 addrem_ptr
%747:	getelementptr	 %746 XXX XXX
%748:	store	 XXX %747
%749:	load	 addrem_ptr
%750:	getelementptr	 %749 XXX XXX
%751:	store	 XXX %750
%752:	load	 %682
%753:	load	 addrem_ptr
%754:	getelementptr	 %753 XXX XXX
%755:	store	 %752 %754
%756:	load	 addrem_ptr
%757:	getelementptr	 %756 XXX XXX
%758:	store	 XXX %757
%759:	load	 %681
%760:	store	 %759 pp2
%761:	br	 return

BASIC BLOCK if.end26
%762:	load	 %681
%763:	call	 %762 %681 %682 polydef
%764:	icmp	 %763 XXX
%765:	br	 %764 if.end30 if.then29

BASIC BLOCK if.then29
%766:	store	 XXX addrem_ptr
%767:	load	 %681
%768:	call	 %767 XXX XXX parserro
%769:	br	 return

BASIC BLOCK if.end30
%770:	icmp	 %763 XXX
%771:	br	 %770 if.end41 if.then32

BASIC BLOCK if.then32
%772:	call	 XXX malloc
%773:	bitcast	 %772
%774:	store	 %773 addrem_ptr
%775:	load	 addrem_ptr
%776:	icmp	 %775 XXX
%777:	br	 %776 if.end36 if.then35

BASIC BLOCK if.then35
%778:	load	 %681
%779:	call	 %778 XXX XXX parserro
%780:	call	 XXX interror
%781:	br	 if.end36

BASIC BLOCK if.end36
%782:	load	 addrem_ptr
%783:	getelementptr	 %782 XXX XXX
%784:	store	 XXX %783
%785:	load	 addrem_ptr
%786:	getelementptr	 %785 XXX XXX
%787:	store	 XXX %786
%788:	load	 %682
%789:	load	 addrem_ptr
%790:	getelementptr	 %789 XXX XXX
%791:	store	 %788 %790
%792:	load	 addrem_ptr
%793:	getelementptr	 %792 XXX XXX
%794:	store	 XXX %793
%795:	load	 %681
%796:	store	 %795 pp2
%797:	br	 return

BASIC BLOCK if.end41
%798:	load	 %681
%799:	call	 %798 %681 %682 hexdef
%800:	icmp	 %799 XXX
%801:	br	 %800 if.end45 if.then44

BASIC BLOCK if.then44
%802:	store	 XXX addrem_ptr
%803:	load	 %681
%804:	call	 %803 XXX XXX parserro
%805:	br	 return

BASIC BLOCK if.end45
%806:	icmp	 %799 XXX
%807:	br	 %806 if.end56 if.then47

BASIC BLOCK if.then47
%808:	call	 XXX malloc
%809:	bitcast	 %808
%810:	store	 %809 addrem_ptr
%811:	load	 addrem_ptr
%812:	icmp	 %811 XXX
%813:	br	 %812 if.end51 if.then50

BASIC BLOCK if.then50
%814:	load	 %681
%815:	call	 %814 XXX XXX parserro
%816:	call	 XXX interror
%817:	br	 if.end51

BASIC BLOCK if.end51
%818:	load	 addrem_ptr
%819:	getelementptr	 %818 XXX XXX
%820:	store	 XXX %819
%821:	load	 addrem_ptr
%822:	getelementptr	 %821 XXX XXX
%823:	store	 XXX %822
%824:	load	 %682
%825:	load	 addrem_ptr
%826:	getelementptr	 %825 XXX XXX
%827:	store	 %824 %826
%828:	load	 addrem_ptr
%829:	getelementptr	 %828 XXX XXX
%830:	store	 XXX %829
%831:	load	 %681
%832:	store	 %831 pp2
%833:	br	 return

BASIC BLOCK if.end56
%834:	store	 XXX addrem_ptr
%835:	load	 %681
%836:	call	 %835 XXX XXX parserro
%837:	br	 return

BASIC BLOCK return
%838:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
%839:	ret	 %838

FUNCTION GetKeyword

BASIC BLOCK entry
%840:	alloca	 XXX
%841:	alloca	 XXX
%842:	load	 tp
%843:	store	 %842 %840
%844:	call	 %840 TapeGet
%845:	br	 while.cond

BASIC BLOCK while.cond
%846:	phi	 %844 %872
%847:	phi	 XXX %871
%848:	sext	 %846
%849:	sext	 %848
%850:	call	 __ctype_b_loc
%851:	load	 %850
%852:	getelementptr	 %851 %849
%853:	load	 %852
%854:	zext	 %853
%855:	and	 %854 XXX
%856:	icmp	 %855 XXX
%857:	br	 %856 lor.lhs.false land.lhs.true

BASIC BLOCK lor.lhs.false
%858:	sext	 %846
%859:	icmp	 %858 XXX
%860:	br	 %859 land.end land.lhs.true

BASIC BLOCK land.lhs.true
%861:	icmp	 %847 XXX
%862:	br	 %861 land.end land.rhs

BASIC BLOCK land.rhs
%863:	load	 %840
%864:	icmp	 %863 XXX
%865:	br	 land.end

BASIC BLOCK land.end
%866:	phi	 XXX XXX %864
%867:	br	 %866 while.end while.body

BASIC BLOCK while.body
%868:	sext	 %847
%869:	getelementptr	 %841 XXX %868
%870:	store	 %846 %869
%871:	add	 %847 XXX
%872:	call	 %840 TapeGet
%873:	br	 while.cond

BASIC BLOCK while.end
%874:	sext	 %847
%875:	getelementptr	 %841 XXX %874
%876:	store	 XXX %875
%877:	getelementptr	 %841 XXX XXX
%878:	call	 kw %877 strcmp
%879:	icmp	 %878 XXX
%880:	br	 %879 if.else if.then

BASIC BLOCK if.then
%881:	load	 %840
%882:	store	 %881 tp
%883:	br	 return

BASIC BLOCK if.else
%884:	br	 return

BASIC BLOCK return
%885:	phi	 XXX XXX
%886:	ret	 %885

FUNCTION nodedef

BASIC BLOCK entry
%887:	alloca	 XXX
%888:	alloca	 XXX
%889:	alloca	 XXX
%890:	alloca	 XXX
%891:	alloca	 XXX
%892:	alloca	 XXX
%893:	alloca	 XXX
%894:	store	 p1 %887
%895:	store	 XXX node_ptr
%896:	call	 XXX %887 GetKeyword
%897:	icmp	 %896 XXX
%898:	br	 %897 if.end if.then

BASIC BLOCK if.then
%899:	br	 return

BASIC BLOCK if.end
%900:	load	 %887
%901:	call	 %900 %887 %888 %889 nodecoor
%902:	icmp	 %901 XXX
%903:	br	 %902 if.end4 if.then3

BASIC BLOCK if.then3
%904:	load	 %887
%905:	call	 %904 XXX XXX parserro
%906:	br	 return

BASIC BLOCK if.end4
%907:	icmp	 %901 XXX
%908:	br	 %907 if.end7 if.then6

BASIC BLOCK if.then6
%909:	load	 %887
%910:	call	 %909 XXX XXX parserro
%911:	br	 return

BASIC BLOCK if.end7
%912:	icmp	 %901 XXX
%913:	br	 %912 if.end11 if.then9

BASIC BLOCK if.then9
%914:	load	 %887
%915:	call	 %914 %887 %890 %891 %892 %893 nodorien
%916:	br	 if.end11

BASIC BLOCK if.end11
%917:	phi	 %915 %901
%918:	icmp	 %917 XXX
%919:	br	 %918 if.end15 if.then13

BASIC BLOCK if.then13
%920:	call	 XXX XXX printf
%921:	br	 return

BASIC BLOCK if.end15
%922:	icmp	 %917 XXX
%923:	br	 %922 if.end18 if.then17

BASIC BLOCK if.then17
%924:	br	 if.end18

BASIC BLOCK if.end18
%925:	phi	 XXX XXX
%926:	call	 XXX malloc
%927:	bitcast	 %926
%928:	store	 %927 node_ptr
%929:	load	 node_ptr
%930:	icmp	 %929 XXX
%931:	br	 %930 if.end22 if.then21

BASIC BLOCK if.then21
%932:	load	 %887
%933:	call	 %932 XXX XXX parserro
%934:	call	 XXX interror
%935:	br	 if.end22

BASIC BLOCK if.end22
%936:	load	 node_ptr
%937:	getelementptr	 %936 XXX XXX
%938:	store	 XXX %937
%939:	load	 %888
%940:	load	 node_ptr
%941:	getelementptr	 %940 XXX XXX
%942:	store	 %939 %941
%943:	load	 %889
%944:	load	 node_ptr
%945:	getelementptr	 %944 XXX XXX
%946:	store	 %943 %945
%947:	load	 %890
%948:	load	 node_ptr
%949:	getelementptr	 %948 XXX XXX
%950:	store	 %947 %949
%951:	load	 %891
%952:	load	 node_ptr
%953:	getelementptr	 %952 XXX XXX
%954:	store	 %951 %953
%955:	load	 %892
%956:	load	 node_ptr
%957:	getelementptr	 %956 XXX XXX
%958:	store	 %955 %957
%959:	load	 %893
%960:	load	 node_ptr
%961:	getelementptr	 %960 XXX XXX
%962:	store	 %959 %961
%963:	load	 node_ptr
%964:	getelementptr	 %963 XXX XXX
%965:	store	 %925 %964
%966:	load	 %887
%967:	store	 %966 pp2
%968:	br	 return

BASIC BLOCK return
%969:	phi	 XXX XXX XXX XXX XXX
%970:	ret	 %969

FUNCTION parserro

BASIC BLOCK entry
%971:	load	 parserro.errline_printed
%972:	icmp	 %971 XXX
%973:	br	 %972 if.then if.end

BASIC BLOCK if.then
%974:	store	 XXX parserro.errline_printed
%975:	getelementptr	 err_ptr XXX XXX
%976:	load	 %975
%977:	call	 XXX %976 printf
%978:	br	 while.cond

BASIC BLOCK while.cond
%979:	phi	 err_ptr %997
%980:	phi	 XXX %995
%981:	getelementptr	 %979 XXX XXX
%982:	load	 %981
%983:	icmp	 %982 XXX
%984:	br	 %983 land.end land.rhs

BASIC BLOCK land.rhs
%985:	getelementptr	 %979 XXX XXX
%986:	load	 %985
%987:	getelementptr	 %986 XXX XXX
%988:	load	 %987
%989:	getelementptr	 err_ptr XXX XXX
%990:	load	 %989
%991:	icmp	 %988 %990
%992:	br	 land.end

BASIC BLOCK land.end
%993:	phi	 XXX %991
%994:	br	 %993 while.end while.body

BASIC BLOCK while.body
%995:	add	 %980 XXX
%996:	getelementptr	 %979 XXX XXX
%997:	load	 %996
%998:	br	 while.cond

BASIC BLOCK while.end
%999:	getelementptr	 %979 XXX XXX
%1000:	load	 %999
%1001:	call	 XXX %1000 printf
%1002:	br	 while.cond8

BASIC BLOCK while.cond8
%1003:	phi	 %979 %1019
%1004:	icmp	 %1003 XXX
%1005:	br	 %1004 land.end14 land.rhs10

BASIC BLOCK land.rhs10
%1006:	getelementptr	 %1003 XXX XXX
%1007:	load	 %1006
%1008:	getelementptr	 err_ptr XXX XXX
%1009:	load	 %1008
%1010:	icmp	 %1007 %1009
%1011:	br	 land.end14

BASIC BLOCK land.end14
%1012:	phi	 XXX %1010
%1013:	br	 %1012 while.end17 while.body15

BASIC BLOCK while.body15
%1014:	getelementptr	 %1003 XXX XXX
%1015:	load	 %1014
%1016:	sext	 %1015
%1017:	call	 XXX %1016 printf
%1018:	getelementptr	 %1003 XXX XXX
%1019:	load	 %1018
%1020:	br	 while.cond8

BASIC BLOCK while.end17
%1021:	call	 XXX printf
%1022:	br	 for.cond

BASIC BLOCK for.cond
%1023:	phi	 XXX %1028
%1024:	icmp	 %1023 %980
%1025:	br	 %1024 for.end for.body

BASIC BLOCK for.body
%1026:	call	 XXX printf
%1027:	br	 for.inc

BASIC BLOCK for.inc
%1028:	add	 %1023 XXX
%1029:	br	 for.cond

BASIC BLOCK for.end
%1030:	call	 XXX printf
%1031:	br	 if.end

BASIC BLOCK if.end
%1032:	icmp	 s XXX
%1033:	br	 %1032 if.else if.then26

BASIC BLOCK if.then26
%1034:	sext	 errcode
%1035:	getelementptr	 ErrorMessages XXX %1034
%1036:	getelementptr	 %1035 XXX XXX
%1037:	call	 XXX %1036 printf
%1038:	br	 if.end32

BASIC BLOCK if.else
%1039:	sext	 errcode
%1040:	getelementptr	 ErrorMessages XXX %1039
%1041:	getelementptr	 %1040 XXX XXX
%1042:	call	 XXX %1041 s printf
%1043:	br	 if.end32

BASIC BLOCK if.end32
%1044:	ret	

FUNCTION interror

BASIC BLOCK entry
%1045:	call	 XXX subname printf
%1046:	call	 XXX printf
%1047:	call	 XXX exit
%1048:	unreachable	

BASIC BLOCK return
%1049:	ret	

FUNCTION blockdef

BASIC BLOCK entry
%1050:	alloca	 XXX
%1051:	alloca	 XXX
%1052:	alloca	 XXX
%1053:	store	 p1 %1050
%1054:	store	 XXX node_ptr
%1055:	call	 XXX %1050 GetKeyword
%1056:	icmp	 %1055 XXX
%1057:	br	 %1056 if.end if.then

BASIC BLOCK if.then
%1058:	br	 return

BASIC BLOCK if.end
%1059:	load	 %1050
%1060:	call	 %1059 %1050 %1051 %1052 nodecoor
%1061:	icmp	 %1060 XXX
%1062:	br	 %1061 if.end4 if.then3

BASIC BLOCK if.then3
%1063:	load	 %1050
%1064:	call	 %1063 XXX XXX parserro
%1065:	br	 return

BASIC BLOCK if.end4
%1066:	icmp	 %1060 XXX
%1067:	br	 %1066 if.end7 if.then6

BASIC BLOCK if.then6
%1068:	load	 %1050
%1069:	call	 %1068 XXX XXX parserro
%1070:	br	 return

BASIC BLOCK if.end7
%1071:	call	 XXX malloc
%1072:	bitcast	 %1071
%1073:	icmp	 %1072 XXX
%1074:	br	 %1073 if.end11 if.then10

BASIC BLOCK if.then10
%1075:	load	 %1050
%1076:	call	 %1075 XXX XXX parserro
%1077:	call	 XXX interror
%1078:	call	 XXX exit
%1079:	unreachable	

BASIC BLOCK if.end11
%1080:	load	 %1051
%1081:	getelementptr	 %1072 XXX XXX
%1082:	store	 %1080 %1081
%1083:	load	 %1052
%1084:	getelementptr	 %1072 XXX XXX
%1085:	store	 %1083 %1084
%1086:	getelementptr	 %1072 XXX XXX
%1087:	store	 XXX %1086
%1088:	getelementptr	 %1072 XXX XXX
%1089:	store	 XXX %1088
%1090:	getelementptr	 %1072 XXX XXX
%1091:	store	 XXX %1090
%1092:	getelementptr	 %1072 XXX XXX
%1093:	store	 XXX %1092
%1094:	getelementptr	 %1072 XXX XXX
%1095:	store	 XXX %1094
%1096:	load	 %1050
%1097:	call	 %1096 %1050 %1051 %1052 nodecoor
%1098:	icmp	 %1097 XXX
%1099:	br	 %1098 if.end15 if.then14

BASIC BLOCK if.then14
%1100:	load	 %1050
%1101:	call	 %1100 XXX XXX parserro
%1102:	br	 return

BASIC BLOCK if.end15
%1103:	icmp	 %1097 XXX
%1104:	br	 %1103 if.end18 if.then17

BASIC BLOCK if.then17
%1105:	load	 %1050
%1106:	call	 %1105 XXX XXX parserro
%1107:	br	 return

BASIC BLOCK if.end18
%1108:	call	 XXX malloc
%1109:	bitcast	 %1108
%1110:	icmp	 %1109 XXX
%1111:	br	 %1110 if.end22 if.then21

BASIC BLOCK if.then21
%1112:	load	 %1050
%1113:	call	 %1112 XXX XXX parserro
%1114:	call	 XXX interror
%1115:	call	 XXX exit
%1116:	unreachable	

BASIC BLOCK if.end22
%1117:	load	 %1051
%1118:	getelementptr	 %1109 XXX XXX
%1119:	store	 %1117 %1118
%1120:	load	 %1052
%1121:	getelementptr	 %1109 XXX XXX
%1122:	store	 %1120 %1121
%1123:	getelementptr	 %1109 XXX XXX
%1124:	store	 XXX %1123
%1125:	getelementptr	 %1109 XXX XXX
%1126:	store	 XXX %1125
%1127:	getelementptr	 %1109 XXX XXX
%1128:	store	 XXX %1127
%1129:	getelementptr	 %1109 XXX XXX
%1130:	store	 XXX %1129
%1131:	getelementptr	 %1109 XXX XXX
%1132:	store	 XXX %1131
%1133:	getelementptr	 %1072 XXX XXX
%1134:	store	 %1109 %1133
%1135:	store	 %1072 node_ptr
%1136:	load	 %1050
%1137:	store	 %1136 pp2
%1138:	br	 return

BASIC BLOCK return
%1139:	phi	 XXX XXX XXX XXX XXX XXX
%1140:	ret	 %1139

FUNCTION polydef

BASIC BLOCK entry
%1141:	alloca	 XXX
%1142:	alloca	 XXX
%1143:	alloca	 XXX
%1144:	store	 p1 %1141
%1145:	store	 XXX node_ptr
%1146:	call	 XXX %1141 GetKeyword
%1147:	icmp	 %1146 XXX
%1148:	br	 %1147 if.end if.then

BASIC BLOCK if.then
%1149:	br	 return

BASIC BLOCK if.end
%1150:	br	 while.body

BASIC BLOCK while.body
%1151:	phi	 XXX %1193
%1152:	phi	 XXX %1194
%1153:	phi	 XXX %1195
%1154:	load	 %1141
%1155:	call	 %1154 %1141 %1142 %1143 nodecoor
%1156:	icmp	 %1155 XXX
%1157:	br	 %1156 if.end13 if.then3

BASIC BLOCK if.then3
%1158:	add	 %1151 XXX
%1159:	call	 XXX malloc
%1160:	bitcast	 %1159
%1161:	icmp	 %1160 XXX
%1162:	br	 %1161 if.end7 if.then6

BASIC BLOCK if.then6
%1163:	load	 %1141
%1164:	call	 %1163 XXX XXX parserro
%1165:	call	 XXX interror
%1166:	br	 if.end7

BASIC BLOCK if.end7
%1167:	load	 %1142
%1168:	getelementptr	 %1160 XXX XXX
%1169:	store	 %1167 %1168
%1170:	load	 %1143
%1171:	getelementptr	 %1160 XXX XXX
%1172:	store	 %1170 %1171
%1173:	getelementptr	 %1160 XXX XXX
%1174:	store	 XXX %1173
%1175:	getelementptr	 %1160 XXX XXX
%1176:	store	 XXX %1175
%1177:	getelementptr	 %1160 XXX XXX
%1178:	store	 XXX %1177
%1179:	getelementptr	 %1160 XXX XXX
%1180:	store	 XXX %1179
%1181:	icmp	 %1152 XXX
%1182:	br	 %1181 if.else if.then9

BASIC BLOCK if.then9
%1183:	getelementptr	 %1160 XXX XXX
%1184:	store	 XXX %1183
%1185:	br	 if.end12

BASIC BLOCK if.else
%1186:	getelementptr	 %1153 XXX XXX
%1187:	store	 %1160 %1186
%1188:	getelementptr	 %1160 XXX XXX
%1189:	store	 XXX %1188
%1190:	br	 if.end12

BASIC BLOCK if.end12
%1191:	phi	 %1160 %1152
%1192:	br	 if.end13

BASIC BLOCK if.end13
%1193:	phi	 %1158 %1151
%1194:	phi	 %1191 %1152
%1195:	phi	 %1160 %1153
%1196:	icmp	 %1155 XXX
%1197:	br	 %1196 if.end16 if.then15

BASIC BLOCK if.then15
%1198:	br	 while.end

BASIC BLOCK if.end16
%1199:	br	 while.body

BASIC BLOCK while.end
%1200:	icmp	 %1193 XXX
%1201:	br	 %1200 if.end19 if.then18

BASIC BLOCK if.then18
%1202:	store	 XXX node_ptr
%1203:	load	 %1141
%1204:	call	 %1203 XXX XXX parserro
%1205:	br	 return

BASIC BLOCK if.end19
%1206:	store	 %1194 node_ptr
%1207:	load	 %1141
%1208:	store	 %1207 pp2
%1209:	br	 return

BASIC BLOCK return
%1210:	phi	 XXX XXX XXX
%1211:	ret	 %1210

FUNCTION hexdef

BASIC BLOCK entry
%1212:	alloca	 XXX
%1213:	alloca	 XXX
%1214:	alloca	 XXX
%1215:	store	 p1 %1212
%1216:	store	 XXX node_ptr
%1217:	call	 XXX %1212 GetKeyword
%1218:	icmp	 %1217 XXX
%1219:	br	 %1218 if.end if.then

BASIC BLOCK if.then
%1220:	br	 return

BASIC BLOCK if.end
%1221:	load	 %1212
%1222:	call	 %1221 %1212 %1213 %1214 nodecoor
%1223:	icmp	 %1222 XXX
%1224:	br	 %1223 if.end4 if.then3

BASIC BLOCK if.then3
%1225:	load	 %1212
%1226:	call	 %1225 XXX XXX parserro
%1227:	br	 return

BASIC BLOCK if.end4
%1228:	icmp	 %1222 XXX
%1229:	br	 %1228 if.end7 if.then6

BASIC BLOCK if.then6
%1230:	load	 %1212
%1231:	call	 %1230 XXX XXX parserro
%1232:	br	 return

BASIC BLOCK if.end7
%1233:	call	 XXX malloc
%1234:	bitcast	 %1233
%1235:	store	 %1234 node_ptr
%1236:	load	 node_ptr
%1237:	icmp	 %1236 XXX
%1238:	br	 %1237 if.end11 if.then10

BASIC BLOCK if.then10
%1239:	load	 %1212
%1240:	call	 %1239 XXX XXX parserro
%1241:	call	 XXX interror
%1242:	br	 if.end11

BASIC BLOCK if.end11
%1243:	load	 node_ptr
%1244:	getelementptr	 %1243 XXX XXX
%1245:	store	 XXX %1244
%1246:	load	 %1213
%1247:	load	 node_ptr
%1248:	getelementptr	 %1247 XXX XXX
%1249:	store	 %1246 %1248
%1250:	load	 %1214
%1251:	load	 node_ptr
%1252:	getelementptr	 %1251 XXX XXX
%1253:	store	 %1250 %1252
%1254:	load	 node_ptr
%1255:	getelementptr	 %1254 XXX XXX
%1256:	store	 XXX %1255
%1257:	load	 node_ptr
%1258:	getelementptr	 %1257 XXX XXX
%1259:	store	 XXX %1258
%1260:	load	 node_ptr
%1261:	getelementptr	 %1260 XXX XXX
%1262:	store	 XXX %1261
%1263:	load	 node_ptr
%1264:	getelementptr	 %1263 XXX XXX
%1265:	store	 XXX %1264
%1266:	load	 %1212
%1267:	store	 %1266 pp2
%1268:	br	 return

BASIC BLOCK return
%1269:	phi	 XXX XXX XXX XXX
%1270:	ret	 %1269

FUNCTION addscan

BASIC BLOCK entry
%1271:	alloca	 XXX
%1272:	alloca	 XXX
%1273:	alloca	 XXX
%1274:	alloca	 XXX
%1275:	alloca	 XXX
%1276:	alloca	 XXX
%1277:	alloca	 XXX
%1278:	store	 XXX %1271
%1279:	store	 XXX %1272
%1280:	store	 XXX %1273
%1281:	store	 XXX %1274
%1282:	store	 XXX %1275
%1283:	getelementptr	 group_ptr XXX XXX
%1284:	load	 %1283
%1285:	getelementptr	 %1284 XXX XXX
%1286:	load	 %1285
%1287:	getelementptr	 group_ptr XXX XXX
%1288:	load	 %1287
%1289:	getelementptr	 %1288 XXX XXX
%1290:	load	 %1289
%1291:	getelementptr	 group_ptr XXX XXX
%1292:	load	 %1291
%1293:	getelementptr	 %1292 XXX XXX
%1294:	load	 %1293
%1295:	getelementptr	 group_ptr XXX XXX
%1296:	load	 %1295
%1297:	getelementptr	 %1296 XXX XXX
%1298:	load	 %1297
%1299:	getelementptr	 group_ptr XXX XXX
%1300:	load	 %1299
%1301:	getelementptr	 %1300 XXX XXX
%1302:	load	 %1301
%1303:	getelementptr	 group_ptr XXX XXX
%1304:	load	 %1303
%1305:	getelementptr	 %1304 XXX XXX
%1306:	load	 %1305
%1307:	getelementptr	 group_ptr XXX XXX
%1308:	load	 %1307
%1309:	getelementptr	 %1308 XXX XXX
%1310:	load	 %1309
%1311:	icmp	 %1310 XXX
%1312:	br	 %1311 if.else if.then

BASIC BLOCK if.then
%1313:	br	 if.end

BASIC BLOCK if.else
%1314:	br	 if.end

BASIC BLOCK if.end
%1315:	phi	 XXX XXX
%1316:	getelementptr	 group_ptr XXX XXX
%1317:	load	 %1316
%1318:	br	 while.cond

BASIC BLOCK while.cond
%1319:	phi	 XXX %1319 %1389
%1320:	phi	 XXX %1320 %1388
%1321:	phi	 XXX %1321 %1379
%1322:	phi	 %1317 %1331 %1393
%1323:	phi	 XXX XXX %1377
%1324:	icmp	 %1322 XXX
%1325:	br	 %1324 while.end while.body

BASIC BLOCK while.body
%1326:	getelementptr	 %1322 XXX XXX
%1327:	load	 %1326
%1328:	icmp	 %1327 XXX
%1329:	br	 %1328 if.end9 if.then8

BASIC BLOCK if.then8
%1330:	getelementptr	 %1322 XXX XXX
%1331:	load	 %1330
%1332:	br	 while.cond

BASIC BLOCK if.end9
%1333:	getelementptr	 %1322 XXX XXX
%1334:	load	 %1333
%1335:	switch	 %1334 sw.default XXX sw.bb XXX sw.bb20 XXX sw.bb27 XXX sw.bb29

BASIC BLOCK sw.bb
%1336:	call	 %1322 %1271 %1272 %1286 %1290 %1294 %1273 %1315 %1302 %1306 mksnode
%1337:	icmp	 %1323 XXX
%1338:	br	 %1337 if.else18 if.then11

BASIC BLOCK if.then11
%1339:	getelementptr	 group_ptr XXX XXX
%1340:	load	 %1339
%1341:	getelementptr	 %1340 XXX XXX
%1342:	load	 %1341
%1343:	icmp	 %1342 XXX
%1344:	br	 %1343 if.else16 if.then15

BASIC BLOCK if.then15
%1345:	br	 if.end17

BASIC BLOCK if.else16
%1346:	br	 if.end17

BASIC BLOCK if.end17
%1347:	phi	 XXX XXX
%1348:	br	 if.end19

BASIC BLOCK if.else18
%1349:	br	 if.end19

BASIC BLOCK if.end19
%1350:	phi	 %1347 XXX
%1351:	br	 sw.epilog

BASIC BLOCK sw.bb20
%1352:	call	 %1322 %1271 %1272 %1286 %1290 %1294 %1273 %1315 %1302 %1306 mksblock
%1353:	icmp	 %1323 XXX
%1354:	br	 %1353 if.else25 land.lhs.true

BASIC BLOCK land.lhs.true
%1355:	fcmp	 %1294 XXX
%1356:	br	 %1355 if.else25 if.then24

BASIC BLOCK if.then24
%1357:	br	 if.end26

BASIC BLOCK if.else25
%1358:	br	 if.end26

BASIC BLOCK if.end26
%1359:	phi	 XXX XXX
%1360:	br	 sw.epilog

BASIC BLOCK sw.bb27
%1361:	call	 XXX printf
%1362:	call	 XXX exit
%1363:	unreachable	

BASIC BLOCK sw.bb29
%1364:	icmp	 %1315 XXX
%1365:	br	 %1364 if.end33 if.then31

BASIC BLOCK if.then31
%1366:	call	 XXX XXX printf
%1367:	br	 return

BASIC BLOCK if.end33
%1368:	call	 %1322 %1271 %1272 %1286 %1290 %1294 %1273 %1315 %1302 %1306 mkshex
%1369:	icmp	 %1323 XXX
%1370:	br	 %1369 if.else37 if.then36

BASIC BLOCK if.then36
%1371:	br	 if.end38

BASIC BLOCK if.else37
%1372:	br	 if.end38

BASIC BLOCK if.end38
%1373:	phi	 XXX XXX
%1374:	br	 sw.epilog

BASIC BLOCK sw.default
%1375:	call	 XXX interror
%1376:	br	 sw.epilog

BASIC BLOCK sw.epilog
%1377:	phi	 %1323 %1373 %1359 %1350
%1378:	load	 %1273
%1379:	add	 %1321 %1378
%1380:	icmp	 %1320 XXX
%1381:	br	 %1380 if.else41 if.then40

BASIC BLOCK if.then40
%1382:	load	 %1271
%1383:	br	 if.end43

BASIC BLOCK if.else41
%1384:	load	 %1271
%1385:	getelementptr	 %1319 XXX XXX
%1386:	store	 %1384 %1385
%1387:	br	 if.end43

BASIC BLOCK if.end43
%1388:	phi	 %1382 %1320
%1389:	load	 %1272
%1390:	getelementptr	 %1389 XXX XXX
%1391:	store	 XXX %1390
%1392:	getelementptr	 %1322 XXX XXX
%1393:	load	 %1392
%1394:	br	 while.cond

BASIC BLOCK while.end
%1395:	fcmp	 %1298 XXX
%1396:	br	 %1395 if.end49 if.then47

BASIC BLOCK if.then47
%1397:	call	 %1320 XXX XXX %1298 sgrrot
%1398:	br	 if.end49

BASIC BLOCK if.end49
%1399:	phi	 XXX %1323
%1400:	icmp	 %1399 XXX
%1401:	br	 %1400 if.else54 if.then51

BASIC BLOCK if.then51
%1402:	fmul	 XXX %1286
%1403:	fdiv	 %1302 XXX
%1404:	fmul	 XXX %1403
%1405:	fadd	 %1402 %1404
%1406:	store	 %1405 %1276
%1407:	load	 %1276
%1408:	store	 %1407 %1277
%1409:	br	 if.end71

BASIC BLOCK if.else54
%1410:	icmp	 %1399 XXX
%1411:	br	 %1410 if.else68 if.then56

BASIC BLOCK if.then56
%1412:	call	 %1320 %1274 %1275 extremes
%1413:	load	 %1274
%1414:	sub	 %1413 XXX
%1415:	sitofp	 %1414
%1416:	fmul	 %1415 %1286
%1417:	fdiv	 %1302 XXX
%1418:	fmul	 XXX %1417
%1419:	fadd	 %1416 %1418
%1420:	store	 %1419 %1276
%1421:	load	 %1275
%1422:	sub	 %1421 XXX
%1423:	sitofp	 %1422
%1424:	fmul	 %1423 %1290
%1425:	fdiv	 %1306 XXX
%1426:	fmul	 XXX %1425
%1427:	fadd	 %1424 %1426
%1428:	store	 %1427 %1277
%1429:	br	 if.end70

BASIC BLOCK if.else68
%1430:	call	 %1320 %1302 %1306 %1276 %1277 extsize
%1431:	br	 if.end70

BASIC BLOCK if.end70
%1432:	br	 if.end71

BASIC BLOCK if.end71
%1433:	getelementptr	 group_ptr XXX XXX
%1434:	store	 %1321 %1433
%1435:	getelementptr	 group_ptr XXX XXX
%1436:	store	 %1399 %1435
%1437:	load	 %1276
%1438:	getelementptr	 group_ptr XXX XXX
%1439:	store	 %1437 %1438
%1440:	load	 %1277
%1441:	getelementptr	 group_ptr XXX XXX
%1442:	store	 %1440 %1441
%1443:	getelementptr	 group_ptr XXX XXX
%1444:	store	 %1320 %1443
%1445:	br	 return

BASIC BLOCK return
%1446:	phi	 XXX XXX
%1447:	ret	 %1446

FUNCTION mksnode

BASIC BLOCK entry
%1448:	getelementptr	 addrem_ptr XXX XXX
%1449:	load	 %1448
%1450:	getelementptr	 %1449 XXX XXX
%1451:	load	 %1450
%1452:	getelementptr	 addrem_ptr XXX XXX
%1453:	load	 %1452
%1454:	getelementptr	 %1453 XXX XXX
%1455:	load	 %1454
%1456:	store	 XXX nodes_num_ptr
%1457:	call	 XXX malloc
%1458:	bitcast	 %1457
%1459:	icmp	 %1458 XXX
%1460:	br	 %1459 if.end if.then

BASIC BLOCK if.then
%1461:	call	 XXX XXX printf
%1462:	call	 XXX interror
%1463:	br	 if.end

BASIC BLOCK if.end
%1464:	sitofp	 %1451
%1465:	fmul	 %1464 pstep
%1466:	sitofp	 %1455
%1467:	fmul	 %1466 qstep
%1468:	call	 angle dcos
%1469:	fmul	 %1467 %1468
%1470:	fadd	 %1465 %1469
%1471:	sitofp	 %1455
%1472:	fmul	 %1471 qstep
%1473:	call	 angle dsin
%1474:	fmul	 %1472 %1473
%1475:	load	 nodes_num_ptr
%1476:	add	 %1475 XXX
%1477:	store	 %1476 nodes_num_ptr
%1478:	getelementptr	 %1458 XXX XXX
%1479:	store	 %1451 %1478
%1480:	getelementptr	 %1458 XXX XXX
%1481:	store	 %1455 %1480
%1482:	getelementptr	 %1458 XXX XXX
%1483:	store	 %1470 %1482
%1484:	getelementptr	 %1458 XXX XXX
%1485:	store	 %1474 %1484
%1486:	getelementptr	 %1458 XXX XXX
%1487:	store	 XXX %1486
%1488:	getelementptr	 %1458 XXX XXX
%1489:	store	 XXX %1488
%1490:	getelementptr	 %1458 XXX XXX
%1491:	store	 XXX %1490
%1492:	getelementptr	 %1458 XXX XXX
%1493:	store	 elem_shape %1492
%1494:	getelementptr	 %1458 XXX XXX
%1495:	store	 elem_pdim %1494
%1496:	getelementptr	 %1458 XXX XXX
%1497:	store	 elem_qdim %1496
%1498:	getelementptr	 addrem_ptr XXX XXX
%1499:	load	 %1498
%1500:	call	 %1499 fixnodor
%1501:	getelementptr	 addrem_ptr XXX XXX
%1502:	load	 %1501
%1503:	getelementptr	 %1502 XXX XXX
%1504:	load	 %1503
%1505:	getelementptr	 %1458 XXX XXX
%1506:	store	 %1504 %1505
%1507:	getelementptr	 addrem_ptr XXX XXX
%1508:	load	 %1507
%1509:	getelementptr	 %1508 XXX XXX
%1510:	load	 %1509
%1511:	getelementptr	 %1458 XXX XXX
%1512:	store	 %1510 %1511
%1513:	getelementptr	 addrem_ptr XXX XXX
%1514:	load	 %1513
%1515:	getelementptr	 %1514 XXX XXX
%1516:	load	 %1515
%1517:	getelementptr	 %1458 XXX XXX
%1518:	store	 %1516 %1517
%1519:	store	 %1458 first_node_ptr
%1520:	store	 %1458 last_node_ptr
%1521:	ret	 XXX

FUNCTION mksblock

BASIC BLOCK entry
%1522:	getelementptr	 addrem_ptr XXX XXX
%1523:	load	 %1522
%1524:	getelementptr	 %1523 XXX XXX
%1525:	load	 %1524
%1526:	getelementptr	 addrem_ptr XXX XXX
%1527:	load	 %1526
%1528:	getelementptr	 %1527 XXX XXX
%1529:	load	 %1528
%1530:	getelementptr	 addrem_ptr XXX XXX
%1531:	load	 %1530
%1532:	getelementptr	 %1531 XXX XXX
%1533:	load	 %1532
%1534:	getelementptr	 %1533 XXX XXX
%1535:	load	 %1534
%1536:	getelementptr	 addrem_ptr XXX XXX
%1537:	load	 %1536
%1538:	getelementptr	 %1537 XXX XXX
%1539:	load	 %1538
%1540:	getelementptr	 %1539 XXX XXX
%1541:	load	 %1540
%1542:	store	 XXX nodes_num_ptr
%1543:	call	 %1529 %1541 intmin
%1544:	br	 for.cond

BASIC BLOCK for.cond
%1545:	phi	 XXX %1553
%1546:	phi	 XXX %1554
%1547:	phi	 %1543 %1617
%1548:	call	 %1529 %1541 intmax
%1549:	icmp	 %1547 %1548
%1550:	br	 %1549 for.end33 for.body

BASIC BLOCK for.body
%1551:	call	 %1525 %1535 intmin
%1552:	br	 for.cond9

BASIC BLOCK for.cond9
%1553:	phi	 %1545 %1610
%1554:	phi	 %1546 %1560
%1555:	phi	 %1551 %1614
%1556:	call	 %1525 %1535 intmax
%1557:	icmp	 %1555 %1556
%1558:	br	 %1557 for.end for.body12

BASIC BLOCK for.body12
%1559:	call	 XXX malloc
%1560:	bitcast	 %1559
%1561:	icmp	 %1560 XXX
%1562:	br	 %1561 if.end if.then

BASIC BLOCK if.then
%1563:	call	 XXX XXX printf
%1564:	call	 XXX interror
%1565:	br	 if.end

BASIC BLOCK if.end
%1566:	sitofp	 %1547
%1567:	fmul	 %1566 qstep
%1568:	call	 angle dsin
%1569:	fmul	 %1567 %1568
%1570:	sitofp	 %1555
%1571:	fmul	 %1570 pstep
%1572:	sitofp	 %1547
%1573:	fmul	 %1572 qstep
%1574:	call	 angle dcos
%1575:	fmul	 %1573 %1574
%1576:	fadd	 %1571 %1575
%1577:	load	 nodes_num_ptr
%1578:	add	 %1577 XXX
%1579:	store	 %1578 nodes_num_ptr
%1580:	getelementptr	 %1560 XXX XXX
%1581:	store	 %1555 %1580
%1582:	getelementptr	 %1560 XXX XXX
%1583:	store	 %1547 %1582
%1584:	getelementptr	 %1560 XXX XXX
%1585:	store	 %1576 %1584
%1586:	getelementptr	 %1560 XXX XXX
%1587:	store	 %1569 %1586
%1588:	getelementptr	 %1560 XXX XXX
%1589:	store	 XXX %1588
%1590:	getelementptr	 %1560 XXX XXX
%1591:	store	 XXX %1590
%1592:	getelementptr	 %1560 XXX XXX
%1593:	store	 elem_shape %1592
%1594:	getelementptr	 %1560 XXX XXX
%1595:	store	 elem_pdim %1594
%1596:	getelementptr	 %1560 XXX XXX
%1597:	store	 elem_qdim %1596
%1598:	getelementptr	 %1560 XXX XXX
%1599:	store	 XXX %1598
%1600:	getelementptr	 %1560 XXX XXX
%1601:	store	 XXX %1600
%1602:	getelementptr	 %1560 XXX XXX
%1603:	store	 XXX %1602
%1604:	icmp	 %1553 XXX
%1605:	br	 %1604 if.else if.then27

BASIC BLOCK if.then27
%1606:	br	 if.end29

BASIC BLOCK if.else
%1607:	getelementptr	 %1554 XXX XXX
%1608:	store	 %1560 %1607
%1609:	br	 if.end29

BASIC BLOCK if.end29
%1610:	phi	 %1560 %1553
%1611:	getelementptr	 %1560 XXX XXX
%1612:	store	 XXX %1611
%1613:	br	 for.inc

BASIC BLOCK for.inc
%1614:	add	 %1555 XXX
%1615:	br	 for.cond9

BASIC BLOCK for.end
%1616:	br	 for.inc31

BASIC BLOCK for.inc31
%1617:	add	 %1547 XXX
%1618:	br	 for.cond

BASIC BLOCK for.end33
%1619:	store	 %1545 first_node_ptr
%1620:	store	 %1546 last_node_ptr
%1621:	ret	 XXX

FUNCTION mkshex

BASIC BLOCK entry
%1622:	alloca	 XXX
%1623:	alloca	 XXX
%1624:	getelementptr	 addrem_ptr XXX XXX
%1625:	load	 %1624
%1626:	getelementptr	 %1625 XXX XXX
%1627:	load	 %1626
%1628:	getelementptr	 addrem_ptr XXX XXX
%1629:	load	 %1628
%1630:	getelementptr	 %1629 XXX XXX
%1631:	load	 %1630
%1632:	store	 XXX nodes_num_ptr
%1633:	sub	 %1627 XXX
%1634:	getelementptr	 %1622 XXX XXX
%1635:	store	 %1633 %1634
%1636:	add	 %1631 XXX
%1637:	getelementptr	 %1623 XXX XXX
%1638:	store	 %1636 %1637
%1639:	getelementptr	 %1622 XXX XXX
%1640:	store	 %1627 %1639
%1641:	add	 %1631 XXX
%1642:	getelementptr	 %1623 XXX XXX
%1643:	store	 %1641 %1642
%1644:	add	 %1627 XXX
%1645:	getelementptr	 %1622 XXX XXX
%1646:	store	 %1644 %1645
%1647:	getelementptr	 %1623 XXX XXX
%1648:	store	 %1631 %1647
%1649:	add	 %1627 XXX
%1650:	getelementptr	 %1622 XXX XXX
%1651:	store	 %1649 %1650
%1652:	sub	 %1631 XXX
%1653:	getelementptr	 %1623 XXX XXX
%1654:	store	 %1652 %1653
%1655:	getelementptr	 %1622 XXX XXX
%1656:	store	 %1627 %1655
%1657:	sub	 %1631 XXX
%1658:	getelementptr	 %1623 XXX XXX
%1659:	store	 %1657 %1658
%1660:	sub	 %1627 XXX
%1661:	getelementptr	 %1622 XXX XXX
%1662:	store	 %1660 %1661
%1663:	getelementptr	 %1623 XXX XXX
%1664:	store	 %1631 %1663
%1665:	getelementptr	 %1622 XXX XXX
%1666:	store	 %1627 %1665
%1667:	getelementptr	 %1623 XXX XXX
%1668:	store	 %1631 %1667
%1669:	br	 for.cond

BASIC BLOCK for.cond
%1670:	phi	 XXX %1741
%1671:	phi	 XXX %1676
%1672:	phi	 XXX %1745
%1673:	icmp	 %1672 XXX
%1674:	br	 %1673 for.end for.body

BASIC BLOCK for.body
%1675:	call	 XXX malloc
%1676:	bitcast	 %1675
%1677:	icmp	 %1676 XXX
%1678:	br	 %1677 if.end if.then

BASIC BLOCK if.then
%1679:	call	 XXX XXX printf
%1680:	call	 XXX interror
%1681:	br	 if.end

BASIC BLOCK if.end
%1682:	sext	 %1672
%1683:	getelementptr	 %1622 XXX %1682
%1684:	load	 %1683
%1685:	sitofp	 %1684
%1686:	fmul	 %1685 pstep
%1687:	sext	 %1672
%1688:	getelementptr	 %1623 XXX %1687
%1689:	load	 %1688
%1690:	sitofp	 %1689
%1691:	fmul	 %1690 qstep
%1692:	call	 angle dcos
%1693:	fmul	 %1691 %1692
%1694:	fadd	 %1686 %1693
%1695:	sext	 %1672
%1696:	getelementptr	 %1623 XXX %1695
%1697:	load	 %1696
%1698:	sitofp	 %1697
%1699:	fmul	 %1698 qstep
%1700:	call	 angle dsin
%1701:	fmul	 %1699 %1700
%1702:	load	 nodes_num_ptr
%1703:	add	 %1702 XXX
%1704:	store	 %1703 nodes_num_ptr
%1705:	sext	 %1672
%1706:	getelementptr	 %1622 XXX %1705
%1707:	load	 %1706
%1708:	getelementptr	 %1676 XXX XXX
%1709:	store	 %1707 %1708
%1710:	sext	 %1672
%1711:	getelementptr	 %1623 XXX %1710
%1712:	load	 %1711
%1713:	getelementptr	 %1676 XXX XXX
%1714:	store	 %1712 %1713
%1715:	getelementptr	 %1676 XXX XXX
%1716:	store	 %1694 %1715
%1717:	getelementptr	 %1676 XXX XXX
%1718:	store	 %1701 %1717
%1719:	getelementptr	 %1676 XXX XXX
%1720:	store	 XXX %1719
%1721:	getelementptr	 %1676 XXX XXX
%1722:	store	 XXX %1721
%1723:	getelementptr	 %1676 XXX XXX
%1724:	store	 elem_shape %1723
%1725:	getelementptr	 %1676 XXX XXX
%1726:	store	 elem_pdim %1725
%1727:	getelementptr	 %1676 XXX XXX
%1728:	store	 elem_qdim %1727
%1729:	getelementptr	 %1676 XXX XXX
%1730:	store	 XXX %1729
%1731:	getelementptr	 %1676 XXX XXX
%1732:	store	 XXX %1731
%1733:	getelementptr	 %1676 XXX XXX
%1734:	store	 XXX %1733
%1735:	icmp	 %1670 XXX
%1736:	br	 %1735 if.else if.then44

BASIC BLOCK if.then44
%1737:	br	 if.end45

BASIC BLOCK if.else
%1738:	getelementptr	 %1671 XXX XXX
%1739:	store	 %1676 %1738
%1740:	br	 if.end45

BASIC BLOCK if.end45
%1741:	phi	 %1676 %1670
%1742:	getelementptr	 %1676 XXX XXX
%1743:	store	 XXX %1742
%1744:	br	 for.inc

BASIC BLOCK for.inc
%1745:	add	 %1672 XXX
%1746:	br	 for.cond

BASIC BLOCK for.end
%1747:	store	 %1670 first_node_ptr
%1748:	store	 %1671 last_node_ptr
%1749:	ret	 XXX

FUNCTION sgrrot

BASIC BLOCK entry
%1750:	icmp	 start_ptr XXX
%1751:	br	 %1750 if.end if.then

BASIC BLOCK if.then
%1752:	call	 XXX interror
%1753:	br	 if.end

BASIC BLOCK if.end
%1754:	br	 while.cond

BASIC BLOCK while.cond
%1755:	phi	 start_ptr %1787
%1756:	icmp	 %1755 XXX
%1757:	br	 %1756 while.end while.body

BASIC BLOCK while.body
%1758:	getelementptr	 %1755 XXX XXX
%1759:	load	 %1758
%1760:	getelementptr	 %1755 XXX XXX
%1761:	load	 %1760
%1762:	fsub	 %1759 XC
%1763:	call	 phi dcos
%1764:	fmul	 %1762 %1763
%1765:	fsub	 %1761 YC
%1766:	call	 phi dsin
%1767:	fmul	 %1765 %1766
%1768:	fsub	 %1764 %1767
%1769:	fadd	 %1768 XC
%1770:	fsub	 %1759 XC
%1771:	call	 phi dsin
%1772:	fmul	 %1770 %1771
%1773:	fsub	 %1761 YC
%1774:	call	 phi dcos
%1775:	fmul	 %1773 %1774
%1776:	fadd	 %1772 %1775
%1777:	fadd	 %1776 YC
%1778:	getelementptr	 %1755 XXX XXX
%1779:	store	 %1769 %1778
%1780:	getelementptr	 %1755 XXX XXX
%1781:	store	 %1777 %1780
%1782:	getelementptr	 %1755 XXX XXX
%1783:	load	 %1782
%1784:	fadd	 %1783 phi
%1785:	store	 %1784 %1782
%1786:	getelementptr	 %1755 XXX XXX
%1787:	load	 %1786
%1788:	br	 while.cond

BASIC BLOCK while.end
%1789:	ret	 XXX

FUNCTION extremes

BASIC BLOCK entry
%1790:	br	 while.cond

BASIC BLOCK while.cond
%1791:	phi	 XXX %1805
%1792:	phi	 gnode_ptr %1831
%1793:	phi	 XXX %1813
%1794:	phi	 XXX %1821
%1795:	phi	 XXX %1829
%1796:	icmp	 %1792 XXX
%1797:	br	 %1796 while.end while.body

BASIC BLOCK while.body
%1798:	getelementptr	 %1792 XXX XXX
%1799:	load	 %1798
%1800:	icmp	 %1799 %1791
%1801:	br	 %1800 if.end if.then

BASIC BLOCK if.then
%1802:	getelementptr	 %1792 XXX XXX
%1803:	load	 %1802
%1804:	br	 if.end

BASIC BLOCK if.end
%1805:	phi	 %1803 %1791
%1806:	getelementptr	 %1792 XXX XXX
%1807:	load	 %1806
%1808:	icmp	 %1807 %1793
%1809:	br	 %1808 if.end7 if.then5

BASIC BLOCK if.then5
%1810:	getelementptr	 %1792 XXX XXX
%1811:	load	 %1810
%1812:	br	 if.end7

BASIC BLOCK if.end7
%1813:	phi	 %1811 %1793
%1814:	getelementptr	 %1792 XXX XXX
%1815:	load	 %1814
%1816:	icmp	 %1815 %1794
%1817:	br	 %1816 if.end11 if.then9

BASIC BLOCK if.then9
%1818:	getelementptr	 %1792 XXX XXX
%1819:	load	 %1818
%1820:	br	 if.end11

BASIC BLOCK if.end11
%1821:	phi	 %1819 %1794
%1822:	getelementptr	 %1792 XXX XXX
%1823:	load	 %1822
%1824:	icmp	 %1823 %1795
%1825:	br	 %1824 if.end16 if.then14

BASIC BLOCK if.then14
%1826:	getelementptr	 %1792 XXX XXX
%1827:	load	 %1826
%1828:	br	 if.end16

BASIC BLOCK if.end16
%1829:	phi	 %1827 %1795
%1830:	getelementptr	 %1792 XXX XXX
%1831:	load	 %1830
%1832:	br	 while.cond

BASIC BLOCK while.end
%1833:	sub	 %1793 %1791
%1834:	add	 %1833 XXX
%1835:	store	 %1834 pnum_ptr
%1836:	sub	 %1795 %1794
%1837:	add	 %1836 XXX
%1838:	store	 %1837 qnum_ptr
%1839:	ret	 XXX

FUNCTION extsize

BASIC BLOCK entry
%1840:	br	 while.cond

BASIC BLOCK while.cond
%1841:	phi	 gnode_ptr %1881
%1842:	phi	 XXX %1855
%1843:	phi	 XXX %1863
%1844:	phi	 XXX %1871
%1845:	phi	 XXX %1879
%1846:	icmp	 %1841 XXX
%1847:	br	 %1846 while.end while.body

BASIC BLOCK while.body
%1848:	getelementptr	 %1841 XXX XXX
%1849:	load	 %1848
%1850:	fcmp	 %1849 %1842
%1851:	br	 %1850 if.end if.then

BASIC BLOCK if.then
%1852:	getelementptr	 %1841 XXX XXX
%1853:	load	 %1852
%1854:	br	 if.end

BASIC BLOCK if.end
%1855:	phi	 %1853 %1842
%1856:	getelementptr	 %1841 XXX XXX
%1857:	load	 %1856
%1858:	fcmp	 %1857 %1843
%1859:	br	 %1858 if.end7 if.then5

BASIC BLOCK if.then5
%1860:	getelementptr	 %1841 XXX XXX
%1861:	load	 %1860
%1862:	br	 if.end7

BASIC BLOCK if.end7
%1863:	phi	 %1861 %1843
%1864:	getelementptr	 %1841 XXX XXX
%1865:	load	 %1864
%1866:	fcmp	 %1865 %1844
%1867:	br	 %1866 if.end11 if.then9

BASIC BLOCK if.then9
%1868:	getelementptr	 %1841 XXX XXX
%1869:	load	 %1868
%1870:	br	 if.end11

BASIC BLOCK if.end11
%1871:	phi	 %1869 %1844
%1872:	getelementptr	 %1841 XXX XXX
%1873:	load	 %1872
%1874:	fcmp	 %1873 %1845
%1875:	br	 %1874 if.end16 if.then14

BASIC BLOCK if.then14
%1876:	getelementptr	 %1841 XXX XXX
%1877:	load	 %1876
%1878:	br	 if.end16

BASIC BLOCK if.end16
%1879:	phi	 %1877 %1845
%1880:	getelementptr	 %1841 XXX XXX
%1881:	load	 %1880
%1882:	br	 while.cond

BASIC BLOCK while.end
%1883:	fsub	 %1843 %1842
%1884:	fdiv	 elem_pdim XXX
%1885:	fmul	 XXX %1884
%1886:	fadd	 %1883 %1885
%1887:	store	 %1886 xsize_ptr
%1888:	fsub	 %1845 %1844
%1889:	fdiv	 elem_qdim XXX
%1890:	fmul	 XXX %1889
%1891:	fadd	 %1888 %1890
%1892:	store	 %1891 ysize_ptr
%1893:	ret	 XXX

FUNCTION adremdef

BASIC BLOCK entry
%1894:	alloca	 XXX
%1895:	store	 p1 %1894
%1896:	store	 XXX addrem_ptr
%1897:	load	 %1894
%1898:	call	 %1897 %1894 addrem_ptr adddef
%1899:	icmp	 %1898 XXX
%1900:	br	 %1899 if.end if.then

BASIC BLOCK if.then
%1901:	load	 %1894
%1902:	store	 %1901 pp2
%1903:	br	 return

BASIC BLOCK if.end
%1904:	icmp	 %1898 XXX
%1905:	br	 %1904 if.end4 if.then2

BASIC BLOCK if.then2
%1906:	call	 XXX XXX printf
%1907:	br	 return

BASIC BLOCK if.end4
%1908:	icmp	 %1898 XXX
%1909:	br	 %1908 if.end8 if.then6

BASIC BLOCK if.then6
%1910:	load	 %1894
%1911:	call	 %1910 %1894 addrem_ptr remdef
%1912:	br	 if.end8

BASIC BLOCK if.end8
%1913:	phi	 %1911 %1898
%1914:	icmp	 %1913 XXX
%1915:	br	 %1914 if.end11 if.then10

BASIC BLOCK if.then10
%1916:	load	 %1894
%1917:	store	 %1916 pp2
%1918:	br	 return

BASIC BLOCK if.end11
%1919:	icmp	 %1913 XXX
%1920:	br	 %1919 if.end15 if.then13

BASIC BLOCK if.then13
%1921:	call	 XXX XXX printf
%1922:	br	 return

BASIC BLOCK if.end15
%1923:	icmp	 %1913 XXX
%1924:	br	 %1923 if.end18 if.then17

BASIC BLOCK if.then17
%1925:	br	 return

BASIC BLOCK if.end18
%1926:	br	 return

BASIC BLOCK return
%1927:	phi	 XXX XXX XXX XXX XXX XXX
%1928:	ret	 %1927

FUNCTION remdef

BASIC BLOCK entry
%1929:	alloca	 XXX
%1930:	alloca	 XXX
%1931:	store	 XXX %1930
%1932:	store	 p1 %1929
%1933:	call	 XXX %1929 GetKeyword
%1934:	icmp	 %1933 XXX
%1935:	br	 %1934 if.end if.then

BASIC BLOCK if.then
%1936:	store	 XXX addrem_ptr
%1937:	br	 return

BASIC BLOCK if.end
%1938:	load	 %1929
%1939:	call	 %1938 %1929 %1930 nodedef
%1940:	icmp	 %1939 XXX
%1941:	br	 %1940 if.end5 if.then3

BASIC BLOCK if.then3
%1942:	store	 XXX addrem_ptr
%1943:	call	 XXX XXX printf
%1944:	br	 return

BASIC BLOCK if.end5
%1945:	icmp	 %1939 XXX
%1946:	br	 %1945 if.end12 if.then7

BASIC BLOCK if.then7
%1947:	call	 XXX malloc
%1948:	bitcast	 %1947
%1949:	store	 %1948 addrem_ptr
%1950:	load	 addrem_ptr
%1951:	icmp	 %1950 XXX
%1952:	br	 %1951 if.end11 if.then10

BASIC BLOCK if.then10
%1953:	load	 %1929
%1954:	call	 %1953 XXX XXX parserro
%1955:	call	 XXX interror
%1956:	br	 if.end11

BASIC BLOCK if.end11
%1957:	load	 addrem_ptr
%1958:	getelementptr	 %1957 XXX XXX
%1959:	store	 XXX %1958
%1960:	load	 addrem_ptr
%1961:	getelementptr	 %1960 XXX XXX
%1962:	store	 XXX %1961
%1963:	load	 %1930
%1964:	load	 addrem_ptr
%1965:	getelementptr	 %1964 XXX XXX
%1966:	store	 %1963 %1965
%1967:	load	 addrem_ptr
%1968:	getelementptr	 %1967 XXX XXX
%1969:	store	 XXX %1968
%1970:	load	 %1929
%1971:	store	 %1970 pp2
%1972:	br	 return

BASIC BLOCK if.end12
%1973:	load	 %1929
%1974:	call	 %1973 %1929 %1930 blockdef
%1975:	icmp	 %1974 XXX
%1976:	br	 %1975 if.end17 if.then15

BASIC BLOCK if.then15
%1977:	store	 XXX addrem_ptr
%1978:	call	 XXX XXX printf
%1979:	br	 return

BASIC BLOCK if.end17
%1980:	icmp	 %1974 XXX
%1981:	br	 %1980 if.end28 if.then19

BASIC BLOCK if.then19
%1982:	call	 XXX malloc
%1983:	bitcast	 %1982
%1984:	store	 %1983 addrem_ptr
%1985:	load	 addrem_ptr
%1986:	icmp	 %1985 XXX
%1987:	br	 %1986 if.end23 if.then22

BASIC BLOCK if.then22
%1988:	load	 %1929
%1989:	call	 %1988 XXX XXX parserro
%1990:	call	 XXX interror
%1991:	br	 if.end23

BASIC BLOCK if.end23
%1992:	load	 addrem_ptr
%1993:	getelementptr	 %1992 XXX XXX
%1994:	store	 XXX %1993
%1995:	load	 addrem_ptr
%1996:	getelementptr	 %1995 XXX XXX
%1997:	store	 XXX %1996
%1998:	load	 %1930
%1999:	load	 addrem_ptr
%2000:	getelementptr	 %1999 XXX XXX
%2001:	store	 %1998 %2000
%2002:	load	 addrem_ptr
%2003:	getelementptr	 %2002 XXX XXX
%2004:	store	 XXX %2003
%2005:	load	 %1929
%2006:	store	 %2005 pp2
%2007:	br	 return

BASIC BLOCK if.end28
%2008:	load	 %1929
%2009:	call	 %2008 %1929 %1930 polydef
%2010:	icmp	 %2009 XXX
%2011:	br	 %2010 if.end33 if.then31

BASIC BLOCK if.then31
%2012:	store	 XXX addrem_ptr
%2013:	call	 XXX XXX printf
%2014:	br	 return

BASIC BLOCK if.end33
%2015:	icmp	 %2009 XXX
%2016:	br	 %2015 if.end44 if.then35

BASIC BLOCK if.then35
%2017:	call	 XXX malloc
%2018:	bitcast	 %2017
%2019:	store	 %2018 addrem_ptr
%2020:	load	 addrem_ptr
%2021:	icmp	 %2020 XXX
%2022:	br	 %2021 if.end39 if.then38

BASIC BLOCK if.then38
%2023:	load	 %1929
%2024:	call	 %2023 XXX XXX parserro
%2025:	call	 XXX interror
%2026:	br	 if.end39

BASIC BLOCK if.end39
%2027:	load	 addrem_ptr
%2028:	getelementptr	 %2027 XXX XXX
%2029:	store	 XXX %2028
%2030:	load	 addrem_ptr
%2031:	getelementptr	 %2030 XXX XXX
%2032:	store	 XXX %2031
%2033:	load	 %1930
%2034:	load	 addrem_ptr
%2035:	getelementptr	 %2034 XXX XXX
%2036:	store	 %2033 %2035
%2037:	load	 addrem_ptr
%2038:	getelementptr	 %2037 XXX XXX
%2039:	store	 XXX %2038
%2040:	load	 %1929
%2041:	store	 %2040 pp2
%2042:	br	 return

BASIC BLOCK if.end44
%2043:	load	 %1929
%2044:	call	 %2043 %1929 %1930 hexdef
%2045:	icmp	 %2044 XXX
%2046:	br	 %2045 if.end49 if.then47

BASIC BLOCK if.then47
%2047:	store	 XXX addrem_ptr
%2048:	call	 XXX XXX printf
%2049:	br	 return

BASIC BLOCK if.end49
%2050:	icmp	 %2044 XXX
%2051:	br	 %2050 if.end60 if.then51

BASIC BLOCK if.then51
%2052:	call	 XXX malloc
%2053:	bitcast	 %2052
%2054:	store	 %2053 addrem_ptr
%2055:	load	 addrem_ptr
%2056:	icmp	 %2055 XXX
%2057:	br	 %2056 if.end55 if.then54

BASIC BLOCK if.then54
%2058:	load	 %1929
%2059:	call	 %2058 XXX XXX parserro
%2060:	call	 XXX interror
%2061:	br	 if.end55

BASIC BLOCK if.end55
%2062:	load	 addrem_ptr
%2063:	getelementptr	 %2062 XXX XXX
%2064:	store	 XXX %2063
%2065:	load	 addrem_ptr
%2066:	getelementptr	 %2065 XXX XXX
%2067:	store	 XXX %2066
%2068:	load	 %1930
%2069:	load	 addrem_ptr
%2070:	getelementptr	 %2069 XXX XXX
%2071:	store	 %2068 %2070
%2072:	load	 addrem_ptr
%2073:	getelementptr	 %2072 XXX XXX
%2074:	store	 XXX %2073
%2075:	load	 %1929
%2076:	store	 %2075 pp2
%2077:	br	 return

BASIC BLOCK if.end60
%2078:	store	 XXX addrem_ptr
%2079:	load	 %1929
%2080:	call	 %2079 XXX XXX parserro
%2081:	br	 return

BASIC BLOCK return
%2082:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
%2083:	ret	 %2082

FUNCTION ampunit

BASIC BLOCK entry
%2084:	alloca	 XXX
%2085:	load	 tp
%2086:	store	 %2085 %2084
%2087:	store	 XXX unit_ptr
%2088:	call	 XXX %2084 GetKeyword
%2089:	icmp	 %2088 XXX
%2090:	br	 %2089 if.else if.then

BASIC BLOCK if.then
%2091:	store	 XXX unit_ptr
%2092:	br	 if.end10

BASIC BLOCK if.else
%2093:	call	 XXX %2084 GetKeyword
%2094:	icmp	 %2093 XXX
%2095:	br	 %2094 if.else4 if.then3

BASIC BLOCK if.then3
%2096:	store	 XXX unit_ptr
%2097:	br	 if.end9

BASIC BLOCK if.else4
%2098:	call	 XXX %2084 GetKeyword
%2099:	icmp	 %2098 XXX
%2100:	br	 %2099 if.else8 if.then7

BASIC BLOCK if.then7
%2101:	store	 XXX unit_ptr
%2102:	br	 if.end

BASIC BLOCK if.else8
%2103:	br	 return

BASIC BLOCK if.end
%2104:	br	 if.end9

BASIC BLOCK if.end9
%2105:	br	 if.end10

BASIC BLOCK if.end10
%2106:	load	 %2084
%2107:	store	 %2106 tp
%2108:	br	 return

BASIC BLOCK return
%2109:	phi	 XXX XXX
%2110:	ret	 %2109

FUNCTION ampval

BASIC BLOCK entry
%2111:	alloca	 XXX
%2112:	store	 p1 %2111
%2113:	call	 amp_ptr %2111 GetReal
%2114:	icmp	 %2113 XXX
%2115:	br	 %2114 if.end if.then

BASIC BLOCK if.then
%2116:	br	 return

BASIC BLOCK if.end
%2117:	call	 %2111 amp_unit_ptr ampunit
%2118:	icmp	 %2117 XXX
%2119:	br	 %2118 if.end4 if.then3

BASIC BLOCK if.then3
%2120:	store	 XXX amp_unit_ptr
%2121:	br	 if.end4

BASIC BLOCK if.end4
%2122:	load	 %2111
%2123:	store	 %2122 pp2
%2124:	br	 return

BASIC BLOCK return
%2125:	phi	 XXX XXX
%2126:	ret	 %2125

FUNCTION GetReal

BASIC BLOCK entry
%2127:	alloca	 XXX
%2128:	alloca	 XXX
%2129:	load	 tp
%2130:	store	 %2129 %2127
%2131:	call	 %2127 TapeGet
%2132:	sext	 %2131
%2133:	sext	 %2132
%2134:	call	 __ctype_b_loc
%2135:	load	 %2134
%2136:	getelementptr	 %2135 %2133
%2137:	load	 %2136
%2138:	zext	 %2137
%2139:	and	 %2138 XXX
%2140:	icmp	 %2139 XXX
%2141:	br	 %2140 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%2142:	sext	 %2131
%2143:	icmp	 %2142 XXX
%2144:	br	 %2143 if.end land.lhs.true7

BASIC BLOCK land.lhs.true7
%2145:	sext	 %2131
%2146:	icmp	 %2145 XXX
%2147:	br	 %2146 if.end land.lhs.true11

BASIC BLOCK land.lhs.true11
%2148:	sext	 %2131
%2149:	icmp	 %2148 XXX
%2150:	br	 %2149 if.end if.then

BASIC BLOCK if.then
%2151:	br	 return

BASIC BLOCK if.end
%2152:	sext	 XXX
%2153:	getelementptr	 %2128 XXX %2152
%2154:	store	 %2131 %2153
%2155:	add	 XXX XXX
%2156:	call	 %2127 TapeGet
%2157:	br	 while.cond

BASIC BLOCK while.cond
%2158:	phi	 %2155 %2193
%2159:	phi	 %2156 %2194
%2160:	sext	 %2159
%2161:	sext	 %2160
%2162:	call	 __ctype_b_loc
%2163:	load	 %2162
%2164:	getelementptr	 %2163 %2161
%2165:	load	 %2164
%2166:	zext	 %2165
%2167:	and	 %2166 XXX
%2168:	icmp	 %2167 XXX
%2169:	br	 %2168 lor.lhs.false land.rhs

BASIC BLOCK lor.lhs.false
%2170:	sext	 %2159
%2171:	icmp	 %2170 XXX
%2172:	br	 %2171 lor.lhs.false27 land.rhs

BASIC BLOCK lor.lhs.false27
%2173:	sext	 %2159
%2174:	icmp	 %2173 XXX
%2175:	br	 %2174 lor.lhs.false31 land.rhs

BASIC BLOCK lor.lhs.false31
%2176:	sext	 %2159
%2177:	icmp	 %2176 XXX
%2178:	br	 %2177 lor.lhs.false35 land.rhs

BASIC BLOCK lor.lhs.false35
%2179:	sext	 %2159
%2180:	icmp	 %2179 XXX
%2181:	br	 %2180 land.end land.rhs

BASIC BLOCK land.rhs
%2182:	load	 %2127
%2183:	icmp	 %2182 XXX
%2184:	br	 land.end

BASIC BLOCK land.end
%2185:	phi	 XXX %2183
%2186:	br	 %2185 while.end while.body

BASIC BLOCK while.body
%2187:	icmp	 %2158 XXX
%2188:	br	 %2187 if.end46 if.then43

BASIC BLOCK if.then43
%2189:	sext	 %2158
%2190:	getelementptr	 %2128 XXX %2189
%2191:	store	 %2159 %2190
%2192:	br	 if.end46

BASIC BLOCK if.end46
%2193:	add	 %2158 XXX
%2194:	call	 %2127 TapeGet
%2195:	br	 while.cond

BASIC BLOCK while.end
%2196:	icmp	 %2158 XXX
%2197:	br	 %2196 if.else if.then51

BASIC BLOCK if.then51
%2198:	getelementptr	 %2128 XXX XXX
%2199:	store	 XXX %2198
%2200:	br	 if.end55

BASIC BLOCK if.else
%2201:	sext	 %2158
%2202:	getelementptr	 %2128 XXX %2201
%2203:	store	 XXX %2202
%2204:	br	 if.end55

BASIC BLOCK if.end55
%2205:	getelementptr	 %2128 XXX XXX
%2206:	call	 %2205 atof
%2207:	store	 %2206 reale
%2208:	load	 %2127
%2209:	store	 %2208 tp
%2210:	br	 return

BASIC BLOCK return
%2211:	phi	 XXX XXX
%2212:	ret	 %2211

FUNCTION angclaus

BASIC BLOCK entry
%2213:	alloca	 XXX
%2214:	store	 p1 %2213
%2215:	store	 XXX angle_ptr
%2216:	store	 XXX angle_unit_ptr
%2217:	call	 XXX %2213 GetKeyword
%2218:	icmp	 %2217 XXX
%2219:	br	 %2218 if.end if.then

BASIC BLOCK if.then
%2220:	br	 return

BASIC BLOCK if.end
%2221:	call	 angle_ptr %2213 GetReal
%2222:	icmp	 %2221 XXX
%2223:	br	 %2222 if.end4 if.then3

BASIC BLOCK if.then3
%2224:	store	 XXX angle_ptr
%2225:	br	 return

BASIC BLOCK if.end4
%2226:	load	 %2213
%2227:	call	 %2226 %2213 angle_unit_ptr angunit
%2228:	icmp	 %2227 XXX
%2229:	br	 %2228 if.end8 if.then7

BASIC BLOCK if.then7
%2230:	store	 XXX angle_unit_ptr
%2231:	br	 if.end8

BASIC BLOCK if.end8
%2232:	load	 %2213
%2233:	store	 %2232 pp2
%2234:	br	 return

BASIC BLOCK return
%2235:	phi	 XXX XXX XXX
%2236:	ret	 %2235

FUNCTION angunit

BASIC BLOCK entry
%2237:	alloca	 XXX
%2238:	store	 p1 %2237
%2239:	store	 XXX angle_unit_ptr
%2240:	call	 XXX %2237 GetKeyword
%2241:	icmp	 %2240 XXX
%2242:	br	 %2241 if.else if.then

BASIC BLOCK if.then
%2243:	store	 XXX angle_unit_ptr
%2244:	br	 if.end5

BASIC BLOCK if.else
%2245:	call	 XXX %2237 GetKeyword
%2246:	icmp	 %2245 XXX
%2247:	br	 %2246 if.else4 if.then3

BASIC BLOCK if.then3
%2248:	store	 XXX angle_unit_ptr
%2249:	br	 if.end

BASIC BLOCK if.else4
%2250:	br	 return

BASIC BLOCK if.end
%2251:	br	 if.end5

BASIC BLOCK if.end5
%2252:	load	 %2237
%2253:	store	 %2252 pp2
%2254:	br	 return

BASIC BLOCK return
%2255:	phi	 XXX XXX
%2256:	ret	 %2255

FUNCTION angledir

BASIC BLOCK entry
%2257:	alloca	 XXX
%2258:	store	 p1 %2257
%2259:	call	 XXX %2257 GetKeyword
%2260:	icmp	 %2259 XXX
%2261:	br	 %2260 if.end if.then

BASIC BLOCK if.then
%2262:	br	 return

BASIC BLOCK if.end
%2263:	call	 theta_ptr %2257 GetReal
%2264:	icmp	 %2263 XXX
%2265:	br	 %2264 if.end4 if.then3

BASIC BLOCK if.then3
%2266:	load	 %2257
%2267:	call	 %2266 XXX XXX parserro
%2268:	br	 return

BASIC BLOCK if.end4
%2269:	call	 XXX %2257 GetKeyword
%2270:	icmp	 %2269 XXX
%2271:	br	 %2270 if.end8 if.then7

BASIC BLOCK if.then7
%2272:	load	 %2257
%2273:	call	 %2272 XXX XXX parserro
%2274:	br	 return

BASIC BLOCK if.end8
%2275:	load	 %2257
%2276:	call	 %2275 %2257 phi_ptr angle_unit_ptr angval
%2277:	icmp	 %2276 XXX
%2278:	br	 %2277 if.end12 if.then11

BASIC BLOCK if.then11
%2279:	load	 %2257
%2280:	call	 %2279 XXX XXX parserro
%2281:	br	 return

BASIC BLOCK if.end12
%2282:	load	 %2257
%2283:	store	 %2282 pp2
%2284:	br	 return

BASIC BLOCK return
%2285:	phi	 XXX XXX XXX XXX XXX
%2286:	ret	 %2285

FUNCTION angval

BASIC BLOCK entry
%2287:	alloca	 XXX
%2288:	store	 p1 %2287
%2289:	call	 angle_ptr %2287 GetReal
%2290:	icmp	 %2289 XXX
%2291:	br	 %2290 if.end if.then

BASIC BLOCK if.then
%2292:	br	 return

BASIC BLOCK if.end
%2293:	load	 %2287
%2294:	call	 %2293 %2287 angle_unit_ptr angunit
%2295:	icmp	 %2294 XXX
%2296:	br	 %2295 if.end4 if.then3

BASIC BLOCK if.then3
%2297:	store	 XXX angle_unit_ptr
%2298:	br	 if.end4

BASIC BLOCK if.end4
%2299:	load	 %2287
%2300:	store	 %2299 pp2
%2301:	br	 return

BASIC BLOCK return
%2302:	phi	 XXX XXX
%2303:	ret	 %2302

FUNCTION anglerot

BASIC BLOCK entry
%2304:	alloca	 XXX
%2305:	store	 p1 %2304
%2306:	call	 XXX %2304 GetKeyword
%2307:	icmp	 %2306 XXX
%2308:	br	 %2307 if.end if.then

BASIC BLOCK if.then
%2309:	br	 return

BASIC BLOCK if.end
%2310:	call	 XXX %2304 GetKeyword
%2311:	call	 angle_start_ptr %2304 GetReal
%2312:	icmp	 %2311 XXX
%2313:	br	 %2312 if.end5 if.then4

BASIC BLOCK if.then4
%2314:	load	 %2304
%2315:	call	 %2314 XXX XXX parserro
%2316:	br	 return

BASIC BLOCK if.end5
%2317:	call	 XXX %2304 GetKeyword
%2318:	load	 %2304
%2319:	call	 %2318 %2304 angle_step_ptr angle_unit_ptr angval
%2320:	icmp	 %2319 XXX
%2321:	br	 %2320 if.end10 if.then9

BASIC BLOCK if.then9
%2322:	load	 %2304
%2323:	call	 %2322 XXX XXX parserro
%2324:	br	 return

BASIC BLOCK if.end10
%2325:	load	 %2304
%2326:	store	 %2325 pp2
%2327:	br	 return

BASIC BLOCK return
%2328:	phi	 XXX XXX XXX XXX
%2329:	ret	 %2328

FUNCTION angstep

BASIC BLOCK entry
%2330:	alloca	 XXX
%2331:	store	 p1 %2330
%2332:	store	 XXX angle_ptr
%2333:	store	 XXX angle_unit_ptr
%2334:	store	 XXX pstep_ptr
%2335:	store	 XXX qstep_ptr
%2336:	store	 XXX pqstep_unit_ptr
%2337:	load	 %2330
%2338:	call	 %2337 %2330 angle_ptr angle_unit_ptr angclaus
%2339:	icmp	 %2338 XXX
%2340:	br	 %2339 if.end if.then

BASIC BLOCK if.then
%2341:	store	 XXX angle_ptr
%2342:	store	 XXX angle_unit_ptr
%2343:	br	 if.end

BASIC BLOCK if.end
%2344:	load	 %2330
%2345:	call	 %2344 %2330 pstep_ptr qstep_ptr pqstep_unit_ptr doubstep
%2346:	icmp	 %2338 XXX
%2347:	br	 %2346 if.end5 land.lhs.true

BASIC BLOCK land.lhs.true
%2348:	icmp	 %2345 XXX
%2349:	br	 %2348 if.end5 if.then4

BASIC BLOCK if.then4
%2350:	store	 XXX angle_ptr
%2351:	store	 XXX angle_unit_ptr
%2352:	store	 XXX pstep_ptr
%2353:	store	 XXX qstep_ptr
%2354:	store	 XXX pqstep_unit_ptr
%2355:	br	 return

BASIC BLOCK if.end5
%2356:	icmp	 %2345 XXX
%2357:	br	 %2356 if.end8 if.then7

BASIC BLOCK if.then7
%2358:	load	 %2330
%2359:	call	 %2358 %2345 XXX parserro
%2360:	store	 XXX angle_ptr
%2361:	store	 XXX angle_unit_ptr
%2362:	store	 XXX pstep_ptr
%2363:	store	 XXX qstep_ptr
%2364:	store	 XXX pqstep_unit_ptr
%2365:	br	 return

BASIC BLOCK if.end8
%2366:	load	 %2330
%2367:	store	 %2366 pp2
%2368:	br	 return

BASIC BLOCK return
%2369:	phi	 XXX XXX XXX
%2370:	ret	 %2369

FUNCTION doubstep

BASIC BLOCK entry
%2371:	alloca	 XXX
%2372:	store	 p1 %2371
%2373:	store	 XXX pstep_ptr
%2374:	store	 XXX qstep_ptr
%2375:	store	 XXX pqstep_unit_ptr
%2376:	call	 XXX %2371 GetKeyword
%2377:	icmp	 %2376 XXX
%2378:	br	 %2377 if.end if.then

BASIC BLOCK if.then
%2379:	br	 return

BASIC BLOCK if.end
%2380:	load	 %2371
%2381:	call	 %2380 %2371 pstep_ptr GetUReal
%2382:	icmp	 %2381 XXX
%2383:	br	 %2382 if.end4 if.then3

BASIC BLOCK if.then3
%2384:	store	 XXX pstep_ptr
%2385:	store	 XXX qstep_ptr
%2386:	store	 XXX pqstep_unit_ptr
%2387:	br	 return

BASIC BLOCK if.end4
%2388:	call	 XXX %2371 GetKeyword
%2389:	icmp	 %2388 XXX
%2390:	br	 %2389 if.end8 if.then7

BASIC BLOCK if.then7
%2391:	br	 return

BASIC BLOCK if.end8
%2392:	load	 %2371
%2393:	call	 %2392 %2371 qstep_ptr GetUReal
%2394:	icmp	 %2393 XXX
%2395:	br	 %2394 if.end12 if.then11

BASIC BLOCK if.then11
%2396:	store	 XXX pstep_ptr
%2397:	store	 XXX qstep_ptr
%2398:	store	 XXX pqstep_unit_ptr
%2399:	br	 return

BASIC BLOCK if.end12
%2400:	call	 %2371 pqstep_unit_ptr lenunit
%2401:	icmp	 %2400 XXX
%2402:	br	 %2401 if.end16 if.then15

BASIC BLOCK if.then15
%2403:	store	 XXX pqstep_unit_ptr
%2404:	br	 if.end16

BASIC BLOCK if.end16
%2405:	load	 %2371
%2406:	store	 %2405 pp2
%2407:	br	 return

BASIC BLOCK return
%2408:	phi	 XXX %2381 XXX %2393 XXX
%2409:	ret	 %2408

FUNCTION answer

BASIC BLOCK entry
%2410:	alloca	 XXX
%2411:	call	 XXX domanda printf
%2412:	getelementptr	 %2410 XXX XXX
%2413:	call	 %2412 gets
%2414:	getelementptr	 %2410 XXX XXX
%2415:	load	 %2414
%2416:	sext	 %2415
%2417:	icmp	 %2416 XXX
%2418:	br	 %2417 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%2419:	getelementptr	 %2410 XXX XXX
%2420:	load	 %2419
%2421:	sext	 %2420
%2422:	icmp	 %2421 XXX
%2423:	br	 %2422 if.else if.then

BASIC BLOCK if.then
%2424:	br	 return

BASIC BLOCK if.else
%2425:	br	 return

BASIC BLOCK return
%2426:	phi	 XXX XXX
%2427:	ret	 %2426

FUNCTION beampha

BASIC BLOCK entry
%2428:	alloca	 XXX
%2429:	store	 p1 %2428
%2430:	call	 XXX %2428 GetKeyword
%2431:	load	 %2428
%2432:	call	 %2431 %2428 u_ptr v_ptr uvdir
%2433:	icmp	 %2432 XXX
%2434:	br	 %2433 if.end if.then

BASIC BLOCK if.then
%2435:	load	 %2428
%2436:	store	 %2435 pp2
%2437:	br	 return

BASIC BLOCK if.end
%2438:	icmp	 %2432 XXX
%2439:	br	 %2438 if.end5 if.then3

BASIC BLOCK if.then3
%2440:	call	 XXX XXX printf
%2441:	br	 return

BASIC BLOCK if.end5
%2442:	icmp	 %2432 XXX
%2443:	br	 %2442 if.end9 if.then7

BASIC BLOCK if.then7
%2444:	load	 %2428
%2445:	call	 %2444 %2428 theta_ptr phi_ptr angle_unit_ptr angledir
%2446:	br	 if.end9

BASIC BLOCK if.end9
%2447:	phi	 %2445 %2432
%2448:	icmp	 %2447 XXX
%2449:	br	 %2448 if.end12 if.then11

BASIC BLOCK if.then11
%2450:	load	 %2428
%2451:	store	 %2450 pp2
%2452:	br	 return

BASIC BLOCK if.end12
%2453:	icmp	 %2447 XXX
%2454:	br	 %2453 if.end16 if.then14

BASIC BLOCK if.then14
%2455:	call	 XXX XXX printf
%2456:	br	 return

BASIC BLOCK if.end16
%2457:	load	 %2428
%2458:	call	 %2457 XXX XXX parserro
%2459:	br	 return

BASIC BLOCK return
%2460:	phi	 XXX XXX XXX XXX XXX
%2461:	ret	 %2460

FUNCTION uvdir

BASIC BLOCK entry
%2462:	alloca	 XXX
%2463:	store	 p1 %2462
%2464:	call	 XXX %2462 GetKeyword
%2465:	icmp	 %2464 XXX
%2466:	br	 %2465 if.end if.then

BASIC BLOCK if.then
%2467:	br	 return

BASIC BLOCK if.end
%2468:	load	 %2462
%2469:	call	 %2468 %2462 u_ptr uvval
%2470:	icmp	 %2469 XXX
%2471:	br	 %2470 if.end4 if.then3

BASIC BLOCK if.then3
%2472:	load	 %2462
%2473:	call	 %2472 XXX XXX parserro
%2474:	br	 return

BASIC BLOCK if.end4
%2475:	call	 XXX %2462 GetKeyword
%2476:	icmp	 %2475 XXX
%2477:	br	 %2476 if.end8 if.then7

BASIC BLOCK if.then7
%2478:	load	 %2462
%2479:	call	 %2478 XXX XXX parserro
%2480:	br	 return

BASIC BLOCK if.end8
%2481:	load	 %2462
%2482:	call	 %2481 %2462 v_ptr uvval
%2483:	icmp	 %2482 XXX
%2484:	br	 %2483 if.end13 if.then11

BASIC BLOCK if.then11
%2485:	call	 XXX XXX printf
%2486:	br	 return

BASIC BLOCK if.end13
%2487:	load	 %2462
%2488:	store	 %2487 pp2
%2489:	br	 return

BASIC BLOCK return
%2490:	phi	 XXX XXX XXX XXX XXX
%2491:	ret	 %2490

FUNCTION nodecoor

BASIC BLOCK entry
%2492:	alloca	 XXX
%2493:	store	 p1 %2492
%2494:	call	 XXX %2492 GetKeyword
%2495:	load	 %2492
%2496:	call	 %2495 %2492 pcoord_ptr GetInt
%2497:	icmp	 %2496 XXX
%2498:	br	 %2497 if.end if.then

BASIC BLOCK if.then
%2499:	br	 return

BASIC BLOCK if.end
%2500:	call	 XXX %2492 GetKeyword
%2501:	load	 %2492
%2502:	call	 %2501 %2492 qcoord_ptr GetInt
%2503:	icmp	 %2502 XXX
%2504:	br	 %2503 if.end6 if.then5

BASIC BLOCK if.then5
%2505:	br	 return

BASIC BLOCK if.end6
%2506:	load	 %2492
%2507:	store	 %2506 pp2
%2508:	br	 return

BASIC BLOCK return
%2509:	phi	 XXX XXX XXX
%2510:	ret	 %2509

FUNCTION circpol

BASIC BLOCK entry
%2511:	alloca	 XXX
%2512:	store	 p1 %2511
%2513:	store	 XXX direction_ptr
%2514:	call	 XXX %2511 GetKeyword
%2515:	icmp	 %2514 XXX
%2516:	br	 %2515 if.end if.then

BASIC BLOCK if.then
%2517:	br	 return

BASIC BLOCK if.end
%2518:	call	 XXX %2511 GetKeyword
%2519:	icmp	 %2518 XXX
%2520:	br	 %2519 if.end4 if.then3

BASIC BLOCK if.then3
%2521:	store	 XXX direction_ptr
%2522:	load	 %2511
%2523:	store	 %2522 pp2
%2524:	br	 return

BASIC BLOCK if.end4
%2525:	call	 XXX %2511 GetKeyword
%2526:	icmp	 %2525 XXX
%2527:	br	 %2526 if.end8 if.then7

BASIC BLOCK if.then7
%2528:	store	 XXX direction_ptr
%2529:	load	 %2511
%2530:	store	 %2529 pp2
%2531:	br	 return

BASIC BLOCK if.end8
%2532:	load	 %2511
%2533:	store	 %2532 pp2
%2534:	br	 return

BASIC BLOCK return
%2535:	phi	 XXX XXX XXX XXX
%2536:	ret	 %2535

FUNCTION circspec

BASIC BLOCK entry
%2537:	alloca	 XXX
%2538:	store	 p1 %2537
%2539:	call	 XXX %2537 GetKeyword
%2540:	icmp	 %2539 XXX
%2541:	br	 %2540 if.end if.then

BASIC BLOCK if.then
%2542:	br	 return

BASIC BLOCK if.end
%2543:	call	 XXX %2537 GetKeyword
%2544:	load	 %2537
%2545:	call	 %2544 %2537 radius_ptr Get1Real
%2546:	icmp	 %2545 XXX
%2547:	br	 %2546 if.end5 if.then4

BASIC BLOCK if.then4
%2548:	load	 %2537
%2549:	call	 %2548 %2545 XXX parserro
%2550:	br	 return

BASIC BLOCK if.end5
%2551:	call	 %2537 radius_unit_ptr lenunit
%2552:	icmp	 %2551 XXX
%2553:	br	 %2552 if.end9 if.then8

BASIC BLOCK if.then8
%2554:	store	 XXX radius_unit_ptr
%2555:	br	 if.end9

BASIC BLOCK if.end9
%2556:	load	 %2537
%2557:	store	 %2556 pp2
%2558:	br	 return

BASIC BLOCK return
%2559:	phi	 XXX XXX XXX
%2560:	ret	 %2559

FUNCTION Get1Real

BASIC BLOCK entry
%2561:	alloca	 XXX
%2562:	store	 p1 %2561
%2563:	call	 ureal_ptr %2561 GetReal
%2564:	icmp	 %2563 XXX
%2565:	br	 %2564 if.end if.then

BASIC BLOCK if.then
%2566:	br	 return

BASIC BLOCK if.end
%2567:	load	 ureal_ptr
%2568:	fcmp	 %2567 XXX
%2569:	br	 %2568 if.end3 if.then2

BASIC BLOCK if.then2
%2570:	br	 return

BASIC BLOCK if.end3
%2571:	load	 %2561
%2572:	store	 %2571 pp2
%2573:	br	 return

BASIC BLOCK return
%2574:	phi	 XXX XXX XXX
%2575:	ret	 %2574

FUNCTION lenunit

BASIC BLOCK entry
%2576:	alloca	 XXX
%2577:	load	 tp
%2578:	store	 %2577 %2576
%2579:	store	 XXX unit
%2580:	call	 XXX %2576 GetKeyword
%2581:	icmp	 %2580 XXX
%2582:	br	 %2581 if.else if.then

BASIC BLOCK if.then
%2583:	store	 XXX unit
%2584:	br	 if.end15

BASIC BLOCK if.else
%2585:	call	 XXX %2576 GetKeyword
%2586:	icmp	 %2585 XXX
%2587:	br	 %2586 if.else4 if.then3

BASIC BLOCK if.then3
%2588:	store	 XXX unit
%2589:	br	 if.end14

BASIC BLOCK if.else4
%2590:	call	 XXX %2576 GetKeyword
%2591:	icmp	 %2590 XXX
%2592:	br	 %2591 if.else8 if.then7

BASIC BLOCK if.then7
%2593:	store	 XXX unit
%2594:	br	 if.end13

BASIC BLOCK if.else8
%2595:	call	 XXX %2576 GetKeyword
%2596:	icmp	 %2595 XXX
%2597:	br	 %2596 if.else12 if.then11

BASIC BLOCK if.then11
%2598:	store	 XXX unit
%2599:	br	 if.end

BASIC BLOCK if.else12
%2600:	br	 return

BASIC BLOCK if.end
%2601:	br	 if.end13

BASIC BLOCK if.end13
%2602:	br	 if.end14

BASIC BLOCK if.end14
%2603:	br	 if.end15

BASIC BLOCK if.end15
%2604:	load	 %2576
%2605:	store	 %2604 tp
%2606:	br	 return

BASIC BLOCK return
%2607:	phi	 XXX XXX
%2608:	ret	 %2607

FUNCTION cosinus

BASIC BLOCK entry
%2609:	alloca	 XXX
%2610:	store	 p1 %2609
%2611:	call	 XXX %2609 GetKeyword
%2612:	icmp	 %2611 XXX
%2613:	br	 %2612 if.end if.then

BASIC BLOCK if.then
%2614:	br	 return

BASIC BLOCK if.end
%2615:	call	 exp_ptr %2609 GetReal
%2616:	icmp	 %2615 XXX
%2617:	br	 %2616 if.end4 if.then3

BASIC BLOCK if.then3
%2618:	load	 %2609
%2619:	call	 %2618 XXX XXX parserro
%2620:	br	 return

BASIC BLOCK if.end4
%2621:	load	 %2609
%2622:	store	 %2621 pp2
%2623:	br	 return

BASIC BLOCK return
%2624:	phi	 XXX XXX XXX
%2625:	ret	 %2624

FUNCTION dacos

BASIC BLOCK entry
%2626:	call	 x acos
%2627:	fmul	 %2626 XXX
%2628:	fdiv	 %2627 XXX
%2629:	ret	 %2628

FUNCTION dasin

BASIC BLOCK entry
%2630:	call	 x asin
%2631:	fmul	 %2630 XXX
%2632:	fdiv	 %2631 XXX
%2633:	ret	 %2632

FUNCTION datan

BASIC BLOCK entry
%2634:	call	 x atan
%2635:	fmul	 %2634 XXX
%2636:	fdiv	 %2635 XXX
%2637:	ret	 %2636

FUNCTION dcos

BASIC BLOCK entry
%2638:	fmul	 x XXX
%2639:	fdiv	 %2638 XXX
%2640:	call	 %2639 cos
%2641:	ret	 %2640

FUNCTION degconv

BASIC BLOCK entry
%2642:	switch	 unit sw.default XXX sw.bb XXX sw.bb1

BASIC BLOCK sw.bb
%2643:	br	 sw.epilog

BASIC BLOCK sw.bb1
%2644:	load	 x_ptr
%2645:	fmul	 %2644 XXX
%2646:	store	 %2645 x_ptr
%2647:	br	 sw.epilog

BASIC BLOCK sw.default
%2648:	call	 XXX interror
%2649:	br	 sw.epilog

BASIC BLOCK sw.epilog
%2650:	ret	 XXX

FUNCTION doubmax

BASIC BLOCK entry
%2651:	fcmp	 a b
%2652:	br	 %2651 if.else if.then

BASIC BLOCK if.then
%2653:	br	 return

BASIC BLOCK if.else
%2654:	br	 return

BASIC BLOCK return
%2655:	phi	 a b
%2656:	ret	 %2655

FUNCTION doubmin

BASIC BLOCK entry
%2657:	fcmp	 a b
%2658:	br	 %2657 if.else if.then

BASIC BLOCK if.then
%2659:	br	 return

BASIC BLOCK if.else
%2660:	br	 return

BASIC BLOCK return
%2661:	phi	 a b
%2662:	ret	 %2661

FUNCTION GetUReal

BASIC BLOCK entry
%2663:	alloca	 XXX
%2664:	alloca	 XXX
%2665:	store	 p1 %2663
%2666:	call	 %2664 %2663 GetReal
%2667:	icmp	 %2666 XXX
%2668:	br	 %2667 if.end if.then

BASIC BLOCK if.then
%2669:	br	 return

BASIC BLOCK if.end
%2670:	load	 %2664
%2671:	fcmp	 %2670 XXX
%2672:	br	 %2671 if.end3 if.then2

BASIC BLOCK if.then2
%2673:	br	 return

BASIC BLOCK if.end3
%2674:	load	 %2664
%2675:	store	 %2674 ureal_ptr
%2676:	load	 %2663
%2677:	store	 %2676 pp2
%2678:	br	 return

BASIC BLOCK return
%2679:	phi	 XXX XXX XXX
%2680:	ret	 %2679

FUNCTION dsin

BASIC BLOCK entry
%2681:	fmul	 x XXX
%2682:	fdiv	 %2681 XXX
%2683:	call	 %2682 sin
%2684:	ret	 %2683

FUNCTION elemdef

BASIC BLOCK entry
%2685:	alloca	 XXX
%2686:	alloca	 XXX
%2687:	store	 p1 %2685
%2688:	call	 XXX malloc
%2689:	bitcast	 %2688
%2690:	store	 %2689 elem_ptr
%2691:	load	 elem_ptr
%2692:	icmp	 %2691 XXX
%2693:	br	 %2692 if.end if.then

BASIC BLOCK if.then
%2694:	load	 %2685
%2695:	call	 %2694 XXX XXX parserro
%2696:	call	 XXX interror
%2697:	br	 if.end

BASIC BLOCK if.end
%2698:	call	 XXX %2685 GetKeyword
%2699:	icmp	 %2698 XXX
%2700:	br	 %2699 if.end4 if.then3

BASIC BLOCK if.then3
%2701:	store	 XXX elem_ptr
%2702:	br	 return

BASIC BLOCK if.end4
%2703:	getelementptr	 %2686 XXX XXX
%2704:	call	 %2703 %2685 GetUName
%2705:	icmp	 %2704 XXX
%2706:	br	 %2705 if.end11 if.then7

BASIC BLOCK if.then7
%2707:	load	 elem_ptr
%2708:	getelementptr	 %2707 XXX XXX
%2709:	getelementptr	 %2708 XXX XXX
%2710:	getelementptr	 %2686 XXX XXX
%2711:	call	 %2709 %2710 strcpy
%2712:	load	 elem_ptr
%2713:	getelementptr	 %2712 XXX XXX
%2714:	store	 XXX %2713
%2715:	load	 %2685
%2716:	store	 %2715 pp2
%2717:	br	 return

BASIC BLOCK if.end11
%2718:	load	 %2685
%2719:	call	 %2718 %2685 elem_ptr sinelem
%2720:	icmp	 %2719 XXX
%2721:	br	 %2720 if.end15 if.then14

BASIC BLOCK if.then14
%2722:	load	 %2685
%2723:	store	 %2722 pp2
%2724:	br	 return

BASIC BLOCK if.end15
%2725:	load	 elem_ptr
%2726:	icmp	 %2725 XXX
%2727:	br	 return

BASIC BLOCK return
%2728:	phi	 XXX XXX XXX XXX
%2729:	ret	 %2728

FUNCTION GetUName

BASIC BLOCK entry
%2730:	alloca	 XXX
%2731:	load	 tp
%2732:	store	 %2731 %2730
%2733:	call	 %2730 TapeGet
%2734:	br	 while.cond

BASIC BLOCK while.cond
%2735:	phi	 %2733 %2762
%2736:	phi	 XXX %2761
%2737:	call	 %2735 isletter
%2738:	icmp	 %2737 XXX
%2739:	br	 %2738 lor.lhs.false land.rhs

BASIC BLOCK lor.lhs.false
%2740:	sext	 %2735
%2741:	sext	 %2740
%2742:	call	 __ctype_b_loc
%2743:	load	 %2742
%2744:	getelementptr	 %2743 %2741
%2745:	load	 %2744
%2746:	zext	 %2745
%2747:	and	 %2746 XXX
%2748:	icmp	 %2747 XXX
%2749:	br	 %2748 land.end land.rhs

BASIC BLOCK land.rhs
%2750:	load	 %2730
%2751:	icmp	 %2750 XXX
%2752:	br	 land.end

BASIC BLOCK land.end
%2753:	phi	 XXX %2751
%2754:	br	 %2753 while.end while.body

BASIC BLOCK while.body
%2755:	icmp	 %2736 XXX
%2756:	br	 %2755 if.end if.then

BASIC BLOCK if.then
%2757:	sext	 %2736
%2758:	getelementptr	 word %2757
%2759:	store	 %2735 %2758
%2760:	br	 if.end

BASIC BLOCK if.end
%2761:	add	 %2736 XXX
%2762:	call	 %2730 TapeGet
%2763:	br	 while.cond

BASIC BLOCK while.end
%2764:	icmp	 %2736 XXX
%2765:	br	 %2764 if.else if.then13

BASIC BLOCK if.then13
%2766:	getelementptr	 word XXX
%2767:	store	 XXX %2766
%2768:	br	 if.end17

BASIC BLOCK if.else
%2769:	sext	 %2736
%2770:	getelementptr	 word %2769
%2771:	store	 XXX %2770
%2772:	br	 if.end17

BASIC BLOCK if.end17
%2773:	icmp	 %2736 XXX
%2774:	br	 %2773 if.end21 if.then20

BASIC BLOCK if.then20
%2775:	load	 tp
%2776:	call	 %2775 XXX word parserro
%2777:	br	 if.end21

BASIC BLOCK if.end21
%2778:	call	 word strlen
%2779:	icmp	 %2778 XXX
%2780:	br	 %2779 if.end26 if.then25

BASIC BLOCK if.then25
%2781:	br	 return

BASIC BLOCK if.end26
%2782:	getelementptr	 word XXX
%2783:	load	 %2782
%2784:	call	 %2783 isletter
%2785:	icmp	 %2784 XXX
%2786:	br	 %2785 if.end32 if.then31

BASIC BLOCK if.then31
%2787:	br	 return

BASIC BLOCK if.end32
%2788:	call	 word InKWords
%2789:	icmp	 %2788 XXX
%2790:	br	 %2789 if.end37 if.then36

BASIC BLOCK if.then36
%2791:	br	 return

BASIC BLOCK if.end37
%2792:	load	 %2730
%2793:	store	 %2792 tp
%2794:	br	 return

BASIC BLOCK return
%2795:	phi	 XXX XXX XXX XXX
%2796:	ret	 %2795

FUNCTION sinelem

BASIC BLOCK entry
%2797:	alloca	 XXX
%2798:	alloca	 XXX
%2799:	alloca	 XXX
%2800:	alloca	 XXX
%2801:	alloca	 XXX
%2802:	alloca	 XXX
%2803:	alloca	 XXX
%2804:	alloca	 XXX
%2805:	alloca	 XXX
%2806:	alloca	 XXX
%2807:	alloca	 XXX
%2808:	alloca	 XXX
%2809:	alloca	 XXX
%2810:	store	 p1 %2797
%2811:	load	 %2797
%2812:	call	 %2811 %2797 %2798 %2799 %2800 %2801 %2802 %2803 geomspec
%2813:	icmp	 %2812 XXX
%2814:	br	 %2813 if.end if.then

BASIC BLOCK if.then
%2815:	br	 return

BASIC BLOCK if.end
%2816:	icmp	 %2812 XXX
%2817:	br	 %2816 if.end4 if.then2

BASIC BLOCK if.then2
%2818:	call	 XXX XXX printf
%2819:	br	 return

BASIC BLOCK if.end4
%2820:	icmp	 %2812 XXX
%2821:	br	 %2820 if.end8 if.then6

BASIC BLOCK if.then6
%2822:	load	 %2797
%2823:	call	 %2822 %2797 %2804 %2805 %2806 %2807 polspec
%2824:	br	 if.end8

BASIC BLOCK if.end8
%2825:	phi	 %2823 %2812
%2826:	icmp	 %2825 XXX
%2827:	br	 %2826 if.end12 if.then10

BASIC BLOCK if.then10
%2828:	call	 XXX XXX printf
%2829:	br	 return

BASIC BLOCK if.end12
%2830:	icmp	 %2825 XXX
%2831:	br	 %2830 if.end15 if.then14

BASIC BLOCK if.then14
%2832:	store	 XXX %2804
%2833:	store	 XXX %2805
%2834:	store	 XXX %2806
%2835:	store	 XXX %2807
%2836:	br	 if.end15

BASIC BLOCK if.end15
%2837:	phi	 XXX %2825
%2838:	icmp	 %2837 XXX
%2839:	br	 %2838 if.end19 if.then17

BASIC BLOCK if.then17
%2840:	load	 %2797
%2841:	call	 %2840 %2797 %2808 %2809 portspec
%2842:	br	 if.end19

BASIC BLOCK if.end19
%2843:	phi	 %2841 %2837
%2844:	icmp	 %2843 XXX
%2845:	br	 %2844 if.end23 if.then21

BASIC BLOCK if.then21
%2846:	call	 XXX XXX printf
%2847:	br	 return

BASIC BLOCK if.end23
%2848:	icmp	 %2843 XXX
%2849:	br	 %2848 if.end26 if.then25

BASIC BLOCK if.then25
%2850:	store	 XXX %2808
%2851:	store	 XXX %2809
%2852:	br	 if.end26

BASIC BLOCK if.end26
%2853:	load	 elem_ptr
%2854:	getelementptr	 %2853 XXX XXX
%2855:	store	 XXX %2854
%2856:	load	 elem_ptr
%2857:	getelementptr	 %2856 XXX XXX
%2858:	getelementptr	 %2857 XXX XXX
%2859:	call	 %2858 XXX strcpy
%2860:	load	 %2798
%2861:	load	 elem_ptr
%2862:	getelementptr	 %2861 XXX XXX
%2863:	store	 %2860 %2862
%2864:	load	 %2799
%2865:	load	 elem_ptr
%2866:	getelementptr	 %2865 XXX XXX
%2867:	store	 %2864 %2866
%2868:	load	 %2800
%2869:	load	 elem_ptr
%2870:	getelementptr	 %2869 XXX XXX
%2871:	store	 %2868 %2870
%2872:	load	 %2801
%2873:	load	 elem_ptr
%2874:	getelementptr	 %2873 XXX XXX
%2875:	store	 %2872 %2874
%2876:	load	 %2802
%2877:	load	 elem_ptr
%2878:	getelementptr	 %2877 XXX XXX
%2879:	store	 %2876 %2878
%2880:	load	 %2803
%2881:	load	 elem_ptr
%2882:	getelementptr	 %2881 XXX XXX
%2883:	store	 %2880 %2882
%2884:	load	 elem_ptr
%2885:	getelementptr	 %2884 XXX XXX
%2886:	store	 XXX %2885
%2887:	load	 elem_ptr
%2888:	getelementptr	 %2887 XXX XXX
%2889:	store	 XXX %2888
%2890:	load	 elem_ptr
%2891:	getelementptr	 %2890 XXX XXX
%2892:	store	 XXX %2891
%2893:	load	 elem_ptr
%2894:	getelementptr	 %2893 XXX XXX
%2895:	store	 XXX %2894
%2896:	load	 elem_ptr
%2897:	getelementptr	 %2896 XXX XXX
%2898:	store	 XXX %2897
%2899:	load	 elem_ptr
%2900:	getelementptr	 %2899 XXX XXX
%2901:	store	 XXX %2900
%2902:	load	 elem_ptr
%2903:	getelementptr	 %2902 XXX XXX
%2904:	store	 XXX %2903
%2905:	load	 elem_ptr
%2906:	getelementptr	 %2905 XXX XXX
%2907:	store	 XXX %2906
%2908:	load	 %2804
%2909:	load	 elem_ptr
%2910:	getelementptr	 %2909 XXX XXX
%2911:	store	 %2908 %2910
%2912:	load	 %2805
%2913:	load	 elem_ptr
%2914:	getelementptr	 %2913 XXX XXX
%2915:	store	 %2912 %2914
%2916:	load	 %2806
%2917:	load	 elem_ptr
%2918:	getelementptr	 %2917 XXX XXX
%2919:	store	 %2916 %2918
%2920:	load	 %2807
%2921:	load	 elem_ptr
%2922:	getelementptr	 %2921 XXX XXX
%2923:	store	 %2920 %2922
%2924:	load	 elem_ptr
%2925:	getelementptr	 %2924 XXX XXX
%2926:	store	 XXX %2925
%2927:	load	 elem_ptr
%2928:	getelementptr	 %2927 XXX XXX
%2929:	store	 XXX %2928
%2930:	load	 %2808
%2931:	load	 elem_ptr
%2932:	getelementptr	 %2931 XXX XXX
%2933:	store	 %2930 %2932
%2934:	load	 %2809
%2935:	load	 elem_ptr
%2936:	getelementptr	 %2935 XXX XXX
%2937:	store	 %2934 %2936
%2938:	load	 %2797
%2939:	store	 %2938 pp2
%2940:	br	 return

BASIC BLOCK return
%2941:	phi	 XXX XXX XXX XXX XXX
%2942:	ret	 %2941

FUNCTION emsginit

BASIC BLOCK entry
%2943:	br	 for.cond

BASIC BLOCK for.cond
%2944:	phi	 XXX %2952
%2945:	icmp	 %2944 XXX
%2946:	br	 %2945 for.end for.body

BASIC BLOCK for.body
%2947:	sext	 %2944
%2948:	getelementptr	 ErrorMessages XXX %2947
%2949:	getelementptr	 %2948 XXX XXX
%2950:	store	 XXX %2949
%2951:	br	 for.inc

BASIC BLOCK for.inc
%2952:	add	 %2944 XXX
%2953:	br	 for.cond

BASIC BLOCK for.end
%2954:	call	 XXX XXX strcpy
%2955:	call	 XXX XXX strcpy
%2956:	call	 XXX XXX strcpy
%2957:	call	 XXX XXX strcpy
%2958:	call	 XXX XXX strcpy
%2959:	call	 XXX XXX strcpy
%2960:	call	 XXX XXX strcpy
%2961:	call	 XXX XXX strcpy
%2962:	call	 XXX XXX strcpy
%2963:	call	 XXX XXX strcpy
%2964:	call	 XXX XXX strcpy
%2965:	call	 XXX XXX strcpy
%2966:	call	 XXX XXX strcpy
%2967:	call	 XXX XXX strcpy
%2968:	call	 XXX XXX strcpy
%2969:	call	 XXX XXX strcpy
%2970:	call	 XXX XXX strcpy
%2971:	call	 XXX XXX strcpy
%2972:	call	 XXX XXX strcpy
%2973:	call	 XXX XXX strcpy
%2974:	call	 XXX XXX strcpy
%2975:	call	 XXX XXX strcpy
%2976:	call	 XXX XXX strcpy
%2977:	call	 XXX XXX strcpy
%2978:	call	 XXX XXX strcpy
%2979:	call	 XXX XXX strcpy
%2980:	call	 XXX XXX strcpy
%2981:	call	 XXX XXX strcpy
%2982:	call	 XXX XXX strcpy
%2983:	call	 XXX XXX strcpy
%2984:	call	 XXX XXX strcpy
%2985:	call	 XXX XXX strcpy
%2986:	call	 XXX XXX strcpy
%2987:	call	 XXX XXX strcpy
%2988:	call	 XXX XXX strcpy
%2989:	call	 XXX XXX strcpy
%2990:	call	 XXX XXX strcpy
%2991:	call	 XXX XXX strcpy
%2992:	call	 XXX XXX strcpy
%2993:	call	 XXX XXX strcpy
%2994:	call	 XXX XXX strcpy
%2995:	call	 XXX XXX strcpy
%2996:	call	 XXX XXX strcpy
%2997:	call	 XXX XXX strcpy
%2998:	call	 XXX XXX strcpy
%2999:	call	 XXX XXX strcpy
%3000:	call	 XXX XXX strcpy
%3001:	call	 XXX XXX strcpy
%3002:	call	 XXX XXX strcpy
%3003:	call	 XXX XXX strcpy
%3004:	call	 XXX XXX strcpy
%3005:	call	 XXX XXX strcpy
%3006:	call	 XXX XXX strcpy
%3007:	call	 XXX XXX strcpy
%3008:	call	 XXX XXX strcpy
%3009:	call	 XXX XXX strcpy
%3010:	call	 XXX XXX strcpy
%3011:	call	 XXX XXX strcpy
%3012:	call	 XXX XXX strcpy
%3013:	call	 XXX XXX strcpy
%3014:	call	 XXX XXX strcpy
%3015:	call	 XXX XXX strcpy
%3016:	call	 XXX XXX strcpy
%3017:	call	 XXX XXX strcpy
%3018:	call	 XXX XXX strcpy
%3019:	call	 XXX XXX strcpy
%3020:	call	 XXX XXX strcpy
%3021:	call	 XXX XXX strcpy
%3022:	call	 XXX XXX strcpy
%3023:	call	 XXX XXX strcpy
%3024:	call	 XXX XXX strcpy
%3025:	call	 XXX XXX strcpy
%3026:	call	 XXX XXX strcpy
%3027:	call	 XXX XXX strcpy
%3028:	call	 XXX XXX strcpy
%3029:	call	 XXX XXX strcpy
%3030:	call	 XXX XXX strcpy
%3031:	call	 XXX XXX strcpy
%3032:	call	 XXX XXX strcpy
%3033:	call	 XXX XXX strcpy
%3034:	call	 XXX XXX strcpy
%3035:	call	 XXX XXX strcpy
%3036:	call	 XXX XXX strcpy
%3037:	call	 XXX XXX strcpy
%3038:	call	 XXX XXX strcpy
%3039:	call	 XXX XXX strcpy
%3040:	call	 XXX XXX strcpy
%3041:	call	 XXX XXX strcpy
%3042:	call	 XXX XXX strcpy
%3043:	call	 XXX XXX strcpy
%3044:	call	 XXX XXX strcpy
%3045:	call	 XXX XXX strcpy
%3046:	call	 XXX XXX strcpy
%3047:	call	 XXX XXX strcpy
%3048:	call	 XXX XXX strcpy
%3049:	call	 XXX XXX strcpy
%3050:	call	 XXX XXX strcpy
%3051:	call	 XXX XXX strcpy
%3052:	call	 XXX XXX strcpy
%3053:	call	 XXX XXX strcpy
%3054:	ret	

FUNCTION EndOfTape

BASIC BLOCK entry
%3055:	load	 p
%3056:	icmp	 %3055 XXX
%3057:	br	 %3056 if.end if.then

BASIC BLOCK if.then
%3058:	br	 return

BASIC BLOCK if.end
%3059:	br	 return

BASIC BLOCK return
%3060:	phi	 XXX XXX
%3061:	ret	 %3060

FUNCTION extmod

BASIC BLOCK entry
%3062:	alloca	 XXX
%3063:	store	 p1 %3062
%3064:	call	 XXX %3062 GetKeyword
%3065:	icmp	 %3064 XXX
%3066:	br	 %3065 if.end if.then

BASIC BLOCK if.then
%3067:	br	 return

BASIC BLOCK if.end
%3068:	load	 %3062
%3069:	store	 %3068 pp2
%3070:	br	 return

BASIC BLOCK return
%3071:	phi	 XXX XXX
%3072:	ret	 %3071

FUNCTION fixgramp

BASIC BLOCK entry
%3073:	alloca	 XXX
%3074:	alloca	 XXX
%3075:	alloca	 XXX
%3076:	alloca	 XXX
%3077:	alloca	 XXX
%3078:	alloca	 XXX
%3079:	getelementptr	 g XXX XXX
%3080:	load	 %3079
%3081:	store	 %3080 %3073
%3082:	getelementptr	 g XXX XXX
%3083:	load	 %3082
%3084:	store	 %3083 %3074
%3085:	getelementptr	 g XXX XXX
%3086:	load	 %3085
%3087:	store	 %3086 %3075
%3088:	getelementptr	 g XXX XXX
%3089:	load	 %3088
%3090:	store	 %3089 %3076
%3091:	getelementptr	 g XXX XXX
%3092:	load	 %3091
%3093:	store	 %3092 %3077
%3094:	getelementptr	 g XXX XXX
%3095:	load	 %3094
%3096:	store	 %3095 %3078
%3097:	getelementptr	 g XXX XXX
%3098:	load	 %3097
%3099:	getelementptr	 g XXX XXX
%3100:	load	 %3099
%3101:	switch	 %3100 sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb7

BASIC BLOCK sw.bb
%3102:	load	 %3073
%3103:	fcmp	 %3102 XXX
%3104:	br	 %3103 if.end if.then

BASIC BLOCK if.then
%3105:	store	 XXX %3073
%3106:	br	 if.end

BASIC BLOCK if.end
%3107:	call	 %3073 %3098 linconv
%3108:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3109:	call	 %3074 %3098 linconv
%3110:	call	 %3075 %3098 linconv
%3111:	call	 %3076 %3098 linconv
%3112:	call	 %3077 %3098 linconv
%3113:	call	 %3078 %3098 linconv
%3114:	br	 sw.epilog

BASIC BLOCK sw.bb7
%3115:	call	 XXX printf
%3116:	call	 XXX exit
%3117:	unreachable	

BASIC BLOCK sw.default
%3118:	call	 XXX interror
%3119:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3120:	load	 %3073
%3121:	getelementptr	 g XXX XXX
%3122:	store	 %3120 %3121
%3123:	load	 %3074
%3124:	getelementptr	 g XXX XXX
%3125:	store	 %3123 %3124
%3126:	load	 %3075
%3127:	getelementptr	 g XXX XXX
%3128:	store	 %3126 %3127
%3129:	load	 %3076
%3130:	getelementptr	 g XXX XXX
%3131:	store	 %3129 %3130
%3132:	load	 %3077
%3133:	getelementptr	 g XXX XXX
%3134:	store	 %3132 %3133
%3135:	load	 %3078
%3136:	getelementptr	 g XXX XXX
%3137:	store	 %3135 %3136
%3138:	getelementptr	 g XXX XXX
%3139:	store	 XXX %3138
%3140:	ret	 XXX

FUNCTION linconv

BASIC BLOCK entry
%3141:	switch	 unit sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb2

BASIC BLOCK sw.bb
%3142:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3143:	load	 x_ptr
%3144:	call	 %3143 sqrt
%3145:	store	 %3144 x_ptr
%3146:	br	 sw.epilog

BASIC BLOCK sw.bb2
%3147:	load	 x_ptr
%3148:	fdiv	 %3147 XXX
%3149:	call	 XXX %3148 pow
%3150:	store	 %3149 x_ptr
%3151:	br	 sw.epilog

BASIC BLOCK sw.default
%3152:	call	 XXX interror
%3153:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3154:	ret	 XXX

FUNCTION fixgrpha

BASIC BLOCK entry
%3155:	getelementptr	 g XXX XXX
%3156:	load	 %3155
%3157:	switch	 %3156 sw.default XXX sw.bb XXX sw.bb3 XXX sw.bb14 XXX sw.bb16 XXX sw.bb30

BASIC BLOCK sw.bb
%3158:	getelementptr	 g XXX XXX
%3159:	load	 %3158
%3160:	fcmp	 %3159 XXX
%3161:	br	 %3160 if.end if.then

BASIC BLOCK if.then
%3162:	getelementptr	 g XXX XXX
%3163:	store	 XXX %3162
%3164:	br	 if.end

BASIC BLOCK if.end
%3165:	getelementptr	 g XXX XXX
%3166:	getelementptr	 g XXX XXX
%3167:	load	 %3166
%3168:	call	 %3165 %3167 degconv
%3169:	br	 sw.epilog

BASIC BLOCK sw.bb3
%3170:	getelementptr	 g XXX XXX
%3171:	getelementptr	 g XXX XXX
%3172:	load	 %3171
%3173:	call	 %3170 %3172 degconv
%3174:	getelementptr	 g XXX XXX
%3175:	getelementptr	 g XXX XXX
%3176:	load	 %3175
%3177:	call	 %3174 %3176 degconv
%3178:	getelementptr	 g XXX XXX
%3179:	getelementptr	 g XXX XXX
%3180:	load	 %3179
%3181:	call	 %3178 %3180 degconv
%3182:	getelementptr	 g XXX XXX
%3183:	getelementptr	 g XXX XXX
%3184:	load	 %3183
%3185:	call	 %3182 %3184 degconv
%3186:	getelementptr	 g XXX XXX
%3187:	getelementptr	 g XXX XXX
%3188:	load	 %3187
%3189:	call	 %3186 %3188 degconv
%3190:	br	 sw.epilog

BASIC BLOCK sw.bb14
%3191:	call	 XXX printf
%3192:	call	 XXX exit
%3193:	unreachable	

BASIC BLOCK sw.bb16
%3194:	getelementptr	 g XXX XXX
%3195:	load	 %3194
%3196:	icmp	 %3195 XXX
%3197:	br	 %3196 if.end22 if.then18

BASIC BLOCK if.then18
%3198:	getelementptr	 g XXX XXX
%3199:	getelementptr	 g XXX XXX
%3200:	load	 %3199
%3201:	call	 %3198 %3200 degconv
%3202:	getelementptr	 g XXX XXX
%3203:	getelementptr	 g XXX XXX
%3204:	load	 %3203
%3205:	call	 %3202 %3204 degconv
%3206:	br	 if.end22

BASIC BLOCK if.end22
%3207:	getelementptr	 g XXX XXX
%3208:	load	 %3207
%3209:	icmp	 %3208 XXX
%3210:	br	 %3209 if.end29 if.then24

BASIC BLOCK if.then24
%3211:	getelementptr	 g XXX XXX
%3212:	getelementptr	 g XXX XXX
%3213:	load	 %3212
%3214:	call	 %3211 %3213 degconv
%3215:	getelementptr	 g XXX XXX
%3216:	getelementptr	 g XXX XXX
%3217:	load	 %3216
%3218:	call	 %3215 %3217 degconv
%3219:	br	 if.end29

BASIC BLOCK if.end29
%3220:	br	 sw.epilog

BASIC BLOCK sw.bb30
%3221:	getelementptr	 g XXX XXX
%3222:	getelementptr	 g XXX XXX
%3223:	load	 %3222
%3224:	call	 %3221 %3223 degconv
%3225:	getelementptr	 g XXX XXX
%3226:	getelementptr	 g XXX XXX
%3227:	load	 %3226
%3228:	call	 %3225 %3227 degconv
%3229:	br	 sw.epilog

BASIC BLOCK sw.default
%3230:	call	 XXX interror
%3231:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3232:	getelementptr	 g XXX XXX
%3233:	store	 XXX %3232
%3234:	ret	 XXX

FUNCTION fixnodor

BASIC BLOCK entry
%3235:	getelementptr	 node_ptr XXX XXX
%3236:	load	 %3235
%3237:	icmp	 %3236 XXX
%3238:	br	 %3237 if.else if.then

BASIC BLOCK if.then
%3239:	getelementptr	 node_ptr XXX XXX
%3240:	store	 XXX %3239
%3241:	getelementptr	 node_ptr XXX XXX
%3242:	store	 XXX %3241
%3243:	getelementptr	 node_ptr XXX XXX
%3244:	store	 XXX %3243
%3245:	getelementptr	 node_ptr XXX XXX
%3246:	store	 XXX %3245
%3247:	br	 if.end10

BASIC BLOCK if.else
%3248:	getelementptr	 node_ptr XXX XXX
%3249:	load	 %3248
%3250:	icmp	 %3249 XXX
%3251:	br	 %3250 if.end if.then3

BASIC BLOCK if.then3
%3252:	getelementptr	 node_ptr XXX XXX
%3253:	load	 %3252
%3254:	fmul	 %3253 XXX
%3255:	store	 %3254 %3252
%3256:	getelementptr	 node_ptr XXX XXX
%3257:	load	 %3256
%3258:	fmul	 %3257 XXX
%3259:	store	 %3258 %3256
%3260:	getelementptr	 node_ptr XXX XXX
%3261:	load	 %3260
%3262:	fmul	 %3261 XXX
%3263:	store	 %3262 %3260
%3264:	getelementptr	 node_ptr XXX XXX
%3265:	store	 XXX %3264
%3266:	br	 if.end

BASIC BLOCK if.end
%3267:	br	 if.end10

BASIC BLOCK if.end10
%3268:	ret	 XXX

FUNCTION fixport

BASIC BLOCK entry
%3269:	alloca	 XXX
%3270:	alloca	 XXX
%3271:	getelementptr	 elem_ptr XXX XXX
%3272:	load	 %3271
%3273:	br	 while.cond

BASIC BLOCK while.cond
%3274:	phi	 %3272 %3351
%3275:	icmp	 %3274 XXX
%3276:	br	 %3275 while.end while.body

BASIC BLOCK while.body
%3277:	getelementptr	 %3274 XXX XXX
%3278:	load	 %3277
%3279:	store	 %3278 %3269
%3280:	getelementptr	 %3274 XXX XXX
%3281:	load	 %3280
%3282:	call	 %3269 %3281 linconv
%3283:	load	 %3269
%3284:	getelementptr	 %3274 XXX XXX
%3285:	store	 %3283 %3284
%3286:	getelementptr	 %3274 XXX XXX
%3287:	load	 %3286
%3288:	store	 %3287 %3270
%3289:	getelementptr	 %3274 XXX XXX
%3290:	load	 %3289
%3291:	call	 %3270 %3290 degconv
%3292:	load	 %3270
%3293:	getelementptr	 %3274 XXX XXX
%3294:	store	 %3292 %3293
%3295:	getelementptr	 %3274 XXX XXX
%3296:	load	 %3295
%3297:	store	 %3296 %3270
%3298:	getelementptr	 %3274 XXX XXX
%3299:	load	 %3298
%3300:	call	 %3270 %3299 degconv
%3301:	load	 %3270
%3302:	getelementptr	 %3274 XXX XXX
%3303:	store	 %3301 %3302
%3304:	getelementptr	 %3274 XXX XXX
%3305:	load	 %3304
%3306:	store	 %3305 %3270
%3307:	getelementptr	 %3274 XXX XXX
%3308:	load	 %3307
%3309:	call	 %3270 %3308 degconv
%3310:	load	 %3270
%3311:	getelementptr	 %3274 XXX XXX
%3312:	store	 %3310 %3311
%3313:	getelementptr	 elem_ptr XXX XXX
%3314:	load	 %3313
%3315:	icmp	 %3314 XXX
%3316:	br	 %3315 if.end17 if.then

BASIC BLOCK if.then
%3317:	getelementptr	 %3274 XXX XXX
%3318:	load	 %3317
%3319:	icmp	 %3318 XXX
%3320:	br	 %3319 if.end if.then10

BASIC BLOCK if.then10
%3321:	getelementptr	 elem_ptr XXX XXX
%3322:	load	 %3321
%3323:	getelementptr	 %3274 XXX XXX
%3324:	store	 %3322 %3323
%3325:	getelementptr	 elem_ptr XXX XXX
%3326:	load	 %3325
%3327:	getelementptr	 %3274 XXX XXX
%3328:	store	 %3326 %3327
%3329:	br	 if.end

BASIC BLOCK if.end
%3330:	getelementptr	 %3274 XXX XXX
%3331:	load	 %3330
%3332:	store	 %3331 %3270
%3333:	getelementptr	 %3274 XXX XXX
%3334:	load	 %3333
%3335:	call	 %3270 %3334 degconv
%3336:	load	 %3270
%3337:	getelementptr	 %3274 XXX XXX
%3338:	store	 %3336 %3337
%3339:	br	 if.end17

BASIC BLOCK if.end17
%3340:	getelementptr	 %3274 XXX XXX
%3341:	store	 XXX %3340
%3342:	getelementptr	 %3274 XXX XXX
%3343:	store	 XXX %3342
%3344:	getelementptr	 %3274 XXX XXX
%3345:	store	 XXX %3344
%3346:	getelementptr	 %3274 XXX XXX
%3347:	store	 XXX %3346
%3348:	getelementptr	 %3274 XXX XXX
%3349:	store	 XXX %3348
%3350:	getelementptr	 %3274 XXX XXX
%3351:	load	 %3350
%3352:	br	 while.cond

BASIC BLOCK while.end
%3353:	ret	 XXX

FUNCTION fixselem

BASIC BLOCK entry
%3354:	alloca	 XXX
%3355:	alloca	 XXX
%3356:	alloca	 XXX
%3357:	getelementptr	 elem_ptr XXX XXX
%3358:	load	 %3357
%3359:	store	 %3358 %3354
%3360:	getelementptr	 elem_ptr XXX XXX
%3361:	load	 %3360
%3362:	getelementptr	 elem_ptr XXX XXX
%3363:	load	 %3362
%3364:	store	 %3363 %3355
%3365:	getelementptr	 elem_ptr XXX XXX
%3366:	load	 %3365
%3367:	store	 %3366 %3356
%3368:	getelementptr	 elem_ptr XXX XXX
%3369:	load	 %3368
%3370:	getelementptr	 elem_ptr XXX XXX
%3371:	load	 %3370
%3372:	switch	 %3371 sw.default XXX sw.bb XXX sw.bb4

BASIC BLOCK sw.bb
%3373:	call	 %3355 %3369 mmconv
%3374:	call	 %3356 %3369 mmconv
%3375:	load	 %3355
%3376:	load	 %3355
%3377:	fmul	 %3375 %3376
%3378:	load	 %3356
%3379:	load	 %3356
%3380:	fmul	 %3378 %3379
%3381:	fadd	 %3377 %3380
%3382:	call	 %3381 sqrt
%3383:	store	 %3382 %3354
%3384:	br	 sw.epilog

BASIC BLOCK sw.bb4
%3385:	call	 %3354 %3361 mmconv
%3386:	load	 %3354
%3387:	fmul	 XXX %3386
%3388:	store	 %3387 %3355
%3389:	load	 %3354
%3390:	fmul	 XXX %3389
%3391:	store	 %3390 %3356
%3392:	br	 sw.epilog

BASIC BLOCK sw.default
%3393:	call	 XXX interror
%3394:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3395:	getelementptr	 elem_ptr XXX XXX
%3396:	load	 %3395
%3397:	icmp	 %3396 XXX
%3398:	br	 %3397 if.end13 if.then

BASIC BLOCK if.then
%3399:	call	 XXX malloc
%3400:	bitcast	 %3399
%3401:	icmp	 %3400 XXX
%3402:	br	 %3401 if.end if.then10

BASIC BLOCK if.then10
%3403:	call	 XXX XXX printf
%3404:	call	 XXX interror
%3405:	br	 if.end

BASIC BLOCK if.end
%3406:	getelementptr	 %3400 XXX XXX
%3407:	store	 XXX %3406
%3408:	getelementptr	 %3400 XXX XXX
%3409:	store	 XXX %3408
%3410:	getelementptr	 %3400 XXX XXX
%3411:	store	 XXX %3410
%3412:	getelementptr	 %3400 XXX XXX
%3413:	store	 XXX %3412
%3414:	getelementptr	 %3400 XXX XXX
%3415:	store	 XXX %3414
%3416:	getelementptr	 %3400 XXX XXX
%3417:	store	 XXX %3416
%3418:	getelementptr	 %3400 XXX XXX
%3419:	store	 XXX %3418
%3420:	getelementptr	 %3400 XXX XXX
%3421:	store	 XXX %3420
%3422:	getelementptr	 %3400 XXX XXX
%3423:	store	 XXX %3422
%3424:	getelementptr	 %3400 XXX XXX
%3425:	store	 XXX %3424
%3426:	getelementptr	 %3400 XXX XXX
%3427:	store	 XXX %3426
%3428:	getelementptr	 %3400 XXX XXX
%3429:	store	 XXX %3428
%3430:	getelementptr	 %3400 XXX XXX
%3431:	store	 XXX %3430
%3432:	getelementptr	 elem_ptr XXX XXX
%3433:	store	 XXX %3432
%3434:	getelementptr	 elem_ptr XXX XXX
%3435:	store	 %3400 %3434
%3436:	br	 if.end13

BASIC BLOCK if.end13
%3437:	call	 elem_ptr fixport
%3438:	load	 %3354
%3439:	getelementptr	 elem_ptr XXX XXX
%3440:	store	 %3438 %3439
%3441:	getelementptr	 elem_ptr XXX XXX
%3442:	store	 XXX %3441
%3443:	load	 %3355
%3444:	getelementptr	 elem_ptr XXX XXX
%3445:	store	 %3443 %3444
%3446:	load	 %3356
%3447:	getelementptr	 elem_ptr XXX XXX
%3448:	store	 %3446 %3447
%3449:	getelementptr	 elem_ptr XXX XXX
%3450:	store	 XXX %3449
%3451:	ret	 XXX

FUNCTION mmconv

BASIC BLOCK entry
%3452:	switch	 unit sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb2 XXX sw.bb4

BASIC BLOCK sw.bb
%3453:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3454:	load	 x_ptr
%3455:	fmul	 %3454 XXX
%3456:	store	 %3455 x_ptr
%3457:	br	 sw.epilog

BASIC BLOCK sw.bb2
%3458:	load	 x_ptr
%3459:	fmul	 %3458 XXX
%3460:	store	 %3459 x_ptr
%3461:	br	 sw.epilog

BASIC BLOCK sw.bb4
%3462:	load	 x_ptr
%3463:	fmul	 %3462 XXX
%3464:	store	 %3463 x_ptr
%3465:	br	 sw.epilog

BASIC BLOCK sw.default
%3466:	call	 XXX interror
%3467:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3468:	ret	 XXX

FUNCTION fixsgrel

BASIC BLOCK entry
%3469:	getelementptr	 group_ptr XXX XXX
%3470:	load	 %3469
%3471:	getelementptr	 group_ptr XXX XXX
%3472:	load	 %3471
%3473:	call	 %3472 fixselem
%3474:	call	 %3470 fixsgrid
%3475:	getelementptr	 %3470 XXX XXX
%3476:	store	 XXX %3475
%3477:	getelementptr	 %3470 XXX XXX
%3478:	load	 %3477
%3479:	switch	 %3478 sw.epilog289 XXX sw.bb XXX sw.bb37 XXX sw.bb83 XXX sw.bb108

BASIC BLOCK sw.bb
%3480:	getelementptr	 %3470 XXX XXX
%3481:	load	 %3480
%3482:	fcmp	 %3481 XXX
%3483:	br	 %3482 if.else13 if.then

BASIC BLOCK if.then
%3484:	getelementptr	 group_ptr XXX XXX
%3485:	load	 %3484
%3486:	getelementptr	 %3485 XXX XXX
%3487:	load	 %3486
%3488:	icmp	 %3487 XXX
%3489:	br	 %3488 if.else if.then4

BASIC BLOCK if.then4
%3490:	getelementptr	 %3472 XXX XXX
%3491:	load	 %3490
%3492:	getelementptr	 %3470 XXX XXX
%3493:	store	 %3491 %3492
%3494:	getelementptr	 %3472 XXX XXX
%3495:	load	 %3494
%3496:	getelementptr	 %3470 XXX XXX
%3497:	store	 %3495 %3496
%3498:	br	 if.end

BASIC BLOCK if.else
%3499:	getelementptr	 %3472 XXX XXX
%3500:	load	 %3499
%3501:	getelementptr	 %3472 XXX XXX
%3502:	load	 %3501
%3503:	call	 %3500 %3502 doubmax
%3504:	getelementptr	 %3470 XXX XXX
%3505:	store	 %3503 %3504
%3506:	getelementptr	 %3472 XXX XXX
%3507:	load	 %3506
%3508:	getelementptr	 %3472 XXX XXX
%3509:	load	 %3508
%3510:	call	 %3507 %3509 doubmax
%3511:	getelementptr	 %3470 XXX XXX
%3512:	store	 %3510 %3511
%3513:	br	 if.end

BASIC BLOCK if.end
%3514:	br	 if.end36

BASIC BLOCK if.else13
%3515:	getelementptr	 group_ptr XXX XXX
%3516:	load	 %3515
%3517:	getelementptr	 %3516 XXX XXX
%3518:	load	 %3517
%3519:	icmp	 %3518 XXX
%3520:	br	 %3519 if.else24 if.then17

BASIC BLOCK if.then17
%3521:	getelementptr	 %3470 XXX XXX
%3522:	load	 %3521
%3523:	getelementptr	 %3472 XXX XXX
%3524:	load	 %3523
%3525:	fcmp	 %3522 %3524
%3526:	br	 %3525 if.end23 if.then21

BASIC BLOCK if.then21
%3527:	getelementptr	 group_ptr XXX XXX
%3528:	getelementptr	 %3527 XXX XXX
%3529:	call	 XXX XXX %3528 printf
%3530:	br	 if.end23

BASIC BLOCK if.end23
%3531:	br	 if.end35

BASIC BLOCK if.else24
%3532:	getelementptr	 %3470 XXX XXX
%3533:	load	 %3532
%3534:	getelementptr	 %3472 XXX XXX
%3535:	load	 %3534
%3536:	getelementptr	 %3472 XXX XXX
%3537:	load	 %3536
%3538:	call	 %3535 %3537 doubmax
%3539:	fcmp	 %3533 %3538
%3540:	br	 %3539 if.end34 if.then30

BASIC BLOCK if.then30
%3541:	getelementptr	 group_ptr XXX XXX
%3542:	getelementptr	 %3541 XXX XXX
%3543:	call	 XXX XXX %3542 printf
%3544:	br	 if.end34

BASIC BLOCK if.end34
%3545:	br	 if.end35

BASIC BLOCK if.end35
%3546:	br	 if.end36

BASIC BLOCK if.end36
%3547:	getelementptr	 %3470 XXX XXX
%3548:	store	 XXX %3547
%3549:	br	 sw.epilog289

BASIC BLOCK sw.bb37
%3550:	getelementptr	 %3470 XXX XXX
%3551:	load	 %3550
%3552:	fcmp	 %3551 XXX
%3553:	br	 %3552 if.else55 if.then40

BASIC BLOCK if.then40
%3554:	getelementptr	 group_ptr XXX XXX
%3555:	load	 %3554
%3556:	getelementptr	 %3555 XXX XXX
%3557:	load	 %3556
%3558:	icmp	 %3557 XXX
%3559:	br	 %3558 if.else49 if.then44

BASIC BLOCK if.then44
%3560:	getelementptr	 %3472 XXX XXX
%3561:	load	 %3560
%3562:	getelementptr	 %3470 XXX XXX
%3563:	store	 %3561 %3562
%3564:	getelementptr	 %3472 XXX XXX
%3565:	load	 %3564
%3566:	getelementptr	 %3470 XXX XXX
%3567:	store	 %3565 %3566
%3568:	br	 if.end54

BASIC BLOCK if.else49
%3569:	getelementptr	 %3472 XXX XXX
%3570:	load	 %3569
%3571:	getelementptr	 %3470 XXX XXX
%3572:	store	 %3570 %3571
%3573:	getelementptr	 %3472 XXX XXX
%3574:	load	 %3573
%3575:	getelementptr	 %3470 XXX XXX
%3576:	store	 %3574 %3575
%3577:	br	 if.end54

BASIC BLOCK if.end54
%3578:	br	 if.end81

BASIC BLOCK if.else55
%3579:	getelementptr	 group_ptr XXX XXX
%3580:	load	 %3579
%3581:	getelementptr	 %3580 XXX XXX
%3582:	load	 %3581
%3583:	icmp	 %3582 XXX
%3584:	br	 %3583 if.else68 if.then59

BASIC BLOCK if.then59
%3585:	getelementptr	 %3470 XXX XXX
%3586:	load	 %3585
%3587:	getelementptr	 %3472 XXX XXX
%3588:	load	 %3587
%3589:	fcmp	 %3586 %3588
%3590:	br	 %3589 if.end67 if.then63

BASIC BLOCK if.then63
%3591:	getelementptr	 group_ptr XXX XXX
%3592:	getelementptr	 %3591 XXX XXX
%3593:	call	 XXX XXX %3592 printf
%3594:	br	 if.end67

BASIC BLOCK if.end67
%3595:	br	 if.end80

BASIC BLOCK if.else68
%3596:	getelementptr	 %3470 XXX XXX
%3597:	load	 %3596
%3598:	getelementptr	 %3472 XXX XXX
%3599:	load	 %3598
%3600:	fcmp	 %3597 %3599
%3601:	br	 %3600 lor.lhs.false if.then75

BASIC BLOCK lor.lhs.false
%3602:	getelementptr	 %3470 XXX XXX
%3603:	load	 %3602
%3604:	getelementptr	 %3472 XXX XXX
%3605:	load	 %3604
%3606:	fcmp	 %3603 %3605
%3607:	br	 %3606 if.end79 if.then75

BASIC BLOCK if.then75
%3608:	getelementptr	 group_ptr XXX XXX
%3609:	getelementptr	 %3608 XXX XXX
%3610:	call	 XXX XXX %3609 printf
%3611:	br	 if.end79

BASIC BLOCK if.end79
%3612:	br	 if.end80

BASIC BLOCK if.end80
%3613:	br	 if.end81

BASIC BLOCK if.end81
%3614:	getelementptr	 %3470 XXX XXX
%3615:	store	 XXX %3614
%3616:	br	 sw.epilog289

BASIC BLOCK sw.bb83
%3617:	getelementptr	 %3472 XXX XXX
%3618:	load	 %3617
%3619:	icmp	 %3618 XXX
%3620:	br	 %3619 if.end89 if.then85

BASIC BLOCK if.then85
%3621:	getelementptr	 group_ptr XXX XXX
%3622:	getelementptr	 %3621 XXX XXX
%3623:	call	 XXX XXX %3622 printf
%3624:	call	 XXX exit
%3625:	unreachable	

BASIC BLOCK if.end89
%3626:	getelementptr	 %3470 XXX XXX
%3627:	load	 %3626
%3628:	fcmp	 %3627 XXX
%3629:	br	 %3628 if.else97 if.then92

BASIC BLOCK if.then92
%3630:	getelementptr	 %3472 XXX XXX
%3631:	load	 %3630
%3632:	getelementptr	 %3470 XXX XXX
%3633:	store	 %3631 %3632
%3634:	getelementptr	 %3472 XXX XXX
%3635:	load	 %3634
%3636:	getelementptr	 %3470 XXX XXX
%3637:	store	 %3635 %3636
%3638:	br	 if.end106

BASIC BLOCK if.else97
%3639:	getelementptr	 %3470 XXX XXX
%3640:	load	 %3639
%3641:	getelementptr	 %3472 XXX XXX
%3642:	load	 %3641
%3643:	fcmp	 %3640 %3642
%3644:	br	 %3643 if.end105 if.then101

BASIC BLOCK if.then101
%3645:	getelementptr	 group_ptr XXX XXX
%3646:	getelementptr	 %3645 XXX XXX
%3647:	call	 XXX XXX %3646 printf
%3648:	br	 if.end105

BASIC BLOCK if.end105
%3649:	br	 if.end106

BASIC BLOCK if.end106
%3650:	getelementptr	 %3470 XXX XXX
%3651:	store	 XXX %3650
%3652:	br	 sw.epilog289

BASIC BLOCK sw.bb108
%3653:	getelementptr	 %3470 XXX XXX
%3654:	load	 %3653
%3655:	fcmp	 %3654 XXX
%3656:	br	 %3655 if.else129 if.then110

BASIC BLOCK if.then110
%3657:	getelementptr	 %3470 XXX XXX
%3658:	load	 %3657
%3659:	getelementptr	 %3470 XXX XXX
%3660:	load	 %3659
%3661:	getelementptr	 %3470 XXX XXX
%3662:	load	 %3661
%3663:	getelementptr	 %3470 XXX XXX
%3664:	load	 %3663
%3665:	fmul	 %3658 %3658
%3666:	fmul	 %3660 %3660
%3667:	fadd	 %3665 %3666
%3668:	call	 %3667 sqrt
%3669:	fmul	 %3662 %3662
%3670:	fmul	 %3664 %3664
%3671:	fadd	 %3669 %3670
%3672:	call	 %3671 sqrt
%3673:	fmul	 %3658 %3662
%3674:	fmul	 %3660 %3664
%3675:	fadd	 %3673 %3674
%3676:	fmul	 %3668 %3672
%3677:	fdiv	 %3675 %3676
%3678:	call	 %3677 dacos
%3679:	fdiv	 %3658 %3668
%3680:	call	 %3679 dacos
%3681:	getelementptr	 %3470 XXX XXX
%3682:	store	 %3668 %3681
%3683:	getelementptr	 %3470 XXX XXX
%3684:	store	 %3672 %3683
%3685:	getelementptr	 %3470 XXX XXX
%3686:	store	 %3678 %3685
%3687:	getelementptr	 %3470 XXX XXX
%3688:	store	 %3680 %3687
%3689:	br	 if.end236

BASIC BLOCK if.else129
%3690:	getelementptr	 %3470 XXX XXX
%3691:	load	 %3690
%3692:	fcmp	 %3691 XXX
%3693:	br	 %3692 if.else174 land.lhs.true

BASIC BLOCK land.lhs.true
%3694:	getelementptr	 %3470 XXX XXX
%3695:	load	 %3694
%3696:	fcmp	 %3695 XXX
%3697:	br	 %3696 if.else174 land.lhs.true134

BASIC BLOCK land.lhs.true134
%3698:	getelementptr	 %3470 XXX XXX
%3699:	load	 %3698
%3700:	fcmp	 %3699 XXX
%3701:	br	 %3700 if.else174 if.then137

BASIC BLOCK if.then137
%3702:	getelementptr	 %3472 XXX XXX
%3703:	load	 %3702
%3704:	switch	 %3703 sw.epilog XXX sw.bb139 XXX sw.bb163

BASIC BLOCK sw.bb139
%3705:	getelementptr	 %3472 XXX XXX
%3706:	load	 %3705
%3707:	fdiv	 %3706 XXX
%3708:	fmul	 XXX %3707
%3709:	fcmp	 XXX XXX
%3710:	br	 %3709 if.else151 land.lhs.true144

BASIC BLOCK land.lhs.true144
%3711:	fcmp	 XXX XXX
%3712:	br	 %3711 if.else151 if.then146

BASIC BLOCK if.then146
%3713:	fmul	 XXX %3707
%3714:	fmul	 %3713 XXX
%3715:	call	 XXX dcos
%3716:	fmul	 %3714 %3715
%3717:	br	 if.end159

BASIC BLOCK if.else151
%3718:	fcmp	 XXX XXX
%3719:	br	 %3718 if.else157 land.lhs.true153

BASIC BLOCK land.lhs.true153
%3720:	fcmp	 XXX XXX
%3721:	br	 %3720 if.else157 if.then155

BASIC BLOCK if.then155
%3722:	fmul	 XXX %3707
%3723:	br	 if.end158

BASIC BLOCK if.else157
%3724:	call	 XXX interror
%3725:	br	 if.end158

BASIC BLOCK if.end158
%3726:	phi	 %3722 XXX
%3727:	br	 if.end159

BASIC BLOCK if.end159
%3728:	phi	 %3716 %3726
%3729:	getelementptr	 %3470 XXX XXX
%3730:	store	 %3708 %3729
%3731:	getelementptr	 %3470 XXX XXX
%3732:	store	 %3728 %3731
%3733:	getelementptr	 %3470 XXX XXX
%3734:	store	 XXX %3733
%3735:	br	 sw.epilog

BASIC BLOCK sw.bb163
%3736:	getelementptr	 %3472 XXX XXX
%3737:	load	 %3736
%3738:	getelementptr	 %3472 XXX XXX
%3739:	load	 %3738
%3740:	fmul	 XXX %3739
%3741:	fdiv	 %3740 %3737
%3742:	call	 %3741 datan
%3743:	call	 %3742 dsin
%3744:	fdiv	 %3739 %3743
%3745:	getelementptr	 %3470 XXX XXX
%3746:	store	 %3737 %3745
%3747:	getelementptr	 %3470 XXX XXX
%3748:	store	 %3744 %3747
%3749:	getelementptr	 %3470 XXX XXX
%3750:	store	 %3742 %3749
%3751:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3752:	br	 if.end235

BASIC BLOCK if.else174
%3753:	getelementptr	 %3470 XXX XXX
%3754:	load	 %3753
%3755:	fcmp	 %3754 XXX
%3756:	br	 %3755 if.end234 land.lhs.true177

BASIC BLOCK land.lhs.true177
%3757:	getelementptr	 %3470 XXX XXX
%3758:	load	 %3757
%3759:	fcmp	 %3758 XXX
%3760:	br	 %3759 if.end234 land.lhs.true180

BASIC BLOCK land.lhs.true180
%3761:	getelementptr	 %3470 XXX XXX
%3762:	load	 %3761
%3763:	fcmp	 %3762 XXX
%3764:	br	 %3763 if.end234 if.then183

BASIC BLOCK if.then183
%3765:	getelementptr	 %3472 XXX XXX
%3766:	load	 %3765
%3767:	icmp	 %3766 XXX
%3768:	br	 %3767 if.else213 if.then186

BASIC BLOCK if.then186
%3769:	getelementptr	 %3470 XXX XXX
%3770:	load	 %3769
%3771:	getelementptr	 %3470 XXX XXX
%3772:	load	 %3771
%3773:	getelementptr	 %3472 XXX XXX
%3774:	load	 %3773
%3775:	fdiv	 %3774 XXX
%3776:	fmul	 XXX %3775
%3777:	fcmp	 %3770 %3776
%3778:	br	 %3777 lor.lhs.false193 if.then196

BASIC BLOCK lor.lhs.false193
%3779:	fmul	 XXX %3775
%3780:	fcmp	 %3772 %3779
%3781:	br	 %3780 if.end202 if.then196

BASIC BLOCK if.then196
%3782:	getelementptr	 group_ptr XXX XXX
%3783:	getelementptr	 %3782 XXX XXX
%3784:	call	 XXX XXX %3783 printf
%3785:	fmul	 XXX %3775
%3786:	fmul	 XXX %3775
%3787:	br	 if.end202

BASIC BLOCK if.end202
%3788:	phi	 %3786 %3772
%3789:	phi	 %3785 %3770
%3790:	fmul	 %3788 %3788
%3791:	fmul	 %3789 %3789
%3792:	fadd	 %3790 %3791
%3793:	fmul	 XXX %3775
%3794:	fmul	 %3793 %3775
%3795:	fsub	 %3792 %3794
%3796:	fmul	 XXX %3789
%3797:	fmul	 %3796 %3788
%3798:	fdiv	 %3795 %3797
%3799:	call	 %3798 dacos
%3800:	getelementptr	 %3470 XXX XXX
%3801:	store	 %3799 %3800
%3802:	br	 if.end233

BASIC BLOCK if.else213
%3803:	getelementptr	 %3472 XXX XXX
%3804:	load	 %3803
%3805:	icmp	 %3804 XXX
%3806:	br	 %3805 if.end232 if.then216

BASIC BLOCK if.then216
%3807:	getelementptr	 %3470 XXX XXX
%3808:	load	 %3807
%3809:	getelementptr	 %3470 XXX XXX
%3810:	load	 %3809
%3811:	getelementptr	 %3472 XXX XXX
%3812:	load	 %3811
%3813:	getelementptr	 %3472 XXX XXX
%3814:	load	 %3813
%3815:	fcmp	 %3810 %3814
%3816:	br	 %3815 lor.lhs.false222 if.then224

BASIC BLOCK lor.lhs.false222
%3817:	fcmp	 %3808 %3812
%3818:	br	 %3817 if.end228 if.then224

BASIC BLOCK if.then224
%3819:	getelementptr	 group_ptr XXX XXX
%3820:	getelementptr	 %3819 XXX XXX
%3821:	call	 XXX XXX %3820 printf
%3822:	br	 if.end228

BASIC BLOCK if.end228
%3823:	phi	 %3814 %3810
%3824:	fdiv	 %3814 %3823
%3825:	call	 %3824 dasin
%3826:	getelementptr	 %3470 XXX XXX
%3827:	store	 %3825 %3826
%3828:	br	 if.end232

BASIC BLOCK if.end232
%3829:	br	 if.end233

BASIC BLOCK if.end233
%3830:	br	 if.end234

BASIC BLOCK if.end234
%3831:	br	 if.end235

BASIC BLOCK if.end235
%3832:	br	 if.end236

BASIC BLOCK if.end236
%3833:	getelementptr	 %3472 XXX XXX
%3834:	load	 %3833
%3835:	switch	 %3834 sw.epilog288 XXX sw.bb238 XXX sw.bb262

BASIC BLOCK sw.bb238
%3836:	getelementptr	 %3470 XXX XXX
%3837:	load	 %3836
%3838:	getelementptr	 %3470 XXX XXX
%3839:	load	 %3838
%3840:	getelementptr	 %3472 XXX XXX
%3841:	load	 %3840
%3842:	fdiv	 %3841 XXX
%3843:	fmul	 XXX %3842
%3844:	fcmp	 %3837 %3843
%3845:	br	 %3844 lor.lhs.false245 if.then248

BASIC BLOCK lor.lhs.false245
%3846:	fmul	 XXX %3842
%3847:	fcmp	 %3839 %3846
%3848:	br	 %3847 if.end252 if.then248

BASIC BLOCK if.then248
%3849:	getelementptr	 group_ptr XXX XXX
%3850:	getelementptr	 %3849 XXX XXX
%3851:	call	 XXX XXX %3850 printf
%3852:	br	 if.end252

BASIC BLOCK if.end252
%3853:	getelementptr	 %3470 XXX XXX
%3854:	load	 %3853
%3855:	fcmp	 %3854 XXX
%3856:	br	 %3855 lor.lhs.false255 if.then258

BASIC BLOCK lor.lhs.false255
%3857:	getelementptr	 %3470 XXX XXX
%3858:	load	 %3857
%3859:	fcmp	 %3858 XXX
%3860:	br	 %3859 if.end261 if.then258

BASIC BLOCK if.then258
%3861:	getelementptr	 %3470 XXX XXX
%3862:	load	 %3861
%3863:	call	 XXX XXX %3862 printf
%3864:	call	 XXX exit
%3865:	unreachable	

BASIC BLOCK if.end261
%3866:	br	 sw.epilog288

BASIC BLOCK sw.bb262
%3867:	getelementptr	 %3470 XXX XXX
%3868:	load	 %3867
%3869:	getelementptr	 %3470 XXX XXX
%3870:	load	 %3869
%3871:	getelementptr	 %3472 XXX XXX
%3872:	load	 %3871
%3873:	getelementptr	 %3472 XXX XXX
%3874:	load	 %3873
%3875:	fcmp	 %3870 %3874
%3876:	br	 %3875 lor.lhs.false268 if.then270

BASIC BLOCK lor.lhs.false268
%3877:	fcmp	 %3868 %3872
%3878:	br	 %3877 if.end274 if.then270

BASIC BLOCK if.then270
%3879:	getelementptr	 group_ptr XXX XXX
%3880:	getelementptr	 %3879 XXX XXX
%3881:	call	 XXX XXX %3880 printf
%3882:	br	 if.end274

BASIC BLOCK if.end274
%3883:	getelementptr	 %3470 XXX XXX
%3884:	load	 %3883
%3885:	getelementptr	 %3472 XXX XXX
%3886:	load	 %3885
%3887:	getelementptr	 %3472 XXX XXX
%3888:	load	 %3887
%3889:	fdiv	 %3886 %3888
%3890:	call	 %3889 datan
%3891:	fcmp	 %3884 %3890
%3892:	br	 %3891 lor.lhs.false281 if.then284

BASIC BLOCK lor.lhs.false281
%3893:	getelementptr	 %3470 XXX XXX
%3894:	load	 %3893
%3895:	fcmp	 %3894 XXX
%3896:	br	 %3895 if.end287 if.then284

BASIC BLOCK if.then284
%3897:	getelementptr	 %3470 XXX XXX
%3898:	load	 %3897
%3899:	call	 XXX XXX %3898 printf
%3900:	call	 XXX exit
%3901:	unreachable	

BASIC BLOCK if.end287
%3902:	br	 sw.epilog288

BASIC BLOCK sw.epilog288
%3903:	br	 sw.epilog289

BASIC BLOCK sw.epilog289
%3904:	getelementptr	 group_ptr XXX XXX
%3905:	getelementptr	 %3904 XXX XXX
%3906:	call	 XXX %3905 printf
%3907:	getelementptr	 %3470 XXX XXX
%3908:	load	 %3907
%3909:	getelementptr	 %3470 XXX XXX
%3910:	load	 %3909
%3911:	call	 XXX %3908 %3910 printf
%3912:	getelementptr	 %3470 XXX XXX
%3913:	load	 %3912
%3914:	call	 XXX %3913 printf
%3915:	getelementptr	 %3470 XXX XXX
%3916:	load	 %3915
%3917:	call	 XXX %3916 printf
%3918:	ret	 XXX

FUNCTION fixsgrid

BASIC BLOCK entry
%3919:	alloca	 XXX
%3920:	alloca	 XXX
%3921:	alloca	 XXX
%3922:	alloca	 XXX
%3923:	alloca	 XXX
%3924:	alloca	 XXX
%3925:	alloca	 XXX
%3926:	getelementptr	 grid XXX XXX
%3927:	load	 %3926
%3928:	store	 %3927 %3919
%3929:	getelementptr	 grid XXX XXX
%3930:	load	 %3929
%3931:	getelementptr	 grid XXX XXX
%3932:	load	 %3931
%3933:	store	 %3932 %3920
%3934:	getelementptr	 grid XXX XXX
%3935:	load	 %3934
%3936:	store	 %3935 %3921
%3937:	getelementptr	 grid XXX XXX
%3938:	load	 %3937
%3939:	getelementptr	 grid XXX XXX
%3940:	load	 %3939
%3941:	store	 %3940 %3922
%3942:	getelementptr	 grid XXX XXX
%3943:	load	 %3942
%3944:	store	 %3943 %3923
%3945:	getelementptr	 grid XXX XXX
%3946:	load	 %3945
%3947:	store	 %3946 %3924
%3948:	getelementptr	 grid XXX XXX
%3949:	load	 %3948
%3950:	store	 %3949 %3925
%3951:	getelementptr	 grid XXX XXX
%3952:	load	 %3951
%3953:	getelementptr	 grid XXX XXX
%3954:	getelementptr	 grid XXX XXX
%3955:	load	 %3954
%3956:	switch	 %3955 sw.epilog XXX sw.bb XXX sw.bb1 XXX sw.bb2 XXX sw.bb9 XXX sw.bb15

BASIC BLOCK sw.bb
%3957:	call	 XXX interror
%3958:	br	 sw.epilog

BASIC BLOCK sw.bb1
%3959:	load	 %3920
%3960:	fcmp	 %3959 XXX
%3961:	br	 %3960 if.else if.then

BASIC BLOCK if.then
%3962:	call	 %3920 %3938 mmconv
%3963:	load	 %3920
%3964:	store	 %3963 %3921
%3965:	br	 if.end

BASIC BLOCK if.else
%3966:	store	 XXX %3921
%3967:	br	 if.end

BASIC BLOCK if.end
%3968:	store	 XXX %3919
%3969:	br	 sw.epilog

BASIC BLOCK sw.bb2
%3970:	load	 %3920
%3971:	fcmp	 %3970 XXX
%3972:	br	 %3971 if.else7 if.then4

BASIC BLOCK if.then4
%3973:	call	 %3920 %3938 mmconv
%3974:	call	 %3921 %3938 mmconv
%3975:	br	 if.end8

BASIC BLOCK if.else7
%3976:	store	 XXX %3921
%3977:	br	 if.end8

BASIC BLOCK if.end8
%3978:	store	 XXX %3919
%3979:	br	 sw.epilog

BASIC BLOCK sw.bb9
%3980:	load	 %3920
%3981:	fcmp	 %3980 XXX
%3982:	br	 %3981 if.else13 if.then11

BASIC BLOCK if.then11
%3983:	call	 %3920 %3938 mmconv
%3984:	load	 %3920
%3985:	store	 %3984 %3921
%3986:	br	 if.end14

BASIC BLOCK if.else13
%3987:	store	 XXX %3921
%3988:	br	 if.end14

BASIC BLOCK if.end14
%3989:	store	 XXX %3919
%3990:	br	 sw.epilog

BASIC BLOCK sw.bb15
%3991:	load	 %3919
%3992:	fcmp	 %3991 XXX
%3993:	br	 %3992 if.end19 if.then17

BASIC BLOCK if.then17
%3994:	call	 %3919 %3930 degconv
%3995:	store	 XXX %3922
%3996:	store	 XXX %3923
%3997:	store	 XXX %3924
%3998:	store	 XXX %3925
%3999:	br	 if.end19

BASIC BLOCK if.end19
%4000:	load	 %3920
%4001:	fcmp	 %4000 XXX
%4002:	br	 %4001 if.end24 if.then21

BASIC BLOCK if.then21
%4003:	call	 %3920 %3938 mmconv
%4004:	call	 %3921 %3938 mmconv
%4005:	store	 XXX %3922
%4006:	store	 XXX %3923
%4007:	store	 XXX %3924
%4008:	store	 XXX %3925
%4009:	br	 if.end24

BASIC BLOCK if.end24
%4010:	load	 %3922
%4011:	fcmp	 %4010 XXX
%4012:	br	 %4011 if.end31 if.then26

BASIC BLOCK if.then26
%4013:	call	 %3922 %3952 mmconv
%4014:	call	 %3923 %3952 mmconv
%4015:	call	 %3924 %3952 mmconv
%4016:	call	 %3925 %3952 mmconv
%4017:	store	 XXX %3920
%4018:	store	 XXX %3921
%4019:	store	 XXX %3919
%4020:	br	 if.end31

BASIC BLOCK if.end31
%4021:	br	 sw.epilog

BASIC BLOCK sw.epilog
%4022:	load	 %3919
%4023:	getelementptr	 grid XXX XXX
%4024:	store	 %4022 %4023
%4025:	getelementptr	 grid XXX XXX
%4026:	store	 XXX %4025
%4027:	load	 %3920
%4028:	getelementptr	 grid XXX XXX
%4029:	store	 %4027 %4028
%4030:	load	 %3921
%4031:	getelementptr	 grid XXX XXX
%4032:	store	 %4030 %4031
%4033:	getelementptr	 grid XXX XXX
%4034:	store	 XXX %4033
%4035:	load	 %3922
%4036:	getelementptr	 grid XXX XXX
%4037:	store	 %4035 %4036
%4038:	load	 %3923
%4039:	getelementptr	 grid XXX XXX
%4040:	store	 %4038 %4039
%4041:	load	 %3924
%4042:	getelementptr	 grid XXX XXX
%4043:	store	 %4041 %4042
%4044:	load	 %3925
%4045:	getelementptr	 grid XXX XXX
%4046:	store	 %4044 %4045
%4047:	getelementptr	 grid XXX XXX
%4048:	store	 XXX %4047
%4049:	getelementptr	 grid XXX XXX
%4050:	store	 XXX %4049
%4051:	ret	 XXX

FUNCTION floatsup

BASIC BLOCK entry
%4052:	call	 XXX printf
%4053:	call	 XXX XXX printf
%4054:	call	 XXX printf
%4055:	ret	

FUNCTION gainspec

BASIC BLOCK entry
%4056:	alloca	 XXX
%4057:	store	 p1 %4056
%4058:	call	 XXX %4056 GetKeyword
%4059:	icmp	 %4058 XXX
%4060:	br	 %4059 if.end if.then

BASIC BLOCK if.then
%4061:	br	 return

BASIC BLOCK if.end
%4062:	load	 %4056
%4063:	call	 %4062 %4056 gain_ptr gain_unit_ptr gainval
%4064:	icmp	 %4063 XXX
%4065:	br	 %4064 if.end4 if.then3

BASIC BLOCK if.then3
%4066:	load	 %4056
%4067:	call	 %4066 XXX XXX parserro
%4068:	br	 return

BASIC BLOCK if.end4
%4069:	load	 %4056
%4070:	store	 %4069 pp2
%4071:	br	 return

BASIC BLOCK return
%4072:	phi	 XXX XXX XXX
%4073:	ret	 %4072

FUNCTION gainval

BASIC BLOCK entry
%4074:	alloca	 XXX
%4075:	store	 p1 %4074
%4076:	call	 gain_ptr %4074 GetReal
%4077:	icmp	 %4076 XXX
%4078:	br	 %4077 if.end if.then

BASIC BLOCK if.then
%4079:	br	 return

BASIC BLOCK if.end
%4080:	load	 %4074
%4081:	call	 %4080 %4074 gain_unit_ptr gainunit
%4082:	icmp	 %4081 XXX
%4083:	br	 %4082 if.end4 if.then3

BASIC BLOCK if.then3
%4084:	store	 XXX gain_unit_ptr
%4085:	br	 if.end4

BASIC BLOCK if.end4
%4086:	load	 %4074
%4087:	store	 %4086 pp2
%4088:	br	 return

BASIC BLOCK return
%4089:	phi	 XXX XXX
%4090:	ret	 %4089

FUNCTION gainunit

BASIC BLOCK entry
%4091:	alloca	 XXX
%4092:	store	 p1 %4091
%4093:	store	 XXX gain_unit_ptr
%4094:	call	 XXX %4091 GetKeyword
%4095:	icmp	 %4094 XXX
%4096:	br	 %4095 if.else if.then

BASIC BLOCK if.then
%4097:	store	 XXX gain_unit_ptr
%4098:	br	 if.end5

BASIC BLOCK if.else
%4099:	call	 XXX %4091 GetKeyword
%4100:	icmp	 %4099 XXX
%4101:	br	 %4100 if.else4 if.then3

BASIC BLOCK if.then3
%4102:	store	 XXX gain_unit_ptr
%4103:	br	 if.end

BASIC BLOCK if.else4
%4104:	br	 return

BASIC BLOCK if.end
%4105:	br	 if.end5

BASIC BLOCK if.end5
%4106:	load	 %4091
%4107:	store	 %4106 pp2
%4108:	br	 return

BASIC BLOCK return
%4109:	phi	 XXX XXX
%4110:	ret	 %4109

FUNCTION gaussel

BASIC BLOCK entry
%4111:	alloca	 XXX
%4112:	store	 p1 %4111
%4113:	call	 XXX %4111 GetKeyword
%4114:	icmp	 %4113 XXX
%4115:	br	 %4114 if.end if.then

BASIC BLOCK if.then
%4116:	br	 return

BASIC BLOCK if.end
%4117:	call	 XXX %4111 GetKeyword
%4118:	call	 anglee_ptr %4111 GetReal
%4119:	icmp	 %4118 XXX
%4120:	br	 %4119 if.end6 if.then4

BASIC BLOCK if.then4
%4121:	load	 %4111
%4122:	call	 %4121 XXX XXX parserro
%4123:	call	 XXX XXX printf
%4124:	br	 return

BASIC BLOCK if.end6
%4125:	call	 XXX %4111 GetKeyword
%4126:	call	 angleh_ptr %4111 GetReal
%4127:	icmp	 %4126 XXX
%4128:	br	 %4127 if.end12 if.then10

BASIC BLOCK if.then10
%4129:	load	 %4111
%4130:	call	 %4129 XXX XXX parserro
%4131:	call	 XXX XXX printf
%4132:	br	 return

BASIC BLOCK if.end12
%4133:	load	 %4111
%4134:	call	 %4133 %4111 angle_unit_ptr angunit
%4135:	icmp	 %4134 XXX
%4136:	br	 %4135 if.end16 if.then15

BASIC BLOCK if.then15
%4137:	store	 XXX angle_unit_ptr
%4138:	br	 if.end16

BASIC BLOCK if.end16
%4139:	call	 XXX %4111 GetKeyword
%4140:	call	 tapere_ptr %4111 GetReal
%4141:	icmp	 %4140 XXX
%4142:	br	 %4141 if.end22 if.then20

BASIC BLOCK if.then20
%4143:	load	 %4111
%4144:	call	 %4143 XXX XXX parserro
%4145:	call	 XXX XXX printf
%4146:	br	 return

BASIC BLOCK if.end22
%4147:	call	 XXX %4111 GetKeyword
%4148:	call	 taperh_ptr %4111 GetReal
%4149:	icmp	 %4148 XXX
%4150:	br	 %4149 if.end28 if.then26

BASIC BLOCK if.then26
%4151:	load	 %4111
%4152:	call	 %4151 XXX XXX parserro
%4153:	call	 XXX XXX printf
%4154:	br	 return

BASIC BLOCK if.end28
%4155:	call	 %4111 taper_unit_ptr ampunit
%4156:	icmp	 %4155 XXX
%4157:	br	 %4156 if.end32 if.then31

BASIC BLOCK if.then31
%4158:	store	 XXX taper_unit_ptr
%4159:	br	 if.end32

BASIC BLOCK if.end32
%4160:	load	 %4111
%4161:	store	 %4160 pp2
%4162:	br	 return

BASIC BLOCK return
%4163:	phi	 XXX XXX XXX XXX XXX XXX
%4164:	ret	 %4163

FUNCTION geomspec

BASIC BLOCK entry
%4165:	alloca	 XXX
%4166:	store	 p1 %4165
%4167:	call	 XXX %4165 GetKeyword
%4168:	icmp	 %4167 XXX
%4169:	br	 %4168 if.end if.then

BASIC BLOCK if.then
%4170:	load	 %4165
%4171:	call	 %4170 XXX XXX parserro
%4172:	br	 return

BASIC BLOCK if.end
%4173:	store	 XXX geometry_ptr
%4174:	load	 %4165
%4175:	call	 %4174 %4165 pdim_ptr qdim_ptr pqdim_unit_ptr recspec
%4176:	icmp	 %4175 XXX
%4177:	br	 %4176 if.end4 if.then3

BASIC BLOCK if.then3
%4178:	load	 %4165
%4179:	store	 %4178 pp2
%4180:	br	 return

BASIC BLOCK if.end4
%4181:	icmp	 %4175 XXX
%4182:	br	 %4181 if.end8 if.then6

BASIC BLOCK if.then6
%4183:	call	 XXX XXX printf
%4184:	br	 return

BASIC BLOCK if.end8
%4185:	store	 XXX geometry_ptr
%4186:	load	 %4165
%4187:	call	 %4186 %4165 radius_ptr radius_unit_ptr circspec
%4188:	icmp	 %4187 XXX
%4189:	br	 %4188 if.end12 if.then11

BASIC BLOCK if.then11
%4190:	load	 %4165
%4191:	store	 %4190 pp2
%4192:	br	 return

BASIC BLOCK if.end12
%4193:	icmp	 %4187 XXX
%4194:	br	 %4193 if.end16 if.then14

BASIC BLOCK if.then14
%4195:	call	 XXX XXX printf
%4196:	br	 return

BASIC BLOCK if.end16
%4197:	br	 return

BASIC BLOCK return
%4198:	phi	 XXX XXX XXX XXX XXX XXX
%4199:	ret	 %4198

FUNCTION recspec

BASIC BLOCK entry
%4200:	alloca	 XXX
%4201:	store	 p1 %4200
%4202:	call	 XXX %4200 GetKeyword
%4203:	icmp	 %4202 XXX
%4204:	br	 %4203 if.end if.then

BASIC BLOCK if.then
%4205:	br	 return

BASIC BLOCK if.end
%4206:	call	 XXX %4200 GetKeyword
%4207:	load	 %4200
%4208:	call	 %4207 %4200 pdim_ptr Get1Real
%4209:	icmp	 %4208 XXX
%4210:	br	 %4209 if.end5 if.then4

BASIC BLOCK if.then4
%4211:	load	 %4200
%4212:	call	 %4211 %4208 XXX parserro
%4213:	br	 return

BASIC BLOCK if.end5
%4214:	call	 XXX %4200 GetKeyword
%4215:	load	 %4200
%4216:	call	 %4215 %4200 qdim_ptr Get1Real
%4217:	icmp	 %4216 XXX
%4218:	br	 %4217 if.end10 if.then9

BASIC BLOCK if.then9
%4219:	load	 %4200
%4220:	call	 %4219 %4216 XXX parserro
%4221:	br	 return

BASIC BLOCK if.end10
%4222:	call	 %4200 pqdim_unit_ptr lenunit
%4223:	icmp	 %4222 XXX
%4224:	br	 %4223 if.end14 if.then13

BASIC BLOCK if.then13
%4225:	store	 XXX pqdim_unit_ptr
%4226:	br	 if.end14

BASIC BLOCK if.end14
%4227:	load	 %4200
%4228:	store	 %4227 pp2
%4229:	br	 return

BASIC BLOCK return
%4230:	phi	 XXX XXX XXX XXX
%4231:	ret	 %4230

FUNCTION GetInt

BASIC BLOCK entry
%4232:	alloca	 XXX
%4233:	alloca	 XXX
%4234:	store	 p1 %4232
%4235:	call	 %4232 TapeGet
%4236:	sext	 %4235
%4237:	sext	 %4236
%4238:	call	 __ctype_b_loc
%4239:	load	 %4238
%4240:	getelementptr	 %4239 %4237
%4241:	load	 %4240
%4242:	zext	 %4241
%4243:	and	 %4242 XXX
%4244:	icmp	 %4243 XXX
%4245:	br	 %4244 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%4246:	sext	 %4235
%4247:	icmp	 %4246 XXX
%4248:	br	 %4247 if.end land.lhs.true7

BASIC BLOCK land.lhs.true7
%4249:	sext	 %4235
%4250:	icmp	 %4249 XXX
%4251:	br	 %4250 if.end if.then

BASIC BLOCK if.then
%4252:	br	 return

BASIC BLOCK if.end
%4253:	sext	 XXX
%4254:	getelementptr	 %4233 XXX %4253
%4255:	store	 %4235 %4254
%4256:	add	 XXX XXX
%4257:	call	 %4232 TapeGet
%4258:	br	 while.cond

BASIC BLOCK while.cond
%4259:	phi	 %4256 %4282
%4260:	phi	 %4257 %4283
%4261:	sext	 %4260
%4262:	sext	 %4261
%4263:	call	 __ctype_b_loc
%4264:	load	 %4263
%4265:	getelementptr	 %4264 %4262
%4266:	load	 %4265
%4267:	zext	 %4266
%4268:	and	 %4267 XXX
%4269:	icmp	 %4268 XXX
%4270:	br	 %4269 land.end land.rhs

BASIC BLOCK land.rhs
%4271:	load	 %4232
%4272:	icmp	 %4271 XXX
%4273:	br	 land.end

BASIC BLOCK land.end
%4274:	phi	 XXX %4272
%4275:	br	 %4274 while.end while.body

BASIC BLOCK while.body
%4276:	icmp	 %4259 XXX
%4277:	br	 %4276 if.end27 if.then24

BASIC BLOCK if.then24
%4278:	sext	 %4259
%4279:	getelementptr	 %4233 XXX %4278
%4280:	store	 %4260 %4279
%4281:	br	 if.end27

BASIC BLOCK if.end27
%4282:	add	 %4259 XXX
%4283:	call	 %4232 TapeGet
%4284:	br	 while.cond

BASIC BLOCK while.end
%4285:	icmp	 %4259 XXX
%4286:	br	 %4285 if.else if.then32

BASIC BLOCK if.then32
%4287:	getelementptr	 %4233 XXX XXX
%4288:	store	 XXX %4287
%4289:	getelementptr	 %4233 XXX XXX
%4290:	call	 p1 XXX %4289 parserro
%4291:	br	 return

BASIC BLOCK if.else
%4292:	sext	 %4259
%4293:	getelementptr	 %4233 XXX %4292
%4294:	store	 XXX %4293
%4295:	br	 if.end36

BASIC BLOCK if.end36
%4296:	getelementptr	 %4233 XXX XXX
%4297:	call	 %4296 atoi
%4298:	store	 %4297 intero
%4299:	load	 %4232
%4300:	store	 %4299 pp2
%4301:	br	 return

BASIC BLOCK return
%4302:	phi	 XXX XXX XXX
%4303:	ret	 %4302

FUNCTION TapeGet

BASIC BLOCK entry
%4304:	load	 tp
%4305:	icmp	 %4304 XXX
%4306:	br	 %4305 if.else if.then

BASIC BLOCK if.then
%4307:	br	 if.end

BASIC BLOCK if.else
%4308:	load	 tp
%4309:	getelementptr	 %4308 XXX XXX
%4310:	load	 %4309
%4311:	load	 tp
%4312:	getelementptr	 %4311 XXX XXX
%4313:	load	 %4312
%4314:	store	 %4313 tp
%4315:	br	 if.end

BASIC BLOCK if.end
%4316:	phi	 XXX %4310
%4317:	ret	 %4316

FUNCTION GetNatur

BASIC BLOCK entry
%4318:	alloca	 XXX
%4319:	alloca	 XXX
%4320:	store	 p1 %4318
%4321:	load	 %4318
%4322:	call	 %4321 %4318 %4319 GetInt
%4323:	icmp	 %4322 XXX
%4324:	br	 %4323 if.end if.then

BASIC BLOCK if.then
%4325:	br	 return

BASIC BLOCK if.end
%4326:	load	 %4319
%4327:	icmp	 %4326 XXX
%4328:	br	 %4327 if.end3 if.then2

BASIC BLOCK if.then2
%4329:	br	 return

BASIC BLOCK if.end3
%4330:	load	 %4319
%4331:	icmp	 %4330 XXX
%4332:	br	 %4331 if.end6 if.then5

BASIC BLOCK if.then5
%4333:	br	 return

BASIC BLOCK if.end6
%4334:	load	 %4319
%4335:	store	 %4334 natur_ptr
%4336:	load	 %4318
%4337:	store	 %4336 pp2
%4338:	br	 return

BASIC BLOCK return
%4339:	phi	 XXX XXX XXX XXX
%4340:	ret	 %4339

FUNCTION isletter

BASIC BLOCK entry
%4341:	sext	 ch
%4342:	sext	 %4341
%4343:	call	 __ctype_b_loc
%4344:	load	 %4343
%4345:	getelementptr	 %4344 %4342
%4346:	load	 %4345
%4347:	zext	 %4346
%4348:	and	 %4347 XXX
%4349:	icmp	 %4348 XXX
%4350:	br	 %4349 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4351:	sext	 ch
%4352:	icmp	 %4351 XXX
%4353:	br	 %4352 lor.lhs.false4 if.then

BASIC BLOCK lor.lhs.false4
%4354:	sext	 ch
%4355:	icmp	 %4354 XXX
%4356:	br	 %4355 if.else if.then

BASIC BLOCK if.then
%4357:	br	 return

BASIC BLOCK if.else
%4358:	br	 return

BASIC BLOCK return
%4359:	phi	 XXX XXX
%4360:	ret	 %4359

FUNCTION InKWords

BASIC BLOCK entry
%4361:	call	 WORD strlen
%4362:	icmp	 %4361 XXX
%4363:	br	 %4362 if.end if.then

BASIC BLOCK if.then
%4364:	call	 XXX printf
%4365:	call	 XXX exit
%4366:	unreachable	

BASIC BLOCK if.end
%4367:	br	 for.cond

BASIC BLOCK for.cond
%4368:	phi	 XXX %4379
%4369:	icmp	 %4368 XXX
%4370:	br	 %4369 for.end for.body

BASIC BLOCK for.body
%4371:	sext	 %4368
%4372:	getelementptr	 Keywords XXX %4371
%4373:	getelementptr	 %4372 XXX XXX
%4374:	call	 WORD %4373 strcmp
%4375:	icmp	 %4374 XXX
%4376:	br	 %4375 if.end6 if.then5

BASIC BLOCK if.then5
%4377:	br	 return

BASIC BLOCK if.end6
%4378:	br	 for.inc

BASIC BLOCK for.inc
%4379:	add	 %4368 XXX
%4380:	br	 for.cond

BASIC BLOCK for.end
%4381:	br	 return

BASIC BLOCK return
%4382:	phi	 XXX XXX
%4383:	ret	 %4382

FUNCTION kwdsinit

BASIC BLOCK entry
%4384:	br	 for.cond

BASIC BLOCK for.cond
%4385:	phi	 XXX %4394
%4386:	sext	 %4385
%4387:	icmp	 %4386 XXX
%4388:	br	 %4387 for.end for.body

BASIC BLOCK for.body
%4389:	sext	 %4385
%4390:	getelementptr	 Keywords XXX %4389
%4391:	getelementptr	 %4390 XXX XXX
%4392:	store	 XXX %4391
%4393:	br	 for.inc

BASIC BLOCK for.inc
%4394:	add	 %4385 XXX
%4395:	br	 for.cond

BASIC BLOCK for.end
%4396:	call	 XXX XXX strcpy
%4397:	call	 XXX XXX strcpy
%4398:	call	 XXX XXX strcpy
%4399:	call	 XXX XXX strcpy
%4400:	call	 XXX XXX strcpy
%4401:	call	 XXX XXX strcpy
%4402:	call	 XXX XXX strcpy
%4403:	call	 XXX XXX strcpy
%4404:	call	 XXX XXX strcpy
%4405:	call	 XXX XXX strcpy
%4406:	call	 XXX XXX strcpy
%4407:	call	 XXX XXX strcpy
%4408:	call	 XXX XXX strcpy
%4409:	call	 XXX XXX strcpy
%4410:	call	 XXX XXX strcpy
%4411:	call	 XXX XXX strcpy
%4412:	call	 XXX XXX strcpy
%4413:	call	 XXX XXX strcpy
%4414:	call	 XXX XXX strcpy
%4415:	call	 XXX XXX strcpy
%4416:	call	 XXX XXX strcpy
%4417:	call	 XXX XXX strcpy
%4418:	call	 XXX XXX strcpy
%4419:	call	 XXX XXX strcpy
%4420:	call	 XXX XXX strcpy
%4421:	call	 XXX XXX strcpy
%4422:	call	 XXX XXX strcpy
%4423:	call	 XXX XXX strcpy
%4424:	call	 XXX XXX strcpy
%4425:	call	 XXX XXX strcpy
%4426:	call	 XXX XXX strcpy
%4427:	call	 XXX XXX strcpy
%4428:	call	 XXX XXX strcpy
%4429:	call	 XXX XXX strcpy
%4430:	call	 XXX XXX strcpy
%4431:	call	 XXX XXX strcpy
%4432:	call	 XXX XXX strcpy
%4433:	call	 XXX XXX strcpy
%4434:	call	 XXX XXX strcpy
%4435:	call	 XXX XXX strcpy
%4436:	call	 XXX XXX strcpy
%4437:	call	 XXX XXX strcpy
%4438:	call	 XXX XXX strcpy
%4439:	call	 XXX XXX strcpy
%4440:	call	 XXX XXX strcpy
%4441:	call	 XXX XXX strcpy
%4442:	call	 XXX XXX strcpy
%4443:	call	 XXX XXX strcpy
%4444:	call	 XXX XXX strcpy
%4445:	call	 XXX XXX strcpy
%4446:	call	 XXX XXX strcpy
%4447:	call	 XXX XXX strcpy
%4448:	call	 XXX XXX strcpy
%4449:	call	 XXX XXX strcpy
%4450:	call	 XXX XXX strcpy
%4451:	call	 XXX XXX strcpy
%4452:	call	 XXX XXX strcpy
%4453:	call	 XXX XXX strcpy
%4454:	call	 XXX XXX strcpy
%4455:	call	 XXX XXX strcpy
%4456:	call	 XXX XXX strcpy
%4457:	call	 XXX XXX strcpy
%4458:	call	 XXX XXX strcpy
%4459:	call	 XXX XXX strcpy
%4460:	call	 XXX XXX strcpy
%4461:	call	 XXX XXX strcpy
%4462:	call	 XXX XXX strcpy
%4463:	call	 XXX XXX strcpy
%4464:	call	 XXX XXX strcpy
%4465:	call	 XXX XXX strcpy
%4466:	call	 XXX XXX strcpy
%4467:	call	 XXX XXX strcpy
%4468:	call	 XXX XXX strcpy
%4469:	call	 XXX XXX strcpy
%4470:	call	 XXX XXX strcpy
%4471:	call	 XXX XXX strcpy
%4472:	call	 XXX XXX strcpy
%4473:	call	 XXX XXX strcpy
%4474:	call	 XXX XXX strcpy
%4475:	call	 XXX XXX strcpy
%4476:	call	 XXX XXX strcpy
%4477:	call	 XXX XXX strcpy
%4478:	call	 XXX XXX strcpy
%4479:	call	 XXX XXX strcpy
%4480:	call	 XXX XXX strcpy
%4481:	call	 XXX XXX strcpy
%4482:	call	 XXX XXX strcpy
%4483:	call	 XXX XXX strcpy
%4484:	call	 XXX XXX strcpy
%4485:	call	 XXX XXX strcpy
%4486:	call	 XXX XXX strcpy
%4487:	call	 XXX XXX strcpy
%4488:	call	 XXX XXX strcpy
%4489:	call	 XXX XXX strcpy
%4490:	call	 XXX XXX strcpy
%4491:	call	 XXX XXX strcpy
%4492:	call	 XXX XXX strcpy
%4493:	call	 XXX XXX strcpy
%4494:	call	 XXX XXX strcpy
%4495:	call	 XXX XXX strcpy
%4496:	call	 XXX XXX strcpy
%4497:	call	 XXX XXX strcpy
%4498:	call	 XXX XXX strcpy
%4499:	call	 XXX XXX strcpy
%4500:	call	 XXX XXX strcpy
%4501:	call	 XXX XXX strcpy
%4502:	call	 XXX XXX strcpy
%4503:	call	 XXX XXX strcpy
%4504:	call	 XXX XXX strcpy
%4505:	call	 XXX XXX strcpy
%4506:	call	 XXX XXX strcpy
%4507:	call	 XXX XXX strcpy
%4508:	call	 XXX XXX strcpy
%4509:	call	 XXX XXX strcpy
%4510:	call	 XXX XXX strcpy
%4511:	call	 XXX XXX strcpy
%4512:	call	 XXX XXX strcpy
%4513:	call	 XXX XXX strcpy
%4514:	call	 XXX XXX strcpy
%4515:	call	 XXX XXX strcpy
%4516:	call	 XXX XXX strcpy
%4517:	call	 XXX XXX strcpy
%4518:	call	 XXX XXX strcpy
%4519:	call	 XXX XXX strcpy
%4520:	call	 XXX XXX strcpy
%4521:	call	 XXX XXX strcpy
%4522:	br	 for.cond128

BASIC BLOCK for.cond128
%4523:	phi	 XXX %4538
%4524:	sext	 %4523
%4525:	icmp	 %4524 XXX
%4526:	br	 %4525 for.end142 for.body132

BASIC BLOCK for.body132
%4527:	sext	 %4523
%4528:	getelementptr	 Keywords XXX %4527
%4529:	getelementptr	 %4528 XXX XXX
%4530:	call	 %4529 strlen
%4531:	icmp	 %4530 XXX
%4532:	br	 %4531 if.end if.then

BASIC BLOCK if.then
%4533:	sext	 %4523
%4534:	call	 XXX %4533 printf
%4535:	call	 XXX interror
%4536:	br	 if.end

BASIC BLOCK if.end
%4537:	br	 for.inc140

BASIC BLOCK for.inc140
%4538:	add	 %4523 XXX
%4539:	br	 for.cond128

BASIC BLOCK for.end142
%4540:	ret	

FUNCTION unaminit

BASIC BLOCK entry
%4541:	br	 for.cond

BASIC BLOCK for.cond
%4542:	phi	 XXX %4551
%4543:	sext	 %4542
%4544:	icmp	 %4543 XXX
%4545:	br	 %4544 for.end for.body

BASIC BLOCK for.body
%4546:	sext	 %4542
%4547:	getelementptr	 UserNames XXX %4546
%4548:	getelementptr	 %4547 XXX XXX
%4549:	call	 %4548 XXX strcpy
%4550:	br	 for.inc

BASIC BLOCK for.inc
%4551:	add	 %4542 XXX
%4552:	br	 for.cond

BASIC BLOCK for.end
%4553:	ret	

FUNCTION moseinit

BASIC BLOCK entry
%4554:	br	 for.cond

BASIC BLOCK for.cond
%4555:	phi	 XXX %4563
%4556:	icmp	 %4555 XXX
%4557:	br	 %4556 for.end for.body

BASIC BLOCK for.body
%4558:	sext	 %4555
%4559:	getelementptr	 MOSErrors XXX %4558
%4560:	getelementptr	 %4559 XXX XXX
%4561:	store	 XXX %4560
%4562:	br	 for.inc

BASIC BLOCK for.inc
%4563:	add	 %4555 XXX
%4564:	br	 for.cond

BASIC BLOCK for.end
%4565:	call	 XXX XXX strcpy
%4566:	call	 XXX XXX strcpy
%4567:	call	 XXX XXX strcpy
%4568:	call	 XXX XXX strcpy
%4569:	call	 XXX XXX strcpy
%4570:	call	 XXX XXX strcpy
%4571:	call	 XXX XXX strcpy
%4572:	call	 XXX XXX strcpy
%4573:	call	 XXX XXX strcpy
%4574:	call	 XXX XXX strcpy
%4575:	call	 XXX XXX strcpy
%4576:	call	 XXX XXX strcpy
%4577:	call	 XXX XXX strcpy
%4578:	call	 XXX XXX strcpy
%4579:	call	 XXX XXX strcpy
%4580:	call	 XXX XXX strcpy
%4581:	call	 XXX XXX strcpy
%4582:	call	 XXX XXX strcpy
%4583:	call	 XXX XXX strcpy
%4584:	call	 XXX XXX strcpy
%4585:	ret	

FUNCTION gnodevis

BASIC BLOCK entry
%4586:	alloca	 XXX
%4587:	call	 gnode_list_start_ptr %4586 p q gnodfind
%4588:	icmp	 %4587 XXX
%4589:	br	 %4588 if.end if.then

BASIC BLOCK if.then
%4590:	call	 XXX interror
%4591:	call	 XXX exit
%4592:	unreachable	

BASIC BLOCK if.end
%4593:	load	 %4586
%4594:	getelementptr	 %4593 XXX XXX
%4595:	load	 %4594
%4596:	getelementptr	 %4595 XXX XXX
%4597:	store	 phase %4596
%4598:	load	 %4586
%4599:	getelementptr	 %4598 XXX XXX
%4600:	load	 %4599
%4601:	fadd	 %4600 angle
%4602:	store	 %4601 %4599
%4603:	ret	

FUNCTION gnodfind

BASIC BLOCK entry
%4604:	store	 gnode_list_start_ptr gnode_ptr
%4605:	br	 while.cond

BASIC BLOCK while.cond
%4606:	load	 gnode_ptr
%4607:	getelementptr	 %4606 XXX XXX
%4608:	load	 %4607
%4609:	icmp	 %4608 p
%4610:	br	 %4609 land.rhs land.lhs.true

BASIC BLOCK land.lhs.true
%4611:	load	 gnode_ptr
%4612:	getelementptr	 %4611 XXX XXX
%4613:	load	 %4612
%4614:	icmp	 %4613 q
%4615:	br	 %4614 land.rhs land.end

BASIC BLOCK land.rhs
%4616:	load	 gnode_ptr
%4617:	getelementptr	 %4616 XXX XXX
%4618:	load	 %4617
%4619:	icmp	 %4618 XXX
%4620:	br	 land.end

BASIC BLOCK land.end
%4621:	phi	 XXX %4619
%4622:	br	 %4621 while.end while.body

BASIC BLOCK while.body
%4623:	load	 gnode_ptr
%4624:	getelementptr	 %4623 XXX XXX
%4625:	load	 %4624
%4626:	store	 %4625 gnode_ptr
%4627:	br	 while.cond

BASIC BLOCK while.end
%4628:	load	 gnode_ptr
%4629:	getelementptr	 %4628 XXX XXX
%4630:	load	 %4629
%4631:	icmp	 %4630 p
%4632:	br	 %4631 if.then land.lhs.true6

BASIC BLOCK land.lhs.true6
%4633:	load	 gnode_ptr
%4634:	getelementptr	 %4633 XXX XXX
%4635:	load	 %4634
%4636:	icmp	 %4635 q
%4637:	br	 %4636 if.then if.else

BASIC BLOCK if.then
%4638:	br	 return

BASIC BLOCK if.else
%4639:	br	 return

BASIC BLOCK return
%4640:	phi	 XXX XXX
%4641:	ret	 %4640

FUNCTION grampexc

BASIC BLOCK entry
%4642:	alloca	 XXX
%4643:	alloca	 XXX
%4644:	alloca	 XXX
%4645:	alloca	 XXX
%4646:	alloca	 XXX
%4647:	alloca	 XXX
%4648:	alloca	 XXX
%4649:	alloca	 XXX
%4650:	store	 p1 %4642
%4651:	call	 XXX %4642 GetKeyword
%4652:	icmp	 %4651 XXX
%4653:	br	 %4652 if.end if.then

BASIC BLOCK if.then
%4654:	store	 XXX grampexc_ptr
%4655:	br	 return

BASIC BLOCK if.end
%4656:	load	 %4642
%4657:	call	 %4656 %4642 %4643 %4649 unifamp
%4658:	icmp	 %4657 XXX
%4659:	br	 %4658 if.end8 if.then3

BASIC BLOCK if.then3
%4660:	call	 XXX malloc
%4661:	bitcast	 %4660
%4662:	store	 %4661 grampexc_ptr
%4663:	load	 grampexc_ptr
%4664:	icmp	 %4663 XXX
%4665:	br	 %4664 if.end7 if.then6

BASIC BLOCK if.then6
%4666:	load	 %4642
%4667:	call	 %4666 XXX XXX parserro
%4668:	call	 XXX interror
%4669:	br	 if.end7

BASIC BLOCK if.end7
%4670:	load	 grampexc_ptr
%4671:	getelementptr	 %4670 XXX XXX
%4672:	store	 XXX %4671
%4673:	load	 %4643
%4674:	load	 grampexc_ptr
%4675:	getelementptr	 %4674 XXX XXX
%4676:	store	 %4673 %4675
%4677:	load	 %4649
%4678:	load	 grampexc_ptr
%4679:	getelementptr	 %4678 XXX XXX
%4680:	store	 %4677 %4679
%4681:	load	 grampexc_ptr
%4682:	getelementptr	 %4681 XXX XXX
%4683:	store	 XXX %4682
%4684:	load	 %4642
%4685:	store	 %4684 pp2
%4686:	br	 return

BASIC BLOCK if.end8
%4687:	load	 %4642
%4688:	call	 %4687 %4642 %4644 %4645 %4646 %4647 %4648 %4649 secoramp
%4689:	icmp	 %4688 XXX
%4690:	br	 %4689 if.end13 if.then11

BASIC BLOCK if.then11
%4691:	store	 XXX grampexc_ptr
%4692:	call	 XXX XXX printf
%4693:	br	 return

BASIC BLOCK if.end13
%4694:	icmp	 %4688 XXX
%4695:	br	 %4694 if.end23 if.then15

BASIC BLOCK if.then15
%4696:	call	 XXX malloc
%4697:	bitcast	 %4696
%4698:	store	 %4697 grampexc_ptr
%4699:	load	 grampexc_ptr
%4700:	icmp	 %4699 XXX
%4701:	br	 %4700 if.end19 if.then18

BASIC BLOCK if.then18
%4702:	load	 %4642
%4703:	call	 %4702 XXX XXX parserro
%4704:	call	 XXX interror
%4705:	br	 if.end19

BASIC BLOCK if.end19
%4706:	load	 grampexc_ptr
%4707:	getelementptr	 %4706 XXX XXX
%4708:	store	 XXX %4707
%4709:	load	 %4644
%4710:	load	 grampexc_ptr
%4711:	getelementptr	 %4710 XXX XXX
%4712:	store	 %4709 %4711
%4713:	load	 %4645
%4714:	load	 grampexc_ptr
%4715:	getelementptr	 %4714 XXX XXX
%4716:	store	 %4713 %4715
%4717:	load	 %4646
%4718:	load	 grampexc_ptr
%4719:	getelementptr	 %4718 XXX XXX
%4720:	store	 %4717 %4719
%4721:	load	 %4647
%4722:	load	 grampexc_ptr
%4723:	getelementptr	 %4722 XXX XXX
%4724:	store	 %4721 %4723
%4725:	load	 %4648
%4726:	load	 grampexc_ptr
%4727:	getelementptr	 %4726 XXX XXX
%4728:	store	 %4725 %4727
%4729:	load	 %4649
%4730:	load	 grampexc_ptr
%4731:	getelementptr	 %4730 XXX XXX
%4732:	store	 %4729 %4731
%4733:	load	 grampexc_ptr
%4734:	getelementptr	 %4733 XXX XXX
%4735:	store	 XXX %4734
%4736:	load	 %4642
%4737:	store	 %4736 pp2
%4738:	br	 return

BASIC BLOCK if.end23
%4739:	store	 XXX grampexc_ptr
%4740:	br	 return

BASIC BLOCK return
%4741:	phi	 XXX XXX XXX XXX XXX
%4742:	ret	 %4741

FUNCTION unifamp

BASIC BLOCK entry
%4743:	alloca	 XXX
%4744:	store	 p1 %4743
%4745:	call	 XXX %4743 GetKeyword
%4746:	icmp	 %4745 XXX
%4747:	br	 %4746 if.end if.then

BASIC BLOCK if.then
%4748:	br	 return

BASIC BLOCK if.end
%4749:	load	 %4743
%4750:	call	 %4749 %4743 unif_val_ptr amp_unit_ptr ampval
%4751:	icmp	 %4750 XXX
%4752:	br	 %4751 if.end4 if.then3

BASIC BLOCK if.then3
%4753:	store	 XXX unif_val_ptr
%4754:	store	 XXX amp_unit_ptr
%4755:	br	 if.end4

BASIC BLOCK if.end4
%4756:	load	 %4743
%4757:	store	 %4756 pp2
%4758:	br	 return

BASIC BLOCK return
%4759:	phi	 XXX XXX
%4760:	ret	 %4759

FUNCTION secoramp

BASIC BLOCK entry
%4761:	alloca	 XXX
%4762:	store	 p1 %4761
%4763:	call	 XXX %4761 GetKeyword
%4764:	icmp	 %4763 XXX
%4765:	br	 %4764 if.end if.then

BASIC BLOCK if.then
%4766:	br	 return

BASIC BLOCK if.end
%4767:	call	 XXX %4761 GetKeyword
%4768:	call	 XXX %4761 GetKeyword
%4769:	call	 centre_ptr %4761 GetReal
%4770:	icmp	 %4769 XXX
%4771:	br	 %4770 if.end6 if.then5

BASIC BLOCK if.then5
%4772:	load	 %4761
%4773:	call	 %4772 XXX XXX parserro
%4774:	br	 return

BASIC BLOCK if.end6
%4775:	call	 XXX %4761 GetKeyword
%4776:	call	 p1_et_ptr %4761 GetReal
%4777:	icmp	 %4776 XXX
%4778:	br	 %4777 if.end11 if.then10

BASIC BLOCK if.then10
%4779:	load	 %4761
%4780:	call	 %4779 XXX XXX parserro
%4781:	br	 return

BASIC BLOCK if.end11
%4782:	call	 XXX %4761 GetKeyword
%4783:	call	 p2_et_ptr %4761 GetReal
%4784:	icmp	 %4783 XXX
%4785:	br	 %4784 if.end16 if.then15

BASIC BLOCK if.then15
%4786:	load	 %4761
%4787:	call	 %4786 XXX XXX parserro
%4788:	br	 return

BASIC BLOCK if.end16
%4789:	call	 XXX %4761 GetKeyword
%4790:	call	 q1_et_ptr %4761 GetReal
%4791:	icmp	 %4790 XXX
%4792:	br	 %4791 if.end21 if.then20

BASIC BLOCK if.then20
%4793:	load	 %4761
%4794:	call	 %4793 XXX XXX parserro
%4795:	br	 return

BASIC BLOCK if.end21
%4796:	call	 XXX %4761 GetKeyword
%4797:	load	 %4761
%4798:	call	 %4797 %4761 q2_et_ptr amp_unit_ptr ampval
%4799:	icmp	 %4798 XXX
%4800:	br	 %4799 if.end26 if.then25

BASIC BLOCK if.then25
%4801:	load	 %4761
%4802:	call	 %4801 XXX XXX parserro
%4803:	br	 return

BASIC BLOCK if.end26
%4804:	load	 %4761
%4805:	store	 %4804 pp2
%4806:	br	 return

BASIC BLOCK return
%4807:	phi	 XXX XXX XXX XXX XXX XXX XXX
%4808:	ret	 %4807

FUNCTION greldef

BASIC BLOCK entry
%4809:	alloca	 XXX
%4810:	store	 p1 %4809
%4811:	store	 XXX grid_ptr
%4812:	store	 XXX elem_ptr
%4813:	load	 %4809
%4814:	call	 %4813 %4809 grid_ptr griddef1
%4815:	icmp	 %4814 XXX
%4816:	br	 %4815 if.end if.then

BASIC BLOCK if.then
%4817:	br	 return

BASIC BLOCK if.end
%4818:	icmp	 %4814 XXX
%4819:	br	 %4818 if.end4 if.then2

BASIC BLOCK if.then2
%4820:	call	 XXX XXX printf
%4821:	br	 return

BASIC BLOCK if.end4
%4822:	load	 %4809
%4823:	call	 %4822 %4809 elem_ptr elemdef
%4824:	icmp	 %4823 XXX
%4825:	br	 %4824 if.end8 if.then7

BASIC BLOCK if.then7
%4826:	load	 %4809
%4827:	call	 %4826 XXX XXX parserro
%4828:	br	 return

BASIC BLOCK if.end8
%4829:	icmp	 %4823 XXX
%4830:	br	 %4829 if.end12 if.then10

BASIC BLOCK if.then10
%4831:	call	 XXX XXX printf
%4832:	br	 return

BASIC BLOCK if.end12
%4833:	load	 %4809
%4834:	store	 %4833 pp2
%4835:	br	 return

BASIC BLOCK return
%4836:	phi	 XXX XXX XXX XXX XXX
%4837:	ret	 %4836

FUNCTION griddef1

BASIC BLOCK entry
%4838:	alloca	 XXX
%4839:	alloca	 XXX
%4840:	alloca	 XXX
%4841:	alloca	 XXX
%4842:	alloca	 XXX
%4843:	alloca	 XXX
%4844:	alloca	 XXX
%4845:	alloca	 XXX
%4846:	alloca	 XXX
%4847:	alloca	 XXX
%4848:	alloca	 XXX
%4849:	store	 p1 %4838
%4850:	call	 XXX %4838 GetKeyword
%4851:	icmp	 %4850 XXX
%4852:	br	 %4851 if.end if.then

BASIC BLOCK if.then
%4853:	store	 XXX grid_ptr
%4854:	br	 return

BASIC BLOCK if.end
%4855:	load	 %4838
%4856:	call	 %4855 %4838 %4839 %4841 squgrdef
%4857:	icmp	 %4856 XXX
%4858:	br	 %4857 if.end5 if.then3

BASIC BLOCK if.then3
%4859:	store	 XXX grid_ptr
%4860:	call	 XXX XXX printf
%4861:	br	 return

BASIC BLOCK if.end5
%4862:	icmp	 %4856 XXX
%4863:	br	 %4862 if.end13 if.then7

BASIC BLOCK if.then7
%4864:	load	 %4838
%4865:	call	 %4864 %4838 %4839 %4840 %4841 recgrdef
%4866:	icmp	 %4865 XXX
%4867:	br	 %4866 if.end12 if.then10

BASIC BLOCK if.then10
%4868:	call	 XXX XXX printf
%4869:	store	 XXX grid_ptr
%4870:	br	 return

BASIC BLOCK if.end12
%4871:	br	 if.end13

BASIC BLOCK if.end13
%4872:	phi	 XXX XXX
%4873:	phi	 %4865 %4856
%4874:	icmp	 %4873 XXX
%4875:	br	 %4874 if.end21 if.then15

BASIC BLOCK if.then15
%4876:	load	 %4838
%4877:	call	 %4876 %4838 %4839 %4841 hexgrdef
%4878:	icmp	 %4877 XXX
%4879:	br	 %4878 if.end20 if.then18

BASIC BLOCK if.then18
%4880:	store	 XXX grid_ptr
%4881:	call	 XXX XXX printf
%4882:	br	 return

BASIC BLOCK if.end20
%4883:	br	 if.end21

BASIC BLOCK if.end21
%4884:	phi	 XXX %4872
%4885:	phi	 %4877 %4873
%4886:	icmp	 %4885 XXX
%4887:	br	 %4886 if.end29 if.then23

BASIC BLOCK if.then23
%4888:	load	 %4838
%4889:	call	 %4888 %4838 %4842 %4843 %4839 %4840 %4841 %4844 %4845 %4846 %4847 %4848 trigrdef
%4890:	icmp	 %4889 XXX
%4891:	br	 %4890 if.end28 if.then26

BASIC BLOCK if.then26
%4892:	store	 XXX grid_ptr
%4893:	call	 XXX XXX printf
%4894:	br	 return

BASIC BLOCK if.end28
%4895:	br	 if.end29

BASIC BLOCK if.end29
%4896:	phi	 XXX %4884
%4897:	phi	 %4889 %4885
%4898:	icmp	 %4897 XXX
%4899:	br	 %4898 if.end32 if.then31

BASIC BLOCK if.then31
%4900:	store	 XXX grid_ptr
%4901:	load	 %4838
%4902:	call	 %4901 XXX XXX parserro
%4903:	br	 return

BASIC BLOCK if.end32
%4904:	call	 XXX malloc
%4905:	bitcast	 %4904
%4906:	store	 %4905 grid_ptr
%4907:	load	 grid_ptr
%4908:	icmp	 %4907 XXX
%4909:	br	 %4908 if.end37 if.then35

BASIC BLOCK if.then35
%4910:	call	 XXX XXX printf
%4911:	call	 XXX interror
%4912:	br	 if.end37

BASIC BLOCK if.end37
%4913:	load	 grid_ptr
%4914:	getelementptr	 %4913 XXX XXX
%4915:	store	 %4896 %4914
%4916:	load	 grid_ptr
%4917:	getelementptr	 %4916 XXX XXX
%4918:	store	 XXX %4917
%4919:	load	 %4839
%4920:	load	 grid_ptr
%4921:	getelementptr	 %4920 XXX XXX
%4922:	store	 %4919 %4921
%4923:	load	 %4840
%4924:	load	 grid_ptr
%4925:	getelementptr	 %4924 XXX XXX
%4926:	store	 %4923 %4925
%4927:	load	 %4841
%4928:	load	 grid_ptr
%4929:	getelementptr	 %4928 XXX XXX
%4930:	store	 %4927 %4929
%4931:	load	 %4842
%4932:	load	 grid_ptr
%4933:	getelementptr	 %4932 XXX XXX
%4934:	store	 %4931 %4933
%4935:	load	 %4843
%4936:	load	 grid_ptr
%4937:	getelementptr	 %4936 XXX XXX
%4938:	store	 %4935 %4937
%4939:	load	 %4844
%4940:	load	 grid_ptr
%4941:	getelementptr	 %4940 XXX XXX
%4942:	store	 %4939 %4941
%4943:	load	 %4845
%4944:	load	 grid_ptr
%4945:	getelementptr	 %4944 XXX XXX
%4946:	store	 %4943 %4945
%4947:	load	 %4846
%4948:	load	 grid_ptr
%4949:	getelementptr	 %4948 XXX XXX
%4950:	store	 %4947 %4949
%4951:	load	 %4847
%4952:	load	 grid_ptr
%4953:	getelementptr	 %4952 XXX XXX
%4954:	store	 %4951 %4953
%4955:	load	 %4848
%4956:	load	 grid_ptr
%4957:	getelementptr	 %4956 XXX XXX
%4958:	store	 %4955 %4957
%4959:	load	 %4838
%4960:	store	 %4959 pp2
%4961:	br	 return

BASIC BLOCK return
%4962:	phi	 XXX XXX XXX XXX XXX XXX XXX
%4963:	ret	 %4962

FUNCTION grexcdef

BASIC BLOCK entry
%4964:	alloca	 XXX
%4965:	store	 p1 %4964
%4966:	store	 XXX grampexc_ptr
%4967:	store	 XXX grphaexc_ptr
%4968:	call	 XXX %4964 GetKeyword
%4969:	icmp	 %4968 XXX
%4970:	br	 %4969 if.end if.then

BASIC BLOCK if.then
%4971:	br	 return

BASIC BLOCK if.end
%4972:	load	 %4964
%4973:	call	 %4972 %4964 grampexc_ptr grampexc
%4974:	icmp	 %4973 XXX
%4975:	br	 %4974 if.end5 if.then3

BASIC BLOCK if.then3
%4976:	call	 XXX XXX printf
%4977:	br	 return

BASIC BLOCK if.end5
%4978:	load	 %4964
%4979:	call	 %4978 %4964 grphaexc_ptr grphaexc
%4980:	icmp	 %4979 XXX
%4981:	br	 %4980 if.end10 if.then8

BASIC BLOCK if.then8
%4982:	call	 XXX XXX printf
%4983:	br	 return

BASIC BLOCK if.end10
%4984:	load	 %4964
%4985:	store	 %4984 pp2
%4986:	br	 return

BASIC BLOCK return
%4987:	phi	 XXX XXX XXX XXX
%4988:	ret	 %4987

FUNCTION grphaexc

BASIC BLOCK entry
%4989:	alloca	 XXX
%4990:	alloca	 XXX
%4991:	alloca	 XXX
%4992:	alloca	 XXX
%4993:	alloca	 XXX
%4994:	alloca	 XXX
%4995:	alloca	 XXX
%4996:	alloca	 XXX
%4997:	alloca	 XXX
%4998:	alloca	 XXX
%4999:	alloca	 XXX
%5000:	alloca	 XXX
%5001:	alloca	 XXX
%5002:	alloca	 XXX
%5003:	alloca	 XXX
%5004:	alloca	 XXX
%5005:	alloca	 XXX
%5006:	alloca	 XXX
%5007:	alloca	 XXX
%5008:	alloca	 XXX
%5009:	store	 p1 %4989
%5010:	call	 XXX %4989 GetKeyword
%5011:	icmp	 %5010 XXX
%5012:	br	 %5011 if.end if.then

BASIC BLOCK if.then
%5013:	store	 XXX grphaexc_ptr
%5014:	br	 return

BASIC BLOCK if.end
%5015:	load	 %4989
%5016:	call	 %5015 %4989 %4990 %5008 unifpha
%5017:	icmp	 %5016 XXX
%5018:	br	 %5017 if.end8 if.then3

BASIC BLOCK if.then3
%5019:	call	 XXX malloc
%5020:	bitcast	 %5019
%5021:	store	 %5020 grphaexc_ptr
%5022:	load	 grphaexc_ptr
%5023:	icmp	 %5022 XXX
%5024:	br	 %5023 if.end7 if.then6

BASIC BLOCK if.then6
%5025:	load	 %4989
%5026:	call	 %5025 XXX XXX parserro
%5027:	call	 XXX interror
%5028:	br	 if.end7

BASIC BLOCK if.end7
%5029:	load	 grphaexc_ptr
%5030:	getelementptr	 %5029 XXX XXX
%5031:	store	 XXX %5030
%5032:	load	 %4990
%5033:	load	 grphaexc_ptr
%5034:	getelementptr	 %5033 XXX XXX
%5035:	store	 %5032 %5034
%5036:	load	 %5008
%5037:	load	 grphaexc_ptr
%5038:	getelementptr	 %5037 XXX XXX
%5039:	store	 %5036 %5038
%5040:	load	 grphaexc_ptr
%5041:	getelementptr	 %5040 XXX XXX
%5042:	store	 XXX %5041
%5043:	load	 %4989
%5044:	store	 %5043 pp2
%5045:	br	 return

BASIC BLOCK if.end8
%5046:	load	 %4989
%5047:	call	 %5046 %4989 %4991 %4992 %4993 %4994 %4995 %5008 secorpha
%5048:	icmp	 %5047 XXX
%5049:	br	 %5048 if.end13 if.then11

BASIC BLOCK if.then11
%5050:	store	 XXX grphaexc_ptr
%5051:	call	 XXX XXX printf
%5052:	br	 return

BASIC BLOCK if.end13
%5053:	icmp	 %5047 XXX
%5054:	br	 %5053 if.end23 if.then15

BASIC BLOCK if.then15
%5055:	call	 XXX malloc
%5056:	bitcast	 %5055
%5057:	store	 %5056 grphaexc_ptr
%5058:	load	 grphaexc_ptr
%5059:	icmp	 %5058 XXX
%5060:	br	 %5059 if.end19 if.then18

BASIC BLOCK if.then18
%5061:	load	 %4989
%5062:	call	 %5061 XXX XXX parserro
%5063:	call	 XXX interror
%5064:	br	 if.end19

BASIC BLOCK if.end19
%5065:	load	 grphaexc_ptr
%5066:	getelementptr	 %5065 XXX XXX
%5067:	store	 XXX %5066
%5068:	load	 %4991
%5069:	load	 grphaexc_ptr
%5070:	getelementptr	 %5069 XXX XXX
%5071:	store	 %5068 %5070
%5072:	load	 %4992
%5073:	load	 grphaexc_ptr
%5074:	getelementptr	 %5073 XXX XXX
%5075:	store	 %5072 %5074
%5076:	load	 %4993
%5077:	load	 grphaexc_ptr
%5078:	getelementptr	 %5077 XXX XXX
%5079:	store	 %5076 %5078
%5080:	load	 %4994
%5081:	load	 grphaexc_ptr
%5082:	getelementptr	 %5081 XXX XXX
%5083:	store	 %5080 %5082
%5084:	load	 %4995
%5085:	load	 grphaexc_ptr
%5086:	getelementptr	 %5085 XXX XXX
%5087:	store	 %5084 %5086
%5088:	load	 %5008
%5089:	load	 grphaexc_ptr
%5090:	getelementptr	 %5089 XXX XXX
%5091:	store	 %5088 %5090
%5092:	load	 grphaexc_ptr
%5093:	getelementptr	 %5092 XXX XXX
%5094:	store	 XXX %5093
%5095:	load	 %4989
%5096:	store	 %5095 pp2
%5097:	br	 return

BASIC BLOCK if.end23
%5098:	load	 %4989
%5099:	call	 %5098 %4989 %4997 %4998 %4999 %5000 %5001 %5002 %5003 %4996 %5008 serotpha
%5100:	icmp	 %5099 XXX
%5101:	br	 %5100 if.end28 if.then26

BASIC BLOCK if.then26
%5102:	store	 XXX grphaexc_ptr
%5103:	call	 XXX XXX printf
%5104:	br	 return

BASIC BLOCK if.end28
%5105:	icmp	 %5099 XXX
%5106:	br	 %5105 if.end39 if.then30

BASIC BLOCK if.then30
%5107:	call	 XXX malloc
%5108:	bitcast	 %5107
%5109:	store	 %5108 grphaexc_ptr
%5110:	load	 grphaexc_ptr
%5111:	icmp	 %5110 XXX
%5112:	br	 %5111 if.end35 if.then33

BASIC BLOCK if.then33
%5113:	call	 XXX XXX printf
%5114:	call	 XXX interror
%5115:	br	 if.end35

BASIC BLOCK if.end35
%5116:	load	 grphaexc_ptr
%5117:	getelementptr	 %5116 XXX XXX
%5118:	store	 XXX %5117
%5119:	load	 %4997
%5120:	load	 grphaexc_ptr
%5121:	getelementptr	 %5120 XXX XXX
%5122:	store	 %5119 %5121
%5123:	load	 %4998
%5124:	load	 grphaexc_ptr
%5125:	getelementptr	 %5124 XXX XXX
%5126:	store	 %5123 %5125
%5127:	load	 %4999
%5128:	load	 grphaexc_ptr
%5129:	getelementptr	 %5128 XXX XXX
%5130:	store	 %5127 %5129
%5131:	load	 %5000
%5132:	load	 grphaexc_ptr
%5133:	getelementptr	 %5132 XXX XXX
%5134:	store	 %5131 %5133
%5135:	load	 %5001
%5136:	load	 grphaexc_ptr
%5137:	getelementptr	 %5136 XXX XXX
%5138:	store	 %5135 %5137
%5139:	load	 %5002
%5140:	load	 grphaexc_ptr
%5141:	getelementptr	 %5140 XXX XXX
%5142:	store	 %5139 %5141
%5143:	load	 %5003
%5144:	load	 grphaexc_ptr
%5145:	getelementptr	 %5144 XXX XXX
%5146:	store	 %5143 %5145
%5147:	load	 %4996
%5148:	load	 grphaexc_ptr
%5149:	getelementptr	 %5148 XXX XXX
%5150:	store	 %5147 %5149
%5151:	load	 %5008
%5152:	load	 grphaexc_ptr
%5153:	getelementptr	 %5152 XXX XXX
%5154:	store	 %5151 %5153
%5155:	load	 grphaexc_ptr
%5156:	getelementptr	 %5155 XXX XXX
%5157:	store	 XXX %5156
%5158:	load	 %4989
%5159:	store	 %5158 pp2
%5160:	br	 return

BASIC BLOCK if.end39
%5161:	load	 %4989
%5162:	call	 %5161 %4989 %5004 %5005 %5006 %5007 %4996 beampha
%5163:	icmp	 %5162 XXX
%5164:	br	 %5163 if.end44 if.then42

BASIC BLOCK if.then42
%5165:	store	 XXX grphaexc_ptr
%5166:	call	 XXX XXX printf
%5167:	br	 return

BASIC BLOCK if.end44
%5168:	icmp	 %5162 XXX
%5169:	br	 %5168 if.end55 if.then46

BASIC BLOCK if.then46
%5170:	call	 XXX malloc
%5171:	bitcast	 %5170
%5172:	store	 %5171 grphaexc_ptr
%5173:	load	 grphaexc_ptr
%5174:	icmp	 %5173 XXX
%5175:	br	 %5174 if.end51 if.then49

BASIC BLOCK if.then49
%5176:	call	 XXX XXX printf
%5177:	call	 XXX interror
%5178:	br	 if.end51

BASIC BLOCK if.end51
%5179:	load	 grphaexc_ptr
%5180:	getelementptr	 %5179 XXX XXX
%5181:	store	 XXX %5180
%5182:	load	 %5004
%5183:	load	 grphaexc_ptr
%5184:	getelementptr	 %5183 XXX XXX
%5185:	store	 %5182 %5184
%5186:	load	 %5005
%5187:	load	 grphaexc_ptr
%5188:	getelementptr	 %5187 XXX XXX
%5189:	store	 %5186 %5188
%5190:	load	 %5006
%5191:	load	 grphaexc_ptr
%5192:	getelementptr	 %5191 XXX XXX
%5193:	store	 %5190 %5192
%5194:	load	 %5007
%5195:	load	 grphaexc_ptr
%5196:	getelementptr	 %5195 XXX XXX
%5197:	store	 %5194 %5196
%5198:	load	 %4996
%5199:	load	 grphaexc_ptr
%5200:	getelementptr	 %5199 XXX XXX
%5201:	store	 %5198 %5200
%5202:	load	 grphaexc_ptr
%5203:	getelementptr	 %5202 XXX XXX
%5204:	store	 XXX %5203
%5205:	load	 %4989
%5206:	store	 %5205 pp2
%5207:	br	 return

BASIC BLOCK if.end55
%5208:	store	 XXX grphaexc_ptr
%5209:	br	 return

BASIC BLOCK return
%5210:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX
%5211:	ret	 %5210

FUNCTION grgeodef

BASIC BLOCK entry
%5212:	alloca	 XXX
%5213:	alloca	 XXX
%5214:	store	 XXX %5213
%5215:	store	 p1 %5212
%5216:	store	 XXX addrem_ptr
%5217:	load	 %5212
%5218:	call	 %5217 %5212 addrem_ptr adddef
%5219:	icmp	 %5218 XXX
%5220:	br	 %5219 if.end if.then

BASIC BLOCK if.then
%5221:	load	 %5212
%5222:	call	 %5221 XXX XXX parserro
%5223:	br	 return

BASIC BLOCK if.end
%5224:	icmp	 %5218 XXX
%5225:	br	 %5224 if.end4 if.then2

BASIC BLOCK if.then2
%5226:	call	 XXX XXX printf
%5227:	br	 return

BASIC BLOCK if.end4
%5228:	load	 addrem_ptr
%5229:	store	 %5228 %5213
%5230:	load	 addrem_ptr
%5231:	br	 while.body

BASIC BLOCK while.body
%5232:	phi	 %5230 %5250
%5233:	load	 %5212
%5234:	call	 %5233 %5212 %5213 adremdef
%5235:	icmp	 %5234 XXX
%5236:	br	 %5235 if.end8 if.then7

BASIC BLOCK if.then7
%5237:	getelementptr	 %5232 XXX XXX
%5238:	store	 XXX %5237
%5239:	load	 %5212
%5240:	store	 %5239 pp2
%5241:	br	 return

BASIC BLOCK if.end8
%5242:	icmp	 %5234 XXX
%5243:	br	 %5242 if.end12 if.then10

BASIC BLOCK if.then10
%5244:	store	 XXX addrem_ptr
%5245:	call	 XXX XXX printf
%5246:	br	 return

BASIC BLOCK if.end12
%5247:	load	 %5213
%5248:	getelementptr	 %5232 XXX XXX
%5249:	store	 %5247 %5248
%5250:	load	 %5213
%5251:	getelementptr	 %5250 XXX XXX
%5252:	store	 XXX %5251
%5253:	br	 while.body

BASIC BLOCK return
%5254:	phi	 XXX XXX XXX XXX
%5255:	ret	 %5254

FUNCTION squgrdef

BASIC BLOCK entry
%5256:	alloca	 XXX
%5257:	store	 p1 %5256
%5258:	store	 XXX pstep_ptr
%5259:	store	 XXX pstep_unit_ptr
%5260:	call	 XXX %5256 GetKeyword
%5261:	icmp	 %5260 XXX
%5262:	br	 %5261 if.end if.then

BASIC BLOCK if.then
%5263:	br	 return

BASIC BLOCK if.end
%5264:	load	 %5256
%5265:	call	 %5264 %5256 pstep_ptr pstep_unit_ptr sinstep
%5266:	icmp	 %5265 XXX
%5267:	br	 %5266 if.end4 if.then3

BASIC BLOCK if.then3
%5268:	store	 XXX pstep_ptr
%5269:	store	 XXX pstep_unit_ptr
%5270:	load	 %5256
%5271:	store	 %5270 pp2
%5272:	br	 return

BASIC BLOCK if.end4
%5273:	icmp	 %5265 XXX
%5274:	br	 %5273 if.end7 if.then6

BASIC BLOCK if.then6
%5275:	load	 %5256
%5276:	call	 %5275 %5265 XXX parserro
%5277:	store	 XXX pstep_ptr
%5278:	store	 XXX pstep_unit_ptr
%5279:	br	 return

BASIC BLOCK if.end7
%5280:	load	 %5256
%5281:	store	 %5280 pp2
%5282:	br	 return

BASIC BLOCK return
%5283:	phi	 XXX XXX XXX XXX
%5284:	ret	 %5283

FUNCTION recgrdef

BASIC BLOCK entry
%5285:	alloca	 XXX
%5286:	store	 p1 %5285
%5287:	store	 XXX pstep_ptr
%5288:	store	 XXX qstep_ptr
%5289:	store	 XXX pqstep_unit_ptr
%5290:	call	 XXX %5285 GetKeyword
%5291:	icmp	 %5290 XXX
%5292:	br	 %5291 if.end if.then

BASIC BLOCK if.then
%5293:	br	 return

BASIC BLOCK if.end
%5294:	load	 %5285
%5295:	call	 %5294 %5285 pstep_ptr qstep_ptr pqstep_unit_ptr doubstep
%5296:	icmp	 %5295 XXX
%5297:	br	 %5296 if.end4 if.then3

BASIC BLOCK if.then3
%5298:	store	 XXX pstep_ptr
%5299:	store	 XXX qstep_ptr
%5300:	store	 XXX pqstep_unit_ptr
%5301:	load	 %5285
%5302:	store	 %5301 pp2
%5303:	br	 return

BASIC BLOCK if.end4
%5304:	icmp	 %5295 XXX
%5305:	br	 %5304 if.end7 if.then6

BASIC BLOCK if.then6
%5306:	load	 %5285
%5307:	call	 %5306 %5295 XXX parserro
%5308:	store	 XXX pstep_ptr
%5309:	store	 XXX qstep_ptr
%5310:	store	 XXX pqstep_unit_ptr
%5311:	br	 return

BASIC BLOCK if.end7
%5312:	load	 %5285
%5313:	store	 %5312 pp2
%5314:	br	 return

BASIC BLOCK return
%5315:	phi	 XXX XXX XXX XXX
%5316:	ret	 %5315

FUNCTION hexgrdef

BASIC BLOCK entry
%5317:	alloca	 XXX
%5318:	store	 p1 %5317
%5319:	store	 XXX pstep_ptr
%5320:	store	 XXX pstep_unit_ptr
%5321:	call	 XXX %5317 GetKeyword
%5322:	icmp	 %5321 XXX
%5323:	br	 %5322 if.end if.then

BASIC BLOCK if.then
%5324:	br	 return

BASIC BLOCK if.end
%5325:	load	 %5317
%5326:	call	 %5325 %5317 pstep_ptr pstep_unit_ptr sinstep
%5327:	icmp	 %5326 XXX
%5328:	br	 %5327 if.end4 if.then3

BASIC BLOCK if.then3
%5329:	store	 XXX pstep_ptr
%5330:	store	 XXX pstep_unit_ptr
%5331:	load	 %5317
%5332:	store	 %5331 pp2
%5333:	br	 return

BASIC BLOCK if.end4
%5334:	icmp	 %5326 XXX
%5335:	br	 %5334 if.end7 if.then6

BASIC BLOCK if.then6
%5336:	load	 %5317
%5337:	call	 %5336 %5326 XXX parserro
%5338:	store	 XXX pstep_ptr
%5339:	store	 XXX pstep_unit_ptr
%5340:	br	 return

BASIC BLOCK if.end7
%5341:	load	 %5317
%5342:	store	 %5341 pp2
%5343:	br	 return

BASIC BLOCK return
%5344:	phi	 XXX XXX XXX XXX
%5345:	ret	 %5344

FUNCTION trigrdef

BASIC BLOCK entry
%5346:	alloca	 XXX
%5347:	store	 p1 %5346
%5348:	store	 XXX angle_ptr
%5349:	store	 XXX angle_unit_ptr
%5350:	store	 XXX pstep_ptr
%5351:	store	 XXX qstep_ptr
%5352:	store	 XXX pqstep_unit_ptr
%5353:	store	 XXX px_ptr
%5354:	store	 XXX py_ptr
%5355:	store	 XXX qx_ptr
%5356:	store	 XXX qy_ptr
%5357:	store	 XXX pqxy_unit_ptr
%5358:	call	 XXX %5346 GetKeyword
%5359:	icmp	 %5358 XXX
%5360:	br	 %5359 if.end if.then

BASIC BLOCK if.then
%5361:	br	 return

BASIC BLOCK if.end
%5362:	load	 %5346
%5363:	call	 %5362 %5346 angle_ptr angle_unit_ptr pstep_ptr qstep_ptr pqstep_unit_ptr angstep
%5364:	icmp	 %5363 XXX
%5365:	br	 %5364 if.end4 if.then3

BASIC BLOCK if.then3
%5366:	store	 XXX angle_ptr
%5367:	store	 XXX angle_unit_ptr
%5368:	store	 XXX pstep_ptr
%5369:	store	 XXX qstep_ptr
%5370:	store	 XXX pqstep_unit_ptr
%5371:	load	 %5346
%5372:	call	 %5371 XXX XXX parserro
%5373:	br	 return

BASIC BLOCK if.end4
%5374:	icmp	 %5363 XXX
%5375:	br	 %5374 if.end15 if.then6

BASIC BLOCK if.then6
%5376:	load	 %5346
%5377:	call	 %5376 %5346 px_ptr py_ptr qx_ptr qy_ptr pqxy_unit_ptr versdef
%5378:	icmp	 %5377 XXX
%5379:	br	 %5378 if.end11 land.lhs.true

BASIC BLOCK land.lhs.true
%5380:	icmp	 %5377 XXX
%5381:	br	 %5380 if.end11 if.then10

BASIC BLOCK if.then10
%5382:	load	 %5346
%5383:	call	 %5382 %5377 XXX parserro
%5384:	store	 XXX px_ptr
%5385:	store	 XXX py_ptr
%5386:	store	 XXX qx_ptr
%5387:	store	 XXX qy_ptr
%5388:	store	 XXX pqxy_unit_ptr
%5389:	br	 return

BASIC BLOCK if.end11
%5390:	icmp	 %5377 XXX
%5391:	br	 %5390 if.end14 if.then13

BASIC BLOCK if.then13
%5392:	store	 XXX angle_ptr
%5393:	store	 XXX angle_unit_ptr
%5394:	store	 XXX pstep_ptr
%5395:	store	 XXX qstep_ptr
%5396:	store	 XXX pqstep_unit_ptr
%5397:	store	 XXX px_ptr
%5398:	store	 XXX py_ptr
%5399:	store	 XXX qx_ptr
%5400:	store	 XXX qy_ptr
%5401:	store	 XXX pqxy_unit_ptr
%5402:	br	 if.end14

BASIC BLOCK if.end14
%5403:	br	 if.end15

BASIC BLOCK if.end15
%5404:	load	 %5346
%5405:	store	 %5404 pp2
%5406:	br	 return

BASIC BLOCK return
%5407:	phi	 XXX XXX XXX XXX
%5408:	ret	 %5407

FUNCTION InUNames

BASIC BLOCK entry
%5409:	call	 WORD strlen
%5410:	icmp	 %5409 XXX
%5411:	br	 %5410 if.end if.then

BASIC BLOCK if.then
%5412:	call	 XXX printf
%5413:	call	 XXX exit
%5414:	unreachable	

BASIC BLOCK if.end
%5415:	br	 for.cond

BASIC BLOCK for.cond
%5416:	phi	 XXX %5427
%5417:	icmp	 %5416 XXX
%5418:	br	 %5417 for.end for.body

BASIC BLOCK for.body
%5419:	sext	 %5416
%5420:	getelementptr	 UserNames XXX %5419
%5421:	getelementptr	 %5420 XXX XXX
%5422:	call	 WORD %5421 strcmp
%5423:	icmp	 %5422 XXX
%5424:	br	 %5423 if.end6 if.then5

BASIC BLOCK if.then5
%5425:	br	 return

BASIC BLOCK if.end6
%5426:	br	 for.inc

BASIC BLOCK for.inc
%5427:	add	 %5416 XXX
%5428:	br	 for.cond

BASIC BLOCK for.end
%5429:	br	 return

BASIC BLOCK return
%5430:	phi	 XXX XXX
%5431:	ret	 %5430

FUNCTION InserUN

BASIC BLOCK entry
%5432:	call	 WORD strlen
%5433:	icmp	 %5432 XXX
%5434:	br	 %5433 if.end if.then

BASIC BLOCK if.then
%5435:	call	 XXX printf
%5436:	call	 XXX exit
%5437:	unreachable	

BASIC BLOCK if.end
%5438:	br	 for.cond

BASIC BLOCK for.cond
%5439:	icmp	 XXX XXX
%5440:	br	 %5439 for.end for.body

BASIC BLOCK for.body
%5441:	sext	 XXX
%5442:	getelementptr	 UserNames XXX %5441
%5443:	getelementptr	 %5442 XXX XXX
%5444:	call	 %5443 strlen
%5445:	icmp	 %5444 XXX
%5446:	br	 %5445 if.end10 if.then5

BASIC BLOCK if.then5
%5447:	sext	 XXX
%5448:	getelementptr	 UserNames XXX %5447
%5449:	getelementptr	 %5448 XXX XXX
%5450:	call	 %5449 WORD strcpy
%5451:	br	 if.end10

BASIC BLOCK if.end10
%5452:	ret	 XXX

BASIC BLOCK for.inc
%5453:	load	 XXX
%5454:	add	 %5453 XXX
%5455:	store	 %5454 XXX
%5456:	br	 for.cond

BASIC BLOCK for.end
%5457:	call	 XXX printf
%5458:	call	 XXX exit
%5459:	unreachable	

FUNCTION unifpha

BASIC BLOCK entry
%5460:	alloca	 XXX
%5461:	store	 p1 %5460
%5462:	call	 XXX %5460 GetKeyword
%5463:	icmp	 %5462 XXX
%5464:	br	 %5463 if.end if.then

BASIC BLOCK if.then
%5465:	br	 return

BASIC BLOCK if.end
%5466:	load	 %5460
%5467:	call	 %5466 %5460 unif_val_ptr phase_unit_ptr angval
%5468:	icmp	 %5467 XXX
%5469:	br	 %5468 if.end4 if.then3

BASIC BLOCK if.then3
%5470:	store	 XXX unif_val_ptr
%5471:	store	 XXX phase_unit_ptr
%5472:	br	 if.end4

BASIC BLOCK if.end4
%5473:	load	 %5460
%5474:	store	 %5473 pp2
%5475:	br	 return

BASIC BLOCK return
%5476:	phi	 XXX XXX
%5477:	ret	 %5476

FUNCTION secorpha

BASIC BLOCK entry
%5478:	alloca	 XXX
%5479:	store	 p1 %5478
%5480:	call	 XXX %5478 GetKeyword
%5481:	icmp	 %5480 XXX
%5482:	br	 %5481 if.end if.then

BASIC BLOCK if.then
%5483:	br	 return

BASIC BLOCK if.end
%5484:	call	 XXX %5478 GetKeyword
%5485:	call	 XXX %5478 GetKeyword
%5486:	call	 centre_ptr %5478 GetReal
%5487:	icmp	 %5486 XXX
%5488:	br	 %5487 if.end6 if.then5

BASIC BLOCK if.then5
%5489:	load	 %5478
%5490:	call	 %5489 XXX XXX parserro
%5491:	br	 return

BASIC BLOCK if.end6
%5492:	call	 XXX %5478 GetKeyword
%5493:	call	 p1_ep_ptr %5478 GetReal
%5494:	icmp	 %5493 XXX
%5495:	br	 %5494 if.end11 if.then10

BASIC BLOCK if.then10
%5496:	load	 %5478
%5497:	call	 %5496 XXX XXX parserro
%5498:	br	 return

BASIC BLOCK if.end11
%5499:	call	 XXX %5478 GetKeyword
%5500:	call	 p2_ep_ptr %5478 GetReal
%5501:	icmp	 %5500 XXX
%5502:	br	 %5501 if.end16 if.then15

BASIC BLOCK if.then15
%5503:	load	 %5478
%5504:	call	 %5503 XXX XXX parserro
%5505:	br	 return

BASIC BLOCK if.end16
%5506:	call	 XXX %5478 GetKeyword
%5507:	call	 q1_ep_ptr %5478 GetReal
%5508:	icmp	 %5507 XXX
%5509:	br	 %5508 if.end21 if.then20

BASIC BLOCK if.then20
%5510:	load	 %5478
%5511:	call	 %5510 XXX XXX parserro
%5512:	br	 return

BASIC BLOCK if.end21
%5513:	call	 XXX %5478 GetKeyword
%5514:	load	 %5478
%5515:	call	 %5514 %5478 q2_ep_ptr phase_unit_ptr angval
%5516:	icmp	 %5515 XXX
%5517:	br	 %5516 if.end26 if.then25

BASIC BLOCK if.then25
%5518:	load	 %5478
%5519:	call	 %5518 XXX XXX parserro
%5520:	br	 return

BASIC BLOCK if.end26
%5521:	load	 %5478
%5522:	store	 %5521 pp2
%5523:	br	 return

BASIC BLOCK return
%5524:	phi	 XXX XXX XXX XXX XXX XXX XXX
%5525:	ret	 %5524

FUNCTION serotpha

BASIC BLOCK entry
%5526:	alloca	 XXX
%5527:	store	 p1 %5526
%5528:	store	 XXX omit_angle_ptr
%5529:	store	 XXX omit_phase_ptr
%5530:	call	 XXX %5526 GetKeyword
%5531:	icmp	 %5530 XXX
%5532:	br	 %5531 if.end if.then

BASIC BLOCK if.then
%5533:	br	 return

BASIC BLOCK if.end
%5534:	call	 XXX %5526 GetKeyword
%5535:	icmp	 %5534 XXX
%5536:	br	 %5535 if.end4 if.then3

BASIC BLOCK if.then3
%5537:	load	 %5526
%5538:	call	 %5537 XXX XXX parserro
%5539:	br	 return

BASIC BLOCK if.end4
%5540:	load	 %5526
%5541:	call	 %5540 %5526 direction_ptr serotdir
%5542:	icmp	 %5541 XXX
%5543:	br	 %5542 if.end8 if.then7

BASIC BLOCK if.then7
%5544:	store	 XXX direction_ptr
%5545:	br	 if.end8

BASIC BLOCK if.end8
%5546:	load	 %5526
%5547:	call	 %5546 %5526 angle_start_ptr angle_step_ptr omit_phase_ptr phase_start_ptr phase_step_ptr angle_unit_ptr phase_unit_ptr serotpar
%5548:	icmp	 %5547 XXX
%5549:	br	 %5548 if.end12 if.then11

BASIC BLOCK if.then11
%5550:	br	 return

BASIC BLOCK if.end12
%5551:	icmp	 %5547 XXX
%5552:	br	 %5551 if.end15 if.then14

BASIC BLOCK if.then14
%5553:	store	 XXX omit_angle_ptr
%5554:	br	 if.end15

BASIC BLOCK if.end15
%5555:	load	 %5526
%5556:	store	 %5555 pp2
%5557:	br	 return

BASIC BLOCK return
%5558:	phi	 XXX XXX XXX XXX
%5559:	ret	 %5558

FUNCTION sinstep

BASIC BLOCK entry
%5560:	alloca	 XXX
%5561:	store	 p1 %5560
%5562:	store	 XXX step_ptr
%5563:	store	 XXX step_unit_ptr
%5564:	call	 XXX %5560 GetKeyword
%5565:	icmp	 %5564 XXX
%5566:	br	 %5565 if.end if.then

BASIC BLOCK if.then
%5567:	br	 return

BASIC BLOCK if.end
%5568:	load	 %5560
%5569:	call	 %5568 %5560 step_ptr GetUReal
%5570:	icmp	 %5569 XXX
%5571:	br	 %5570 if.end4 if.then3

BASIC BLOCK if.then3
%5572:	store	 XXX step_ptr
%5573:	br	 return

BASIC BLOCK if.end4
%5574:	call	 %5560 step_unit_ptr lenunit
%5575:	icmp	 %5574 XXX
%5576:	br	 %5575 if.end8 if.then7

BASIC BLOCK if.then7
%5577:	store	 XXX step_unit_ptr
%5578:	br	 if.end8

BASIC BLOCK if.end8
%5579:	load	 %5560
%5580:	store	 %5579 pp2
%5581:	br	 return

BASIC BLOCK return
%5582:	phi	 XXX %5569 XXX
%5583:	ret	 %5582

FUNCTION intmax

BASIC BLOCK entry
%5584:	icmp	 a b
%5585:	br	 %5584 if.else if.then

BASIC BLOCK if.then
%5586:	br	 return

BASIC BLOCK if.else
%5587:	br	 return

BASIC BLOCK return
%5588:	phi	 a b
%5589:	ret	 %5588

FUNCTION intmin

BASIC BLOCK entry
%5590:	icmp	 a b
%5591:	br	 %5590 if.else if.then

BASIC BLOCK if.then
%5592:	br	 return

BASIC BLOCK if.else
%5593:	br	 return

BASIC BLOCK return
%5594:	phi	 a b
%5595:	ret	 %5594

FUNCTION linpol

BASIC BLOCK entry
%5596:	alloca	 XXX
%5597:	store	 p1 %5596
%5598:	call	 XXX %5596 GetKeyword
%5599:	icmp	 %5598 XXX
%5600:	br	 %5599 if.end if.then

BASIC BLOCK if.then
%5601:	br	 return

BASIC BLOCK if.end
%5602:	load	 %5596
%5603:	call	 %5602 %5596 angle_ptr angle_unit_ptr polor
%5604:	icmp	 %5603 XXX
%5605:	br	 %5604 if.end4 if.then3

BASIC BLOCK if.then3
%5606:	store	 XXX angle_ptr
%5607:	store	 XXX angle_unit_ptr
%5608:	load	 %5596
%5609:	store	 %5608 pp2
%5610:	br	 return

BASIC BLOCK if.end4
%5611:	icmp	 %5603 XXX
%5612:	br	 %5611 if.end8 if.then6

BASIC BLOCK if.then6
%5613:	call	 XXX XXX printf
%5614:	br	 return

BASIC BLOCK if.end8
%5615:	load	 %5596
%5616:	store	 %5615 pp2
%5617:	br	 return

BASIC BLOCK return
%5618:	phi	 XXX XXX XXX XXX
%5619:	ret	 %5618

FUNCTION polor

BASIC BLOCK entry
%5620:	alloca	 XXX
%5621:	store	 p1 %5620
%5622:	call	 XXX %5620 GetKeyword
%5623:	icmp	 %5622 XXX
%5624:	br	 %5623 if.end if.then

BASIC BLOCK if.then
%5625:	store	 XXX angle_ptr
%5626:	store	 XXX angle_unit_ptr
%5627:	br	 return

BASIC BLOCK if.end
%5628:	store	 XXX angle_ptr
%5629:	store	 XXX angle_unit_ptr
%5630:	call	 XXX %5620 GetKeyword
%5631:	icmp	 %5630 XXX
%5632:	br	 %5631 if.end4 if.then3

BASIC BLOCK if.then3
%5633:	load	 %5620
%5634:	store	 %5633 pp2
%5635:	br	 return

BASIC BLOCK if.end4
%5636:	store	 XXX angle_ptr
%5637:	store	 XXX angle_unit_ptr
%5638:	call	 XXX %5620 GetKeyword
%5639:	icmp	 %5638 XXX
%5640:	br	 %5639 if.end8 if.then7

BASIC BLOCK if.then7
%5641:	load	 %5620
%5642:	store	 %5641 pp2
%5643:	br	 return

BASIC BLOCK if.end8
%5644:	load	 %5620
%5645:	call	 %5644 %5620 angle_ptr angle_unit_ptr angval
%5646:	icmp	 %5645 XXX
%5647:	br	 %5646 if.end12 if.then11

BASIC BLOCK if.then11
%5648:	load	 %5620
%5649:	store	 %5648 pp2
%5650:	br	 return

BASIC BLOCK if.end12
%5651:	icmp	 %5645 XXX
%5652:	br	 %5651 if.end15 if.then14

BASIC BLOCK if.then14
%5653:	load	 %5620
%5654:	call	 %5653 XXX XXX parserro
%5655:	br	 return

BASIC BLOCK if.end15
%5656:	br	 return

BASIC BLOCK return
%5657:	phi	 XXX XXX XXX XXX XXX XXX
%5658:	ret	 %5657

FUNCTION modspec

BASIC BLOCK entry
%5659:	alloca	 XXX
%5660:	store	 p1 %5659
%5661:	call	 XXX %5659 GetKeyword
%5662:	icmp	 %5661 XXX
%5663:	br	 %5662 if.end if.then

BASIC BLOCK if.then
%5664:	load	 %5659
%5665:	call	 %5664 XXX XXX parserro
%5666:	br	 return

BASIC BLOCK if.end
%5667:	store	 XXX model_ptr
%5668:	load	 %5659
%5669:	call	 %5668 %5659 extmod
%5670:	icmp	 %5669 XXX
%5671:	br	 %5670 if.end4 if.then3

BASIC BLOCK if.then3
%5672:	load	 %5659
%5673:	store	 %5672 pp2
%5674:	br	 return

BASIC BLOCK if.end4
%5675:	icmp	 %5669 XXX
%5676:	br	 %5675 if.end7 if.then6

BASIC BLOCK if.then6
%5677:	br	 return

BASIC BLOCK if.end7
%5678:	store	 XXX model_ptr
%5679:	load	 %5659
%5680:	call	 %5679 %5659 exp_ptr cosinus
%5681:	icmp	 %5680 XXX
%5682:	br	 %5681 if.end11 if.then10

BASIC BLOCK if.then10
%5683:	load	 %5659
%5684:	store	 %5683 pp2
%5685:	br	 return

BASIC BLOCK if.end11
%5686:	icmp	 %5680 XXX
%5687:	br	 %5686 if.end14 if.then13

BASIC BLOCK if.then13
%5688:	br	 return

BASIC BLOCK if.end14
%5689:	store	 XXX model_ptr
%5690:	load	 %5659
%5691:	call	 %5690 %5659 anglee_ptr angleh_ptr angle_unit_ptr tapere_ptr taperh_ptr taper_unit_ptr gaussel
%5692:	icmp	 %5691 XXX
%5693:	br	 %5692 if.end18 if.then17

BASIC BLOCK if.then17
%5694:	load	 %5659
%5695:	store	 %5694 pp2
%5696:	br	 return

BASIC BLOCK if.end18
%5697:	icmp	 %5691 XXX
%5698:	br	 %5697 if.end22 if.then20

BASIC BLOCK if.then20
%5699:	call	 XXX XXX printf
%5700:	br	 return

BASIC BLOCK if.end22
%5701:	store	 XXX model_ptr
%5702:	load	 %5659
%5703:	call	 %5702 XXX XXX parserro
%5704:	br	 return

BASIC BLOCK return
%5705:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX
%5706:	ret	 %5705

FUNCTION nodorien

BASIC BLOCK entry
%5707:	alloca	 XXX
%5708:	store	 p1 %5707
%5709:	call	 XXX %5707 GetKeyword
%5710:	icmp	 %5709 XXX
%5711:	br	 %5710 if.end if.then

BASIC BLOCK if.then
%5712:	br	 return

BASIC BLOCK if.end
%5713:	call	 XXX %5707 GetKeyword
%5714:	call	 theta_ptr %5707 GetReal
%5715:	icmp	 %5714 XXX
%5716:	br	 %5715 if.end5 if.then4

BASIC BLOCK if.then4
%5717:	load	 %5707
%5718:	call	 %5717 XXX XXX parserro
%5719:	br	 return

BASIC BLOCK if.end5
%5720:	call	 XXX %5707 GetKeyword
%5721:	call	 phi_ptr %5707 GetReal
%5722:	icmp	 %5721 XXX
%5723:	br	 %5722 if.end10 if.then9

BASIC BLOCK if.then9
%5724:	load	 %5707
%5725:	call	 %5724 XXX XXX parserro
%5726:	br	 return

BASIC BLOCK if.end10
%5727:	call	 XXX %5707 GetKeyword
%5728:	call	 psi_ptr %5707 GetReal
%5729:	icmp	 %5728 XXX
%5730:	br	 %5729 if.end15 if.then14

BASIC BLOCK if.then14
%5731:	load	 %5707
%5732:	call	 %5731 XXX XXX parserro
%5733:	br	 return

BASIC BLOCK if.end15
%5734:	load	 %5707
%5735:	call	 %5734 %5707 angle_unit_ptr angunit
%5736:	icmp	 %5735 XXX
%5737:	br	 %5736 if.end19 if.then18

BASIC BLOCK if.then18
%5738:	store	 XXX angle_unit_ptr
%5739:	br	 if.end19

BASIC BLOCK if.end19
%5740:	load	 %5707
%5741:	store	 %5740 pp2
%5742:	br	 return

BASIC BLOCK return
%5743:	phi	 XXX XXX XXX XXX XXX
%5744:	ret	 %5743

FUNCTION phaserot

BASIC BLOCK entry
%5745:	alloca	 XXX
%5746:	store	 p1 %5745
%5747:	call	 XXX %5745 GetKeyword
%5748:	icmp	 %5747 XXX
%5749:	br	 %5748 if.end if.then

BASIC BLOCK if.then
%5750:	br	 return

BASIC BLOCK if.end
%5751:	call	 XXX %5745 GetKeyword
%5752:	call	 phase_start_ptr %5745 GetReal
%5753:	icmp	 %5752 XXX
%5754:	br	 %5753 if.end5 if.then4

BASIC BLOCK if.then4
%5755:	load	 %5745
%5756:	call	 %5755 XXX XXX parserro
%5757:	br	 return

BASIC BLOCK if.end5
%5758:	call	 XXX %5745 GetKeyword
%5759:	load	 %5745
%5760:	call	 %5759 %5745 phase_step_ptr phase_unit_ptr angval
%5761:	icmp	 %5760 XXX
%5762:	br	 %5761 if.end10 if.then9

BASIC BLOCK if.then9
%5763:	load	 %5745
%5764:	call	 %5763 XXX XXX parserro
%5765:	br	 return

BASIC BLOCK if.end10
%5766:	load	 %5745
%5767:	store	 %5766 pp2
%5768:	br	 return

BASIC BLOCK return
%5769:	phi	 XXX XXX XXX XXX
%5770:	ret	 %5769

FUNCTION polorbis

BASIC BLOCK entry
%5771:	alloca	 XXX
%5772:	store	 p1 %5771
%5773:	call	 XXX %5771 GetKeyword
%5774:	icmp	 %5773 XXX
%5775:	br	 %5774 if.end if.then

BASIC BLOCK if.then
%5776:	store	 XXX phepol_ptr
%5777:	store	 XXX phepol_unit_ptr
%5778:	br	 return

BASIC BLOCK if.end
%5779:	store	 XXX phepol_ptr
%5780:	store	 XXX phepol_unit_ptr
%5781:	call	 XXX %5771 GetKeyword
%5782:	icmp	 %5781 XXX
%5783:	br	 %5782 if.end4 if.then3

BASIC BLOCK if.then3
%5784:	load	 %5771
%5785:	store	 %5784 pp2
%5786:	br	 return

BASIC BLOCK if.end4
%5787:	store	 XXX phepol_ptr
%5788:	store	 XXX phepol_unit_ptr
%5789:	call	 XXX %5771 GetKeyword
%5790:	icmp	 %5789 XXX
%5791:	br	 %5790 if.end8 if.then7

BASIC BLOCK if.then7
%5792:	load	 %5771
%5793:	store	 %5792 pp2
%5794:	br	 return

BASIC BLOCK if.end8
%5795:	load	 %5771
%5796:	call	 %5795 %5771 phepol_ptr phepol_unit_ptr angval
%5797:	icmp	 %5796 XXX
%5798:	br	 %5797 if.end12 if.then11

BASIC BLOCK if.then11
%5799:	load	 %5771
%5800:	store	 %5799 pp2
%5801:	br	 return

BASIC BLOCK if.end12
%5802:	icmp	 %5796 XXX
%5803:	br	 %5802 if.end15 if.then14

BASIC BLOCK if.then14
%5804:	load	 %5771
%5805:	call	 %5804 XXX XXX parserro
%5806:	br	 return

BASIC BLOCK if.end15
%5807:	br	 return

BASIC BLOCK return
%5808:	phi	 XXX XXX XXX XXX XXX XXX
%5809:	ret	 %5808

FUNCTION polspec

BASIC BLOCK entry
%5810:	alloca	 XXX
%5811:	store	 p1 %5810
%5812:	store	 XXX polarization_ptr
%5813:	store	 XXX phepol_ptr
%5814:	store	 XXX phepol_unit_ptr
%5815:	store	 XXX direction_ptr
%5816:	call	 XXX %5810 GetKeyword
%5817:	icmp	 %5816 XXX
%5818:	br	 %5817 if.end if.then

BASIC BLOCK if.then
%5819:	br	 return

BASIC BLOCK if.end
%5820:	store	 XXX polarization_ptr
%5821:	load	 %5810
%5822:	call	 %5821 %5810 phepol_ptr phepol_unit_ptr linpol
%5823:	icmp	 %5822 XXX
%5824:	br	 %5823 if.end4 if.then3

BASIC BLOCK if.then3
%5825:	load	 %5810
%5826:	store	 %5825 pp2
%5827:	br	 return

BASIC BLOCK if.end4
%5828:	icmp	 %5822 XXX
%5829:	br	 %5828 if.end8 if.then6

BASIC BLOCK if.then6
%5830:	call	 XXX XXX printf
%5831:	br	 return

BASIC BLOCK if.end8
%5832:	store	 XXX polarization_ptr
%5833:	load	 %5810
%5834:	call	 %5833 %5810 direction_ptr circpol
%5835:	icmp	 %5834 XXX
%5836:	br	 %5835 if.end12 if.then11

BASIC BLOCK if.then11
%5837:	load	 %5810
%5838:	store	 %5837 pp2
%5839:	br	 return

BASIC BLOCK if.end12
%5840:	icmp	 %5834 XXX
%5841:	br	 %5840 if.end16 if.then14

BASIC BLOCK if.then14
%5842:	call	 XXX XXX printf
%5843:	br	 return

BASIC BLOCK if.end16
%5844:	br	 return

BASIC BLOCK return
%5845:	phi	 XXX XXX XXX XXX XXX XXX
%5846:	ret	 %5845

FUNCTION portamp

BASIC BLOCK entry
%5847:	alloca	 XXX
%5848:	store	 p1 %5847
%5849:	call	 XXX %5847 GetKeyword
%5850:	icmp	 %5849 XXX
%5851:	br	 %5850 if.end if.then

BASIC BLOCK if.then
%5852:	br	 return

BASIC BLOCK if.end
%5853:	load	 %5847
%5854:	call	 %5853 %5847 amp_ptr amp_unit_ptr ampval
%5855:	icmp	 %5854 XXX
%5856:	br	 %5855 if.end4 if.then3

BASIC BLOCK if.then3
%5857:	load	 %5847
%5858:	call	 %5857 XXX XXX parserro
%5859:	br	 return

BASIC BLOCK if.end4
%5860:	load	 %5847
%5861:	store	 %5860 pp2
%5862:	br	 return

BASIC BLOCK return
%5863:	phi	 XXX XXX XXX
%5864:	ret	 %5863

FUNCTION portdef

BASIC BLOCK entry
%5865:	alloca	 XXX
%5866:	alloca	 XXX
%5867:	alloca	 XXX
%5868:	alloca	 XXX
%5869:	alloca	 XXX
%5870:	alloca	 XXX
%5871:	alloca	 XXX
%5872:	alloca	 XXX
%5873:	alloca	 XXX
%5874:	alloca	 XXX
%5875:	alloca	 XXX
%5876:	store	 p1 %5865
%5877:	call	 XXX %5865 GetKeyword
%5878:	icmp	 %5877 XXX
%5879:	br	 %5878 if.end if.then

BASIC BLOCK if.then
%5880:	load	 %5865
%5881:	call	 %5880 XXX XXX parserro
%5882:	br	 return

BASIC BLOCK if.end
%5883:	load	 %5865
%5884:	call	 %5883 %5865 portnum_ptr GetNatur
%5885:	icmp	 %5884 XXX
%5886:	br	 %5885 if.end4 if.then3

BASIC BLOCK if.then3
%5887:	load	 %5865
%5888:	call	 %5887 %5884 XXX parserro
%5889:	br	 return

BASIC BLOCK if.end4
%5890:	load	 %5865
%5891:	call	 %5890 %5865 %5874 %5875 polorbis
%5892:	icmp	 %5891 XXX
%5893:	br	 %5892 if.end8 if.then7

BASIC BLOCK if.then7
%5894:	store	 XXX %5874
%5895:	store	 XXX %5875
%5896:	br	 if.end8

BASIC BLOCK if.end8
%5897:	phi	 XXX XXX
%5898:	icmp	 %5891 XXX
%5899:	br	 %5898 if.end12 if.then10

BASIC BLOCK if.then10
%5900:	call	 XXX XXX printf
%5901:	br	 return

BASIC BLOCK if.end12
%5902:	load	 %5865
%5903:	call	 %5902 %5865 %5866 %5867 portamp
%5904:	icmp	 %5903 XXX
%5905:	br	 %5904 if.end17 if.then15

BASIC BLOCK if.then15
%5906:	call	 XXX XXX printf
%5907:	br	 return

BASIC BLOCK if.end17
%5908:	load	 %5865
%5909:	call	 %5908 %5865 %5870 %5871 pshdef1
%5910:	icmp	 %5909 XXX
%5911:	br	 %5910 if.end21 if.then20

BASIC BLOCK if.then20
%5912:	store	 XXX %5870
%5913:	store	 XXX %5871
%5914:	br	 if.end21

BASIC BLOCK if.end21
%5915:	icmp	 %5909 XXX
%5916:	br	 %5915 if.end25 if.then23

BASIC BLOCK if.then23
%5917:	call	 XXX XXX printf
%5918:	br	 return

BASIC BLOCK if.end25
%5919:	load	 %5865
%5920:	call	 %5919 %5865 %5868 %5869 pscdef1
%5921:	icmp	 %5920 XXX
%5922:	br	 %5921 if.end29 if.then28

BASIC BLOCK if.then28
%5923:	store	 XXX %5868
%5924:	store	 XXX %5869
%5925:	br	 if.end29

BASIC BLOCK if.end29
%5926:	icmp	 %5920 XXX
%5927:	br	 %5926 if.end33 if.then31

BASIC BLOCK if.then31
%5928:	call	 XXX XXX printf
%5929:	br	 return

BASIC BLOCK if.end33
%5930:	load	 %5865
%5931:	call	 %5930 %5865 %5872 %5873 ppadef1
%5932:	icmp	 %5931 XXX
%5933:	br	 %5932 if.end37 if.then36

BASIC BLOCK if.then36
%5934:	store	 XXX %5872
%5935:	store	 XXX %5873
%5936:	br	 if.end37

BASIC BLOCK if.end37
%5937:	icmp	 %5931 XXX
%5938:	br	 %5937 if.end41 if.then39

BASIC BLOCK if.then39
%5939:	call	 XXX XXX printf
%5940:	br	 return

BASIC BLOCK if.end41
%5941:	load	 %5866
%5942:	getelementptr	 PORT_PTR XXX XXX
%5943:	store	 %5941 %5942
%5944:	load	 %5867
%5945:	getelementptr	 PORT_PTR XXX XXX
%5946:	store	 %5944 %5945
%5947:	load	 %5868
%5948:	getelementptr	 PORT_PTR XXX XXX
%5949:	store	 %5947 %5948
%5950:	load	 %5869
%5951:	getelementptr	 PORT_PTR XXX XXX
%5952:	store	 %5950 %5951
%5953:	load	 %5870
%5954:	getelementptr	 PORT_PTR XXX XXX
%5955:	store	 %5953 %5954
%5956:	load	 %5871
%5957:	getelementptr	 PORT_PTR XXX XXX
%5958:	store	 %5956 %5957
%5959:	load	 %5872
%5960:	getelementptr	 PORT_PTR XXX XXX
%5961:	store	 %5959 %5960
%5962:	load	 %5873
%5963:	getelementptr	 PORT_PTR XXX XXX
%5964:	store	 %5962 %5963
%5965:	load	 %5874
%5966:	getelementptr	 PORT_PTR XXX XXX
%5967:	store	 %5965 %5966
%5968:	load	 %5875
%5969:	getelementptr	 PORT_PTR XXX XXX
%5970:	store	 %5968 %5969
%5971:	getelementptr	 PORT_PTR XXX XXX
%5972:	store	 %5897 %5971
%5973:	load	 %5865
%5974:	store	 %5973 pp2
%5975:	br	 return

BASIC BLOCK return
%5976:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX
%5977:	ret	 %5976

FUNCTION pshdef1

BASIC BLOCK entry
%5978:	alloca	 XXX
%5979:	store	 p1 %5978
%5980:	call	 XXX %5978 GetKeyword
%5981:	icmp	 %5980 XXX
%5982:	br	 %5981 if.end if.then

BASIC BLOCK if.then
%5983:	br	 return

BASIC BLOCK if.end
%5984:	load	 %5978
%5985:	call	 %5984 %5978 psh_ptr psh_unit_ptr angval
%5986:	icmp	 %5985 XXX
%5987:	br	 %5986 if.end4 if.then3

BASIC BLOCK if.then3
%5988:	load	 %5978
%5989:	call	 %5988 XXX XXX parserro
%5990:	br	 return

BASIC BLOCK if.end4
%5991:	load	 %5978
%5992:	store	 %5991 pp2
%5993:	br	 return

BASIC BLOCK return
%5994:	phi	 XXX XXX XXX
%5995:	ret	 %5994

FUNCTION pscdef1

BASIC BLOCK entry
%5996:	alloca	 XXX
%5997:	store	 p1 %5996
%5998:	call	 XXX %5996 GetKeyword
%5999:	icmp	 %5998 XXX
%6000:	br	 %5999 if.end if.then

BASIC BLOCK if.then
%6001:	br	 return

BASIC BLOCK if.end
%6002:	load	 %5996
%6003:	call	 %6002 %5996 psc_ptr psc_unit_ptr angval
%6004:	icmp	 %6003 XXX
%6005:	br	 %6004 if.end4 if.then3

BASIC BLOCK if.then3
%6006:	load	 %5996
%6007:	call	 %6006 XXX XXX parserro
%6008:	br	 return

BASIC BLOCK if.end4
%6009:	load	 %5996
%6010:	store	 %6009 pp2
%6011:	br	 return

BASIC BLOCK return
%6012:	phi	 XXX XXX XXX
%6013:	ret	 %6012

FUNCTION ppadef1

BASIC BLOCK entry
%6014:	alloca	 XXX
%6015:	store	 p1 %6014
%6016:	call	 XXX %6014 GetKeyword
%6017:	icmp	 %6016 XXX
%6018:	br	 %6017 if.end if.then

BASIC BLOCK if.then
%6019:	br	 return

BASIC BLOCK if.end
%6020:	load	 %6014
%6021:	call	 %6020 %6014 ppa_ptr ppa_unit_ptr angval
%6022:	icmp	 %6021 XXX
%6023:	br	 %6022 if.end4 if.then3

BASIC BLOCK if.then3
%6024:	load	 %6014
%6025:	call	 %6024 XXX XXX parserro
%6026:	br	 return

BASIC BLOCK if.end4
%6027:	load	 %6014
%6028:	store	 %6027 pp2
%6029:	br	 return

BASIC BLOCK return
%6030:	phi	 XXX XXX XXX
%6031:	ret	 %6030

FUNCTION portspec

BASIC BLOCK entry
%6032:	alloca	 XXX
%6033:	alloca	 XXX
%6034:	store	 p1 %6032
%6035:	call	 XXX %6032 GetKeyword
%6036:	icmp	 %6035 XXX
%6037:	br	 %6036 if.end if.then

BASIC BLOCK if.then
%6038:	br	 return

BASIC BLOCK if.end
%6039:	load	 %6032
%6040:	call	 %6039 %6032 nports_ptr GetNatur
%6041:	icmp	 %6040 XXX
%6042:	br	 %6041 if.end4 if.then3

BASIC BLOCK if.then3
%6043:	store	 XXX nports_ptr
%6044:	load	 %6032
%6045:	call	 %6044 XXX XXX parserro
%6046:	br	 return

BASIC BLOCK if.end4
%6047:	br	 for.cond

BASIC BLOCK for.cond
%6048:	phi	 XXX %6086
%6049:	phi	 XXX %6082
%6050:	phi	 XXX %6055
%6051:	load	 nports_ptr
%6052:	icmp	 %6048 %6051
%6053:	br	 %6052 for.end for.body

BASIC BLOCK for.body
%6054:	call	 XXX malloc
%6055:	bitcast	 %6054
%6056:	icmp	 %6055 XXX
%6057:	br	 %6056 if.end9 if.then8

BASIC BLOCK if.then8
%6058:	load	 %6032
%6059:	call	 %6058 XXX XXX parserro
%6060:	call	 XXX interror
%6061:	br	 if.end9

BASIC BLOCK if.end9
%6062:	load	 %6032
%6063:	call	 %6062 %6032 %6055 %6033 portdef
%6064:	icmp	 %6063 XXX
%6065:	br	 %6064 if.end13 if.then12

BASIC BLOCK if.then12
%6066:	load	 %6032
%6067:	call	 %6066 XXX XXX parserro
%6068:	br	 return

BASIC BLOCK if.end13
%6069:	icmp	 %6063 XXX
%6070:	br	 %6069 if.end17 if.then15

BASIC BLOCK if.then15
%6071:	call	 XXX XXX %6048 printf
%6072:	br	 return

BASIC BLOCK if.end17
%6073:	load	 %6033
%6074:	getelementptr	 %6055 XXX XXX
%6075:	store	 %6073 %6074
%6076:	icmp	 %6049 XXX
%6077:	br	 %6076 if.else if.then19

BASIC BLOCK if.then19
%6078:	br	 if.end20

BASIC BLOCK if.else
%6079:	getelementptr	 %6050 XXX XXX
%6080:	store	 %6055 %6079
%6081:	br	 if.end20

BASIC BLOCK if.end20
%6082:	phi	 %6055 %6049
%6083:	getelementptr	 %6055 XXX XXX
%6084:	store	 XXX %6083
%6085:	br	 for.inc

BASIC BLOCK for.inc
%6086:	add	 %6048 XXX
%6087:	br	 for.cond

BASIC BLOCK for.end
%6088:	store	 %6049 port_ptr
%6089:	load	 %6032
%6090:	store	 %6089 pp2
%6091:	br	 return

BASIC BLOCK return
%6092:	phi	 XXX XXX XXX XXX XXX
%6093:	ret	 %6092

FUNCTION pqlimits

BASIC BLOCK entry
%6094:	store	 gnode_ptr qmax_ptr
%6095:	store	 gnode_ptr qmin_ptr
%6096:	store	 gnode_ptr pmax_ptr
%6097:	store	 gnode_ptr pmin_ptr
%6098:	br	 while.cond

BASIC BLOCK while.cond
%6099:	phi	 gnode_ptr %6143
%6100:	phi	 XXX %6114
%6101:	phi	 XXX %6123
%6102:	phi	 XXX %6132
%6103:	phi	 XXX %6141
%6104:	icmp	 %6099 XXX
%6105:	br	 %6104 while.end while.body

BASIC BLOCK while.body
%6106:	getelementptr	 %6099 XXX XXX
%6107:	load	 %6106
%6108:	icmp	 %6107 %6100
%6109:	br	 %6108 if.end if.then

BASIC BLOCK if.then
%6110:	getelementptr	 %6099 XXX XXX
%6111:	load	 %6110
%6112:	store	 %6099 pmin_ptr
%6113:	br	 if.end

BASIC BLOCK if.end
%6114:	phi	 %6111 %6100
%6115:	getelementptr	 %6099 XXX XXX
%6116:	load	 %6115
%6117:	icmp	 %6116 %6101
%6118:	br	 %6117 if.end7 if.then5

BASIC BLOCK if.then5
%6119:	getelementptr	 %6099 XXX XXX
%6120:	load	 %6119
%6121:	store	 %6099 pmax_ptr
%6122:	br	 if.end7

BASIC BLOCK if.end7
%6123:	phi	 %6120 %6101
%6124:	getelementptr	 %6099 XXX XXX
%6125:	load	 %6124
%6126:	icmp	 %6125 %6102
%6127:	br	 %6126 if.end11 if.then9

BASIC BLOCK if.then9
%6128:	getelementptr	 %6099 XXX XXX
%6129:	load	 %6128
%6130:	store	 %6099 qmin_ptr
%6131:	br	 if.end11

BASIC BLOCK if.end11
%6132:	phi	 %6129 %6102
%6133:	getelementptr	 %6099 XXX XXX
%6134:	load	 %6133
%6135:	icmp	 %6134 %6103
%6136:	br	 %6135 if.end16 if.then14

BASIC BLOCK if.then14
%6137:	getelementptr	 %6099 XXX XXX
%6138:	load	 %6137
%6139:	store	 %6099 qmax_ptr
%6140:	br	 if.end16

BASIC BLOCK if.end16
%6141:	phi	 %6138 %6103
%6142:	getelementptr	 %6099 XXX XXX
%6143:	load	 %6142
%6144:	br	 while.cond

BASIC BLOCK while.end
%6145:	ret	 XXX

FUNCTION secorder

BASIC BLOCK entry
%6146:	fmul	 a x
%6147:	fmul	 %6146 x
%6148:	fmul	 b y
%6149:	fmul	 %6148 y
%6150:	fadd	 %6147 %6149
%6151:	fmul	 c x
%6152:	fadd	 %6150 %6151
%6153:	fmul	 d y
%6154:	fadd	 %6152 %6153
%6155:	fadd	 %6154 e
%6156:	ret	 %6155

FUNCTION seqrothg

BASIC BLOCK entry
%6157:	br	 while.cond

BASIC BLOCK while.cond
%6158:	phi	 phase_start %6172
%6159:	phi	 angle_start %6173
%6160:	phi	 g %6175
%6161:	icmp	 %6160 XXX
%6162:	br	 %6161 while.end while.body

BASIC BLOCK while.body
%6163:	getelementptr	 %6160 XXX XXX
%6164:	load	 %6163
%6165:	getelementptr	 %6164 XXX XXX
%6166:	store	 %6158 %6165
%6167:	getelementptr	 %6160 XXX XXX
%6168:	load	 %6167
%6169:	fadd	 %6168 %6159
%6170:	getelementptr	 %6160 XXX XXX
%6171:	store	 %6169 %6170
%6172:	fadd	 %6158 phase_step
%6173:	fadd	 %6159 angle_step
%6174:	getelementptr	 %6160 XXX XXX
%6175:	load	 %6174
%6176:	br	 while.cond

BASIC BLOCK while.end
%6177:	ret	

FUNCTION seqrotrg

BASIC BLOCK entry
%6178:	alloca	 XXX
%6179:	alloca	 XXX
%6180:	alloca	 XXX
%6181:	alloca	 XXX
%6182:	call	 g %6178 %6179 %6180 %6181 pqlimits
%6183:	load	 %6178
%6184:	getelementptr	 %6183 XXX XXX
%6185:	load	 %6184
%6186:	load	 %6179
%6187:	getelementptr	 %6186 XXX XXX
%6188:	load	 %6187
%6189:	load	 %6180
%6190:	getelementptr	 %6189 XXX XXX
%6191:	load	 %6190
%6192:	load	 %6181
%6193:	getelementptr	 %6192 XXX XXX
%6194:	load	 %6193
%6195:	icmp	 %6185 %6188
%6196:	br	 %6195 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%6197:	icmp	 %6191 %6194
%6198:	br	 %6197 if.end if.then

BASIC BLOCK if.then
%6199:	call	 XXX interror
%6200:	call	 XXX exit
%6201:	unreachable	

BASIC BLOCK if.end
%6202:	sub	 %6188 %6185
%6203:	add	 %6202 XXX
%6204:	sub	 %6194 %6191
%6205:	add	 %6204 XXX
%6206:	mul	 %6203 %6205
%6207:	br	 while.cond

BASIC BLOCK while.cond
%6208:	phi	 %6194 %6364
%6209:	phi	 %6191 %6363
%6210:	phi	 %6188 %6362
%6211:	phi	 %6185 %6361
%6212:	phi	 XXX %6357
%6213:	phi	 XXX %6358
%6214:	phi	 phase_start %6359
%6215:	phi	 angle_start %6360
%6216:	icmp	 %6212 XXX
%6217:	xor	 %6216 XXX
%6218:	br	 %6217 while.end91 while.body

BASIC BLOCK while.body
%6219:	icmp	 %6211 %6210
%6220:	br	 %6219 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%6221:	icmp	 %6209 %6208
%6222:	br	 %6221 if.else if.then8

BASIC BLOCK if.then8
%6223:	call	 %6211 %6209 %6214 %6215 g gnodevis
%6224:	fadd	 %6214 phase_step
%6225:	fadd	 %6215 angle_step
%6226:	add	 %6213 XXX
%6227:	icmp	 %6226 %6206
%6228:	br	 %6227 if.end13 if.then12

BASIC BLOCK if.then12
%6229:	br	 if.end13

BASIC BLOCK if.end13
%6230:	phi	 XXX %6212
%6231:	br	 if.end86

BASIC BLOCK if.else
%6232:	sub	 %6210 XXX
%6233:	icmp	 %6232 %6211
%6234:	br	 %6233 if.end29 if.then16

BASIC BLOCK if.then16
%6235:	br	 while.cond17

BASIC BLOCK while.cond17
%6236:	phi	 %6211 %6256
%6237:	phi	 %6212 %6255
%6238:	phi	 %6213 %6251
%6239:	phi	 %6214 %6249
%6240:	phi	 %6215 %6250
%6241:	icmp	 %6236 %6232
%6242:	br	 %6241 land.end land.rhs

BASIC BLOCK land.rhs
%6243:	icmp	 %6237 XXX
%6244:	xor	 %6243 XXX
%6245:	br	 land.end

BASIC BLOCK land.end
%6246:	phi	 XXX %6244
%6247:	br	 %6246 while.end while.body21

BASIC BLOCK while.body21
%6248:	call	 %6236 %6208 %6239 %6240 g gnodevis
%6249:	fadd	 %6239 phase_step
%6250:	fadd	 %6240 angle_step
%6251:	add	 %6238 XXX
%6252:	icmp	 %6251 %6206
%6253:	br	 %6252 if.end27 if.then26

BASIC BLOCK if.then26
%6254:	br	 if.end27

BASIC BLOCK if.end27
%6255:	phi	 XXX %6237
%6256:	add	 %6236 XXX
%6257:	br	 while.cond17

BASIC BLOCK while.end
%6258:	br	 if.end29

BASIC BLOCK if.end29
%6259:	phi	 %6237 %6212
%6260:	phi	 %6238 %6213
%6261:	phi	 %6239 %6214
%6262:	phi	 %6240 %6215
%6263:	add	 %6209 XXX
%6264:	icmp	 %6208 %6263
%6265:	br	 %6264 if.end47 if.then32

BASIC BLOCK if.then32
%6266:	br	 while.cond33

BASIC BLOCK while.cond33
%6267:	phi	 %6208 %6287
%6268:	phi	 %6259 %6286
%6269:	phi	 %6260 %6282
%6270:	phi	 %6261 %6280
%6271:	phi	 %6262 %6281
%6272:	icmp	 %6267 %6263
%6273:	br	 %6272 land.end38 land.rhs35

BASIC BLOCK land.rhs35
%6274:	icmp	 %6268 XXX
%6275:	xor	 %6274 XXX
%6276:	br	 land.end38

BASIC BLOCK land.end38
%6277:	phi	 XXX %6275
%6278:	br	 %6277 while.end46 while.body39

BASIC BLOCK while.body39
%6279:	call	 %6210 %6267 %6270 %6271 g gnodevis
%6280:	fadd	 %6270 phase_step
%6281:	fadd	 %6271 angle_step
%6282:	add	 %6269 XXX
%6283:	icmp	 %6282 %6206
%6284:	br	 %6283 if.end45 if.then44

BASIC BLOCK if.then44
%6285:	br	 if.end45

BASIC BLOCK if.end45
%6286:	phi	 XXX %6268
%6287:	add	 %6267 XXX
%6288:	br	 while.cond33

BASIC BLOCK while.end46
%6289:	br	 if.end47

BASIC BLOCK if.end47
%6290:	phi	 %6268 %6259
%6291:	phi	 %6269 %6260
%6292:	phi	 %6270 %6261
%6293:	phi	 %6271 %6262
%6294:	add	 %6211 XXX
%6295:	icmp	 %6210 %6294
%6296:	br	 %6295 if.end66 if.then50

BASIC BLOCK if.then50
%6297:	br	 while.cond51

BASIC BLOCK while.cond51
%6298:	phi	 %6210 %6318
%6299:	phi	 %6290 %6317
%6300:	phi	 %6291 %6313
%6301:	phi	 %6292 %6311
%6302:	phi	 %6293 %6312
%6303:	icmp	 %6298 %6294
%6304:	br	 %6303 land.end56 land.rhs53

BASIC BLOCK land.rhs53
%6305:	icmp	 %6299 XXX
%6306:	xor	 %6305 XXX
%6307:	br	 land.end56

BASIC BLOCK land.end56
%6308:	phi	 XXX %6306
%6309:	br	 %6308 while.end65 while.body57

BASIC BLOCK while.body57
%6310:	call	 %6298 %6209 %6301 %6302 g gnodevis
%6311:	fadd	 %6301 phase_step
%6312:	fadd	 %6302 angle_step
%6313:	add	 %6300 XXX
%6314:	icmp	 %6313 %6206
%6315:	br	 %6314 if.end63 if.then62

BASIC BLOCK if.then62
%6316:	br	 if.end63

BASIC BLOCK if.end63
%6317:	phi	 XXX %6299
%6318:	add	 %6298 XXX
%6319:	br	 while.cond51

BASIC BLOCK while.end65
%6320:	br	 if.end66

BASIC BLOCK if.end66
%6321:	phi	 %6299 %6290
%6322:	phi	 %6300 %6291
%6323:	phi	 %6301 %6292
%6324:	phi	 %6302 %6293
%6325:	sub	 %6208 XXX
%6326:	icmp	 %6325 %6209
%6327:	br	 %6326 if.end85 if.then69

BASIC BLOCK if.then69
%6328:	br	 while.cond70

BASIC BLOCK while.cond70
%6329:	phi	 %6209 %6349
%6330:	phi	 %6321 %6348
%6331:	phi	 %6322 %6344
%6332:	phi	 %6323 %6342
%6333:	phi	 %6324 %6343
%6334:	icmp	 %6329 %6325
%6335:	br	 %6334 land.end75 land.rhs72

BASIC BLOCK land.rhs72
%6336:	icmp	 %6330 XXX
%6337:	xor	 %6336 XXX
%6338:	br	 land.end75

BASIC BLOCK land.end75
%6339:	phi	 XXX %6337
%6340:	br	 %6339 while.end84 while.body76

BASIC BLOCK while.body76
%6341:	call	 %6211 %6329 %6332 %6333 g gnodevis
%6342:	fadd	 %6332 phase_step
%6343:	fadd	 %6333 angle_step
%6344:	add	 %6331 XXX
%6345:	icmp	 %6344 %6206
%6346:	br	 %6345 if.end82 if.then81

BASIC BLOCK if.then81
%6347:	br	 if.end82

BASIC BLOCK if.end82
%6348:	phi	 XXX %6330
%6349:	add	 %6329 XXX
%6350:	br	 while.cond70

BASIC BLOCK while.end84
%6351:	br	 if.end85

BASIC BLOCK if.end85
%6352:	phi	 %6330 %6321
%6353:	phi	 %6331 %6322
%6354:	phi	 %6332 %6323
%6355:	phi	 %6333 %6324
%6356:	br	 if.end86

BASIC BLOCK if.end86
%6357:	phi	 %6230 %6352
%6358:	phi	 %6226 %6353
%6359:	phi	 %6224 %6354
%6360:	phi	 %6225 %6355
%6361:	add	 %6211 XXX
%6362:	add	 %6210 XXX
%6363:	add	 %6209 XXX
%6364:	add	 %6208 XXX
%6365:	br	 while.cond

BASIC BLOCK while.end91
%6366:	ret	

FUNCTION serotdir

BASIC BLOCK entry
%6367:	alloca	 XXX
%6368:	store	 p1 %6367
%6369:	call	 XXX %6367 GetKeyword
%6370:	icmp	 %6369 XXX
%6371:	br	 %6370 if.end if.then

BASIC BLOCK if.then
%6372:	store	 XXX direction_ptr
%6373:	load	 %6367
%6374:	store	 %6373 pp2
%6375:	br	 return

BASIC BLOCK if.end
%6376:	call	 XXX %6367 GetKeyword
%6377:	icmp	 %6376 XXX
%6378:	br	 %6377 if.end4 if.then3

BASIC BLOCK if.then3
%6379:	store	 XXX direction_ptr
%6380:	load	 %6367
%6381:	store	 %6380 pp2
%6382:	br	 return

BASIC BLOCK if.end4
%6383:	br	 return

BASIC BLOCK return
%6384:	phi	 XXX XXX XXX
%6385:	ret	 %6384

FUNCTION serotpar

BASIC BLOCK entry
%6386:	alloca	 XXX
%6387:	store	 p1 %6386
%6388:	store	 XXX omit_phase_ptr
%6389:	load	 %6386
%6390:	call	 %6389 %6386 angle_start_ptr angle_step_ptr angle_unit_ptr anglerot
%6391:	icmp	 %6390 XXX
%6392:	br	 %6391 if.end if.then

BASIC BLOCK if.then
%6393:	br	 return

BASIC BLOCK if.end
%6394:	icmp	 %6390 XXX
%6395:	br	 %6394 if.end3 if.then2

BASIC BLOCK if.then2
%6396:	store	 XXX omit_phase_ptr
%6397:	br	 return

BASIC BLOCK if.end3
%6398:	store	 XXX omit_phase_ptr
%6399:	load	 %6386
%6400:	call	 %6399 %6386 phase_start_ptr phase_step_ptr phase_unit_ptr phaserot
%6401:	icmp	 %6400 XXX
%6402:	br	 %6401 if.end7 if.then6

BASIC BLOCK if.then6
%6403:	br	 return

BASIC BLOCK if.end7
%6404:	icmp	 %6400 XXX
%6405:	br	 %6404 if.end10 if.then9

BASIC BLOCK if.then9
%6406:	store	 XXX omit_phase_ptr
%6407:	load	 %6386
%6408:	store	 %6407 pp2
%6409:	br	 return

BASIC BLOCK if.end10
%6410:	store	 XXX omit_phase_ptr
%6411:	load	 %6386
%6412:	store	 %6411 pp2
%6413:	br	 return

BASIC BLOCK return
%6414:	phi	 XXX XXX XXX XXX XXX
%6415:	ret	 %6414

FUNCTION sgramp2n

BASIC BLOCK entry
%6416:	alloca	 XXX
%6417:	alloca	 XXX
%6418:	alloca	 XXX
%6419:	alloca	 XXX
%6420:	alloca	 XXX
%6421:	alloca	 XXX
%6422:	store	 XXX %6416
%6423:	store	 XXX %6417
%6424:	store	 XXX %6418
%6425:	store	 XXX %6419
%6426:	getelementptr	 grampexc_ptr XXX XXX
%6427:	load	 %6426
%6428:	getelementptr	 grampexc_ptr XXX XXX
%6429:	load	 %6428
%6430:	getelementptr	 grampexc_ptr XXX XXX
%6431:	load	 %6430
%6432:	getelementptr	 grampexc_ptr XXX XXX
%6433:	load	 %6432
%6434:	getelementptr	 grampexc_ptr XXX XXX
%6435:	load	 %6434
%6436:	icmp	 group_shape XXX
%6437:	br	 %6436 if.else if.then

BASIC BLOCK if.then
%6438:	call	 geomnode_ptr %6416 %6417 %6418 %6419 pqlimits
%6439:	load	 %6416
%6440:	getelementptr	 %6439 XXX XXX
%6441:	load	 %6440
%6442:	load	 %6417
%6443:	getelementptr	 %6442 XXX XXX
%6444:	load	 %6443
%6445:	load	 %6418
%6446:	getelementptr	 %6445 XXX XXX
%6447:	load	 %6446
%6448:	load	 %6419
%6449:	getelementptr	 %6448 XXX XXX
%6450:	load	 %6449
%6451:	fadd	 %6447 %6450
%6452:	fdiv	 %6451 XXX
%6453:	fadd	 %6441 %6444
%6454:	fdiv	 %6453 XXX
%6455:	br	 if.end34

BASIC BLOCK if.else
%6456:	icmp	 group_shape XXX
%6457:	br	 %6456 if.else31 if.then6

BASIC BLOCK if.then6
%6458:	br	 for.cond

BASIC BLOCK for.cond
%6459:	phi	 geomnode_ptr %6476
%6460:	phi	 XXX %6482
%6461:	icmp	 %6460 XXX
%6462:	br	 %6461 for.end for.body

BASIC BLOCK for.body
%6463:	icmp	 %6459 XXX
%6464:	br	 %6463 if.else13 if.then8

BASIC BLOCK if.then8
%6465:	getelementptr	 %6459 XXX XXX
%6466:	load	 %6465
%6467:	sext	 %6460
%6468:	getelementptr	 %6420 XXX %6467
%6469:	store	 %6466 %6468
%6470:	getelementptr	 %6459 XXX XXX
%6471:	load	 %6470
%6472:	sext	 %6460
%6473:	getelementptr	 %6421 XXX %6472
%6474:	store	 %6471 %6473
%6475:	getelementptr	 %6459 XXX XXX
%6476:	load	 %6475
%6477:	br	 if.end

BASIC BLOCK if.else13
%6478:	call	 XXX printf
%6479:	call	 XXX exit
%6480:	unreachable	

BASIC BLOCK if.end
%6481:	br	 for.inc

BASIC BLOCK for.inc
%6482:	add	 %6460 XXX
%6483:	br	 for.cond

BASIC BLOCK for.end
%6484:	getelementptr	 %6420 XXX XXX
%6485:	getelementptr	 %6421 XXX XXX
%6486:	getelementptr	 %6420 XXX XXX
%6487:	load	 %6486
%6488:	getelementptr	 %6421 XXX XXX
%6489:	getelementptr	 %6420 XXX XXX
%6490:	load	 %6489
%6491:	getelementptr	 %6420 XXX XXX
%6492:	load	 %6491
%6493:	fadd	 %6490 %6492
%6494:	getelementptr	 %6421 XXX XXX
%6495:	getelementptr	 %6420 XXX XXX
%6496:	load	 %6495
%6497:	getelementptr	 %6420 XXX XXX
%6498:	load	 %6497
%6499:	fadd	 %6496 %6498
%6500:	getelementptr	 %6421 XXX XXX
%6501:	load	 %6500
%6502:	getelementptr	 %6420 XXX XXX
%6503:	load	 %6502
%6504:	getelementptr	 %6421 XXX XXX
%6505:	load	 %6504
%6506:	br	 if.end33

BASIC BLOCK if.else31
%6507:	call	 XXX XXX printf
%6508:	br	 return

BASIC BLOCK if.end33
%6509:	br	 if.end34

BASIC BLOCK if.end34
%6510:	phi	 %6444 %6487
%6511:	phi	 %6450 %6501
%6512:	phi	 %6454 %6503
%6513:	phi	 %6452 %6505
%6514:	fsub	 %6510 %6512
%6515:	fsub	 %6511 %6513
%6516:	fcmp	 %6514 XXX
%6517:	br	 %6516 if.else38 if.then37

BASIC BLOCK if.then37
%6518:	br	 if.end49

BASIC BLOCK if.else38
%6519:	fadd	 %6429 %6431
%6520:	fmul	 XXX %6427
%6521:	fsub	 %6519 %6520
%6522:	fmul	 XXX %6514
%6523:	fmul	 %6522 %6514
%6524:	fdiv	 %6521 %6523
%6525:	fmul	 %6524 %6514
%6526:	fmul	 %6525 %6514
%6527:	fadd	 %6526 %6427
%6528:	fsub	 %6527 %6429
%6529:	fdiv	 %6528 %6514
%6530:	br	 if.end49

BASIC BLOCK if.end49
%6531:	phi	 XXX %6524
%6532:	phi	 XXX %6529
%6533:	fcmp	 %6515 XXX
%6534:	br	 %6533 if.else52 if.then51

BASIC BLOCK if.then51
%6535:	br	 if.end64

BASIC BLOCK if.else52
%6536:	fadd	 %6433 %6435
%6537:	fmul	 XXX %6427
%6538:	fsub	 %6536 %6537
%6539:	fmul	 XXX %6515
%6540:	fmul	 %6539 %6515
%6541:	fdiv	 %6538 %6540
%6542:	fmul	 %6541 %6515
%6543:	fmul	 %6542 %6515
%6544:	fadd	 %6543 %6427
%6545:	fsub	 %6544 %6433
%6546:	fdiv	 %6545 %6515
%6547:	br	 if.end64

BASIC BLOCK if.end64
%6548:	phi	 XXX %6541
%6549:	phi	 XXX %6546
%6550:	fmul	 XXX %6531
%6551:	fmul	 %6550 %6512
%6552:	fsub	 %6532 %6551
%6553:	fmul	 XXX %6548
%6554:	fmul	 %6553 %6513
%6555:	fsub	 %6549 %6554
%6556:	fmul	 %6531 %6512
%6557:	fmul	 %6556 %6512
%6558:	fmul	 %6548 %6513
%6559:	fmul	 %6558 %6513
%6560:	fadd	 %6557 %6559
%6561:	fmul	 %6532 %6512
%6562:	fsub	 %6560 %6561
%6563:	fmul	 %6549 %6513
%6564:	fsub	 %6562 %6563
%6565:	fadd	 %6564 %6427
%6566:	br	 while.cond

BASIC BLOCK while.cond
%6567:	phi	 geomnode_ptr %6608
%6568:	icmp	 %6567 XXX
%6569:	br	 %6568 while.end103 while.body

BASIC BLOCK while.body
%6570:	getelementptr	 %6567 XXX XXX
%6571:	load	 %6570
%6572:	getelementptr	 %6567 XXX XXX
%6573:	load	 %6572
%6574:	call	 %6531 %6548 %6552 %6555 %6565 %6571 %6573 secorder
%6575:	br	 while.cond85

BASIC BLOCK while.cond85
%6576:	phi	 port_ptr %6603
%6577:	phi	 XXX %6582
%6578:	phi	 XXX %6599
%6579:	icmp	 %6576 XXX
%6580:	br	 %6579 while.end while.body87

BASIC BLOCK while.body87
%6581:	call	 XXX malloc
%6582:	bitcast	 %6581
%6583:	icmp	 %6582 XXX
%6584:	br	 %6583 if.end92 if.then90

BASIC BLOCK if.then90
%6585:	call	 XXX XXX printf
%6586:	call	 XXX interror
%6587:	br	 if.end92

BASIC BLOCK if.end92
%6588:	getelementptr	 %6576 XXX XXX
%6589:	load	 %6588
%6590:	fmul	 %6574 %6589
%6591:	getelementptr	 %6582 XXX XXX
%6592:	store	 %6590 %6591
%6593:	icmp	 %6578 XXX
%6594:	br	 %6593 if.else97 if.then96

BASIC BLOCK if.then96
%6595:	br	 if.end99

BASIC BLOCK if.else97
%6596:	getelementptr	 %6577 XXX XXX
%6597:	store	 %6582 %6596
%6598:	br	 if.end99

BASIC BLOCK if.end99
%6599:	phi	 %6582 %6578
%6600:	getelementptr	 %6582 XXX XXX
%6601:	store	 XXX %6600
%6602:	getelementptr	 %6576 XXX XXX
%6603:	load	 %6602
%6604:	br	 while.cond85

BASIC BLOCK while.end
%6605:	getelementptr	 %6567 XXX XXX
%6606:	store	 %6578 %6605
%6607:	getelementptr	 %6567 XXX XXX
%6608:	load	 %6607
%6609:	br	 while.cond

BASIC BLOCK while.end103
%6610:	br	 return

BASIC BLOCK return
%6611:	phi	 XXX XXX
%6612:	ret	 %6611

FUNCTION sgrampun

BASIC BLOCK entry
%6613:	getelementptr	 grampexc_ptr XXX XXX
%6614:	load	 %6613
%6615:	br	 while.cond

BASIC BLOCK while.cond
%6616:	phi	 geomnode_ptr %6652
%6617:	icmp	 %6616 XXX
%6618:	br	 %6617 while.end13 while.body

BASIC BLOCK while.body
%6619:	br	 while.cond1

BASIC BLOCK while.cond1
%6620:	phi	 XXX %6643
%6621:	phi	 XXX %6626
%6622:	phi	 port_ptr %6647
%6623:	icmp	 %6622 XXX
%6624:	br	 %6623 while.end while.body3

BASIC BLOCK while.body3
%6625:	call	 XXX malloc
%6626:	bitcast	 %6625
%6627:	icmp	 %6626 XXX
%6628:	br	 %6627 if.end if.then

BASIC BLOCK if.then
%6629:	call	 XXX XXX printf
%6630:	call	 XXX interror
%6631:	br	 if.end

BASIC BLOCK if.end
%6632:	getelementptr	 %6622 XXX XXX
%6633:	load	 %6632
%6634:	fmul	 %6614 %6633
%6635:	getelementptr	 %6626 XXX XXX
%6636:	store	 %6634 %6635
%6637:	icmp	 %6620 XXX
%6638:	br	 %6637 if.else if.then8

BASIC BLOCK if.then8
%6639:	br	 if.end9

BASIC BLOCK if.else
%6640:	getelementptr	 %6621 XXX XXX
%6641:	store	 %6626 %6640
%6642:	br	 if.end9

BASIC BLOCK if.end9
%6643:	phi	 %6626 %6620
%6644:	getelementptr	 %6626 XXX XXX
%6645:	store	 XXX %6644
%6646:	getelementptr	 %6622 XXX XXX
%6647:	load	 %6646
%6648:	br	 while.cond1

BASIC BLOCK while.end
%6649:	getelementptr	 %6616 XXX XXX
%6650:	store	 %6620 %6649
%6651:	getelementptr	 %6616 XXX XXX
%6652:	load	 %6651
%6653:	br	 while.cond

BASIC BLOCK while.end13
%6654:	ret	 XXX

FUNCTION sgrpha2n

BASIC BLOCK entry
%6655:	alloca	 XXX
%6656:	alloca	 XXX
%6657:	alloca	 XXX
%6658:	alloca	 XXX
%6659:	alloca	 XXX
%6660:	alloca	 XXX
%6661:	store	 XXX %6655
%6662:	store	 XXX %6656
%6663:	store	 XXX %6657
%6664:	store	 XXX %6658
%6665:	getelementptr	 grphaexc_ptr XXX XXX
%6666:	load	 %6665
%6667:	getelementptr	 grphaexc_ptr XXX XXX
%6668:	load	 %6667
%6669:	getelementptr	 grphaexc_ptr XXX XXX
%6670:	load	 %6669
%6671:	getelementptr	 grphaexc_ptr XXX XXX
%6672:	load	 %6671
%6673:	getelementptr	 grphaexc_ptr XXX XXX
%6674:	load	 %6673
%6675:	icmp	 group_shape XXX
%6676:	br	 %6675 if.else if.then

BASIC BLOCK if.then
%6677:	call	 geomnode_ptr %6655 %6656 %6657 %6658 pqlimits
%6678:	load	 %6655
%6679:	getelementptr	 %6678 XXX XXX
%6680:	load	 %6679
%6681:	load	 %6656
%6682:	getelementptr	 %6681 XXX XXX
%6683:	load	 %6682
%6684:	load	 %6657
%6685:	getelementptr	 %6684 XXX XXX
%6686:	load	 %6685
%6687:	load	 %6658
%6688:	getelementptr	 %6687 XXX XXX
%6689:	load	 %6688
%6690:	fadd	 %6686 %6689
%6691:	fdiv	 %6690 XXX
%6692:	fadd	 %6680 %6683
%6693:	fdiv	 %6692 XXX
%6694:	br	 if.end34

BASIC BLOCK if.else
%6695:	icmp	 group_shape XXX
%6696:	br	 %6695 if.else31 if.then6

BASIC BLOCK if.then6
%6697:	br	 for.cond

BASIC BLOCK for.cond
%6698:	phi	 geomnode_ptr %6715
%6699:	phi	 XXX %6721
%6700:	icmp	 %6699 XXX
%6701:	br	 %6700 for.end for.body

BASIC BLOCK for.body
%6702:	icmp	 %6698 XXX
%6703:	br	 %6702 if.else13 if.then8

BASIC BLOCK if.then8
%6704:	getelementptr	 %6698 XXX XXX
%6705:	load	 %6704
%6706:	sext	 %6699
%6707:	getelementptr	 %6659 XXX %6706
%6708:	store	 %6705 %6707
%6709:	getelementptr	 %6698 XXX XXX
%6710:	load	 %6709
%6711:	sext	 %6699
%6712:	getelementptr	 %6660 XXX %6711
%6713:	store	 %6710 %6712
%6714:	getelementptr	 %6698 XXX XXX
%6715:	load	 %6714
%6716:	br	 if.end

BASIC BLOCK if.else13
%6717:	call	 XXX printf
%6718:	call	 XXX exit
%6719:	unreachable	

BASIC BLOCK if.end
%6720:	br	 for.inc

BASIC BLOCK for.inc
%6721:	add	 %6699 XXX
%6722:	br	 for.cond

BASIC BLOCK for.end
%6723:	getelementptr	 %6659 XXX XXX
%6724:	getelementptr	 %6660 XXX XXX
%6725:	getelementptr	 %6659 XXX XXX
%6726:	load	 %6725
%6727:	getelementptr	 %6660 XXX XXX
%6728:	getelementptr	 %6659 XXX XXX
%6729:	load	 %6728
%6730:	getelementptr	 %6659 XXX XXX
%6731:	load	 %6730
%6732:	fadd	 %6729 %6731
%6733:	getelementptr	 %6660 XXX XXX
%6734:	getelementptr	 %6659 XXX XXX
%6735:	load	 %6734
%6736:	getelementptr	 %6659 XXX XXX
%6737:	load	 %6736
%6738:	fadd	 %6735 %6737
%6739:	getelementptr	 %6660 XXX XXX
%6740:	load	 %6739
%6741:	getelementptr	 %6659 XXX XXX
%6742:	load	 %6741
%6743:	getelementptr	 %6660 XXX XXX
%6744:	load	 %6743
%6745:	br	 if.end33

BASIC BLOCK if.else31
%6746:	call	 XXX XXX printf
%6747:	br	 return

BASIC BLOCK if.end33
%6748:	br	 if.end34

BASIC BLOCK if.end34
%6749:	phi	 %6683 %6726
%6750:	phi	 %6689 %6740
%6751:	phi	 %6693 %6742
%6752:	phi	 %6691 %6744
%6753:	fsub	 %6749 %6751
%6754:	fsub	 %6750 %6752
%6755:	fcmp	 %6753 XXX
%6756:	br	 %6755 if.else38 if.then37

BASIC BLOCK if.then37
%6757:	br	 if.end49

BASIC BLOCK if.else38
%6758:	fadd	 %6668 %6670
%6759:	fmul	 XXX %6666
%6760:	fsub	 %6758 %6759
%6761:	fmul	 XXX %6753
%6762:	fmul	 %6761 %6753
%6763:	fdiv	 %6760 %6762
%6764:	fmul	 %6763 %6753
%6765:	fmul	 %6764 %6753
%6766:	fadd	 %6765 %6666
%6767:	fsub	 %6766 %6668
%6768:	fdiv	 %6767 %6753
%6769:	br	 if.end49

BASIC BLOCK if.end49
%6770:	phi	 XXX %6763
%6771:	phi	 XXX %6768
%6772:	fcmp	 %6754 XXX
%6773:	br	 %6772 if.else52 if.then51

BASIC BLOCK if.then51
%6774:	br	 if.end64

BASIC BLOCK if.else52
%6775:	fadd	 %6672 %6674
%6776:	fmul	 XXX %6666
%6777:	fsub	 %6775 %6776
%6778:	fmul	 XXX %6754
%6779:	fmul	 %6778 %6754
%6780:	fdiv	 %6777 %6779
%6781:	fmul	 %6780 %6754
%6782:	fmul	 %6781 %6754
%6783:	fadd	 %6782 %6666
%6784:	fsub	 %6783 %6672
%6785:	fdiv	 %6784 %6754
%6786:	br	 if.end64

BASIC BLOCK if.end64
%6787:	phi	 XXX %6780
%6788:	phi	 XXX %6785
%6789:	fmul	 XXX %6770
%6790:	fmul	 %6789 %6751
%6791:	fsub	 %6771 %6790
%6792:	fmul	 XXX %6787
%6793:	fmul	 %6792 %6752
%6794:	fsub	 %6788 %6793
%6795:	fmul	 %6770 %6751
%6796:	fmul	 %6795 %6751
%6797:	fmul	 %6787 %6752
%6798:	fmul	 %6797 %6752
%6799:	fadd	 %6796 %6798
%6800:	fmul	 %6771 %6751
%6801:	fsub	 %6799 %6800
%6802:	fmul	 %6788 %6752
%6803:	fsub	 %6801 %6802
%6804:	fadd	 %6803 %6666
%6805:	br	 while.cond

BASIC BLOCK while.cond
%6806:	phi	 geomnode_ptr %6840
%6807:	icmp	 %6806 XXX
%6808:	br	 %6807 while.end95 while.body

BASIC BLOCK while.body
%6809:	getelementptr	 %6806 XXX XXX
%6810:	load	 %6809
%6811:	getelementptr	 %6806 XXX XXX
%6812:	load	 %6811
%6813:	call	 %6770 %6787 %6791 %6794 %6804 %6810 %6812 secorder
%6814:	getelementptr	 %6806 XXX XXX
%6815:	load	 %6814
%6816:	br	 while.cond85

BASIC BLOCK while.cond85
%6817:	phi	 port_ptr %6835
%6818:	phi	 %6815 %6837
%6819:	icmp	 %6817 XXX
%6820:	br	 %6819 while.end while.body87

BASIC BLOCK while.body87
%6821:	getelementptr	 %6817 XXX XXX
%6822:	load	 %6821
%6823:	fadd	 %6813 %6822
%6824:	getelementptr	 %6818 XXX XXX
%6825:	store	 %6823 %6824
%6826:	getelementptr	 %6817 XXX XXX
%6827:	load	 %6826
%6828:	getelementptr	 %6818 XXX XXX
%6829:	store	 %6827 %6828
%6830:	getelementptr	 %6817 XXX XXX
%6831:	load	 %6830
%6832:	getelementptr	 %6818 XXX XXX
%6833:	store	 %6831 %6832
%6834:	getelementptr	 %6817 XXX XXX
%6835:	load	 %6834
%6836:	getelementptr	 %6818 XXX XXX
%6837:	load	 %6836
%6838:	br	 while.cond85

BASIC BLOCK while.end
%6839:	getelementptr	 %6806 XXX XXX
%6840:	load	 %6839
%6841:	br	 while.cond

BASIC BLOCK while.end95
%6842:	br	 return

BASIC BLOCK return
%6843:	phi	 XXX XXX
%6844:	ret	 %6843

FUNCTION sgrphasr

BASIC BLOCK entry
%6845:	getelementptr	 group_ptr XXX XXX
%6846:	load	 %6845
%6847:	getelementptr	 %6846 XXX XXX
%6848:	load	 %6847
%6849:	icmp	 %6848 XXX
%6850:	br	 %6849 if.end if.then

BASIC BLOCK if.then
%6851:	call	 XXX XXX printf
%6852:	br	 return

BASIC BLOCK if.end
%6853:	getelementptr	 group_ptr XXX XXX
%6854:	load	 %6853
%6855:	icmp	 %6854 XXX
%6856:	br	 %6855 if.end4 if.then2

BASIC BLOCK if.then2
%6857:	call	 XXX XXX printf
%6858:	br	 return

BASIC BLOCK if.end4
%6859:	getelementptr	 group_ptr XXX XXX
%6860:	load	 %6859
%6861:	getelementptr	 %6860 XXX XXX
%6862:	load	 %6861
%6863:	icmp	 %6862 XXX
%6864:	br	 %6863 if.else if.then6

BASIC BLOCK if.then6
%6865:	br	 if.end7

BASIC BLOCK if.else
%6866:	br	 if.end7

BASIC BLOCK if.end7
%6867:	phi	 XXX XXX
%6868:	getelementptr	 group_ptr XXX XXX
%6869:	load	 %6868
%6870:	getelementptr	 %6869 XXX XXX
%6871:	load	 %6870
%6872:	icmp	 %6871 XXX
%6873:	br	 %6872 if.else19 land.lhs.true

BASIC BLOCK land.lhs.true
%6874:	getelementptr	 group_ptr XXX XXX
%6875:	load	 %6874
%6876:	getelementptr	 %6875 XXX XXX
%6877:	load	 %6876
%6878:	icmp	 %6877 XXX
%6879:	br	 %6878 if.else19 if.then12

BASIC BLOCK if.then12
%6880:	getelementptr	 group_ptr XXX XXX
%6881:	load	 %6880
%6882:	icmp	 %6881 XXX
%6883:	br	 %6882 if.else15 if.then14

BASIC BLOCK if.then14
%6884:	fmul	 %6867 XXX
%6885:	br	 if.end18

BASIC BLOCK if.else15
%6886:	fmul	 %6867 XXX
%6887:	getelementptr	 group_ptr XXX XXX
%6888:	load	 %6887
%6889:	sitofp	 %6888
%6890:	fdiv	 %6886 %6889
%6891:	br	 if.end18

BASIC BLOCK if.end18
%6892:	phi	 %6884 %6890
%6893:	phi	 %6884 %6890
%6894:	br	 if.end35

BASIC BLOCK if.else19
%6895:	getelementptr	 group_ptr XXX XXX
%6896:	load	 %6895
%6897:	getelementptr	 %6896 XXX XXX
%6898:	load	 %6897
%6899:	icmp	 %6898 XXX
%6900:	br	 %6899 if.else27 if.then24

BASIC BLOCK if.then24
%6901:	getelementptr	 group_ptr XXX XXX
%6902:	load	 %6901
%6903:	getelementptr	 %6902 XXX XXX
%6904:	load	 %6903
%6905:	getelementptr	 group_ptr XXX XXX
%6906:	load	 %6905
%6907:	getelementptr	 %6906 XXX XXX
%6908:	load	 %6907
%6909:	br	 if.end34

BASIC BLOCK if.else27
%6910:	getelementptr	 group_ptr XXX XXX
%6911:	load	 %6910
%6912:	getelementptr	 %6911 XXX XXX
%6913:	load	 %6912
%6914:	getelementptr	 group_ptr XXX XXX
%6915:	load	 %6914
%6916:	getelementptr	 %6915 XXX XXX
%6917:	load	 %6916
%6918:	getelementptr	 group_ptr XXX XXX
%6919:	load	 %6918
%6920:	getelementptr	 %6919 XXX XXX
%6921:	load	 %6920
%6922:	getelementptr	 group_ptr XXX XXX
%6923:	load	 %6922
%6924:	getelementptr	 %6923 XXX XXX
%6925:	load	 %6924
%6926:	br	 if.end34

BASIC BLOCK if.end34
%6927:	phi	 %6908 %6925
%6928:	phi	 %6904 %6921
%6929:	phi	 %6908 %6917
%6930:	phi	 %6904 %6913
%6931:	br	 if.end35

BASIC BLOCK if.end35
%6932:	phi	 %6892 %6927
%6933:	phi	 XXX %6928
%6934:	phi	 %6893 %6929
%6935:	phi	 XXX %6930
%6936:	getelementptr	 group_ptr XXX XXX
%6937:	load	 %6936
%6938:	icmp	 %6937 XXX
%6939:	br	 %6938 if.else40 if.then39

BASIC BLOCK if.then39
%6940:	getelementptr	 group_ptr XXX XXX
%6941:	load	 %6940
%6942:	call	 %6935 %6934 %6933 %6932 %6941 seqrotrg
%6943:	br	 if.end47

BASIC BLOCK if.else40
%6944:	getelementptr	 group_ptr XXX XXX
%6945:	load	 %6944
%6946:	icmp	 %6945 XXX
%6947:	br	 %6946 if.end46 if.then44

BASIC BLOCK if.then44
%6948:	getelementptr	 group_ptr XXX XXX
%6949:	load	 %6948
%6950:	call	 %6935 %6934 %6933 %6932 %6949 seqrothg
%6951:	br	 if.end46

BASIC BLOCK if.end46
%6952:	br	 if.end47

BASIC BLOCK if.end47
%6953:	getelementptr	 group_ptr XXX XXX
%6954:	load	 %6953
%6955:	br	 while.cond

BASIC BLOCK while.cond
%6956:	phi	 %6954 %6992
%6957:	icmp	 %6956 XXX
%6958:	br	 %6957 while.end while.body

BASIC BLOCK while.body
%6959:	getelementptr	 group_ptr XXX XXX
%6960:	load	 %6959
%6961:	getelementptr	 %6960 XXX XXX
%6962:	load	 %6961
%6963:	getelementptr	 %6962 XXX XXX
%6964:	load	 %6963
%6965:	getelementptr	 %6956 XXX XXX
%6966:	load	 %6965
%6967:	getelementptr	 %6966 XXX XXX
%6968:	store	 %6964 %6967
%6969:	getelementptr	 group_ptr XXX XXX
%6970:	load	 %6969
%6971:	getelementptr	 %6970 XXX XXX
%6972:	load	 %6971
%6973:	getelementptr	 %6972 XXX XXX
%6974:	load	 %6973
%6975:	getelementptr	 %6956 XXX XXX
%6976:	load	 %6975
%6977:	getelementptr	 %6976 XXX XXX
%6978:	store	 %6974 %6977
%6979:	getelementptr	 group_ptr XXX XXX
%6980:	load	 %6979
%6981:	getelementptr	 %6980 XXX XXX
%6982:	load	 %6981
%6983:	getelementptr	 %6982 XXX XXX
%6984:	load	 %6983
%6985:	getelementptr	 %6956 XXX XXX
%6986:	load	 %6985
%6987:	getelementptr	 %6986 XXX XXX
%6988:	load	 %6987
%6989:	fadd	 %6988 %6984
%6990:	store	 %6989 %6987
%6991:	getelementptr	 %6956 XXX XXX
%6992:	load	 %6991
%6993:	br	 while.cond

BASIC BLOCK while.end
%6994:	br	 return

BASIC BLOCK return
%6995:	phi	 XXX XXX XXX
%6996:	ret	 %6995

FUNCTION sgrphaun

BASIC BLOCK entry
%6997:	getelementptr	 grphaexc_ptr XXX XXX
%6998:	load	 %6997
%6999:	br	 while.cond

BASIC BLOCK while.cond
%7000:	phi	 geomnode_ptr %7029
%7001:	icmp	 %7000 XXX
%7002:	br	 %7001 while.end9 while.body

BASIC BLOCK while.body
%7003:	getelementptr	 %7000 XXX XXX
%7004:	load	 %7003
%7005:	br	 while.cond1

BASIC BLOCK while.cond1
%7006:	phi	 %7004 %7026
%7007:	phi	 port_ptr %7024
%7008:	icmp	 %7007 XXX
%7009:	br	 %7008 while.end while.body3

BASIC BLOCK while.body3
%7010:	getelementptr	 %7007 XXX XXX
%7011:	load	 %7010
%7012:	fadd	 %6998 %7011
%7013:	getelementptr	 %7006 XXX XXX
%7014:	store	 %7012 %7013
%7015:	getelementptr	 %7007 XXX XXX
%7016:	load	 %7015
%7017:	getelementptr	 %7006 XXX XXX
%7018:	store	 %7016 %7017
%7019:	getelementptr	 %7007 XXX XXX
%7020:	load	 %7019
%7021:	getelementptr	 %7006 XXX XXX
%7022:	store	 %7020 %7021
%7023:	getelementptr	 %7007 XXX XXX
%7024:	load	 %7023
%7025:	getelementptr	 %7006 XXX XXX
%7026:	load	 %7025
%7027:	br	 while.cond1

BASIC BLOCK while.end
%7028:	getelementptr	 %7000 XXX XXX
%7029:	load	 %7028
%7030:	br	 while.cond

BASIC BLOCK while.end9
%7031:	ret	 XXX

FUNCTION versdef

BASIC BLOCK entry
%7032:	alloca	 XXX
%7033:	store	 p1 %7032
%7034:	store	 XXX px_ptr
%7035:	store	 XXX py_ptr
%7036:	store	 XXX qx_ptr
%7037:	store	 XXX qy_ptr
%7038:	store	 XXX pqxy_unit_ptr
%7039:	call	 XXX %7032 GetKeyword
%7040:	icmp	 %7039 XXX
%7041:	br	 %7040 if.end if.then

BASIC BLOCK if.then
%7042:	br	 return

BASIC BLOCK if.end
%7043:	call	 px_ptr %7032 GetReal
%7044:	icmp	 %7043 XXX
%7045:	br	 %7044 if.end4 if.then3

BASIC BLOCK if.then3
%7046:	load	 %7032
%7047:	call	 %7046 %7043 XXX parserro
%7048:	store	 XXX px_ptr
%7049:	store	 XXX py_ptr
%7050:	store	 XXX qx_ptr
%7051:	store	 XXX qy_ptr
%7052:	store	 XXX pqxy_unit_ptr
%7053:	br	 return

BASIC BLOCK if.end4
%7054:	call	 XXX %7032 GetKeyword
%7055:	icmp	 %7054 XXX
%7056:	br	 %7055 if.end8 if.then7

BASIC BLOCK if.then7
%7057:	load	 %7032
%7058:	call	 %7057 %7054 XXX parserro
%7059:	br	 return

BASIC BLOCK if.end8
%7060:	call	 py_ptr %7032 GetReal
%7061:	icmp	 %7060 XXX
%7062:	br	 %7061 if.end12 if.then11

BASIC BLOCK if.then11
%7063:	load	 %7032
%7064:	call	 %7063 %7060 XXX parserro
%7065:	store	 XXX px_ptr
%7066:	store	 XXX py_ptr
%7067:	store	 XXX qx_ptr
%7068:	store	 XXX qy_ptr
%7069:	store	 XXX pqxy_unit_ptr
%7070:	br	 return

BASIC BLOCK if.end12
%7071:	call	 XXX %7032 GetKeyword
%7072:	icmp	 %7071 XXX
%7073:	br	 %7072 if.end16 if.then15

BASIC BLOCK if.then15
%7074:	load	 %7032
%7075:	call	 %7074 %7071 XXX parserro
%7076:	br	 return

BASIC BLOCK if.end16
%7077:	call	 qx_ptr %7032 GetReal
%7078:	icmp	 %7077 XXX
%7079:	br	 %7078 if.end20 if.then19

BASIC BLOCK if.then19
%7080:	load	 %7032
%7081:	call	 %7080 %7077 XXX parserro
%7082:	store	 XXX px_ptr
%7083:	store	 XXX py_ptr
%7084:	store	 XXX qx_ptr
%7085:	store	 XXX qy_ptr
%7086:	store	 XXX pqxy_unit_ptr
%7087:	br	 return

BASIC BLOCK if.end20
%7088:	call	 XXX %7032 GetKeyword
%7089:	icmp	 %7088 XXX
%7090:	br	 %7089 if.end24 if.then23

BASIC BLOCK if.then23
%7091:	load	 %7032
%7092:	call	 %7091 %7088 XXX parserro
%7093:	br	 return

BASIC BLOCK if.end24
%7094:	call	 qy_ptr %7032 GetReal
%7095:	icmp	 %7094 XXX
%7096:	br	 %7095 if.end28 if.then27

BASIC BLOCK if.then27
%7097:	load	 %7032
%7098:	call	 %7097 %7094 XXX parserro
%7099:	store	 XXX px_ptr
%7100:	store	 XXX py_ptr
%7101:	store	 XXX qx_ptr
%7102:	store	 XXX qy_ptr
%7103:	store	 XXX pqxy_unit_ptr
%7104:	br	 return

BASIC BLOCK if.end28
%7105:	call	 %7032 pqxy_unit_ptr lenunit
%7106:	icmp	 %7105 XXX
%7107:	br	 %7106 if.end32 if.then31

BASIC BLOCK if.then31
%7108:	store	 XXX pqxy_unit_ptr
%7109:	br	 if.end32

BASIC BLOCK if.end32
%7110:	load	 %7032
%7111:	store	 %7110 pp2
%7112:	br	 return

BASIC BLOCK return
%7113:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX
%7114:	ret	 %7113

FUNCTION uvval

BASIC BLOCK entry
%7115:	alloca	 XXX
%7116:	store	 p1 %7115
%7117:	call	 val_ptr %7115 GetReal
%7118:	icmp	 %7117 XXX
%7119:	br	 %7118 if.end if.then

BASIC BLOCK if.then
%7120:	br	 return

BASIC BLOCK if.end
%7121:	load	 val_ptr
%7122:	fcmp	 %7121 XXX
%7123:	br	 %7122 lor.lhs.false if.then3

BASIC BLOCK lor.lhs.false
%7124:	load	 val_ptr
%7125:	fcmp	 %7124 XXX
%7126:	br	 %7125 if.end4 if.then3

BASIC BLOCK if.then3
%7127:	load	 %7115
%7128:	call	 %7127 XXX XXX parserro
%7129:	br	 return

BASIC BLOCK if.end4
%7130:	load	 %7115
%7131:	store	 %7130 pp2
%7132:	br	 return

BASIC BLOCK return
%7133:	phi	 XXX XXX XXX
%7134:	ret	 %7133

FUNCTION xycoord

BASIC BLOCK entry
%7135:	alloca	 XXX
%7136:	store	 p1 %7135
%7137:	call	 XXX %7135 GetKeyword
%7138:	call	 xcoord_ptr %7135 GetReal
%7139:	icmp	 %7138 XXX
%7140:	br	 %7139 if.end if.then

BASIC BLOCK if.then
%7141:	br	 return

BASIC BLOCK if.end
%7142:	call	 XXX %7135 GetKeyword
%7143:	call	 ycoord_ptr %7135 GetReal
%7144:	icmp	 %7143 XXX
%7145:	br	 %7144 if.end6 if.then5

BASIC BLOCK if.then5
%7146:	br	 return

BASIC BLOCK if.end6
%7147:	load	 %7135
%7148:	store	 %7147 pp2
%7149:	br	 return

BASIC BLOCK return
%7150:	phi	 XXX XXX XXX
%7151:	ret	 %7150
