
FUNCTION gnu_dev_major

BASIC BLOCK entry
%1:	lshr	 __dev XXX
%2:	and	 %1 XXX
%3:	lshr	 __dev XXX
%4:	trunc	 %3
%5:	and	 %4 XXX
%6:	zext	 %5
%7:	or	 %2 %6
%8:	trunc	 %7
%9:	ret	 %8

FUNCTION gnu_dev_minor

BASIC BLOCK entry
%10:	and	 __dev XXX
%11:	lshr	 __dev XXX
%12:	trunc	 %11
%13:	and	 %12 XXX
%14:	zext	 %13
%15:	or	 %10 %14
%16:	trunc	 %15
%17:	ret	 %16

FUNCTION gnu_dev_makedev

BASIC BLOCK entry
%18:	and	 __minor XXX
%19:	and	 __major XXX
%20:	shl	 %19 XXX
%21:	or	 %18 %20
%22:	zext	 %21
%23:	and	 __minor XXX
%24:	zext	 %23
%25:	shl	 %24 XXX
%26:	or	 %22 %25
%27:	and	 __major XXX
%28:	zext	 %27
%29:	shl	 %28 XXX
%30:	or	 %26 %29
%31:	ret	 %30

FUNCTION stat

BASIC BLOCK entry
%32:	call	 XXX __path __statbuf __xstat
%33:	ret	 %32

FUNCTION lstat

BASIC BLOCK entry
%34:	call	 XXX __path __statbuf __lxstat
%35:	ret	 %34

FUNCTION fstat

BASIC BLOCK entry
%36:	call	 XXX __fd __statbuf __fxstat
%37:	ret	 %36

FUNCTION mknod

BASIC BLOCK entry
%38:	alloca	 XXX
%39:	store	 __dev %38
%40:	call	 XXX __path __mode %38 __xmknod
%41:	ret	 %40

FUNCTION file_read

BASIC BLOCK entry
%42:	load	 ifd
%43:	zext	 size
%44:	call	 %42 buf %43 read
%45:	trunc	 %44
%46:	icmp	 %45 XXX
%47:	br	 %46 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%48:	icmp	 %45 XXX
%49:	br	 %48 if.end if.then

BASIC BLOCK if.then
%50:	br	 return

BASIC BLOCK if.end
%51:	call	 buf %45 updcrc
%52:	store	 %51 crc
%53:	zext	 %45
%54:	load	 bytes_in
%55:	add	 %54 %53
%56:	store	 %55 bytes_in
%57:	br	 return

BASIC BLOCK return
%58:	ret	 %45

FUNCTION bi_init

BASIC BLOCK entry
%59:	store	 zipfile zfile
%60:	store	 XXX bi_buf
%61:	store	 XXX bi_valid
%62:	load	 zfile
%63:	icmp	 %62 XXX
%64:	br	 %63 if.end if.then

BASIC BLOCK if.then
%65:	store	 file_read read_buf
%66:	br	 if.end

BASIC BLOCK if.end
%67:	ret	

FUNCTION send_bits

BASIC BLOCK entry
%68:	load	 bi_valid
%69:	sub	 XXX length
%70:	icmp	 %68 %69
%71:	br	 %70 if.else42 if.then

BASIC BLOCK if.then
%72:	load	 bi_valid
%73:	shl	 value %72
%74:	load	 bi_buf
%75:	zext	 %74
%76:	or	 %75 %73
%77:	trunc	 %76
%78:	store	 %77 bi_buf
%79:	load	 outcnt
%80:	icmp	 %79 XXX
%81:	br	 %80 if.else if.then4

BASIC BLOCK if.then4
%82:	load	 bi_buf
%83:	zext	 %82
%84:	and	 %83 XXX
%85:	trunc	 %84
%86:	load	 outcnt
%87:	add	 %86 XXX
%88:	store	 %87 outcnt
%89:	zext	 %86
%90:	getelementptr	 XXX XXX %89
%91:	store	 %85 %90
%92:	load	 bi_buf
%93:	zext	 %92
%94:	ashr	 %93 XXX
%95:	trunc	 %94
%96:	load	 outcnt
%97:	add	 %96 XXX
%98:	store	 %97 outcnt
%99:	zext	 %96
%100:	getelementptr	 XXX XXX %99
%101:	store	 %95 %100
%102:	br	 if.end31

BASIC BLOCK if.else
%103:	load	 bi_buf
%104:	zext	 %103
%105:	and	 %104 XXX
%106:	trunc	 %105
%107:	load	 outcnt
%108:	add	 %107 XXX
%109:	store	 %108 outcnt
%110:	zext	 %107
%111:	getelementptr	 XXX XXX %110
%112:	store	 %106 %111
%113:	load	 outcnt
%114:	icmp	 %113 XXX
%115:	br	 %114 if.end if.then20

BASIC BLOCK if.then20
%116:	call	 flush_outbuf
%117:	br	 if.end

BASIC BLOCK if.end
%118:	load	 bi_buf
%119:	zext	 %118
%120:	ashr	 %119 XXX
%121:	trunc	 %120
%122:	load	 outcnt
%123:	add	 %122 XXX
%124:	store	 %123 outcnt
%125:	zext	 %122
%126:	getelementptr	 XXX XXX %125
%127:	store	 %121 %126
%128:	load	 outcnt
%129:	icmp	 %128 XXX
%130:	br	 %129 if.end30 if.then29

BASIC BLOCK if.then29
%131:	call	 flush_outbuf
%132:	br	 if.end30

BASIC BLOCK if.end30
%133:	br	 if.end31

BASIC BLOCK if.end31
%134:	trunc	 value
%135:	zext	 %134
%136:	load	 bi_valid
%137:	sext	 %136
%138:	sub	 XXX %137
%139:	trunc	 %138
%140:	ashr	 %135 %139
%141:	trunc	 %140
%142:	store	 %141 bi_buf
%143:	sext	 length
%144:	sub	 %143 XXX
%145:	load	 bi_valid
%146:	sext	 %145
%147:	add	 %146 %144
%148:	trunc	 %147
%149:	store	 %148 bi_valid
%150:	br	 if.end48

BASIC BLOCK if.else42
%151:	load	 bi_valid
%152:	shl	 value %151
%153:	load	 bi_buf
%154:	zext	 %153
%155:	or	 %154 %152
%156:	trunc	 %155
%157:	store	 %156 bi_buf
%158:	load	 bi_valid
%159:	add	 %158 length
%160:	store	 %159 bi_valid
%161:	br	 if.end48

BASIC BLOCK if.end48
%162:	ret	

FUNCTION flush_outbuf

BASIC BLOCK entry
%163:	load	 outcnt
%164:	icmp	 %163 XXX
%165:	br	 %164 if.end if.then

BASIC BLOCK if.then
%166:	br	 return

BASIC BLOCK if.end
%167:	load	 ofd
%168:	load	 outcnt
%169:	call	 %167 XXX %168 write_buf
%170:	load	 outcnt
%171:	zext	 %170
%172:	load	 bytes_out
%173:	add	 %172 %171
%174:	store	 %173 bytes_out
%175:	store	 XXX outcnt
%176:	br	 return

BASIC BLOCK return
%177:	ret	

FUNCTION bi_reverse

BASIC BLOCK entry
%178:	br	 do.body

BASIC BLOCK do.body
%179:	phi	 XXX %185
%180:	phi	 len %187
%181:	phi	 code %184
%182:	and	 %181 XXX
%183:	or	 %179 %182
%184:	lshr	 %181 XXX
%185:	shl	 %183 XXX
%186:	br	 do.cond

BASIC BLOCK do.cond
%187:	add	 %180 XXX
%188:	icmp	 %187 XXX
%189:	br	 %188 do.end do.body

BASIC BLOCK do.end
%190:	lshr	 %185 XXX
%191:	ret	 %190

FUNCTION bi_windup

BASIC BLOCK entry
%192:	load	 bi_valid
%193:	icmp	 %192 XXX
%194:	br	 %193 if.else29 if.then

BASIC BLOCK if.then
%195:	load	 outcnt
%196:	icmp	 %195 XXX
%197:	br	 %196 if.else if.then2

BASIC BLOCK if.then2
%198:	load	 bi_buf
%199:	zext	 %198
%200:	and	 %199 XXX
%201:	trunc	 %200
%202:	load	 outcnt
%203:	add	 %202 XXX
%204:	store	 %203 outcnt
%205:	zext	 %202
%206:	getelementptr	 XXX XXX %205
%207:	store	 %201 %206
%208:	load	 bi_buf
%209:	zext	 %208
%210:	ashr	 %209 XXX
%211:	trunc	 %210
%212:	load	 outcnt
%213:	add	 %212 XXX
%214:	store	 %213 outcnt
%215:	zext	 %212
%216:	getelementptr	 XXX XXX %215
%217:	store	 %211 %216
%218:	br	 if.end28

BASIC BLOCK if.else
%219:	load	 bi_buf
%220:	zext	 %219
%221:	and	 %220 XXX
%222:	trunc	 %221
%223:	load	 outcnt
%224:	add	 %223 XXX
%225:	store	 %224 outcnt
%226:	zext	 %223
%227:	getelementptr	 XXX XXX %226
%228:	store	 %222 %227
%229:	load	 outcnt
%230:	icmp	 %229 XXX
%231:	br	 %230 if.end if.then17

BASIC BLOCK if.then17
%232:	call	 flush_outbuf
%233:	br	 if.end

BASIC BLOCK if.end
%234:	load	 bi_buf
%235:	zext	 %234
%236:	ashr	 %235 XXX
%237:	trunc	 %236
%238:	load	 outcnt
%239:	add	 %238 XXX
%240:	store	 %239 outcnt
%241:	zext	 %238
%242:	getelementptr	 XXX XXX %241
%243:	store	 %237 %242
%244:	load	 outcnt
%245:	icmp	 %244 XXX
%246:	br	 %245 if.end27 if.then26

BASIC BLOCK if.then26
%247:	call	 flush_outbuf
%248:	br	 if.end27

BASIC BLOCK if.end27
%249:	br	 if.end28

BASIC BLOCK if.end28
%250:	br	 if.end42

BASIC BLOCK if.else29
%251:	load	 bi_valid
%252:	icmp	 %251 XXX
%253:	br	 %252 if.end41 if.then32

BASIC BLOCK if.then32
%254:	load	 bi_buf
%255:	trunc	 %254
%256:	load	 outcnt
%257:	add	 %256 XXX
%258:	store	 %257 outcnt
%259:	zext	 %256
%260:	getelementptr	 XXX XXX %259
%261:	store	 %255 %260
%262:	load	 outcnt
%263:	icmp	 %262 XXX
%264:	br	 %263 if.end40 if.then39

BASIC BLOCK if.then39
%265:	call	 flush_outbuf
%266:	br	 if.end40

BASIC BLOCK if.end40
%267:	br	 if.end41

BASIC BLOCK if.end41
%268:	br	 if.end42

BASIC BLOCK if.end42
%269:	store	 XXX bi_buf
%270:	store	 XXX bi_valid
%271:	ret	

FUNCTION copy_block

BASIC BLOCK entry
%272:	call	 bi_windup
%273:	icmp	 header XXX
%274:	br	 %273 if.end76 if.then

BASIC BLOCK if.then
%275:	load	 outcnt
%276:	icmp	 %275 XXX
%277:	br	 %276 if.else if.then1

BASIC BLOCK if.then1
%278:	trunc	 len
%279:	zext	 %278
%280:	and	 %279 XXX
%281:	trunc	 %280
%282:	load	 outcnt
%283:	add	 %282 XXX
%284:	store	 %283 outcnt
%285:	zext	 %282
%286:	getelementptr	 XXX XXX %285
%287:	store	 %281 %286
%288:	trunc	 len
%289:	zext	 %288
%290:	ashr	 %289 XXX
%291:	trunc	 %290
%292:	load	 outcnt
%293:	add	 %292 XXX
%294:	store	 %293 outcnt
%295:	zext	 %292
%296:	getelementptr	 XXX XXX %295
%297:	store	 %291 %296
%298:	br	 if.end31

BASIC BLOCK if.else
%299:	trunc	 len
%300:	zext	 %299
%301:	and	 %300 XXX
%302:	trunc	 %301
%303:	load	 outcnt
%304:	add	 %303 XXX
%305:	store	 %304 outcnt
%306:	zext	 %303
%307:	getelementptr	 XXX XXX %306
%308:	store	 %302 %307
%309:	load	 outcnt
%310:	icmp	 %309 XXX
%311:	br	 %310 if.end if.then19

BASIC BLOCK if.then19
%312:	call	 flush_outbuf
%313:	br	 if.end

BASIC BLOCK if.end
%314:	trunc	 len
%315:	zext	 %314
%316:	ashr	 %315 XXX
%317:	trunc	 %316
%318:	load	 outcnt
%319:	add	 %318 XXX
%320:	store	 %319 outcnt
%321:	zext	 %318
%322:	getelementptr	 XXX XXX %321
%323:	store	 %317 %322
%324:	load	 outcnt
%325:	icmp	 %324 XXX
%326:	br	 %325 if.end30 if.then29

BASIC BLOCK if.then29
%327:	call	 flush_outbuf
%328:	br	 if.end30

BASIC BLOCK if.end30
%329:	br	 if.end31

BASIC BLOCK if.end31
%330:	load	 outcnt
%331:	icmp	 %330 XXX
%332:	br	 %331 if.else50 if.then34

BASIC BLOCK if.then34
%333:	xor	 len XXX
%334:	trunc	 %333
%335:	zext	 %334
%336:	and	 %335 XXX
%337:	trunc	 %336
%338:	load	 outcnt
%339:	add	 %338 XXX
%340:	store	 %339 outcnt
%341:	zext	 %338
%342:	getelementptr	 XXX XXX %341
%343:	store	 %337 %342
%344:	xor	 len XXX
%345:	trunc	 %344
%346:	zext	 %345
%347:	ashr	 %346 XXX
%348:	trunc	 %347
%349:	load	 outcnt
%350:	add	 %349 XXX
%351:	store	 %350 outcnt
%352:	zext	 %349
%353:	getelementptr	 XXX XXX %352
%354:	store	 %348 %353
%355:	br	 if.end75

BASIC BLOCK if.else50
%356:	xor	 len XXX
%357:	trunc	 %356
%358:	zext	 %357
%359:	and	 %358 XXX
%360:	trunc	 %359
%361:	load	 outcnt
%362:	add	 %361 XXX
%363:	store	 %362 outcnt
%364:	zext	 %361
%365:	getelementptr	 XXX XXX %364
%366:	store	 %360 %365
%367:	load	 outcnt
%368:	icmp	 %367 XXX
%369:	br	 %368 if.end62 if.then61

BASIC BLOCK if.then61
%370:	call	 flush_outbuf
%371:	br	 if.end62

BASIC BLOCK if.end62
%372:	xor	 len XXX
%373:	trunc	 %372
%374:	zext	 %373
%375:	ashr	 %374 XXX
%376:	trunc	 %375
%377:	load	 outcnt
%378:	add	 %377 XXX
%379:	store	 %378 outcnt
%380:	zext	 %377
%381:	getelementptr	 XXX XXX %380
%382:	store	 %376 %381
%383:	load	 outcnt
%384:	icmp	 %383 XXX
%385:	br	 %384 if.end74 if.then73

BASIC BLOCK if.then73
%386:	call	 flush_outbuf
%387:	br	 if.end74

BASIC BLOCK if.end74
%388:	br	 if.end75

BASIC BLOCK if.end75
%389:	br	 if.end76

BASIC BLOCK if.end76
%390:	br	 while.cond

BASIC BLOCK while.cond
%391:	phi	 len %393
%392:	phi	 buf %396
%393:	add	 %391 XXX
%394:	icmp	 %391 XXX
%395:	br	 %394 while.end while.body

BASIC BLOCK while.body
%396:	getelementptr	 %392 XXX
%397:	load	 %392
%398:	load	 outcnt
%399:	add	 %398 XXX
%400:	store	 %399 outcnt
%401:	zext	 %398
%402:	getelementptr	 XXX XXX %401
%403:	store	 %397 %402
%404:	load	 outcnt
%405:	icmp	 %404 XXX
%406:	br	 %405 if.end84 if.then83

BASIC BLOCK if.then83
%407:	call	 flush_outbuf
%408:	br	 if.end84

BASIC BLOCK if.end84
%409:	br	 while.cond

BASIC BLOCK while.end
%410:	ret	

FUNCTION lm_init

BASIC BLOCK entry
%411:	icmp	 pack_level XXX
%412:	br	 %411 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%413:	icmp	 pack_level XXX
%414:	br	 %413 if.end if.then

BASIC BLOCK if.then
%415:	call	 XXX error
%416:	br	 if.end

BASIC BLOCK if.end
%417:	call	 XXX XXX XXX XXX XXX llvm.memset.p0i8.i64
%418:	sext	 pack_level
%419:	getelementptr	 configuration_table XXX %418
%420:	getelementptr	 %419 XXX XXX
%421:	load	 %420
%422:	zext	 %421
%423:	store	 %422 max_lazy_match
%424:	sext	 pack_level
%425:	getelementptr	 configuration_table XXX %424
%426:	getelementptr	 %425 XXX XXX
%427:	load	 %426
%428:	zext	 %427
%429:	store	 %428 good_match
%430:	sext	 pack_level
%431:	getelementptr	 configuration_table XXX %430
%432:	getelementptr	 %431 XXX XXX
%433:	load	 %432
%434:	zext	 %433
%435:	store	 %434 nice_match
%436:	sext	 pack_level
%437:	getelementptr	 configuration_table XXX %436
%438:	getelementptr	 %437 XXX XXX
%439:	load	 %438
%440:	zext	 %439
%441:	store	 %440 max_chain_length
%442:	icmp	 pack_level XXX
%443:	br	 %442 if.else if.then13

BASIC BLOCK if.then13
%444:	load	 flags
%445:	zext	 %444
%446:	or	 %445 XXX
%447:	trunc	 %446
%448:	store	 %447 flags
%449:	br	 if.end23

BASIC BLOCK if.else
%450:	icmp	 pack_level XXX
%451:	br	 %450 if.end22 if.then18

BASIC BLOCK if.then18
%452:	load	 flags
%453:	zext	 %452
%454:	or	 %453 XXX
%455:	trunc	 %454
%456:	store	 %455 flags
%457:	br	 if.end22

BASIC BLOCK if.end22
%458:	br	 if.end23

BASIC BLOCK if.end23
%459:	store	 XXX strstart
%460:	store	 XXX block_start
%461:	load	 read_buf
%462:	call	 XXX XXX %461
%463:	store	 %462 lookahead
%464:	load	 lookahead
%465:	icmp	 %464 XXX
%466:	br	 %465 lor.lhs.false26 if.then29

BASIC BLOCK lor.lhs.false26
%467:	load	 lookahead
%468:	icmp	 %467 XXX
%469:	br	 %468 if.end30 if.then29

BASIC BLOCK if.then29
%470:	store	 XXX eofile
%471:	store	 XXX lookahead
%472:	br	 for.end

BASIC BLOCK if.end30
%473:	store	 XXX eofile
%474:	br	 while.cond

BASIC BLOCK while.cond
%475:	load	 lookahead
%476:	icmp	 %475 XXX
%477:	br	 %476 land.end land.rhs

BASIC BLOCK land.rhs
%478:	load	 eofile
%479:	icmp	 %478 XXX
%480:	xor	 %479 XXX
%481:	br	 land.end

BASIC BLOCK land.end
%482:	phi	 XXX %480
%483:	br	 %482 while.end while.body

BASIC BLOCK while.body
%484:	call	 fill_window
%485:	br	 while.cond

BASIC BLOCK while.end
%486:	store	 XXX ins_h
%487:	br	 for.cond

BASIC BLOCK for.cond
%488:	phi	 XXX %501
%489:	icmp	 %488 XXX
%490:	br	 %489 for.end for.body

BASIC BLOCK for.body
%491:	load	 ins_h
%492:	shl	 %491 XXX
%493:	zext	 %488
%494:	getelementptr	 XXX XXX %493
%495:	load	 %494
%496:	zext	 %495
%497:	xor	 %492 %496
%498:	and	 %497 XXX
%499:	store	 %498 ins_h
%500:	br	 for.inc

BASIC BLOCK for.inc
%501:	add	 %488 XXX
%502:	br	 for.cond

BASIC BLOCK for.end
%503:	ret	

FUNCTION error

BASIC BLOCK entry
%504:	load	 stderr
%505:	load	 progname
%506:	call	 %504 XXX %505 XXX m fprintf
%507:	call	 abort_gzip
%508:	ret	

FUNCTION fill_window

BASIC BLOCK entry
%509:	load	 window_size
%510:	load	 lookahead
%511:	zext	 %510
%512:	sub	 %509 %511
%513:	load	 strstart
%514:	zext	 %513
%515:	sub	 %512 %514
%516:	trunc	 %515
%517:	icmp	 %516 XXX
%518:	br	 %517 if.else if.then

BASIC BLOCK if.then
%519:	add	 %516 XXX
%520:	br	 if.end40

BASIC BLOCK if.else
%521:	load	 strstart
%522:	icmp	 %521 XXX
%523:	br	 %522 if.end if.then7

BASIC BLOCK if.then7
%524:	call	 XXX XXX XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%525:	load	 match_start
%526:	sub	 %525 XXX
%527:	store	 %526 match_start
%528:	load	 strstart
%529:	sub	 %528 XXX
%530:	store	 %529 strstart
%531:	load	 block_start
%532:	sub	 %531 XXX
%533:	store	 %532 block_start
%534:	br	 for.cond

BASIC BLOCK for.cond
%535:	phi	 XXX %553
%536:	icmp	 %535 XXX
%537:	br	 %536 for.end for.body

BASIC BLOCK for.body
%538:	zext	 %535
%539:	getelementptr	 XXX %538
%540:	load	 %539
%541:	zext	 %540
%542:	icmp	 %541 XXX
%543:	br	 %542 cond.false cond.true

BASIC BLOCK cond.true
%544:	sub	 %541 XXX
%545:	br	 cond.end

BASIC BLOCK cond.false
%546:	br	 cond.end

BASIC BLOCK cond.end
%547:	phi	 %544 XXX
%548:	trunc	 %547
%549:	zext	 %535
%550:	getelementptr	 XXX %549
%551:	store	 %548 %550
%552:	br	 for.inc

BASIC BLOCK for.inc
%553:	add	 %535 XXX
%554:	br	 for.cond

BASIC BLOCK for.end
%555:	br	 for.cond20

BASIC BLOCK for.cond20
%556:	phi	 XXX %574
%557:	icmp	 %556 XXX
%558:	br	 %557 for.end39 for.body23

BASIC BLOCK for.body23
%559:	zext	 %556
%560:	getelementptr	 XXX XXX %559
%561:	load	 %560
%562:	zext	 %561
%563:	icmp	 %562 XXX
%564:	br	 %563 cond.false31 cond.true29

BASIC BLOCK cond.true29
%565:	sub	 %562 XXX
%566:	br	 cond.end32

BASIC BLOCK cond.false31
%567:	br	 cond.end32

BASIC BLOCK cond.end32
%568:	phi	 %565 XXX
%569:	trunc	 %568
%570:	zext	 %556
%571:	getelementptr	 XXX XXX %570
%572:	store	 %569 %571
%573:	br	 for.inc37

BASIC BLOCK for.inc37
%574:	add	 %556 XXX
%575:	br	 for.cond20

BASIC BLOCK for.end39
%576:	add	 %516 XXX
%577:	br	 if.end

BASIC BLOCK if.end
%578:	phi	 %576 %516
%579:	br	 if.end40

BASIC BLOCK if.end40
%580:	phi	 %519 %578
%581:	load	 eofile
%582:	icmp	 %581 XXX
%583:	br	 %582 if.then41 if.end52

BASIC BLOCK if.then41
%584:	load	 read_buf
%585:	load	 strstart
%586:	zext	 %585
%587:	getelementptr	 XXX %586
%588:	load	 lookahead
%589:	zext	 %588
%590:	getelementptr	 %587 %589
%591:	call	 %590 %580 %584
%592:	icmp	 %591 XXX
%593:	br	 %592 lor.lhs.false if.then48

BASIC BLOCK lor.lhs.false
%594:	icmp	 %591 XXX
%595:	br	 %594 if.else49 if.then48

BASIC BLOCK if.then48
%596:	store	 XXX eofile
%597:	br	 if.end51

BASIC BLOCK if.else49
%598:	load	 lookahead
%599:	add	 %598 %591
%600:	store	 %599 lookahead
%601:	br	 if.end51

BASIC BLOCK if.end51
%602:	br	 if.end52

BASIC BLOCK if.end52
%603:	ret	

FUNCTION longest_match

BASIC BLOCK entry
%604:	load	 max_chain_length
%605:	load	 strstart
%606:	zext	 %605
%607:	getelementptr	 XXX %606
%608:	load	 prev_length
%609:	load	 strstart
%610:	icmp	 %609 XXX
%611:	br	 %610 cond.false cond.true

BASIC BLOCK cond.true
%612:	load	 strstart
%613:	sub	 %612 XXX
%614:	br	 cond.end

BASIC BLOCK cond.false
%615:	br	 cond.end

BASIC BLOCK cond.end
%616:	phi	 %613 XXX
%617:	load	 strstart
%618:	zext	 %617
%619:	getelementptr	 XXX %618
%620:	getelementptr	 %619 XXX
%621:	sub	 %608 XXX
%622:	sext	 %621
%623:	getelementptr	 %607 %622
%624:	load	 %623
%625:	sext	 %608
%626:	getelementptr	 %607 %625
%627:	load	 %626
%628:	load	 prev_length
%629:	load	 good_match
%630:	icmp	 %628 %629
%631:	br	 %630 if.end if.then

BASIC BLOCK if.then
%632:	lshr	 %604 XXX
%633:	br	 if.end

BASIC BLOCK if.end
%634:	phi	 %632 %604
%635:	br	 do.body

BASIC BLOCK do.body
%636:	phi	 %624 %775
%637:	phi	 %608 %776
%638:	phi	 %627 %777
%639:	phi	 %607 %778
%640:	phi	 %634 %789
%641:	phi	 cur_match %783
%642:	zext	 %641
%643:	getelementptr	 XXX %642
%644:	sext	 %637
%645:	getelementptr	 %643 %644
%646:	load	 %645
%647:	zext	 %646
%648:	zext	 %638
%649:	icmp	 %647 %648
%650:	br	 %649 lor.lhs.false if.then33

BASIC BLOCK lor.lhs.false
%651:	sub	 %637 XXX
%652:	sext	 %651
%653:	getelementptr	 %643 %652
%654:	load	 %653
%655:	zext	 %654
%656:	zext	 %636
%657:	icmp	 %655 %656
%658:	br	 %657 lor.lhs.false22 if.then33

BASIC BLOCK lor.lhs.false22
%659:	load	 %643
%660:	zext	 %659
%661:	load	 %639
%662:	zext	 %661
%663:	icmp	 %660 %662
%664:	br	 %663 lor.lhs.false27 if.then33

BASIC BLOCK lor.lhs.false27
%665:	getelementptr	 %643 XXX
%666:	load	 %665
%667:	zext	 %666
%668:	getelementptr	 %639 XXX
%669:	load	 %668
%670:	zext	 %669
%671:	icmp	 %667 %670
%672:	br	 %671 if.end34 if.then33

BASIC BLOCK if.then33
%673:	br	 do.cond110

BASIC BLOCK if.end34
%674:	getelementptr	 %639 XXX
%675:	getelementptr	 %665 XXX
%676:	br	 do.body37

BASIC BLOCK do.body37
%677:	phi	 %675 %746
%678:	phi	 %674 %747
%679:	br	 do.cond

BASIC BLOCK do.cond
%680:	getelementptr	 %678 XXX
%681:	load	 %680
%682:	zext	 %681
%683:	getelementptr	 %677 XXX
%684:	load	 %683
%685:	zext	 %684
%686:	icmp	 %682 %685
%687:	br	 %686 land.end land.lhs.true

BASIC BLOCK land.lhs.true
%688:	getelementptr	 %680 XXX
%689:	load	 %688
%690:	zext	 %689
%691:	getelementptr	 %683 XXX
%692:	load	 %691
%693:	zext	 %692
%694:	icmp	 %690 %693
%695:	br	 %694 land.end land.lhs.true50

BASIC BLOCK land.lhs.true50
%696:	getelementptr	 %688 XXX
%697:	load	 %696
%698:	zext	 %697
%699:	getelementptr	 %691 XXX
%700:	load	 %699
%701:	zext	 %700
%702:	icmp	 %698 %701
%703:	br	 %702 land.end land.lhs.true57

BASIC BLOCK land.lhs.true57
%704:	getelementptr	 %696 XXX
%705:	load	 %704
%706:	zext	 %705
%707:	getelementptr	 %699 XXX
%708:	load	 %707
%709:	zext	 %708
%710:	icmp	 %706 %709
%711:	br	 %710 land.end land.lhs.true64

BASIC BLOCK land.lhs.true64
%712:	getelementptr	 %704 XXX
%713:	load	 %712
%714:	zext	 %713
%715:	getelementptr	 %707 XXX
%716:	load	 %715
%717:	zext	 %716
%718:	icmp	 %714 %717
%719:	br	 %718 land.end land.lhs.true71

BASIC BLOCK land.lhs.true71
%720:	getelementptr	 %712 XXX
%721:	load	 %720
%722:	zext	 %721
%723:	getelementptr	 %715 XXX
%724:	load	 %723
%725:	zext	 %724
%726:	icmp	 %722 %725
%727:	br	 %726 land.end land.lhs.true78

BASIC BLOCK land.lhs.true78
%728:	getelementptr	 %720 XXX
%729:	load	 %728
%730:	zext	 %729
%731:	getelementptr	 %723 XXX
%732:	load	 %731
%733:	zext	 %732
%734:	icmp	 %730 %733
%735:	br	 %734 land.end land.lhs.true85

BASIC BLOCK land.lhs.true85
%736:	getelementptr	 %728 XXX
%737:	load	 %736
%738:	zext	 %737
%739:	getelementptr	 %731 XXX
%740:	load	 %739
%741:	zext	 %740
%742:	icmp	 %738 %741
%743:	br	 %742 land.end land.rhs

BASIC BLOCK land.rhs
%744:	icmp	 %736 %620
%745:	br	 land.end

BASIC BLOCK land.end
%746:	phi	 %739 %739 %731 %723 %715 %707 %699 %691 %683
%747:	phi	 %736 %736 %728 %720 %712 %704 %696 %688 %680
%748:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX %744
%749:	br	 %748 do.end do.body37

BASIC BLOCK do.end
%750:	ptrtoint	 %620
%751:	ptrtoint	 %747
%752:	sub	 %750 %751
%753:	trunc	 %752
%754:	sub	 XXX %753
%755:	getelementptr	 %620 XXX
%756:	icmp	 %754 %637
%757:	br	 %756 if.end109 if.then99

BASIC BLOCK if.then99
%758:	store	 %641 match_start
%759:	load	 nice_match
%760:	icmp	 %754 %759
%761:	br	 %760 if.end103 if.then102

BASIC BLOCK if.then102
%762:	br	 do.end120

BASIC BLOCK if.end103
%763:	sub	 %754 XXX
%764:	sext	 %763
%765:	getelementptr	 %755 %764
%766:	load	 %765
%767:	sext	 %754
%768:	getelementptr	 %755 %767
%769:	load	 %768
%770:	br	 if.end109

BASIC BLOCK if.end109
%771:	phi	 %766 %636
%772:	phi	 %754 %637
%773:	phi	 %769 %638
%774:	br	 do.cond110

BASIC BLOCK do.cond110
%775:	phi	 %636 %771
%776:	phi	 %637 %772
%777:	phi	 %638 %773
%778:	phi	 %639 %755
%779:	and	 %641 XXX
%780:	zext	 %779
%781:	getelementptr	 XXX XXX %780
%782:	load	 %781
%783:	zext	 %782
%784:	icmp	 %783 %616
%785:	br	 %784 land.end119 land.rhs116

BASIC BLOCK land.rhs116
%786:	add	 %640 XXX
%787:	icmp	 %786 XXX
%788:	br	 land.end119

BASIC BLOCK land.end119
%789:	phi	 %786 %640
%790:	phi	 XXX %787
%791:	br	 %790 do.end120 do.body

BASIC BLOCK do.end120
%792:	phi	 %776 %754
%793:	ret	 %792

FUNCTION deflate

BASIC BLOCK entry
%794:	br	 while.cond

BASIC BLOCK while.cond
%795:	phi	 XXX %990
%796:	phi	 XXX %991
%797:	load	 lookahead
%798:	icmp	 %797 XXX
%799:	br	 %798 while.end112 while.body

BASIC BLOCK while.body
%800:	load	 ins_h
%801:	shl	 %800 XXX
%802:	load	 strstart
%803:	add	 %802 XXX
%804:	sub	 %803 XXX
%805:	zext	 %804
%806:	getelementptr	 XXX XXX %805
%807:	load	 %806
%808:	zext	 %807
%809:	xor	 %801 %808
%810:	and	 %809 XXX
%811:	store	 %810 ins_h
%812:	load	 ins_h
%813:	zext	 %812
%814:	getelementptr	 XXX %813
%815:	load	 %814
%816:	zext	 %815
%817:	trunc	 %816
%818:	load	 strstart
%819:	and	 %818 XXX
%820:	zext	 %819
%821:	getelementptr	 XXX XXX %820
%822:	store	 %817 %821
%823:	load	 strstart
%824:	trunc	 %823
%825:	load	 ins_h
%826:	zext	 %825
%827:	getelementptr	 XXX %826
%828:	store	 %824 %827
%829:	store	 %796 prev_length
%830:	load	 match_start
%831:	icmp	 %816 XXX
%832:	br	 %831 if.end30 land.lhs.true

BASIC BLOCK land.lhs.true
%833:	load	 prev_length
%834:	load	 max_lazy_match
%835:	icmp	 %833 %834
%836:	br	 %835 if.end30 land.lhs.true15

BASIC BLOCK land.lhs.true15
%837:	load	 strstart
%838:	sub	 %837 %816
%839:	icmp	 %838 XXX
%840:	br	 %839 if.end30 if.then

BASIC BLOCK if.then
%841:	call	 %816 longest_match
%842:	load	 lookahead
%843:	icmp	 %841 %842
%844:	br	 %843 if.end if.then21

BASIC BLOCK if.then21
%845:	load	 lookahead
%846:	br	 if.end

BASIC BLOCK if.end
%847:	phi	 %845 %841
%848:	icmp	 %847 XXX
%849:	br	 %848 if.end29 land.lhs.true24

BASIC BLOCK land.lhs.true24
%850:	load	 strstart
%851:	load	 match_start
%852:	sub	 %850 %851
%853:	icmp	 %852 XXX
%854:	br	 %853 if.end29 if.then28

BASIC BLOCK if.then28
%855:	add	 %847 XXX
%856:	br	 if.end29

BASIC BLOCK if.end29
%857:	phi	 %855 %847 %847
%858:	br	 if.end30

BASIC BLOCK if.end30
%859:	phi	 %857 XXX XXX XXX
%860:	load	 prev_length
%861:	icmp	 %860 XXX
%862:	br	 %861 if.else land.lhs.true33

BASIC BLOCK land.lhs.true33
%863:	load	 prev_length
%864:	icmp	 %859 %863
%865:	br	 %864 if.else if.then36

BASIC BLOCK if.then36
%866:	load	 strstart
%867:	sub	 %866 XXX
%868:	sub	 %867 %830
%869:	load	 prev_length
%870:	sub	 %869 XXX
%871:	call	 %868 %870 ct_tally
%872:	load	 prev_length
%873:	sub	 %872 XXX
%874:	load	 lookahead
%875:	sub	 %874 %873
%876:	store	 %875 lookahead
%877:	load	 prev_length
%878:	sub	 %877 XXX
%879:	store	 %878 prev_length
%880:	br	 do.body

BASIC BLOCK do.body
%881:	load	 strstart
%882:	add	 %881 XXX
%883:	store	 %882 strstart
%884:	load	 ins_h
%885:	shl	 %884 XXX
%886:	load	 strstart
%887:	add	 %886 XXX
%888:	sub	 %887 XXX
%889:	zext	 %888
%890:	getelementptr	 XXX XXX %889
%891:	load	 %890
%892:	zext	 %891
%893:	xor	 %885 %892
%894:	and	 %893 XXX
%895:	store	 %894 ins_h
%896:	load	 ins_h
%897:	zext	 %896
%898:	getelementptr	 XXX %897
%899:	load	 %898
%900:	zext	 %899
%901:	trunc	 %900
%902:	load	 strstart
%903:	and	 %902 XXX
%904:	zext	 %903
%905:	getelementptr	 XXX XXX %904
%906:	store	 %901 %905
%907:	load	 strstart
%908:	trunc	 %907
%909:	load	 ins_h
%910:	zext	 %909
%911:	getelementptr	 XXX %910
%912:	store	 %908 %911
%913:	br	 do.cond

BASIC BLOCK do.cond
%914:	load	 prev_length
%915:	add	 %914 XXX
%916:	store	 %915 prev_length
%917:	icmp	 %915 XXX
%918:	br	 %917 do.end do.body

BASIC BLOCK do.end
%919:	load	 strstart
%920:	add	 %919 XXX
%921:	store	 %920 strstart
%922:	icmp	 %871 XXX
%923:	br	 %922 if.end76 if.then66

BASIC BLOCK if.then66
%924:	load	 block_start
%925:	icmp	 %924 XXX
%926:	br	 %925 cond.false cond.true

BASIC BLOCK cond.true
%927:	load	 block_start
%928:	trunc	 %927
%929:	zext	 %928
%930:	getelementptr	 XXX XXX %929
%931:	br	 cond.end

BASIC BLOCK cond.false
%932:	br	 cond.end

BASIC BLOCK cond.end
%933:	phi	 %930 XXX
%934:	load	 strstart
%935:	zext	 %934
%936:	load	 block_start
%937:	sub	 %935 %936
%938:	call	 %933 %937 XXX flush_block
%939:	load	 strstart
%940:	zext	 %939
%941:	store	 %940 block_start
%942:	br	 if.end76

BASIC BLOCK if.end76
%943:	br	 if.end106

BASIC BLOCK if.else
%944:	icmp	 %795 XXX
%945:	br	 %944 if.else102 if.then78

BASIC BLOCK if.then78
%946:	load	 strstart
%947:	sub	 %946 XXX
%948:	zext	 %947
%949:	getelementptr	 XXX XXX %948
%950:	load	 %949
%951:	zext	 %950
%952:	call	 XXX %951 ct_tally
%953:	icmp	 %952 XXX
%954:	br	 %953 if.end99 if.then85

BASIC BLOCK if.then85
%955:	load	 block_start
%956:	icmp	 %955 XXX
%957:	br	 %956 cond.false92 cond.true88

BASIC BLOCK cond.true88
%958:	load	 block_start
%959:	trunc	 %958
%960:	zext	 %959
%961:	getelementptr	 XXX XXX %960
%962:	br	 cond.end93

BASIC BLOCK cond.false92
%963:	br	 cond.end93

BASIC BLOCK cond.end93
%964:	phi	 %961 XXX
%965:	load	 strstart
%966:	zext	 %965
%967:	load	 block_start
%968:	sub	 %966 %967
%969:	call	 %964 %968 XXX flush_block
%970:	load	 strstart
%971:	zext	 %970
%972:	store	 %971 block_start
%973:	br	 if.end99

BASIC BLOCK if.end99
%974:	load	 strstart
%975:	add	 %974 XXX
%976:	store	 %975 strstart
%977:	load	 lookahead
%978:	add	 %977 XXX
%979:	store	 %978 lookahead
%980:	br	 if.end105

BASIC BLOCK if.else102
%981:	load	 strstart
%982:	add	 %981 XXX
%983:	store	 %982 strstart
%984:	load	 lookahead
%985:	add	 %984 XXX
%986:	store	 %985 lookahead
%987:	br	 if.end105

BASIC BLOCK if.end105
%988:	phi	 %795 XXX
%989:	br	 if.end106

BASIC BLOCK if.end106
%990:	phi	 XXX %988
%991:	phi	 XXX %859
%992:	br	 while.cond107

BASIC BLOCK while.cond107
%993:	load	 lookahead
%994:	icmp	 %993 XXX
%995:	br	 %994 land.end land.rhs

BASIC BLOCK land.rhs
%996:	load	 eofile
%997:	icmp	 %996 XXX
%998:	xor	 %997 XXX
%999:	br	 land.end

BASIC BLOCK land.end
%1000:	phi	 XXX %998
%1001:	br	 %1000 while.end while.body111

BASIC BLOCK while.body111
%1002:	call	 fill_window
%1003:	br	 while.cond107

BASIC BLOCK while.end
%1004:	br	 while.cond

BASIC BLOCK while.end112
%1005:	icmp	 %795 XXX
%1006:	br	 %1005 if.end120 if.then114

BASIC BLOCK if.then114
%1007:	load	 strstart
%1008:	sub	 %1007 XXX
%1009:	zext	 %1008
%1010:	getelementptr	 XXX XXX %1009
%1011:	load	 %1010
%1012:	zext	 %1011
%1013:	call	 XXX %1012 ct_tally
%1014:	br	 if.end120

BASIC BLOCK if.end120
%1015:	load	 block_start
%1016:	icmp	 %1015 XXX
%1017:	br	 %1016 cond.false127 cond.true123

BASIC BLOCK cond.true123
%1018:	load	 block_start
%1019:	trunc	 %1018
%1020:	zext	 %1019
%1021:	getelementptr	 XXX XXX %1020
%1022:	br	 cond.end128

BASIC BLOCK cond.false127
%1023:	br	 cond.end128

BASIC BLOCK cond.end128
%1024:	phi	 %1021 XXX
%1025:	load	 strstart
%1026:	zext	 %1025
%1027:	load	 block_start
%1028:	sub	 %1026 %1027
%1029:	call	 %1024 %1028 XXX flush_block
%1030:	ret	 %1029

FUNCTION ct_tally

BASIC BLOCK entry
%1031:	trunc	 lc
%1032:	load	 last_lit
%1033:	add	 %1032 XXX
%1034:	store	 %1033 last_lit
%1035:	zext	 %1032
%1036:	getelementptr	 inbuf XXX %1035
%1037:	store	 %1031 %1036
%1038:	icmp	 dist XXX
%1039:	br	 %1038 if.else if.then

BASIC BLOCK if.then
%1040:	sext	 lc
%1041:	getelementptr	 dyn_ltree XXX %1040
%1042:	getelementptr	 %1041 XXX XXX
%1043:	bitcast	 %1042
%1044:	load	 %1043
%1045:	add	 %1044 XXX
%1046:	store	 %1045 %1043
%1047:	br	 if.end

BASIC BLOCK if.else
%1048:	add	 dist XXX
%1049:	sext	 lc
%1050:	getelementptr	 length_code XXX %1049
%1051:	load	 %1050
%1052:	zext	 %1051
%1053:	add	 %1052 XXX
%1054:	add	 %1053 XXX
%1055:	sext	 %1054
%1056:	getelementptr	 dyn_ltree XXX %1055
%1057:	getelementptr	 %1056 XXX XXX
%1058:	bitcast	 %1057
%1059:	load	 %1058
%1060:	add	 %1059 XXX
%1061:	store	 %1060 %1058
%1062:	icmp	 %1048 XXX
%1063:	br	 %1062 cond.false cond.true

BASIC BLOCK cond.true
%1064:	sext	 %1048
%1065:	getelementptr	 dist_code XXX %1064
%1066:	load	 %1065
%1067:	zext	 %1066
%1068:	br	 cond.end

BASIC BLOCK cond.false
%1069:	ashr	 %1048 XXX
%1070:	add	 XXX %1069
%1071:	sext	 %1070
%1072:	getelementptr	 dist_code XXX %1071
%1073:	load	 %1072
%1074:	zext	 %1073
%1075:	br	 cond.end

BASIC BLOCK cond.end
%1076:	phi	 %1067 %1074
%1077:	sext	 %1076
%1078:	getelementptr	 dyn_dtree XXX %1077
%1079:	getelementptr	 %1078 XXX XXX
%1080:	bitcast	 %1079
%1081:	load	 %1080
%1082:	add	 %1081 XXX
%1083:	store	 %1082 %1080
%1084:	trunc	 %1048
%1085:	load	 last_dist
%1086:	add	 %1085 XXX
%1087:	store	 %1086 last_dist
%1088:	zext	 %1085
%1089:	getelementptr	 d_buf XXX %1088
%1090:	store	 %1084 %1089
%1091:	load	 flag_bit
%1092:	zext	 %1091
%1093:	load	 flags
%1094:	zext	 %1093
%1095:	or	 %1094 %1092
%1096:	trunc	 %1095
%1097:	store	 %1096 flags
%1098:	br	 if.end

BASIC BLOCK if.end
%1099:	load	 flag_bit
%1100:	zext	 %1099
%1101:	shl	 %1100 XXX
%1102:	trunc	 %1101
%1103:	store	 %1102 flag_bit
%1104:	load	 last_lit
%1105:	and	 %1104 XXX
%1106:	icmp	 %1105 XXX
%1107:	br	 %1106 if.end43 if.then39

BASIC BLOCK if.then39
%1108:	load	 flags
%1109:	load	 last_flags
%1110:	add	 %1109 XXX
%1111:	store	 %1110 last_flags
%1112:	zext	 %1109
%1113:	getelementptr	 flag_buf XXX %1112
%1114:	store	 %1108 %1113
%1115:	store	 XXX flags
%1116:	store	 XXX flag_bit
%1117:	br	 if.end43

BASIC BLOCK if.end43
%1118:	load	 level
%1119:	icmp	 %1118 XXX
%1120:	br	 %1119 if.end75 land.lhs.true

BASIC BLOCK land.lhs.true
%1121:	load	 last_lit
%1122:	and	 %1121 XXX
%1123:	icmp	 %1122 XXX
%1124:	br	 %1123 if.end75 if.then49

BASIC BLOCK if.then49
%1125:	load	 last_lit
%1126:	zext	 %1125
%1127:	mul	 %1126 XXX
%1128:	load	 strstart
%1129:	zext	 %1128
%1130:	load	 block_start
%1131:	sub	 %1129 %1130
%1132:	br	 for.cond

BASIC BLOCK for.cond
%1133:	phi	 %1127 %1149
%1134:	phi	 XXX %1151
%1135:	icmp	 %1134 XXX
%1136:	br	 %1135 for.end for.body

BASIC BLOCK for.body
%1137:	sext	 %1134
%1138:	getelementptr	 dyn_dtree XXX %1137
%1139:	getelementptr	 %1138 XXX XXX
%1140:	bitcast	 %1139
%1141:	load	 %1140
%1142:	zext	 %1141
%1143:	sext	 %1134
%1144:	getelementptr	 extra_dbits XXX %1143
%1145:	load	 %1144
%1146:	sext	 %1145
%1147:	add	 XXX %1146
%1148:	mul	 %1142 %1147
%1149:	add	 %1133 %1148
%1150:	br	 for.inc

BASIC BLOCK for.inc
%1151:	add	 %1134 XXX
%1152:	br	 for.cond

BASIC BLOCK for.end
%1153:	lshr	 %1133 XXX
%1154:	load	 last_dist
%1155:	load	 last_lit
%1156:	udiv	 %1155 XXX
%1157:	icmp	 %1154 %1156
%1158:	br	 %1157 if.end74 land.lhs.true69

BASIC BLOCK land.lhs.true69
%1159:	udiv	 %1131 XXX
%1160:	icmp	 %1153 %1159
%1161:	br	 %1160 if.end74 if.then73

BASIC BLOCK if.then73
%1162:	br	 return

BASIC BLOCK if.end74
%1163:	br	 if.end75

BASIC BLOCK if.end75
%1164:	load	 last_lit
%1165:	icmp	 %1164 XXX
%1166:	br	 %1165 lor.rhs lor.end

BASIC BLOCK lor.rhs
%1167:	load	 last_dist
%1168:	icmp	 %1167 XXX
%1169:	br	 lor.end

BASIC BLOCK lor.end
%1170:	phi	 XXX %1168
%1171:	zext	 %1170
%1172:	br	 return

BASIC BLOCK return
%1173:	phi	 XXX %1171
%1174:	ret	 %1173

FUNCTION flush_block

BASIC BLOCK entry
%1175:	load	 flags
%1176:	load	 last_flags
%1177:	zext	 %1176
%1178:	getelementptr	 flag_buf XXX %1177
%1179:	store	 %1175 %1178
%1180:	load	 file_type
%1181:	load	 %1180
%1182:	zext	 %1181
%1183:	icmp	 %1182 XXX
%1184:	br	 %1183 if.end if.then

BASIC BLOCK if.then
%1185:	call	 set_file_type
%1186:	br	 if.end

BASIC BLOCK if.end
%1187:	call	 l_desc build_tree
%1188:	call	 d_desc build_tree
%1189:	call	 build_bl_tree
%1190:	load	 opt_len
%1191:	add	 %1190 XXX
%1192:	add	 %1191 XXX
%1193:	lshr	 %1192 XXX
%1194:	load	 static_len
%1195:	add	 %1194 XXX
%1196:	add	 %1195 XXX
%1197:	lshr	 %1196 XXX
%1198:	load	 input_len
%1199:	add	 %1198 stored_len
%1200:	store	 %1199 input_len
%1201:	icmp	 %1197 %1193
%1202:	br	 %1201 if.end10 if.then9

BASIC BLOCK if.then9
%1203:	br	 if.end10

BASIC BLOCK if.end10
%1204:	phi	 %1197 %1193
%1205:	icmp	 stored_len %1204
%1206:	br	 %1205 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%1207:	icmp	 eof XXX
%1208:	br	 %1207 if.else land.lhs.true13

BASIC BLOCK land.lhs.true13
%1209:	load	 compressed_len
%1210:	icmp	 %1209 XXX
%1211:	br	 %1210 if.else land.lhs.true16

BASIC BLOCK land.lhs.true16
%1212:	br	 XXX if.else if.then17

BASIC BLOCK if.then17
%1213:	icmp	 buf XXX
%1214:	br	 %1213 if.end21 if.then20

BASIC BLOCK if.then20
%1215:	call	 XXX error
%1216:	br	 if.end21

BASIC BLOCK if.end21
%1217:	trunc	 stored_len
%1218:	call	 buf %1217 XXX copy_block
%1219:	shl	 stored_len XXX
%1220:	store	 %1219 compressed_len
%1221:	load	 file_method
%1222:	store	 XXX %1221
%1223:	br	 if.end53

BASIC BLOCK if.else
%1224:	add	 stored_len XXX
%1225:	icmp	 %1224 %1204
%1226:	br	 %1225 if.else37 land.lhs.true26

BASIC BLOCK land.lhs.true26
%1227:	icmp	 buf XXX
%1228:	br	 %1227 if.else37 if.then29

BASIC BLOCK if.then29
%1229:	add	 XXX eof
%1230:	call	 %1229 XXX send_bits
%1231:	load	 compressed_len
%1232:	add	 %1231 XXX
%1233:	add	 %1232 XXX
%1234:	and	 %1233 XXX
%1235:	store	 %1234 compressed_len
%1236:	add	 stored_len XXX
%1237:	shl	 %1236 XXX
%1238:	load	 compressed_len
%1239:	add	 %1238 %1237
%1240:	store	 %1239 compressed_len
%1241:	trunc	 stored_len
%1242:	call	 buf %1241 XXX copy_block
%1243:	br	 if.end52

BASIC BLOCK if.else37
%1244:	icmp	 %1197 %1204
%1245:	br	 %1244 if.else44 if.then40

BASIC BLOCK if.then40
%1246:	add	 XXX eof
%1247:	call	 %1246 XXX send_bits
%1248:	call	 XXX XXX compress_block
%1249:	load	 static_len
%1250:	add	 XXX %1249
%1251:	load	 compressed_len
%1252:	add	 %1251 %1250
%1253:	store	 %1252 compressed_len
%1254:	br	 if.end51

BASIC BLOCK if.else44
%1255:	add	 XXX eof
%1256:	call	 %1255 XXX send_bits
%1257:	load	 XXX
%1258:	add	 %1257 XXX
%1259:	load	 XXX
%1260:	add	 %1259 XXX
%1261:	add	 %1189 XXX
%1262:	call	 %1258 %1260 %1261 send_all_trees
%1263:	call	 XXX XXX compress_block
%1264:	load	 opt_len
%1265:	add	 XXX %1264
%1266:	load	 compressed_len
%1267:	add	 %1266 %1265
%1268:	store	 %1267 compressed_len
%1269:	br	 if.end51

BASIC BLOCK if.end51
%1270:	br	 if.end52

BASIC BLOCK if.end52
%1271:	br	 if.end53

BASIC BLOCK if.end53
%1272:	call	 init_block
%1273:	icmp	 eof XXX
%1274:	br	 %1273 if.end57 if.then55

BASIC BLOCK if.then55
%1275:	call	 bi_windup
%1276:	load	 compressed_len
%1277:	add	 %1276 XXX
%1278:	store	 %1277 compressed_len
%1279:	br	 if.end57

BASIC BLOCK if.end57
%1280:	load	 compressed_len
%1281:	lshr	 %1280 XXX
%1282:	ret	 %1281

FUNCTION _getopt_internal

BASIC BLOCK entry
%1283:	store	 XXX optarg
%1284:	load	 optind
%1285:	icmp	 %1284 XXX
%1286:	br	 %1285 if.end17 if.then

BASIC BLOCK if.then
%1287:	store	 XXX optind
%1288:	store	 XXX last_nonopt
%1289:	store	 XXX first_nonopt
%1290:	store	 XXX nextchar
%1291:	getelementptr	 optstring XXX
%1292:	load	 %1291
%1293:	sext	 %1292
%1294:	icmp	 %1293 XXX
%1295:	br	 %1294 if.else if.then3

BASIC BLOCK if.then3
%1296:	store	 XXX ordering
%1297:	getelementptr	 optstring XXX
%1298:	br	 if.end16

BASIC BLOCK if.else
%1299:	getelementptr	 optstring XXX
%1300:	load	 %1299
%1301:	sext	 %1300
%1302:	icmp	 %1301 XXX
%1303:	br	 %1302 if.else10 if.then8

BASIC BLOCK if.then8
%1304:	store	 XXX ordering
%1305:	getelementptr	 optstring XXX
%1306:	br	 if.end15

BASIC BLOCK if.else10
%1307:	call	 XXX getenv
%1308:	icmp	 %1307 XXX
%1309:	br	 %1308 if.else14 if.then13

BASIC BLOCK if.then13
%1310:	store	 XXX ordering
%1311:	br	 if.end

BASIC BLOCK if.else14
%1312:	store	 XXX ordering
%1313:	br	 if.end

BASIC BLOCK if.end
%1314:	br	 if.end15

BASIC BLOCK if.end15
%1315:	phi	 %1305 optstring
%1316:	br	 if.end16

BASIC BLOCK if.end16
%1317:	phi	 %1297 %1315
%1318:	br	 if.end17

BASIC BLOCK if.end17
%1319:	phi	 %1317 optstring
%1320:	load	 nextchar
%1321:	icmp	 %1320 XXX
%1322:	br	 %1321 lor.lhs.false if.then23

BASIC BLOCK lor.lhs.false
%1323:	load	 nextchar
%1324:	load	 %1323
%1325:	sext	 %1324
%1326:	icmp	 %1325 XXX
%1327:	br	 %1326 if.end150 if.then23

BASIC BLOCK if.then23
%1328:	load	 ordering
%1329:	icmp	 %1328 XXX
%1330:	br	 %1329 if.end68 if.then26

BASIC BLOCK if.then26
%1331:	load	 first_nonopt
%1332:	load	 last_nonopt
%1333:	icmp	 %1331 %1332
%1334:	br	 %1333 if.else32 land.lhs.true

BASIC BLOCK land.lhs.true
%1335:	load	 last_nonopt
%1336:	load	 optind
%1337:	icmp	 %1335 %1336
%1338:	br	 %1337 if.else32 if.then31

BASIC BLOCK if.then31
%1339:	call	 argv exchange
%1340:	br	 if.end37

BASIC BLOCK if.else32
%1341:	load	 last_nonopt
%1342:	load	 optind
%1343:	icmp	 %1341 %1342
%1344:	br	 %1343 if.end36 if.then35

BASIC BLOCK if.then35
%1345:	load	 optind
%1346:	store	 %1345 first_nonopt
%1347:	br	 if.end36

BASIC BLOCK if.end36
%1348:	br	 if.end37

BASIC BLOCK if.end37
%1349:	br	 while.cond

BASIC BLOCK while.cond
%1350:	load	 optind
%1351:	icmp	 %1350 argc
%1352:	br	 %1351 land.end land.lhs.true40

BASIC BLOCK land.lhs.true40
%1353:	load	 optind
%1354:	sext	 %1353
%1355:	getelementptr	 argv %1354
%1356:	load	 %1355
%1357:	getelementptr	 %1356 XXX
%1358:	load	 %1357
%1359:	sext	 %1358
%1360:	icmp	 %1359 XXX
%1361:	br	 %1360 lor.lhs.false46 land.rhs

BASIC BLOCK lor.lhs.false46
%1362:	load	 optind
%1363:	sext	 %1362
%1364:	getelementptr	 argv %1363
%1365:	load	 %1364
%1366:	getelementptr	 %1365 XXX
%1367:	load	 %1366
%1368:	sext	 %1367
%1369:	icmp	 %1368 XXX
%1370:	br	 %1369 land.end land.rhs

BASIC BLOCK land.rhs
%1371:	icmp	 longopts XXX
%1372:	br	 %1371 lor.lhs.false55 lor.end

BASIC BLOCK lor.lhs.false55
%1373:	load	 optind
%1374:	sext	 %1373
%1375:	getelementptr	 argv %1374
%1376:	load	 %1375
%1377:	getelementptr	 %1376 XXX
%1378:	load	 %1377
%1379:	sext	 %1378
%1380:	icmp	 %1379 XXX
%1381:	br	 %1380 lor.rhs lor.end

BASIC BLOCK lor.rhs
%1382:	load	 optind
%1383:	sext	 %1382
%1384:	getelementptr	 argv %1383
%1385:	load	 %1384
%1386:	getelementptr	 %1385 XXX
%1387:	load	 %1386
%1388:	sext	 %1387
%1389:	icmp	 %1388 XXX
%1390:	br	 lor.end

BASIC BLOCK lor.end
%1391:	phi	 XXX XXX %1389
%1392:	br	 land.end

BASIC BLOCK land.end
%1393:	phi	 XXX XXX %1391
%1394:	br	 %1393 while.end while.body

BASIC BLOCK while.body
%1395:	load	 optind
%1396:	add	 %1395 XXX
%1397:	store	 %1396 optind
%1398:	br	 while.cond

BASIC BLOCK while.end
%1399:	load	 optind
%1400:	store	 %1399 last_nonopt
%1401:	br	 if.end68

BASIC BLOCK if.end68
%1402:	load	 optind
%1403:	icmp	 %1402 argc
%1404:	br	 %1403 if.end89 land.lhs.true71

BASIC BLOCK land.lhs.true71
%1405:	load	 optind
%1406:	sext	 %1405
%1407:	getelementptr	 argv %1406
%1408:	load	 %1407
%1409:	call	 %1408 XXX strcmp
%1410:	icmp	 %1409 XXX
%1411:	br	 %1410 if.then75 if.end89

BASIC BLOCK if.then75
%1412:	load	 optind
%1413:	add	 %1412 XXX
%1414:	store	 %1413 optind
%1415:	load	 first_nonopt
%1416:	load	 last_nonopt
%1417:	icmp	 %1415 %1416
%1418:	br	 %1417 if.else83 land.lhs.true79

BASIC BLOCK land.lhs.true79
%1419:	load	 last_nonopt
%1420:	load	 optind
%1421:	icmp	 %1419 %1420
%1422:	br	 %1421 if.else83 if.then82

BASIC BLOCK if.then82
%1423:	call	 argv exchange
%1424:	br	 if.end88

BASIC BLOCK if.else83
%1425:	load	 first_nonopt
%1426:	load	 last_nonopt
%1427:	icmp	 %1425 %1426
%1428:	br	 %1427 if.end87 if.then86

BASIC BLOCK if.then86
%1429:	load	 optind
%1430:	store	 %1429 first_nonopt
%1431:	br	 if.end87

BASIC BLOCK if.end87
%1432:	br	 if.end88

BASIC BLOCK if.end88
%1433:	store	 argc last_nonopt
%1434:	store	 argc optind
%1435:	br	 if.end89

BASIC BLOCK if.end89
%1436:	load	 optind
%1437:	icmp	 %1436 argc
%1438:	br	 %1437 if.end97 if.then92

BASIC BLOCK if.then92
%1439:	load	 first_nonopt
%1440:	load	 last_nonopt
%1441:	icmp	 %1439 %1440
%1442:	br	 %1441 if.end96 if.then95

BASIC BLOCK if.then95
%1443:	load	 first_nonopt
%1444:	store	 %1443 optind
%1445:	br	 if.end96

BASIC BLOCK if.end96
%1446:	br	 return

BASIC BLOCK if.end97
%1447:	load	 optind
%1448:	sext	 %1447
%1449:	getelementptr	 argv %1448
%1450:	load	 %1449
%1451:	getelementptr	 %1450 XXX
%1452:	load	 %1451
%1453:	sext	 %1452
%1454:	icmp	 %1453 XXX
%1455:	br	 %1454 lor.lhs.false104 land.lhs.true111

BASIC BLOCK lor.lhs.false104
%1456:	load	 optind
%1457:	sext	 %1456
%1458:	getelementptr	 argv %1457
%1459:	load	 %1458
%1460:	getelementptr	 %1459 XXX
%1461:	load	 %1460
%1462:	sext	 %1461
%1463:	icmp	 %1462 XXX
%1464:	br	 %1463 if.end136 land.lhs.true111

BASIC BLOCK land.lhs.true111
%1465:	icmp	 longopts XXX
%1466:	br	 %1465 lor.lhs.false114 if.then128

BASIC BLOCK lor.lhs.false114
%1467:	load	 optind
%1468:	sext	 %1467
%1469:	getelementptr	 argv %1468
%1470:	load	 %1469
%1471:	getelementptr	 %1470 XXX
%1472:	load	 %1471
%1473:	sext	 %1472
%1474:	icmp	 %1473 XXX
%1475:	br	 %1474 lor.lhs.false121 if.then128

BASIC BLOCK lor.lhs.false121
%1476:	load	 optind
%1477:	sext	 %1476
%1478:	getelementptr	 argv %1477
%1479:	load	 %1478
%1480:	getelementptr	 %1479 XXX
%1481:	load	 %1480
%1482:	sext	 %1481
%1483:	icmp	 %1482 XXX
%1484:	br	 %1483 if.end136 if.then128

BASIC BLOCK if.then128
%1485:	load	 ordering
%1486:	icmp	 %1485 XXX
%1487:	br	 %1486 if.end132 if.then131

BASIC BLOCK if.then131
%1488:	br	 return

BASIC BLOCK if.end132
%1489:	load	 optind
%1490:	add	 %1489 XXX
%1491:	store	 %1490 optind
%1492:	sext	 %1489
%1493:	getelementptr	 argv %1492
%1494:	load	 %1493
%1495:	store	 %1494 optarg
%1496:	br	 return

BASIC BLOCK if.end136
%1497:	load	 optind
%1498:	sext	 %1497
%1499:	getelementptr	 argv %1498
%1500:	load	 %1499
%1501:	getelementptr	 %1500 XXX
%1502:	icmp	 longopts XXX
%1503:	br	 %1502 land.end148 land.rhs141

BASIC BLOCK land.rhs141
%1504:	load	 optind
%1505:	sext	 %1504
%1506:	getelementptr	 argv %1505
%1507:	load	 %1506
%1508:	getelementptr	 %1507 XXX
%1509:	load	 %1508
%1510:	sext	 %1509
%1511:	icmp	 %1510 XXX
%1512:	br	 land.end148

BASIC BLOCK land.end148
%1513:	phi	 XXX %1511
%1514:	zext	 %1513
%1515:	sext	 %1514
%1516:	getelementptr	 %1501 %1515
%1517:	store	 %1516 nextchar
%1518:	br	 if.end150

BASIC BLOCK if.end150
%1519:	icmp	 longopts XXX
%1520:	br	 %1519 if.end343 land.lhs.true153

BASIC BLOCK land.lhs.true153
%1521:	load	 optind
%1522:	sext	 %1521
%1523:	getelementptr	 argv %1522
%1524:	load	 %1523
%1525:	getelementptr	 %1524 XXX
%1526:	load	 %1525
%1527:	sext	 %1526
%1528:	icmp	 %1527 XXX
%1529:	br	 %1528 lor.lhs.false169 land.lhs.true160

BASIC BLOCK land.lhs.true160
%1530:	load	 optind
%1531:	sext	 %1530
%1532:	getelementptr	 argv %1531
%1533:	load	 %1532
%1534:	getelementptr	 %1533 XXX
%1535:	load	 %1534
%1536:	sext	 %1535
%1537:	icmp	 %1536 XXX
%1538:	br	 %1537 lor.lhs.false167 if.then176

BASIC BLOCK lor.lhs.false167
%1539:	icmp	 long_only XXX
%1540:	br	 %1539 lor.lhs.false169 if.then176

BASIC BLOCK lor.lhs.false169
%1541:	load	 optind
%1542:	sext	 %1541
%1543:	getelementptr	 argv %1542
%1544:	load	 %1543
%1545:	getelementptr	 %1544 XXX
%1546:	load	 %1545
%1547:	sext	 %1546
%1548:	icmp	 %1547 XXX
%1549:	br	 %1548 if.end343 if.then176

BASIC BLOCK if.then176
%1550:	load	 nextchar
%1551:	br	 while.cond177

BASIC BLOCK while.cond177
%1552:	phi	 %1550 %1563
%1553:	load	 %1552
%1554:	sext	 %1553
%1555:	icmp	 %1554 XXX
%1556:	br	 %1555 land.end184 land.rhs180

BASIC BLOCK land.rhs180
%1557:	load	 %1552
%1558:	sext	 %1557
%1559:	icmp	 %1558 XXX
%1560:	br	 land.end184

BASIC BLOCK land.end184
%1561:	phi	 XXX %1559
%1562:	br	 %1561 while.end188 while.body186

BASIC BLOCK while.body186
%1563:	getelementptr	 %1552 XXX
%1564:	br	 while.cond177

BASIC BLOCK while.end188
%1565:	br	 for.cond

BASIC BLOCK for.cond
%1566:	phi	 longopts %1608
%1567:	phi	 XXX %1609
%1568:	phi	 XXX %1604
%1569:	phi	 XXX %1605
%1570:	phi	 XXX %1606
%1571:	getelementptr	 %1566 XXX XXX
%1572:	load	 %1571
%1573:	icmp	 %1572 XXX
%1574:	br	 %1573 for.end for.body

BASIC BLOCK for.body
%1575:	getelementptr	 %1566 XXX XXX
%1576:	load	 %1575
%1577:	load	 nextchar
%1578:	load	 nextchar
%1579:	ptrtoint	 %1552
%1580:	ptrtoint	 %1578
%1581:	sub	 %1579 %1580
%1582:	call	 %1576 %1577 %1581 strncmp
%1583:	icmp	 %1582 XXX
%1584:	br	 %1583 if.then193 if.end209

BASIC BLOCK if.then193
%1585:	load	 nextchar
%1586:	ptrtoint	 %1552
%1587:	ptrtoint	 %1585
%1588:	sub	 %1586 %1587
%1589:	getelementptr	 %1566 XXX XXX
%1590:	load	 %1589
%1591:	call	 %1590 strlen
%1592:	icmp	 %1588 %1591
%1593:	br	 %1592 if.else202 if.then201

BASIC BLOCK if.then201
%1594:	br	 for.end

BASIC BLOCK if.else202
%1595:	icmp	 %1569 XXX
%1596:	br	 %1595 if.else206 if.then205

BASIC BLOCK if.then205
%1597:	br	 if.end207

BASIC BLOCK if.else206
%1598:	br	 if.end207

BASIC BLOCK if.end207
%1599:	phi	 %1568 XXX
%1600:	phi	 %1566 %1569
%1601:	phi	 %1567 %1570
%1602:	br	 if.end208

BASIC BLOCK if.end208
%1603:	br	 if.end209

BASIC BLOCK if.end209
%1604:	phi	 %1568 %1599
%1605:	phi	 %1569 %1600
%1606:	phi	 %1570 %1601
%1607:	br	 for.inc

BASIC BLOCK for.inc
%1608:	getelementptr	 %1566 XXX
%1609:	add	 %1567 XXX
%1610:	br	 for.cond

BASIC BLOCK for.end
%1611:	phi	 XXX XXX
%1612:	phi	 %1566 %1569
%1613:	phi	 %1567 %1570
%1614:	icmp	 %1568 XXX
%1615:	br	 %1614 if.end226 land.lhs.true213

BASIC BLOCK land.lhs.true213
%1616:	icmp	 %1611 XXX
%1617:	br	 %1616 if.then215 if.end226

BASIC BLOCK if.then215
%1618:	load	 opterr
%1619:	icmp	 %1618 XXX
%1620:	br	 %1619 if.end222 if.then217

BASIC BLOCK if.then217
%1621:	load	 stderr
%1622:	getelementptr	 argv XXX
%1623:	load	 %1622
%1624:	load	 optind
%1625:	sext	 %1624
%1626:	getelementptr	 argv %1625
%1627:	load	 %1626
%1628:	call	 %1621 XXX %1623 %1627 fprintf
%1629:	br	 if.end222

BASIC BLOCK if.end222
%1630:	load	 nextchar
%1631:	call	 %1630 strlen
%1632:	load	 nextchar
%1633:	getelementptr	 %1632 %1631
%1634:	store	 %1633 nextchar
%1635:	load	 optind
%1636:	add	 %1635 XXX
%1637:	store	 %1636 optind
%1638:	br	 return

BASIC BLOCK if.end226
%1639:	icmp	 %1612 XXX
%1640:	br	 %1639 if.end299 if.then229

BASIC BLOCK if.then229
%1641:	load	 optind
%1642:	add	 %1641 XXX
%1643:	store	 %1642 optind
%1644:	load	 %1552
%1645:	icmp	 %1644 XXX
%1646:	br	 %1645 if.else263 if.then232

BASIC BLOCK if.then232
%1647:	getelementptr	 %1612 XXX XXX
%1648:	load	 %1647
%1649:	icmp	 %1648 XXX
%1650:	br	 %1649 if.else236 if.then234

BASIC BLOCK if.then234
%1651:	getelementptr	 %1552 XXX
%1652:	store	 %1651 optarg
%1653:	br	 if.end262

BASIC BLOCK if.else236
%1654:	load	 opterr
%1655:	icmp	 %1654 XXX
%1656:	br	 %1655 if.end259 if.then238

BASIC BLOCK if.then238
%1657:	load	 optind
%1658:	sub	 %1657 XXX
%1659:	sext	 %1658
%1660:	getelementptr	 argv %1659
%1661:	load	 %1660
%1662:	getelementptr	 %1661 XXX
%1663:	load	 %1662
%1664:	sext	 %1663
%1665:	icmp	 %1664 XXX
%1666:	br	 %1665 if.else249 if.then245

BASIC BLOCK if.then245
%1667:	load	 stderr
%1668:	getelementptr	 argv XXX
%1669:	load	 %1668
%1670:	getelementptr	 %1612 XXX XXX
%1671:	load	 %1670
%1672:	call	 %1667 XXX %1669 %1671 fprintf
%1673:	br	 if.end258

BASIC BLOCK if.else249
%1674:	load	 stderr
%1675:	getelementptr	 argv XXX
%1676:	load	 %1675
%1677:	load	 optind
%1678:	sub	 %1677 XXX
%1679:	sext	 %1678
%1680:	getelementptr	 argv %1679
%1681:	load	 %1680
%1682:	getelementptr	 %1681 XXX
%1683:	load	 %1682
%1684:	sext	 %1683
%1685:	getelementptr	 %1612 XXX XXX
%1686:	load	 %1685
%1687:	call	 %1674 XXX %1676 %1684 %1686 fprintf
%1688:	br	 if.end258

BASIC BLOCK if.end258
%1689:	br	 if.end259

BASIC BLOCK if.end259
%1690:	load	 nextchar
%1691:	call	 %1690 strlen
%1692:	load	 nextchar
%1693:	getelementptr	 %1692 %1691
%1694:	store	 %1693 nextchar
%1695:	br	 return

BASIC BLOCK if.end262
%1696:	br	 if.end287

BASIC BLOCK if.else263
%1697:	getelementptr	 %1612 XXX XXX
%1698:	load	 %1697
%1699:	icmp	 %1698 XXX
%1700:	br	 %1699 if.end286 if.then267

BASIC BLOCK if.then267
%1701:	load	 optind
%1702:	icmp	 %1701 argc
%1703:	br	 %1702 if.else274 if.then270

BASIC BLOCK if.then270
%1704:	load	 optind
%1705:	add	 %1704 XXX
%1706:	store	 %1705 optind
%1707:	sext	 %1704
%1708:	getelementptr	 argv %1707
%1709:	load	 %1708
%1710:	store	 %1709 optarg
%1711:	br	 if.end285

BASIC BLOCK if.else274
%1712:	load	 opterr
%1713:	icmp	 %1712 XXX
%1714:	br	 %1713 if.end282 if.then276

BASIC BLOCK if.then276
%1715:	load	 stderr
%1716:	getelementptr	 argv XXX
%1717:	load	 %1716
%1718:	load	 optind
%1719:	sub	 %1718 XXX
%1720:	sext	 %1719
%1721:	getelementptr	 argv %1720
%1722:	load	 %1721
%1723:	call	 %1715 XXX %1717 %1722 fprintf
%1724:	br	 if.end282

BASIC BLOCK if.end282
%1725:	load	 nextchar
%1726:	call	 %1725 strlen
%1727:	load	 nextchar
%1728:	getelementptr	 %1727 %1726
%1729:	store	 %1728 nextchar
%1730:	br	 return

BASIC BLOCK if.end285
%1731:	br	 if.end286

BASIC BLOCK if.end286
%1732:	br	 if.end287

BASIC BLOCK if.end287
%1733:	load	 nextchar
%1734:	call	 %1733 strlen
%1735:	load	 nextchar
%1736:	getelementptr	 %1735 %1734
%1737:	store	 %1736 nextchar
%1738:	icmp	 longind XXX
%1739:	br	 %1738 if.end293 if.then292

BASIC BLOCK if.then292
%1740:	store	 %1613 longind
%1741:	br	 if.end293

BASIC BLOCK if.end293
%1742:	getelementptr	 %1612 XXX XXX
%1743:	load	 %1742
%1744:	icmp	 %1743 XXX
%1745:	br	 %1744 if.end297 if.then295

BASIC BLOCK if.then295
%1746:	getelementptr	 %1612 XXX XXX
%1747:	load	 %1746
%1748:	getelementptr	 %1612 XXX XXX
%1749:	load	 %1748
%1750:	store	 %1747 %1749
%1751:	br	 return

BASIC BLOCK if.end297
%1752:	getelementptr	 %1612 XXX XXX
%1753:	load	 %1752
%1754:	br	 return

BASIC BLOCK if.end299
%1755:	icmp	 long_only XXX
%1756:	br	 %1755 if.then320 lor.lhs.false301

BASIC BLOCK lor.lhs.false301
%1757:	load	 optind
%1758:	sext	 %1757
%1759:	getelementptr	 argv %1758
%1760:	load	 %1759
%1761:	getelementptr	 %1760 XXX
%1762:	load	 %1761
%1763:	sext	 %1762
%1764:	icmp	 %1763 XXX
%1765:	br	 %1764 lor.lhs.false308 if.then320

BASIC BLOCK lor.lhs.false308
%1766:	load	 optind
%1767:	sext	 %1766
%1768:	getelementptr	 argv %1767
%1769:	load	 %1768
%1770:	getelementptr	 %1769 XXX
%1771:	load	 %1770
%1772:	sext	 %1771
%1773:	icmp	 %1772 XXX
%1774:	br	 %1773 lor.lhs.false315 if.then320

BASIC BLOCK lor.lhs.false315
%1775:	load	 nextchar
%1776:	load	 %1775
%1777:	sext	 %1776
%1778:	call	 %1319 %1777 strchr
%1779:	icmp	 %1778 XXX
%1780:	br	 %1779 if.end342 if.then320

BASIC BLOCK if.then320
%1781:	load	 opterr
%1782:	icmp	 %1781 XXX
%1783:	br	 %1782 if.end340 if.then322

BASIC BLOCK if.then322
%1784:	load	 optind
%1785:	sext	 %1784
%1786:	getelementptr	 argv %1785
%1787:	load	 %1786
%1788:	getelementptr	 %1787 XXX
%1789:	load	 %1788
%1790:	sext	 %1789
%1791:	icmp	 %1790 XXX
%1792:	br	 %1791 if.else332 if.then329

BASIC BLOCK if.then329
%1793:	load	 stderr
%1794:	getelementptr	 argv XXX
%1795:	load	 %1794
%1796:	load	 nextchar
%1797:	call	 %1793 XXX %1795 %1796 fprintf
%1798:	br	 if.end339

BASIC BLOCK if.else332
%1799:	load	 stderr
%1800:	getelementptr	 argv XXX
%1801:	load	 %1800
%1802:	load	 optind
%1803:	sext	 %1802
%1804:	getelementptr	 argv %1803
%1805:	load	 %1804
%1806:	getelementptr	 %1805 XXX
%1807:	load	 %1806
%1808:	sext	 %1807
%1809:	load	 nextchar
%1810:	call	 %1799 XXX %1801 %1808 %1809 fprintf
%1811:	br	 if.end339

BASIC BLOCK if.end339
%1812:	br	 if.end340

BASIC BLOCK if.end340
%1813:	store	 XXX nextchar
%1814:	load	 optind
%1815:	add	 %1814 XXX
%1816:	store	 %1815 optind
%1817:	br	 return

BASIC BLOCK if.end342
%1818:	br	 if.end343

BASIC BLOCK if.end343
%1819:	load	 nextchar
%1820:	getelementptr	 %1819 XXX
%1821:	store	 %1820 nextchar
%1822:	load	 %1819
%1823:	sext	 %1822
%1824:	call	 %1319 %1823 strchr
%1825:	load	 nextchar
%1826:	load	 %1825
%1827:	sext	 %1826
%1828:	icmp	 %1827 XXX
%1829:	br	 %1828 if.end352 if.then350

BASIC BLOCK if.then350
%1830:	load	 optind
%1831:	add	 %1830 XXX
%1832:	store	 %1831 optind
%1833:	br	 if.end352

BASIC BLOCK if.end352
%1834:	icmp	 %1824 XXX
%1835:	br	 %1834 lor.lhs.false355 if.then359

BASIC BLOCK lor.lhs.false355
%1836:	sext	 %1822
%1837:	icmp	 %1836 XXX
%1838:	br	 %1837 if.end379 if.then359

BASIC BLOCK if.then359
%1839:	load	 opterr
%1840:	icmp	 %1839 XXX
%1841:	br	 %1840 if.end378 if.then361

BASIC BLOCK if.then361
%1842:	sext	 %1822
%1843:	icmp	 %1842 XXX
%1844:	br	 %1843 lor.lhs.false365 if.then369

BASIC BLOCK lor.lhs.false365
%1845:	sext	 %1822
%1846:	icmp	 %1845 XXX
%1847:	br	 %1846 if.else373 if.then369

BASIC BLOCK if.then369
%1848:	load	 stderr
%1849:	getelementptr	 argv XXX
%1850:	load	 %1849
%1851:	sext	 %1822
%1852:	call	 %1848 XXX %1850 %1851 fprintf
%1853:	br	 if.end377

BASIC BLOCK if.else373
%1854:	load	 stderr
%1855:	getelementptr	 argv XXX
%1856:	load	 %1855
%1857:	sext	 %1822
%1858:	call	 %1854 XXX %1856 %1857 fprintf
%1859:	br	 if.end377

BASIC BLOCK if.end377
%1860:	br	 if.end378

BASIC BLOCK if.end378
%1861:	br	 return

BASIC BLOCK if.end379
%1862:	getelementptr	 %1824 XXX
%1863:	load	 %1862
%1864:	sext	 %1863
%1865:	icmp	 %1864 XXX
%1866:	br	 %1865 if.end420 if.then384

BASIC BLOCK if.then384
%1867:	getelementptr	 %1824 XXX
%1868:	load	 %1867
%1869:	sext	 %1868
%1870:	icmp	 %1869 XXX
%1871:	br	 %1870 if.else397 if.then389

BASIC BLOCK if.then389
%1872:	load	 nextchar
%1873:	load	 %1872
%1874:	sext	 %1873
%1875:	icmp	 %1874 XXX
%1876:	br	 %1875 if.else395 if.then393

BASIC BLOCK if.then393
%1877:	load	 nextchar
%1878:	store	 %1877 optarg
%1879:	load	 optind
%1880:	add	 %1879 XXX
%1881:	store	 %1880 optind
%1882:	br	 if.end396

BASIC BLOCK if.else395
%1883:	store	 XXX optarg
%1884:	br	 if.end396

BASIC BLOCK if.end396
%1885:	store	 XXX nextchar
%1886:	br	 if.end419

BASIC BLOCK if.else397
%1887:	load	 nextchar
%1888:	load	 %1887
%1889:	sext	 %1888
%1890:	icmp	 %1889 XXX
%1891:	br	 %1890 if.else403 if.then401

BASIC BLOCK if.then401
%1892:	load	 nextchar
%1893:	store	 %1892 optarg
%1894:	load	 optind
%1895:	add	 %1894 XXX
%1896:	store	 %1895 optind
%1897:	br	 if.end418

BASIC BLOCK if.else403
%1898:	load	 optind
%1899:	icmp	 %1898 argc
%1900:	br	 %1899 if.else413 if.then406

BASIC BLOCK if.then406
%1901:	load	 opterr
%1902:	icmp	 %1901 XXX
%1903:	br	 %1902 if.end412 if.then408

BASIC BLOCK if.then408
%1904:	load	 stderr
%1905:	getelementptr	 argv XXX
%1906:	load	 %1905
%1907:	sext	 %1822
%1908:	call	 %1904 XXX %1906 %1907 fprintf
%1909:	br	 if.end412

BASIC BLOCK if.end412
%1910:	br	 if.end417

BASIC BLOCK if.else413
%1911:	load	 optind
%1912:	add	 %1911 XXX
%1913:	store	 %1912 optind
%1914:	sext	 %1911
%1915:	getelementptr	 argv %1914
%1916:	load	 %1915
%1917:	store	 %1916 optarg
%1918:	br	 if.end417

BASIC BLOCK if.end417
%1919:	phi	 XXX %1822
%1920:	br	 if.end418

BASIC BLOCK if.end418
%1921:	phi	 %1822 %1919
%1922:	store	 XXX nextchar
%1923:	br	 if.end419

BASIC BLOCK if.end419
%1924:	phi	 %1822 %1921
%1925:	br	 if.end420

BASIC BLOCK if.end420
%1926:	phi	 %1924 %1822
%1927:	sext	 %1926
%1928:	br	 return

BASIC BLOCK return
%1929:	phi	 XXX XXX XXX XXX %1753 XXX XXX XXX XXX %1927 XXX
%1930:	ret	 %1929

FUNCTION exchange

BASIC BLOCK entry
%1931:	load	 last_nonopt
%1932:	load	 first_nonopt
%1933:	sub	 %1931 %1932
%1934:	sext	 %1933
%1935:	mul	 %1934 XXX
%1936:	trunc	 %1935
%1937:	sext	 %1936
%1938:	alloca	 %1937
%1939:	bitcast	 %1938
%1940:	bitcast	 %1939
%1941:	load	 first_nonopt
%1942:	sext	 %1941
%1943:	getelementptr	 argv %1942
%1944:	bitcast	 %1943
%1945:	sext	 %1936
%1946:	call	 %1940 %1944 %1945 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%1947:	load	 first_nonopt
%1948:	sext	 %1947
%1949:	getelementptr	 argv %1948
%1950:	bitcast	 %1949
%1951:	load	 last_nonopt
%1952:	sext	 %1951
%1953:	getelementptr	 argv %1952
%1954:	bitcast	 %1953
%1955:	load	 optind
%1956:	load	 last_nonopt
%1957:	sub	 %1955 %1956
%1958:	sext	 %1957
%1959:	mul	 %1958 XXX
%1960:	call	 %1950 %1954 %1959 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%1961:	load	 first_nonopt
%1962:	load	 optind
%1963:	add	 %1961 %1962
%1964:	load	 last_nonopt
%1965:	sub	 %1963 %1964
%1966:	sext	 %1965
%1967:	getelementptr	 argv %1966
%1968:	bitcast	 %1967
%1969:	bitcast	 %1939
%1970:	sext	 %1936
%1971:	call	 %1968 %1969 %1970 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%1972:	load	 optind
%1973:	load	 last_nonopt
%1974:	sub	 %1972 %1973
%1975:	load	 first_nonopt
%1976:	add	 %1975 %1974
%1977:	store	 %1976 first_nonopt
%1978:	load	 optind
%1979:	store	 %1978 last_nonopt
%1980:	ret	

FUNCTION getopt

BASIC BLOCK entry
%1981:	call	 argc argv optstring XXX XXX XXX _getopt_internal
%1982:	ret	 %1981

FUNCTION getopt_long

BASIC BLOCK entry
%1983:	call	 argc argv options long_options opt_index XXX _getopt_internal
%1984:	ret	 %1983

FUNCTION getopt_long_only

BASIC BLOCK entry
%1985:	call	 argc argv options long_options opt_index XXX _getopt_internal
%1986:	ret	 %1985

FUNCTION zip

BASIC BLOCK entry
%1987:	alloca	 XXX
%1988:	alloca	 XXX
%1989:	store	 XXX %1987
%1990:	store	 XXX %1988
%1991:	store	 in ifd
%1992:	store	 out ofd
%1993:	store	 XXX outcnt
%1994:	store	 XXX method
%1995:	load	 XXX
%1996:	load	 outcnt
%1997:	add	 %1996 XXX
%1998:	store	 %1997 outcnt
%1999:	zext	 %1996
%2000:	getelementptr	 outbuf XXX %1999
%2001:	store	 %1995 %2000
%2002:	load	 outcnt
%2003:	icmp	 %2002 XXX
%2004:	br	 %2003 if.end if.then

BASIC BLOCK if.then
%2005:	call	 flush_outbuf
%2006:	br	 if.end

BASIC BLOCK if.end
%2007:	load	 XXX
%2008:	load	 outcnt
%2009:	add	 %2008 XXX
%2010:	store	 %2009 outcnt
%2011:	zext	 %2008
%2012:	getelementptr	 outbuf XXX %2011
%2013:	store	 %2007 %2012
%2014:	load	 outcnt
%2015:	icmp	 %2014 XXX
%2016:	br	 %2015 if.end6 if.then5

BASIC BLOCK if.then5
%2017:	call	 flush_outbuf
%2018:	br	 if.end6

BASIC BLOCK if.end6
%2019:	load	 outcnt
%2020:	add	 %2019 XXX
%2021:	store	 %2020 outcnt
%2022:	zext	 %2019
%2023:	getelementptr	 outbuf XXX %2022
%2024:	store	 XXX %2023
%2025:	load	 outcnt
%2026:	icmp	 %2025 XXX
%2027:	br	 %2026 if.end12 if.then11

BASIC BLOCK if.then11
%2028:	call	 flush_outbuf
%2029:	br	 if.end12

BASIC BLOCK if.end12
%2030:	load	 save_orig_name
%2031:	icmp	 %2030 XXX
%2032:	br	 %2031 if.end15 if.then13

BASIC BLOCK if.then13
%2033:	zext	 XXX
%2034:	or	 %2033 XXX
%2035:	trunc	 %2034
%2036:	br	 if.end15

BASIC BLOCK if.end15
%2037:	phi	 %2035 XXX
%2038:	load	 outcnt
%2039:	add	 %2038 XXX
%2040:	store	 %2039 outcnt
%2041:	zext	 %2038
%2042:	getelementptr	 outbuf XXX %2041
%2043:	store	 %2037 %2042
%2044:	load	 outcnt
%2045:	icmp	 %2044 XXX
%2046:	br	 %2045 if.end22 if.then21

BASIC BLOCK if.then21
%2047:	call	 flush_outbuf
%2048:	br	 if.end22

BASIC BLOCK if.end22
%2049:	load	 outcnt
%2050:	icmp	 %2049 XXX
%2051:	br	 %2050 if.else if.then25

BASIC BLOCK if.then25
%2052:	load	 time_stamp
%2053:	and	 %2052 XXX
%2054:	and	 %2053 XXX
%2055:	trunc	 %2054
%2056:	load	 outcnt
%2057:	add	 %2056 XXX
%2058:	store	 %2057 outcnt
%2059:	zext	 %2056
%2060:	getelementptr	 outbuf XXX %2059
%2061:	store	 %2055 %2060
%2062:	load	 time_stamp
%2063:	and	 %2062 XXX
%2064:	trunc	 %2063
%2065:	zext	 %2064
%2066:	ashr	 %2065 XXX
%2067:	trunc	 %2066
%2068:	load	 outcnt
%2069:	add	 %2068 XXX
%2070:	store	 %2069 outcnt
%2071:	zext	 %2068
%2072:	getelementptr	 outbuf XXX %2071
%2073:	store	 %2067 %2072
%2074:	br	 if.end60

BASIC BLOCK if.else
%2075:	load	 time_stamp
%2076:	and	 %2075 XXX
%2077:	and	 %2076 XXX
%2078:	trunc	 %2077
%2079:	load	 outcnt
%2080:	add	 %2079 XXX
%2081:	store	 %2080 outcnt
%2082:	zext	 %2079
%2083:	getelementptr	 outbuf XXX %2082
%2084:	store	 %2078 %2083
%2085:	load	 outcnt
%2086:	icmp	 %2085 XXX
%2087:	br	 %2086 if.end47 if.then46

BASIC BLOCK if.then46
%2088:	call	 flush_outbuf
%2089:	br	 if.end47

BASIC BLOCK if.end47
%2090:	load	 time_stamp
%2091:	and	 %2090 XXX
%2092:	trunc	 %2091
%2093:	zext	 %2092
%2094:	ashr	 %2093 XXX
%2095:	trunc	 %2094
%2096:	load	 outcnt
%2097:	add	 %2096 XXX
%2098:	store	 %2097 outcnt
%2099:	zext	 %2096
%2100:	getelementptr	 outbuf XXX %2099
%2101:	store	 %2095 %2100
%2102:	load	 outcnt
%2103:	icmp	 %2102 XXX
%2104:	br	 %2103 if.end59 if.then58

BASIC BLOCK if.then58
%2105:	call	 flush_outbuf
%2106:	br	 if.end59

BASIC BLOCK if.end59
%2107:	br	 if.end60

BASIC BLOCK if.end60
%2108:	load	 outcnt
%2109:	icmp	 %2108 XXX
%2110:	br	 %2109 if.else78 if.then63

BASIC BLOCK if.then63
%2111:	load	 time_stamp
%2112:	lshr	 %2111 XXX
%2113:	and	 %2112 XXX
%2114:	trunc	 %2113
%2115:	load	 outcnt
%2116:	add	 %2115 XXX
%2117:	store	 %2116 outcnt
%2118:	zext	 %2115
%2119:	getelementptr	 outbuf XXX %2118
%2120:	store	 %2114 %2119
%2121:	load	 time_stamp
%2122:	lshr	 %2121 XXX
%2123:	trunc	 %2122
%2124:	zext	 %2123
%2125:	ashr	 %2124 XXX
%2126:	trunc	 %2125
%2127:	load	 outcnt
%2128:	add	 %2127 XXX
%2129:	store	 %2128 outcnt
%2130:	zext	 %2127
%2131:	getelementptr	 outbuf XXX %2130
%2132:	store	 %2126 %2131
%2133:	br	 if.end101

BASIC BLOCK if.else78
%2134:	load	 time_stamp
%2135:	lshr	 %2134 XXX
%2136:	and	 %2135 XXX
%2137:	trunc	 %2136
%2138:	load	 outcnt
%2139:	add	 %2138 XXX
%2140:	store	 %2139 outcnt
%2141:	zext	 %2138
%2142:	getelementptr	 outbuf XXX %2141
%2143:	store	 %2137 %2142
%2144:	load	 outcnt
%2145:	icmp	 %2144 XXX
%2146:	br	 %2145 if.end88 if.then87

BASIC BLOCK if.then87
%2147:	call	 flush_outbuf
%2148:	br	 if.end88

BASIC BLOCK if.end88
%2149:	load	 time_stamp
%2150:	lshr	 %2149 XXX
%2151:	trunc	 %2150
%2152:	zext	 %2151
%2153:	ashr	 %2152 XXX
%2154:	trunc	 %2153
%2155:	load	 outcnt
%2156:	add	 %2155 XXX
%2157:	store	 %2156 outcnt
%2158:	zext	 %2155
%2159:	getelementptr	 outbuf XXX %2158
%2160:	store	 %2154 %2159
%2161:	load	 outcnt
%2162:	icmp	 %2161 XXX
%2163:	br	 %2162 if.end100 if.then99

BASIC BLOCK if.then99
%2164:	call	 flush_outbuf
%2165:	br	 if.end100

BASIC BLOCK if.end100
%2166:	br	 if.end101

BASIC BLOCK if.end101
%2167:	call	 XXX XXX updcrc
%2168:	store	 %2167 crc
%2169:	call	 out bi_init
%2170:	call	 %1987 method ct_init
%2171:	load	 level
%2172:	call	 %2171 %1988 lm_init
%2173:	load	 %1988
%2174:	trunc	 %2173
%2175:	load	 outcnt
%2176:	add	 %2175 XXX
%2177:	store	 %2176 outcnt
%2178:	zext	 %2175
%2179:	getelementptr	 outbuf XXX %2178
%2180:	store	 %2174 %2179
%2181:	load	 outcnt
%2182:	icmp	 %2181 XXX
%2183:	br	 %2182 if.end109 if.then108

BASIC BLOCK if.then108
%2184:	call	 flush_outbuf
%2185:	br	 if.end109

BASIC BLOCK if.end109
%2186:	load	 outcnt
%2187:	add	 %2186 XXX
%2188:	store	 %2187 outcnt
%2189:	zext	 %2186
%2190:	getelementptr	 outbuf XXX %2189
%2191:	store	 XXX %2190
%2192:	load	 outcnt
%2193:	icmp	 %2192 XXX
%2194:	br	 %2193 if.end116 if.then115

BASIC BLOCK if.then115
%2195:	call	 flush_outbuf
%2196:	br	 if.end116

BASIC BLOCK if.end116
%2197:	load	 save_orig_name
%2198:	icmp	 %2197 XXX
%2199:	br	 %2198 if.end128 if.then118

BASIC BLOCK if.then118
%2200:	call	 XXX basename
%2201:	br	 do.body

BASIC BLOCK do.body
%2202:	phi	 %2200 %2216
%2203:	load	 %2202
%2204:	load	 outcnt
%2205:	add	 %2204 XXX
%2206:	store	 %2205 outcnt
%2207:	zext	 %2204
%2208:	getelementptr	 outbuf XXX %2207
%2209:	store	 %2203 %2208
%2210:	load	 outcnt
%2211:	icmp	 %2210 XXX
%2212:	br	 %2211 if.end126 if.then125

BASIC BLOCK if.then125
%2213:	call	 flush_outbuf
%2214:	br	 if.end126

BASIC BLOCK if.end126
%2215:	br	 do.cond

BASIC BLOCK do.cond
%2216:	getelementptr	 %2202 XXX
%2217:	load	 %2202
%2218:	icmp	 %2217 XXX
%2219:	br	 %2218 do.end do.body

BASIC BLOCK do.end
%2220:	br	 if.end128

BASIC BLOCK if.end128
%2221:	load	 outcnt
%2222:	zext	 %2221
%2223:	store	 %2222 header_bytes
%2224:	call	 deflate
%2225:	load	 outcnt
%2226:	icmp	 %2225 XXX
%2227:	br	 %2226 if.else148 if.then133

BASIC BLOCK if.then133
%2228:	load	 crc
%2229:	and	 %2228 XXX
%2230:	and	 %2229 XXX
%2231:	trunc	 %2230
%2232:	load	 outcnt
%2233:	add	 %2232 XXX
%2234:	store	 %2233 outcnt
%2235:	zext	 %2232
%2236:	getelementptr	 outbuf XXX %2235
%2237:	store	 %2231 %2236
%2238:	load	 crc
%2239:	and	 %2238 XXX
%2240:	trunc	 %2239
%2241:	zext	 %2240
%2242:	ashr	 %2241 XXX
%2243:	trunc	 %2242
%2244:	load	 outcnt
%2245:	add	 %2244 XXX
%2246:	store	 %2245 outcnt
%2247:	zext	 %2244
%2248:	getelementptr	 outbuf XXX %2247
%2249:	store	 %2243 %2248
%2250:	br	 if.end171

BASIC BLOCK if.else148
%2251:	load	 crc
%2252:	and	 %2251 XXX
%2253:	and	 %2252 XXX
%2254:	trunc	 %2253
%2255:	load	 outcnt
%2256:	add	 %2255 XXX
%2257:	store	 %2256 outcnt
%2258:	zext	 %2255
%2259:	getelementptr	 outbuf XXX %2258
%2260:	store	 %2254 %2259
%2261:	load	 outcnt
%2262:	icmp	 %2261 XXX
%2263:	br	 %2262 if.end158 if.then157

BASIC BLOCK if.then157
%2264:	call	 flush_outbuf
%2265:	br	 if.end158

BASIC BLOCK if.end158
%2266:	load	 crc
%2267:	and	 %2266 XXX
%2268:	trunc	 %2267
%2269:	zext	 %2268
%2270:	ashr	 %2269 XXX
%2271:	trunc	 %2270
%2272:	load	 outcnt
%2273:	add	 %2272 XXX
%2274:	store	 %2273 outcnt
%2275:	zext	 %2272
%2276:	getelementptr	 outbuf XXX %2275
%2277:	store	 %2271 %2276
%2278:	load	 outcnt
%2279:	icmp	 %2278 XXX
%2280:	br	 %2279 if.end170 if.then169

BASIC BLOCK if.then169
%2281:	call	 flush_outbuf
%2282:	br	 if.end170

BASIC BLOCK if.end170
%2283:	br	 if.end171

BASIC BLOCK if.end171
%2284:	load	 outcnt
%2285:	icmp	 %2284 XXX
%2286:	br	 %2285 if.else189 if.then174

BASIC BLOCK if.then174
%2287:	load	 crc
%2288:	lshr	 %2287 XXX
%2289:	and	 %2288 XXX
%2290:	trunc	 %2289
%2291:	load	 outcnt
%2292:	add	 %2291 XXX
%2293:	store	 %2292 outcnt
%2294:	zext	 %2291
%2295:	getelementptr	 outbuf XXX %2294
%2296:	store	 %2290 %2295
%2297:	load	 crc
%2298:	lshr	 %2297 XXX
%2299:	trunc	 %2298
%2300:	zext	 %2299
%2301:	ashr	 %2300 XXX
%2302:	trunc	 %2301
%2303:	load	 outcnt
%2304:	add	 %2303 XXX
%2305:	store	 %2304 outcnt
%2306:	zext	 %2303
%2307:	getelementptr	 outbuf XXX %2306
%2308:	store	 %2302 %2307
%2309:	br	 if.end212

BASIC BLOCK if.else189
%2310:	load	 crc
%2311:	lshr	 %2310 XXX
%2312:	and	 %2311 XXX
%2313:	trunc	 %2312
%2314:	load	 outcnt
%2315:	add	 %2314 XXX
%2316:	store	 %2315 outcnt
%2317:	zext	 %2314
%2318:	getelementptr	 outbuf XXX %2317
%2319:	store	 %2313 %2318
%2320:	load	 outcnt
%2321:	icmp	 %2320 XXX
%2322:	br	 %2321 if.end199 if.then198

BASIC BLOCK if.then198
%2323:	call	 flush_outbuf
%2324:	br	 if.end199

BASIC BLOCK if.end199
%2325:	load	 crc
%2326:	lshr	 %2325 XXX
%2327:	trunc	 %2326
%2328:	zext	 %2327
%2329:	ashr	 %2328 XXX
%2330:	trunc	 %2329
%2331:	load	 outcnt
%2332:	add	 %2331 XXX
%2333:	store	 %2332 outcnt
%2334:	zext	 %2331
%2335:	getelementptr	 outbuf XXX %2334
%2336:	store	 %2330 %2335
%2337:	load	 outcnt
%2338:	icmp	 %2337 XXX
%2339:	br	 %2338 if.end211 if.then210

BASIC BLOCK if.then210
%2340:	call	 flush_outbuf
%2341:	br	 if.end211

BASIC BLOCK if.end211
%2342:	br	 if.end212

BASIC BLOCK if.end212
%2343:	load	 outcnt
%2344:	icmp	 %2343 XXX
%2345:	br	 %2344 if.else230 if.then215

BASIC BLOCK if.then215
%2346:	load	 bytes_in
%2347:	and	 %2346 XXX
%2348:	and	 %2347 XXX
%2349:	trunc	 %2348
%2350:	load	 outcnt
%2351:	add	 %2350 XXX
%2352:	store	 %2351 outcnt
%2353:	zext	 %2350
%2354:	getelementptr	 outbuf XXX %2353
%2355:	store	 %2349 %2354
%2356:	load	 bytes_in
%2357:	and	 %2356 XXX
%2358:	trunc	 %2357
%2359:	zext	 %2358
%2360:	ashr	 %2359 XXX
%2361:	trunc	 %2360
%2362:	load	 outcnt
%2363:	add	 %2362 XXX
%2364:	store	 %2363 outcnt
%2365:	zext	 %2362
%2366:	getelementptr	 outbuf XXX %2365
%2367:	store	 %2361 %2366
%2368:	br	 if.end253

BASIC BLOCK if.else230
%2369:	load	 bytes_in
%2370:	and	 %2369 XXX
%2371:	and	 %2370 XXX
%2372:	trunc	 %2371
%2373:	load	 outcnt
%2374:	add	 %2373 XXX
%2375:	store	 %2374 outcnt
%2376:	zext	 %2373
%2377:	getelementptr	 outbuf XXX %2376
%2378:	store	 %2372 %2377
%2379:	load	 outcnt
%2380:	icmp	 %2379 XXX
%2381:	br	 %2380 if.end240 if.then239

BASIC BLOCK if.then239
%2382:	call	 flush_outbuf
%2383:	br	 if.end240

BASIC BLOCK if.end240
%2384:	load	 bytes_in
%2385:	and	 %2384 XXX
%2386:	trunc	 %2385
%2387:	zext	 %2386
%2388:	ashr	 %2387 XXX
%2389:	trunc	 %2388
%2390:	load	 outcnt
%2391:	add	 %2390 XXX
%2392:	store	 %2391 outcnt
%2393:	zext	 %2390
%2394:	getelementptr	 outbuf XXX %2393
%2395:	store	 %2389 %2394
%2396:	load	 outcnt
%2397:	icmp	 %2396 XXX
%2398:	br	 %2397 if.end252 if.then251

BASIC BLOCK if.then251
%2399:	call	 flush_outbuf
%2400:	br	 if.end252

BASIC BLOCK if.end252
%2401:	br	 if.end253

BASIC BLOCK if.end253
%2402:	load	 outcnt
%2403:	icmp	 %2402 XXX
%2404:	br	 %2403 if.else271 if.then256

BASIC BLOCK if.then256
%2405:	load	 bytes_in
%2406:	lshr	 %2405 XXX
%2407:	and	 %2406 XXX
%2408:	trunc	 %2407
%2409:	load	 outcnt
%2410:	add	 %2409 XXX
%2411:	store	 %2410 outcnt
%2412:	zext	 %2409
%2413:	getelementptr	 outbuf XXX %2412
%2414:	store	 %2408 %2413
%2415:	load	 bytes_in
%2416:	lshr	 %2415 XXX
%2417:	trunc	 %2416
%2418:	zext	 %2417
%2419:	ashr	 %2418 XXX
%2420:	trunc	 %2419
%2421:	load	 outcnt
%2422:	add	 %2421 XXX
%2423:	store	 %2422 outcnt
%2424:	zext	 %2421
%2425:	getelementptr	 outbuf XXX %2424
%2426:	store	 %2420 %2425
%2427:	br	 if.end294

BASIC BLOCK if.else271
%2428:	load	 bytes_in
%2429:	lshr	 %2428 XXX
%2430:	and	 %2429 XXX
%2431:	trunc	 %2430
%2432:	load	 outcnt
%2433:	add	 %2432 XXX
%2434:	store	 %2433 outcnt
%2435:	zext	 %2432
%2436:	getelementptr	 outbuf XXX %2435
%2437:	store	 %2431 %2436
%2438:	load	 outcnt
%2439:	icmp	 %2438 XXX
%2440:	br	 %2439 if.end281 if.then280

BASIC BLOCK if.then280
%2441:	call	 flush_outbuf
%2442:	br	 if.end281

BASIC BLOCK if.end281
%2443:	load	 bytes_in
%2444:	lshr	 %2443 XXX
%2445:	trunc	 %2444
%2446:	zext	 %2445
%2447:	ashr	 %2446 XXX
%2448:	trunc	 %2447
%2449:	load	 outcnt
%2450:	add	 %2449 XXX
%2451:	store	 %2450 outcnt
%2452:	zext	 %2449
%2453:	getelementptr	 outbuf XXX %2452
%2454:	store	 %2448 %2453
%2455:	load	 outcnt
%2456:	icmp	 %2455 XXX
%2457:	br	 %2456 if.end293 if.then292

BASIC BLOCK if.then292
%2458:	call	 flush_outbuf
%2459:	br	 if.end293

BASIC BLOCK if.end293
%2460:	br	 if.end294

BASIC BLOCK if.end294
%2461:	load	 header_bytes
%2462:	add	 %2461 XXX
%2463:	store	 %2462 header_bytes
%2464:	call	 flush_outbuf
%2465:	ret	 XXX

FUNCTION main

BASIC BLOCK entry
%2466:	alloca	 XXX
%2467:	alloca	 XXX
%2468:	store	 argc %2466
%2469:	store	 argv %2467
%2470:	load	 %2467
%2471:	getelementptr	 %2470 XXX
%2472:	load	 %2471
%2473:	call	 %2472 basename
%2474:	store	 %2473 progname
%2475:	load	 progname
%2476:	call	 %2475 strlen
%2477:	trunc	 %2476
%2478:	icmp	 %2477 XXX
%2479:	br	 %2478 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%2480:	load	 progname
%2481:	sext	 %2477
%2482:	getelementptr	 %2480 %2481
%2483:	getelementptr	 %2482 XXX
%2484:	call	 %2483 XXX strcmp
%2485:	icmp	 %2484 XXX
%2486:	br	 %2485 if.end if.then

BASIC BLOCK if.then
%2487:	sub	 %2477 XXX
%2488:	sext	 %2487
%2489:	load	 progname
%2490:	getelementptr	 %2489 %2488
%2491:	store	 XXX %2490
%2492:	br	 if.end

BASIC BLOCK if.end
%2493:	call	 %2466 %2467 XXX add_envopt
%2494:	store	 %2493 env
%2495:	load	 env
%2496:	icmp	 %2495 XXX
%2497:	br	 %2496 if.end12 if.then11

BASIC BLOCK if.then11
%2498:	load	 %2467
%2499:	store	 %2498 args
%2500:	br	 if.end12

BASIC BLOCK if.end12
%2501:	call	 XXX XXX signal
%2502:	icmp	 %2501 XXX
%2503:	zext	 %2502
%2504:	store	 %2503 foreground
%2505:	load	 foreground
%2506:	icmp	 %2505 XXX
%2507:	br	 %2506 if.end18 if.then16

BASIC BLOCK if.then16
%2508:	call	 XXX XXX signal
%2509:	br	 if.end18

BASIC BLOCK if.end18
%2510:	call	 XXX XXX signal
%2511:	call	 XXX XXX signal
%2512:	load	 progname
%2513:	call	 %2512 XXX XXX strncmp
%2514:	icmp	 %2513 XXX
%2515:	br	 %2514 lor.lhs.false if.then27

BASIC BLOCK lor.lhs.false
%2516:	load	 progname
%2517:	call	 %2516 XXX XXX strncmp
%2518:	icmp	 %2517 XXX
%2519:	br	 %2518 if.else if.then27

BASIC BLOCK if.then27
%2520:	store	 XXX decompress
%2521:	br	 if.end38

BASIC BLOCK if.else
%2522:	load	 progname
%2523:	getelementptr	 %2522 XXX
%2524:	call	 %2523 XXX strcmp
%2525:	icmp	 %2524 XXX
%2526:	br	 %2525 lor.lhs.false32 if.then36

BASIC BLOCK lor.lhs.false32
%2527:	load	 progname
%2528:	call	 %2527 XXX strcmp
%2529:	icmp	 %2528 XXX
%2530:	br	 %2529 if.end37 if.then36

BASIC BLOCK if.then36
%2531:	store	 XXX to_stdout
%2532:	store	 XXX decompress
%2533:	br	 if.end37

BASIC BLOCK if.end37
%2534:	br	 if.end38

BASIC BLOCK if.end38
%2535:	call	 XXX XXX XXX strncpy
%2536:	call	 XXX strlen
%2537:	trunc	 %2536
%2538:	store	 %2537 z_len
%2539:	br	 while.cond

BASIC BLOCK while.cond
%2540:	load	 %2466
%2541:	load	 %2467
%2542:	call	 %2540 %2541 XXX XXX XXX getopt_long
%2543:	icmp	 %2542 XXX
%2544:	br	 %2543 while.end while.body

BASIC BLOCK while.body
%2545:	switch	 %2542 sw.default XXX sw.bb XXX sw.bb45 XXX sw.bb47 XXX sw.bb48 XXX sw.bb49 XXX sw.bb50 XXX sw.bb50 XXX sw.bb50 XXX sw.bb51 XXX sw.bb52 XXX sw.bb53 XXX sw.bb54 XXX sw.bb66 XXX sw.bb67 XXX sw.bb69 XXX sw.bb70 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72

BASIC BLOCK sw.bb
%2546:	store	 XXX ascii
%2547:	br	 sw.epilog

BASIC BLOCK sw.bb45
%2548:	load	 optarg
%2549:	call	 %2548 atoi
%2550:	store	 %2549 maxbits
%2551:	br	 sw.epilog

BASIC BLOCK sw.bb47
%2552:	store	 XXX to_stdout
%2553:	br	 sw.epilog

BASIC BLOCK sw.bb48
%2554:	store	 XXX decompress
%2555:	br	 sw.epilog

BASIC BLOCK sw.bb49
%2556:	load	 force
%2557:	add	 %2556 XXX
%2558:	store	 %2557 force
%2559:	br	 sw.epilog

BASIC BLOCK sw.bb50
%2560:	call	 help
%2561:	call	 XXX do_exit
%2562:	br	 sw.epilog

BASIC BLOCK sw.bb51
%2563:	call	 license
%2564:	call	 XXX do_exit
%2565:	br	 sw.epilog

BASIC BLOCK sw.bb52
%2566:	store	 XXX quiet
%2567:	store	 XXX verbose
%2568:	br	 sw.epilog

BASIC BLOCK sw.bb53
%2569:	store	 XXX recursive
%2570:	br	 sw.epilog

BASIC BLOCK sw.bb54
%2571:	load	 optarg
%2572:	call	 %2571 strlen
%2573:	trunc	 %2572
%2574:	store	 %2573 z_len
%2575:	load	 z_len
%2576:	icmp	 %2575 XXX
%2577:	br	 %2576 lor.lhs.false59 if.then62

BASIC BLOCK lor.lhs.false59
%2578:	load	 z_len
%2579:	icmp	 %2578 XXX
%2580:	br	 %2579 if.end64 if.then62

BASIC BLOCK if.then62
%2581:	load	 stderr
%2582:	load	 progname
%2583:	load	 optarg
%2584:	call	 %2581 XXX %2582 %2583 fprintf
%2585:	call	 XXX do_exit
%2586:	br	 if.end64

BASIC BLOCK if.end64
%2587:	load	 optarg
%2588:	call	 XXX %2587 strcpy
%2589:	br	 sw.epilog

BASIC BLOCK sw.bb66
%2590:	store	 XXX to_stdout
%2591:	store	 XXX decompress
%2592:	store	 XXX test
%2593:	br	 sw.epilog

BASIC BLOCK sw.bb67
%2594:	load	 verbose
%2595:	add	 %2594 XXX
%2596:	store	 %2595 verbose
%2597:	store	 XXX quiet
%2598:	br	 sw.epilog

BASIC BLOCK sw.bb69
%2599:	call	 version
%2600:	call	 XXX do_exit
%2601:	br	 sw.epilog

BASIC BLOCK sw.bb70
%2602:	load	 stderr
%2603:	load	 progname
%2604:	call	 %2602 XXX %2603 fprintf
%2605:	call	 usage
%2606:	call	 XXX do_exit
%2607:	br	 sw.epilog

BASIC BLOCK sw.bb72
%2608:	sub	 %2542 XXX
%2609:	store	 %2608 level
%2610:	br	 sw.epilog

BASIC BLOCK sw.default
%2611:	call	 usage
%2612:	call	 XXX do_exit
%2613:	br	 sw.epilog

BASIC BLOCK sw.epilog
%2614:	br	 while.cond

BASIC BLOCK while.end
%2615:	load	 %2466
%2616:	load	 optind
%2617:	sub	 %2615 %2616
%2618:	load	 ascii
%2619:	icmp	 %2618 XXX
%2620:	br	 %2619 if.end80 land.lhs.true76

BASIC BLOCK land.lhs.true76
%2621:	load	 quiet
%2622:	icmp	 %2621 XXX
%2623:	br	 %2622 if.then78 if.end80

BASIC BLOCK if.then78
%2624:	load	 stderr
%2625:	load	 progname
%2626:	call	 %2624 XXX %2625 fprintf
%2627:	br	 if.end80

BASIC BLOCK if.end80
%2628:	load	 do_lzw
%2629:	icmp	 %2628 XXX
%2630:	br	 %2629 if.end85 land.lhs.true82

BASIC BLOCK land.lhs.true82
%2631:	load	 decompress
%2632:	icmp	 %2631 XXX
%2633:	br	 %2632 if.then84 if.end85

BASIC BLOCK if.then84
%2634:	store	 lzw work
%2635:	br	 if.end85

BASIC BLOCK if.end85
%2636:	icmp	 %2617 XXX
%2637:	br	 %2636 if.else106 if.then88

BASIC BLOCK if.then88
%2638:	load	 to_stdout
%2639:	icmp	 %2638 XXX
%2640:	br	 %2639 if.end97 land.lhs.true90

BASIC BLOCK land.lhs.true90
%2641:	load	 test
%2642:	icmp	 %2641 XXX
%2643:	br	 %2642 land.lhs.true92 if.end97

BASIC BLOCK land.lhs.true92
%2644:	load	 decompress
%2645:	icmp	 %2644 XXX
%2646:	br	 %2645 if.then96 lor.lhs.false94

BASIC BLOCK lor.lhs.false94
%2647:	load	 ascii
%2648:	icmp	 %2647 XXX
%2649:	br	 %2648 if.then96 if.end97

BASIC BLOCK if.then96
%2650:	br	 if.end97

BASIC BLOCK if.end97
%2651:	br	 while.cond98

BASIC BLOCK while.cond98
%2652:	load	 optind
%2653:	load	 %2466
%2654:	icmp	 %2652 %2653
%2655:	br	 %2654 while.end105 while.body101

BASIC BLOCK while.body101
%2656:	load	 optind
%2657:	add	 %2656 XXX
%2658:	store	 %2657 optind
%2659:	sext	 %2656
%2660:	load	 %2467
%2661:	getelementptr	 %2660 %2659
%2662:	load	 %2661
%2663:	call	 %2662 treat_file
%2664:	br	 while.cond98

BASIC BLOCK while.end105
%2665:	br	 if.end107

BASIC BLOCK if.else106
%2666:	call	 treat_stdin
%2667:	br	 if.end107

BASIC BLOCK if.end107
%2668:	load	 exit_code
%2669:	call	 %2668 do_exit
%2670:	load	 exit_code
%2671:	ret	 %2670

FUNCTION basename

BASIC BLOCK entry
%2672:	call	 fname XXX strrchr
%2673:	icmp	 %2672 XXX
%2674:	br	 %2673 if.end if.then

BASIC BLOCK if.then
%2675:	getelementptr	 %2672 XXX
%2676:	br	 if.end

BASIC BLOCK if.end
%2677:	phi	 %2675 fname
%2678:	ret	 %2677

FUNCTION add_envopt

BASIC BLOCK entry
%2679:	load	 argcp
%2680:	call	 env getenv
%2681:	icmp	 %2680 XXX
%2682:	br	 %2681 if.end if.then

BASIC BLOCK if.then
%2683:	br	 return

BASIC BLOCK if.end
%2684:	call	 %2680 strlen
%2685:	add	 %2684 XXX
%2686:	trunc	 %2685
%2687:	call	 %2686 xmalloc
%2688:	call	 %2687 %2680 strcpy
%2689:	br	 for.cond

BASIC BLOCK for.cond
%2690:	phi	 %2688 %2710
%2691:	phi	 XXX %2712
%2692:	load	 %2690
%2693:	icmp	 %2692 XXX
%2694:	br	 %2693 for.end for.body

BASIC BLOCK for.body
%2695:	call	 %2690 XXX strspn
%2696:	getelementptr	 %2690 %2695
%2697:	load	 %2696
%2698:	sext	 %2697
%2699:	icmp	 %2698 XXX
%2700:	br	 %2699 if.end9 if.then8

BASIC BLOCK if.then8
%2701:	br	 for.end

BASIC BLOCK if.end9
%2702:	call	 %2696 XXX strcspn
%2703:	getelementptr	 %2696 %2702
%2704:	load	 %2703
%2705:	icmp	 %2704 XXX
%2706:	br	 %2705 if.end14 if.then13

BASIC BLOCK if.then13
%2707:	getelementptr	 %2703 XXX
%2708:	store	 XXX %2703
%2709:	br	 if.end14

BASIC BLOCK if.end14
%2710:	phi	 %2707 %2703
%2711:	br	 for.inc

BASIC BLOCK for.inc
%2712:	add	 %2691 XXX
%2713:	br	 for.cond

BASIC BLOCK for.end
%2714:	icmp	 %2691 XXX
%2715:	br	 %2714 if.end18 if.then17

BASIC BLOCK if.then17
%2716:	call	 %2688 free
%2717:	br	 return

BASIC BLOCK if.end18
%2718:	load	 argcp
%2719:	add	 %2718 %2691
%2720:	store	 %2719 argcp
%2721:	load	 argcp
%2722:	add	 %2721 XXX
%2723:	sext	 %2722
%2724:	call	 %2723 XXX calloc
%2725:	bitcast	 %2724
%2726:	icmp	 %2725 XXX
%2727:	br	 %2726 if.end26 if.then25

BASIC BLOCK if.then25
%2728:	call	 XXX error
%2729:	br	 if.end26

BASIC BLOCK if.end26
%2730:	load	 argvp
%2731:	store	 %2725 argvp
%2732:	add	 %2679 XXX
%2733:	icmp	 %2679 XXX
%2734:	br	 %2733 if.end30 if.then29

BASIC BLOCK if.then29
%2735:	call	 XXX error
%2736:	br	 if.end30

BASIC BLOCK if.end30
%2737:	getelementptr	 %2730 XXX
%2738:	load	 %2730
%2739:	getelementptr	 %2725 XXX
%2740:	store	 %2738 %2725
%2741:	br	 for.cond33

BASIC BLOCK for.cond33
%2742:	phi	 %2739 %2749
%2743:	phi	 %2688 %2753
%2744:	phi	 %2691 %2759
%2745:	icmp	 %2744 XXX
%2746:	br	 %2745 for.end44 for.body36

BASIC BLOCK for.body36
%2747:	call	 %2743 XXX strspn
%2748:	getelementptr	 %2743 %2747
%2749:	getelementptr	 %2742 XXX
%2750:	store	 %2748 %2742
%2751:	br	 while.cond

BASIC BLOCK while.cond
%2752:	phi	 %2748 %2753
%2753:	getelementptr	 %2752 XXX
%2754:	load	 %2752
%2755:	icmp	 %2754 XXX
%2756:	br	 %2755 while.end while.body

BASIC BLOCK while.body
%2757:	br	 while.cond

BASIC BLOCK while.end
%2758:	br	 for.inc42

BASIC BLOCK for.inc42
%2759:	add	 %2744 XXX
%2760:	br	 for.cond33

BASIC BLOCK for.end44
%2761:	br	 while.cond45

BASIC BLOCK while.cond45
%2762:	phi	 %2742 %2770
%2763:	phi	 %2737 %2768
%2764:	phi	 %2732 %2765
%2765:	add	 %2764 XXX
%2766:	icmp	 %2764 XXX
%2767:	br	 %2766 while.end51 while.body48

BASIC BLOCK while.body48
%2768:	getelementptr	 %2763 XXX
%2769:	load	 %2763
%2770:	getelementptr	 %2762 XXX
%2771:	store	 %2769 %2762
%2772:	br	 while.cond45

BASIC BLOCK while.end51
%2773:	store	 XXX %2762
%2774:	br	 return

BASIC BLOCK return
%2775:	phi	 XXX XXX %2688
%2776:	ret	 %2775

FUNCTION abort_gzip

BASIC BLOCK entry
%2777:	load	 remove_ofname
%2778:	icmp	 %2777 XXX
%2779:	br	 %2778 if.end if.then

BASIC BLOCK if.then
%2780:	load	 ofd
%2781:	call	 %2780 close
%2782:	call	 XXX unlink
%2783:	br	 if.end

BASIC BLOCK if.end
%2784:	call	 XXX do_exit
%2785:	ret	

FUNCTION help

BASIC BLOCK entry
%2786:	load	 stderr
%2787:	load	 progname
%2788:	call	 %2786 XXX %2787 XXX XXX fprintf
%2789:	call	 usage
%2790:	br	 while.cond

BASIC BLOCK while.cond
%2791:	phi	 XXX %2796
%2792:	load	 %2791
%2793:	icmp	 %2792 XXX
%2794:	br	 %2793 while.end while.body

BASIC BLOCK while.body
%2795:	load	 stderr
%2796:	getelementptr	 %2791 XXX
%2797:	load	 %2791
%2798:	call	 %2795 XXX %2797 fprintf
%2799:	br	 while.cond

BASIC BLOCK while.end
%2800:	ret	

FUNCTION do_exit

BASIC BLOCK entry
%2801:	load	 env
%2802:	icmp	 %2801 XXX
%2803:	br	 %2802 if.end if.then

BASIC BLOCK if.then
%2804:	load	 env
%2805:	call	 %2804 free
%2806:	store	 XXX env
%2807:	br	 if.end

BASIC BLOCK if.end
%2808:	load	 args
%2809:	icmp	 %2808 XXX
%2810:	br	 %2809 if.end3 if.then2

BASIC BLOCK if.then2
%2811:	load	 args
%2812:	bitcast	 %2811
%2813:	call	 %2812 free
%2814:	store	 XXX args
%2815:	br	 if.end3

BASIC BLOCK if.end3
%2816:	call	 exitcode exit
%2817:	unreachable	

BASIC BLOCK return
%2818:	ret	

FUNCTION license

BASIC BLOCK entry
%2819:	load	 stderr
%2820:	load	 progname
%2821:	call	 %2819 XXX %2820 XXX XXX fprintf
%2822:	br	 while.cond

BASIC BLOCK while.cond
%2823:	phi	 XXX %2828
%2824:	load	 %2823
%2825:	icmp	 %2824 XXX
%2826:	br	 %2825 while.end while.body

BASIC BLOCK while.body
%2827:	load	 stderr
%2828:	getelementptr	 %2823 XXX
%2829:	load	 %2823
%2830:	call	 %2827 XXX %2829 fprintf
%2831:	br	 while.cond

BASIC BLOCK while.end
%2832:	ret	

FUNCTION version

BASIC BLOCK entry
%2833:	load	 stderr
%2834:	load	 progname
%2835:	call	 %2833 XXX %2834 XXX XXX fprintf
%2836:	load	 stderr
%2837:	call	 %2836 XXX XXX XXX fprintf
%2838:	load	 stderr
%2839:	call	 %2838 XXX fprintf
%2840:	load	 stderr
%2841:	call	 %2840 XXX fprintf
%2842:	load	 stderr
%2843:	call	 %2842 XXX fprintf
%2844:	ret	

FUNCTION usage

BASIC BLOCK entry
%2845:	load	 stderr
%2846:	load	 progname
%2847:	call	 %2845 XXX %2846 XXX XXX fprintf
%2848:	ret	

FUNCTION lzw

BASIC BLOCK entry
%2849:	load	 msg_done
%2850:	icmp	 %2849 XXX
%2851:	br	 %2850 if.end if.then

BASIC BLOCK if.then
%2852:	br	 return

BASIC BLOCK if.end
%2853:	load	 msg_done
%2854:	icmp	 %2853 XXX
%2855:	br	 %2854 if.then2 if.end3

BASIC BLOCK if.then2
%2856:	store	 XXX msg_done
%2857:	br	 if.end3

BASIC BLOCK if.end3
%2858:	load	 stderr
%2859:	call	 %2858 XXX fprintf
%2860:	store	 XXX exit_code
%2861:	br	 return

BASIC BLOCK return
%2862:	ret	 XXX

FUNCTION treat_file

BASIC BLOCK entry
%2863:	alloca	 XXX
%2864:	call	 iname istat get_istat
%2865:	icmp	 %2864 XXX
%2866:	br	 %2865 if.end if.then

BASIC BLOCK if.then
%2867:	br	 if.end157

BASIC BLOCK if.end
%2868:	load	 XXX
%2869:	and	 %2868 XXX
%2870:	icmp	 %2869 XXX
%2871:	br	 %2870 if.end12 if.then2

BASIC BLOCK if.then2
%2872:	load	 recursive
%2873:	icmp	 %2872 XXX
%2874:	br	 %2873 if.else if.then3

BASIC BLOCK if.then3
%2875:	bitcast	 %2863
%2876:	call	 %2875 XXX XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%2877:	call	 iname treat_dir
%2878:	call	 iname %2863 reset_times
%2879:	br	 if.end11

BASIC BLOCK if.else
%2880:	load	 quiet
%2881:	icmp	 %2880 XXX
%2882:	br	 %2881 if.then5 if.end7

BASIC BLOCK if.then5
%2883:	load	 stderr
%2884:	load	 progname
%2885:	call	 %2883 XXX %2884 XXX fprintf
%2886:	br	 if.end7

BASIC BLOCK if.end7
%2887:	load	 exit_code
%2888:	icmp	 %2887 XXX
%2889:	br	 %2888 if.end10 if.then9

BASIC BLOCK if.then9
%2890:	store	 XXX exit_code
%2891:	br	 if.end10

BASIC BLOCK if.end10
%2892:	br	 if.end11

BASIC BLOCK if.end11
%2893:	br	 if.end157

BASIC BLOCK if.end12
%2894:	load	 XXX
%2895:	and	 %2894 XXX
%2896:	icmp	 %2895 XXX
%2897:	br	 %2896 if.then15 if.end23

BASIC BLOCK if.then15
%2898:	load	 quiet
%2899:	icmp	 %2898 XXX
%2900:	br	 %2899 if.then17 if.end19

BASIC BLOCK if.then17
%2901:	load	 stderr
%2902:	load	 progname
%2903:	call	 %2901 XXX %2902 XXX fprintf
%2904:	br	 if.end19

BASIC BLOCK if.end19
%2905:	load	 exit_code
%2906:	icmp	 %2905 XXX
%2907:	br	 %2906 if.end22 if.then21

BASIC BLOCK if.then21
%2908:	store	 XXX exit_code
%2909:	br	 if.end22

BASIC BLOCK if.end22
%2910:	br	 if.end157

BASIC BLOCK if.end23
%2911:	load	 XXX
%2912:	icmp	 %2911 XXX
%2913:	br	 %2912 if.end39 land.lhs.true

BASIC BLOCK land.lhs.true
%2914:	load	 to_stdout
%2915:	icmp	 %2914 XXX
%2916:	br	 %2915 land.lhs.true26 if.end39

BASIC BLOCK land.lhs.true26
%2917:	load	 force
%2918:	icmp	 %2917 XXX
%2919:	br	 %2918 if.then28 if.end39

BASIC BLOCK if.then28
%2920:	load	 quiet
%2921:	icmp	 %2920 XXX
%2922:	br	 %2921 if.then30 if.end34

BASIC BLOCK if.then30
%2923:	load	 stderr
%2924:	load	 progname
%2925:	load	 XXX
%2926:	trunc	 %2925
%2927:	sub	 %2926 XXX
%2928:	load	 XXX
%2929:	icmp	 %2928 XXX
%2930:	select	 %2929 XXX XXX
%2931:	call	 %2923 XXX %2924 XXX %2927 %2930 fprintf
%2932:	br	 if.end34

BASIC BLOCK if.end34
%2933:	load	 exit_code
%2934:	icmp	 %2933 XXX
%2935:	br	 %2934 if.end38 if.then37

BASIC BLOCK if.then37
%2936:	store	 XXX exit_code
%2937:	br	 if.end38

BASIC BLOCK if.end38
%2938:	br	 if.end157

BASIC BLOCK if.end39
%2939:	load	 XXX
%2940:	store	 %2939 ifile_size
%2941:	store	 XXX time_stamp
%2942:	load	 to_stdout
%2943:	icmp	 %2942 XXX
%2944:	br	 %2943 if.else43 if.then41

BASIC BLOCK if.then41
%2945:	call	 XXX XXX strcpy
%2946:	br	 if.end49

BASIC BLOCK if.else43
%2947:	call	 make_ofname
%2948:	icmp	 %2947 XXX
%2949:	br	 %2948 if.end48 if.then47

BASIC BLOCK if.then47
%2950:	br	 if.end157

BASIC BLOCK if.end48
%2951:	br	 if.end49

BASIC BLOCK if.end49
%2952:	load	 ascii
%2953:	icmp	 %2952 XXX
%2954:	br	 %2953 land.end land.rhs

BASIC BLOCK land.rhs
%2955:	load	 decompress
%2956:	icmp	 %2955 XXX
%2957:	xor	 %2956 XXX
%2958:	br	 land.end

BASIC BLOCK land.end
%2959:	phi	 XXX %2957
%2960:	select	 %2959 XXX XXX
%2961:	call	 XXX %2960 XXX open
%2962:	store	 %2961 ifd
%2963:	load	 ifd
%2964:	icmp	 %2963 XXX
%2965:	br	 %2964 if.end58 if.then56

BASIC BLOCK if.then56
%2966:	load	 stderr
%2967:	load	 progname
%2968:	call	 %2966 XXX %2967 fprintf
%2969:	call	 XXX perror
%2970:	store	 XXX exit_code
%2971:	br	 if.end157

BASIC BLOCK if.end58
%2972:	call	 clear_bufs
%2973:	store	 XXX part_nb
%2974:	load	 decompress
%2975:	icmp	 %2974 XXX
%2976:	br	 %2975 if.end67 if.then60

BASIC BLOCK if.then60
%2977:	load	 ifd
%2978:	call	 %2977 get_method
%2979:	store	 %2978 method
%2980:	load	 method
%2981:	icmp	 %2980 XXX
%2982:	br	 %2981 if.end66 if.then64

BASIC BLOCK if.then64
%2983:	load	 ifd
%2984:	call	 %2983 close
%2985:	br	 if.end157

BASIC BLOCK if.end66
%2986:	br	 if.end67

BASIC BLOCK if.end67
%2987:	load	 to_stdout
%2988:	icmp	 %2987 XXX
%2989:	br	 %2988 if.else71 if.then69

BASIC BLOCK if.then69
%2990:	load	 stdout
%2991:	call	 %2990 fileno
%2992:	store	 %2991 ofd
%2993:	br	 if.end85

BASIC BLOCK if.else71
%2994:	call	 create_outfile
%2995:	icmp	 %2994 XXX
%2996:	br	 %2995 if.end76 if.then75

BASIC BLOCK if.then75
%2997:	br	 if.end157

BASIC BLOCK if.end76
%2998:	load	 save_orig_name
%2999:	icmp	 %2998 XXX
%3000:	br	 %2999 if.end84 land.lhs.true78

BASIC BLOCK land.lhs.true78
%3001:	load	 verbose
%3002:	icmp	 %3001 XXX
%3003:	br	 %3002 land.lhs.true80 if.end84

BASIC BLOCK land.lhs.true80
%3004:	load	 quiet
%3005:	icmp	 %3004 XXX
%3006:	br	 %3005 if.then82 if.end84

BASIC BLOCK if.then82
%3007:	load	 stderr
%3008:	load	 progname
%3009:	call	 %3007 XXX %3008 XXX XXX fprintf
%3010:	br	 if.end84

BASIC BLOCK if.end84
%3011:	br	 if.end85

BASIC BLOCK if.end85
%3012:	load	 verbose
%3013:	icmp	 %3012 XXX
%3014:	br	 %3013 if.end99 if.then87

BASIC BLOCK if.then87
%3015:	load	 stderr
%3016:	call	 XXX strlen
%3017:	trunc	 %3016
%3018:	icmp	 %3017 XXX
%3019:	br	 %3018 cond.false cond.true

BASIC BLOCK cond.true
%3020:	br	 cond.end

BASIC BLOCK cond.false
%3021:	call	 XXX strlen
%3022:	trunc	 %3021
%3023:	icmp	 %3022 XXX
%3024:	select	 %3023 XXX XXX
%3025:	br	 cond.end

BASIC BLOCK cond.end
%3026:	phi	 XXX %3024
%3027:	call	 %3015 XXX XXX %3026 fprintf
%3028:	br	 if.end99

BASIC BLOCK if.end99
%3029:	br	 for.cond

BASIC BLOCK for.cond
%3030:	load	 work
%3031:	load	 ifd
%3032:	load	 ofd
%3033:	call	 %3031 %3032 %3030
%3034:	icmp	 %3033 XXX
%3035:	br	 %3034 if.end104 if.then103

BASIC BLOCK if.then103
%3036:	store	 XXX method
%3037:	br	 for.end

BASIC BLOCK if.end104
%3038:	load	 decompress
%3039:	icmp	 %3038 XXX
%3040:	br	 %3039 if.then110 lor.lhs.false

BASIC BLOCK lor.lhs.false
%3041:	load	 last_member
%3042:	icmp	 %3041 XXX
%3043:	br	 %3042 lor.lhs.false107 if.then110

BASIC BLOCK lor.lhs.false107
%3044:	load	 inptr
%3045:	load	 insize
%3046:	icmp	 %3044 %3045
%3047:	br	 %3046 if.end111 if.then110

BASIC BLOCK if.then110
%3048:	br	 for.end

BASIC BLOCK if.end111
%3049:	load	 ifd
%3050:	call	 %3049 get_method
%3051:	store	 %3050 method
%3052:	load	 method
%3053:	icmp	 %3052 XXX
%3054:	br	 %3053 if.end116 if.then115

BASIC BLOCK if.then115
%3055:	br	 for.end

BASIC BLOCK if.end116
%3056:	store	 XXX bytes_out
%3057:	br	 for.cond

BASIC BLOCK for.end
%3058:	load	 ifd
%3059:	call	 %3058 close
%3060:	load	 to_stdout
%3061:	icmp	 %3060 XXX
%3062:	br	 %3061 land.lhs.true119 if.end123

BASIC BLOCK land.lhs.true119
%3063:	load	 ofd
%3064:	call	 %3063 close
%3065:	icmp	 %3064 XXX
%3066:	br	 %3065 if.end123 if.then122

BASIC BLOCK if.then122
%3067:	call	 write_error
%3068:	br	 if.end123

BASIC BLOCK if.end123
%3069:	load	 method
%3070:	icmp	 %3069 XXX
%3071:	br	 %3070 if.end131 if.then126

BASIC BLOCK if.then126
%3072:	load	 to_stdout
%3073:	icmp	 %3072 XXX
%3074:	br	 %3073 if.then128 if.end130

BASIC BLOCK if.then128
%3075:	call	 XXX unlink
%3076:	br	 if.end130

BASIC BLOCK if.end130
%3077:	br	 if.end157

BASIC BLOCK if.end131
%3078:	load	 verbose
%3079:	icmp	 %3078 XXX
%3080:	br	 %3079 if.end154 if.then133

BASIC BLOCK if.then133
%3081:	load	 test
%3082:	icmp	 %3081 XXX
%3083:	br	 %3082 if.else137 if.then135

BASIC BLOCK if.then135
%3084:	load	 stderr
%3085:	call	 %3084 XXX fprintf
%3086:	br	 if.end146

BASIC BLOCK if.else137
%3087:	load	 decompress
%3088:	icmp	 %3087 XXX
%3089:	br	 %3088 if.else142 if.then139

BASIC BLOCK if.then139
%3090:	load	 bytes_out
%3091:	load	 bytes_in
%3092:	load	 header_bytes
%3093:	sub	 %3091 %3092
%3094:	sub	 %3090 %3093
%3095:	load	 bytes_out
%3096:	call	 %3094 %3095 display_ratio
%3097:	br	 if.end145

BASIC BLOCK if.else142
%3098:	load	 bytes_in
%3099:	load	 bytes_out
%3100:	load	 header_bytes
%3101:	sub	 %3099 %3100
%3102:	sub	 %3098 %3101
%3103:	load	 bytes_in
%3104:	call	 %3102 %3103 display_ratio
%3105:	br	 if.end145

BASIC BLOCK if.end145
%3106:	br	 if.end146

BASIC BLOCK if.end146
%3107:	load	 test
%3108:	icmp	 %3107 XXX
%3109:	br	 %3108 land.lhs.true148 if.end152

BASIC BLOCK land.lhs.true148
%3110:	load	 to_stdout
%3111:	icmp	 %3110 XXX
%3112:	br	 %3111 if.then150 if.end152

BASIC BLOCK if.then150
%3113:	load	 stderr
%3114:	call	 %3113 XXX XXX fprintf
%3115:	br	 if.end152

BASIC BLOCK if.end152
%3116:	load	 stderr
%3117:	call	 %3116 XXX fprintf
%3118:	br	 if.end154

BASIC BLOCK if.end154
%3119:	load	 to_stdout
%3120:	icmp	 %3119 XXX
%3121:	br	 %3120 if.then156 if.end157

BASIC BLOCK if.then156
%3122:	call	 istat copy_stat
%3123:	br	 if.end157

BASIC BLOCK if.end157
%3124:	ret	

FUNCTION treat_stdin

BASIC BLOCK entry
%3125:	load	 force
%3126:	icmp	 %3125 XXX
%3127:	br	 %3126 land.lhs.true if.end

BASIC BLOCK land.lhs.true
%3128:	load	 decompress
%3129:	icmp	 %3128 XXX
%3130:	br	 %3129 cond.false cond.true

BASIC BLOCK cond.true
%3131:	load	 stdin
%3132:	br	 cond.end

BASIC BLOCK cond.false
%3133:	load	 stdout
%3134:	br	 cond.end

BASIC BLOCK cond.end
%3135:	phi	 %3131 %3133
%3136:	call	 %3135 fileno
%3137:	call	 %3136 isatty
%3138:	icmp	 %3137 XXX
%3139:	br	 %3138 if.end if.then

BASIC BLOCK if.then
%3140:	load	 stderr
%3141:	load	 progname
%3142:	load	 decompress
%3143:	icmp	 %3142 XXX
%3144:	select	 %3143 XXX XXX
%3145:	load	 decompress
%3146:	icmp	 %3145 XXX
%3147:	select	 %3146 XXX XXX
%3148:	call	 %3140 XXX %3141 %3144 %3147 fprintf
%3149:	load	 stderr
%3150:	load	 progname
%3151:	call	 %3149 XXX %3150 fprintf
%3152:	call	 XXX do_exit
%3153:	br	 if.end

BASIC BLOCK if.end
%3154:	load	 decompress
%3155:	icmp	 %3154 XXX
%3156:	br	 %3155 lor.lhs.false if.then12

BASIC BLOCK lor.lhs.false
%3157:	load	 ascii
%3158:	icmp	 %3157 XXX
%3159:	br	 %3158 if.then12 if.end13

BASIC BLOCK if.then12
%3160:	br	 if.end13

BASIC BLOCK if.end13
%3161:	load	 test
%3162:	icmp	 %3161 XXX
%3163:	br	 %3162 land.lhs.true15 if.end20

BASIC BLOCK land.lhs.true15
%3164:	load	 decompress
%3165:	icmp	 %3164 XXX
%3166:	br	 %3165 if.then19 lor.lhs.false17

BASIC BLOCK lor.lhs.false17
%3167:	load	 ascii
%3168:	icmp	 %3167 XXX
%3169:	br	 %3168 if.then19 if.end20

BASIC BLOCK if.then19
%3170:	br	 if.end20

BASIC BLOCK if.end20
%3171:	call	 XXX XXX strcpy
%3172:	call	 XXX XXX strcpy
%3173:	load	 stdin
%3174:	call	 %3173 fileno
%3175:	call	 %3174 istat fstat
%3176:	icmp	 %3175 XXX
%3177:	br	 %3176 if.end26 if.then25

BASIC BLOCK if.then25
%3178:	call	 XXX error
%3179:	br	 if.end26

BASIC BLOCK if.end26
%3180:	store	 XXX time_stamp
%3181:	store	 XXX ifile_size
%3182:	call	 clear_bufs
%3183:	store	 XXX to_stdout
%3184:	store	 XXX part_nb
%3185:	load	 decompress
%3186:	icmp	 %3185 XXX
%3187:	br	 %3186 if.end33 if.then28

BASIC BLOCK if.then28
%3188:	load	 ifd
%3189:	call	 %3188 get_method
%3190:	store	 %3189 method
%3191:	load	 method
%3192:	icmp	 %3191 XXX
%3193:	br	 %3192 if.end32 if.then31

BASIC BLOCK if.then31
%3194:	load	 exit_code
%3195:	call	 %3194 do_exit
%3196:	br	 if.end32

BASIC BLOCK if.end32
%3197:	br	 if.end33

BASIC BLOCK if.end33
%3198:	br	 for.cond

BASIC BLOCK for.cond
%3199:	load	 work
%3200:	load	 stdin
%3201:	call	 %3200 fileno
%3202:	load	 stdout
%3203:	call	 %3202 fileno
%3204:	call	 %3201 %3203 %3199
%3205:	icmp	 %3204 XXX
%3206:	br	 %3205 if.end39 if.then38

BASIC BLOCK if.then38
%3207:	br	 if.end62

BASIC BLOCK if.end39
%3208:	load	 decompress
%3209:	icmp	 %3208 XXX
%3210:	br	 %3209 if.then45 lor.lhs.false41

BASIC BLOCK lor.lhs.false41
%3211:	load	 last_member
%3212:	icmp	 %3211 XXX
%3213:	br	 %3212 lor.lhs.false43 if.then45

BASIC BLOCK lor.lhs.false43
%3214:	load	 inptr
%3215:	load	 insize
%3216:	icmp	 %3214 %3215
%3217:	br	 %3216 if.end46 if.then45

BASIC BLOCK if.then45
%3218:	br	 for.end

BASIC BLOCK if.end46
%3219:	load	 ifd
%3220:	call	 %3219 get_method
%3221:	store	 %3220 method
%3222:	load	 method
%3223:	icmp	 %3222 XXX
%3224:	br	 %3223 if.end50 if.then49

BASIC BLOCK if.then49
%3225:	br	 if.end62

BASIC BLOCK if.end50
%3226:	store	 XXX bytes_out
%3227:	br	 for.cond

BASIC BLOCK for.end
%3228:	load	 verbose
%3229:	icmp	 %3228 XXX
%3230:	br	 %3229 if.end62 if.then52

BASIC BLOCK if.then52
%3231:	load	 test
%3232:	icmp	 %3231 XXX
%3233:	br	 %3232 if.else if.then54

BASIC BLOCK if.then54
%3234:	load	 stderr
%3235:	call	 %3234 XXX fprintf
%3236:	br	 if.end60

BASIC BLOCK if.else
%3237:	load	 decompress
%3238:	icmp	 %3237 XXX
%3239:	br	 %3238 if.then57 if.end59

BASIC BLOCK if.then57
%3240:	load	 bytes_in
%3241:	load	 bytes_out
%3242:	load	 header_bytes
%3243:	sub	 %3241 %3242
%3244:	sub	 %3240 %3243
%3245:	load	 bytes_in
%3246:	call	 %3244 %3245 display_ratio
%3247:	br	 if.end59

BASIC BLOCK if.end59
%3248:	br	 if.end60

BASIC BLOCK if.end60
%3249:	load	 stderr
%3250:	call	 %3249 XXX fprintf
%3251:	br	 if.end62

BASIC BLOCK if.end62
%3252:	ret	

FUNCTION huft_build

BASIC BLOCK entry
%3253:	alloca	 XXX
%3254:	alloca	 XXX
%3255:	alloca	 XXX
%3256:	alloca	 XXX
%3257:	alloca	 XXX
%3258:	getelementptr	 %3253 XXX XXX
%3259:	bitcast	 %3258
%3260:	call	 %3259 XXX XXX XXX XXX llvm.memset.p0i8.i64
%3261:	br	 do.body

BASIC BLOCK do.body
%3262:	phi	 n %3272
%3263:	phi	 b %3264
%3264:	getelementptr	 %3263 XXX
%3265:	load	 %3263
%3266:	zext	 %3265
%3267:	getelementptr	 %3253 XXX %3266
%3268:	load	 %3267
%3269:	add	 %3268 XXX
%3270:	store	 %3269 %3267
%3271:	br	 do.cond

BASIC BLOCK do.cond
%3272:	add	 %3262 XXX
%3273:	icmp	 %3272 XXX
%3274:	br	 %3273 do.end do.body

BASIC BLOCK do.end
%3275:	getelementptr	 %3253 XXX XXX
%3276:	load	 %3275
%3277:	icmp	 %3276 n
%3278:	br	 %3277 if.end if.then

BASIC BLOCK if.then
%3279:	store	 XXX t
%3280:	store	 XXX m
%3281:	br	 return

BASIC BLOCK if.end
%3282:	load	 m
%3283:	br	 for.cond

BASIC BLOCK for.cond
%3284:	phi	 XXX %3294
%3285:	icmp	 %3284 XXX
%3286:	br	 %3285 for.end for.body

BASIC BLOCK for.body
%3287:	zext	 %3284
%3288:	getelementptr	 %3253 XXX %3287
%3289:	load	 %3288
%3290:	icmp	 %3289 XXX
%3291:	br	 %3290 if.end7 if.then6

BASIC BLOCK if.then6
%3292:	br	 for.end

BASIC BLOCK if.end7
%3293:	br	 for.inc

BASIC BLOCK for.inc
%3294:	add	 %3284 XXX
%3295:	br	 for.cond

BASIC BLOCK for.end
%3296:	icmp	 %3282 %3284
%3297:	br	 %3296 if.end11 if.then10

BASIC BLOCK if.then10
%3298:	br	 if.end11

BASIC BLOCK if.end11
%3299:	phi	 %3284 %3282
%3300:	br	 for.cond12

BASIC BLOCK for.cond12
%3301:	phi	 XXX %3311
%3302:	icmp	 %3301 XXX
%3303:	br	 %3302 for.end22 for.body14

BASIC BLOCK for.body14
%3304:	zext	 %3301
%3305:	getelementptr	 %3253 XXX %3304
%3306:	load	 %3305
%3307:	icmp	 %3306 XXX
%3308:	br	 %3307 if.end19 if.then18

BASIC BLOCK if.then18
%3309:	br	 for.end22

BASIC BLOCK if.end19
%3310:	br	 for.inc20

BASIC BLOCK for.inc20
%3311:	add	 %3301 XXX
%3312:	br	 for.cond12

BASIC BLOCK for.end22
%3313:	icmp	 %3299 %3301
%3314:	br	 %3313 if.end25 if.then24

BASIC BLOCK if.then24
%3315:	br	 if.end25

BASIC BLOCK if.end25
%3316:	phi	 %3301 %3299
%3317:	store	 %3316 m
%3318:	shl	 XXX %3284
%3319:	br	 for.cond26

BASIC BLOCK for.cond26
%3320:	phi	 %3284 %3332
%3321:	phi	 %3318 %3333
%3322:	icmp	 %3320 %3301
%3323:	br	 %3322 for.end37 for.body28

BASIC BLOCK for.body28
%3324:	zext	 %3320
%3325:	getelementptr	 %3253 XXX %3324
%3326:	load	 %3325
%3327:	sub	 %3321 %3326
%3328:	icmp	 %3327 XXX
%3329:	br	 %3328 if.end33 if.then32

BASIC BLOCK if.then32
%3330:	br	 return

BASIC BLOCK if.end33
%3331:	br	 for.inc34

BASIC BLOCK for.inc34
%3332:	add	 %3320 XXX
%3333:	shl	 %3327 XXX
%3334:	br	 for.cond26

BASIC BLOCK for.end37
%3335:	zext	 %3301
%3336:	getelementptr	 %3253 XXX %3335
%3337:	load	 %3336
%3338:	sub	 %3321 %3337
%3339:	icmp	 %3338 XXX
%3340:	br	 %3339 if.end43 if.then42

BASIC BLOCK if.then42
%3341:	br	 return

BASIC BLOCK if.end43
%3342:	zext	 %3301
%3343:	getelementptr	 %3253 XXX %3342
%3344:	load	 %3343
%3345:	add	 %3344 %3338
%3346:	store	 %3345 %3343
%3347:	getelementptr	 %3257 XXX XXX
%3348:	store	 XXX %3347
%3349:	getelementptr	 %3253 XXX XXX
%3350:	getelementptr	 %3349 XXX
%3351:	getelementptr	 %3257 XXX XXX
%3352:	getelementptr	 %3351 XXX
%3353:	br	 while.cond

BASIC BLOCK while.cond
%3354:	phi	 XXX %3363
%3355:	phi	 %3301 %3358
%3356:	phi	 %3350 %3361
%3357:	phi	 %3352 %3364
%3358:	add	 %3355 XXX
%3359:	icmp	 %3358 XXX
%3360:	br	 %3359 while.end while.body

BASIC BLOCK while.body
%3361:	getelementptr	 %3356 XXX
%3362:	load	 %3356
%3363:	add	 %3354 %3362
%3364:	getelementptr	 %3357 XXX
%3365:	store	 %3363 %3357
%3366:	br	 while.cond

BASIC BLOCK while.end
%3367:	br	 do.body55

BASIC BLOCK do.body55
%3368:	phi	 XXX %3384
%3369:	phi	 b %3370
%3370:	getelementptr	 %3369 XXX
%3371:	load	 %3369
%3372:	icmp	 %3371 XXX
%3373:	br	 %3372 if.end64 if.then58

BASIC BLOCK if.then58
%3374:	zext	 %3371
%3375:	getelementptr	 %3257 XXX %3374
%3376:	load	 %3375
%3377:	add	 %3376 XXX
%3378:	store	 %3377 %3375
%3379:	zext	 %3376
%3380:	getelementptr	 %3256 XXX %3379
%3381:	store	 %3368 %3380
%3382:	br	 if.end64

BASIC BLOCK if.end64
%3383:	br	 do.cond65

BASIC BLOCK do.cond65
%3384:	add	 %3368 XXX
%3385:	icmp	 %3384 n
%3386:	br	 %3385 do.end68 do.body55

BASIC BLOCK do.end68
%3387:	getelementptr	 %3257 XXX XXX
%3388:	store	 XXX %3387
%3389:	getelementptr	 %3256 XXX XXX
%3390:	sub	 XXX %3316
%3391:	getelementptr	 %3255 XXX XXX
%3392:	store	 XXX %3391
%3393:	br	 for.cond73

BASIC BLOCK for.cond73
%3394:	phi	 %3284 %3613
%3395:	phi	 XXX %3408
%3396:	phi	 XXX %3409
%3397:	phi	 %3389 %3411
%3398:	phi	 t %3412
%3399:	phi	 XXX %3413
%3400:	phi	 %3390 %3414
%3401:	phi	 XXX %3415
%3402:	icmp	 %3394 %3301
%3403:	br	 %3402 for.end221 for.body75

BASIC BLOCK for.body75
%3404:	sext	 %3394
%3405:	getelementptr	 %3253 XXX %3404
%3406:	load	 %3405
%3407:	br	 while.cond78

BASIC BLOCK while.cond78
%3408:	phi	 %3395 %3596
%3409:	phi	 %3396 %3598
%3410:	phi	 %3406 %3416
%3411:	phi	 %3397 %3568
%3412:	phi	 %3398 %3421
%3413:	phi	 %3399 %3422
%3414:	phi	 %3400 %3599
%3415:	phi	 %3401 %3424
%3416:	add	 %3410 XXX
%3417:	icmp	 %3410 XXX
%3418:	br	 %3417 while.end218 while.body81

BASIC BLOCK while.body81
%3419:	br	 while.cond82

BASIC BLOCK while.cond82
%3420:	phi	 %3409 %3428
%3421:	phi	 %3412 %3486
%3422:	phi	 %3413 %3488
%3423:	phi	 %3414 %3429
%3424:	phi	 %3415 %3464
%3425:	add	 %3423 %3316
%3426:	icmp	 %3394 %3425
%3427:	br	 %3426 while.end148 while.body85

BASIC BLOCK while.body85
%3428:	add	 %3420 XXX
%3429:	add	 %3423 %3316
%3430:	sub	 %3301 %3429
%3431:	icmp	 %3430 %3316
%3432:	br	 %3431 cond.false cond.true

BASIC BLOCK cond.true
%3433:	br	 cond.end

BASIC BLOCK cond.false
%3434:	br	 cond.end

BASIC BLOCK cond.end
%3435:	phi	 %3316 %3430
%3436:	sub	 %3394 %3429
%3437:	shl	 XXX %3436
%3438:	add	 %3416 XXX
%3439:	icmp	 %3437 %3438
%3440:	br	 %3439 if.end110 if.then94

BASIC BLOCK if.then94
%3441:	add	 %3416 XXX
%3442:	sub	 %3437 %3441
%3443:	getelementptr	 %3253 XXX XXX
%3444:	sext	 %3394
%3445:	getelementptr	 %3443 %3444
%3446:	br	 while.cond99

BASIC BLOCK while.cond99
%3447:	phi	 %3436 %3450
%3448:	phi	 %3442 %3460
%3449:	phi	 %3445 %3454
%3450:	add	 %3447 XXX
%3451:	icmp	 %3450 %3435
%3452:	br	 %3451 while.end109 while.body102

BASIC BLOCK while.body102
%3453:	shl	 %3448 XXX
%3454:	getelementptr	 %3449 XXX
%3455:	load	 %3454
%3456:	icmp	 %3453 %3455
%3457:	br	 %3456 if.end107 if.then106

BASIC BLOCK if.then106
%3458:	br	 while.end109

BASIC BLOCK if.end107
%3459:	load	 %3454
%3460:	sub	 %3453 %3459
%3461:	br	 while.cond99

BASIC BLOCK while.end109
%3462:	br	 if.end110

BASIC BLOCK if.end110
%3463:	phi	 %3450 %3436
%3464:	shl	 XXX %3463
%3465:	add	 %3464 XXX
%3466:	zext	 %3465
%3467:	mul	 %3466 XXX
%3468:	call	 %3467 malloc
%3469:	bitcast	 %3468
%3470:	icmp	 %3469 XXX
%3471:	br	 %3470 if.end121 if.then115

BASIC BLOCK if.then115
%3472:	icmp	 %3428 XXX
%3473:	br	 %3472 if.end120 if.then117

BASIC BLOCK if.then117
%3474:	getelementptr	 %3255 XXX XXX
%3475:	load	 %3474
%3476:	call	 %3475 huft_free
%3477:	br	 if.end120

BASIC BLOCK if.end120
%3478:	br	 return

BASIC BLOCK if.end121
%3479:	add	 %3464 XXX
%3480:	load	 hufts
%3481:	add	 %3480 %3479
%3482:	store	 %3481 hufts
%3483:	getelementptr	 %3469 XXX
%3484:	store	 %3483 %3421
%3485:	getelementptr	 %3469 XXX XXX
%3486:	bitcast	 %3485
%3487:	store	 XXX %3486
%3488:	getelementptr	 %3469 XXX
%3489:	sext	 %3428
%3490:	getelementptr	 %3255 XXX %3489
%3491:	store	 %3488 %3490
%3492:	icmp	 %3428 XXX
%3493:	br	 %3492 if.end147 if.then131

BASIC BLOCK if.then131
%3494:	sext	 %3428
%3495:	getelementptr	 %3257 XXX %3494
%3496:	store	 %3408 %3495
%3497:	trunc	 %3316
%3498:	getelementptr	 %3254 XXX XXX
%3499:	store	 %3497 %3498
%3500:	add	 XXX %3463
%3501:	trunc	 %3500
%3502:	getelementptr	 %3254 XXX XXX
%3503:	store	 %3501 %3502
%3504:	getelementptr	 %3254 XXX XXX
%3505:	bitcast	 %3504
%3506:	store	 %3488 %3505
%3507:	sub	 %3429 %3316
%3508:	lshr	 %3408 %3507
%3509:	zext	 %3508
%3510:	sub	 %3428 XXX
%3511:	sext	 %3510
%3512:	getelementptr	 %3255 XXX %3511
%3513:	load	 %3512
%3514:	getelementptr	 %3513 %3509
%3515:	bitcast	 %3514
%3516:	bitcast	 %3254
%3517:	call	 %3515 %3516 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%3518:	br	 if.end147

BASIC BLOCK if.end147
%3519:	br	 while.cond82

BASIC BLOCK while.end148
%3520:	sub	 %3394 %3423
%3521:	trunc	 %3520
%3522:	getelementptr	 %3254 XXX XXX
%3523:	store	 %3521 %3522
%3524:	getelementptr	 %3256 XXX XXX
%3525:	zext	 n
%3526:	getelementptr	 %3524 %3525
%3527:	icmp	 %3411 %3526
%3528:	br	 %3527 if.else if.then157

BASIC BLOCK if.then157
%3529:	getelementptr	 %3254 XXX XXX
%3530:	store	 XXX %3529
%3531:	br	 if.end184

BASIC BLOCK if.else
%3532:	load	 %3411
%3533:	icmp	 %3532 s
%3534:	br	 %3533 if.else171 if.then161

BASIC BLOCK if.then161
%3535:	load	 %3411
%3536:	icmp	 %3535 XXX
%3537:	select	 %3536 XXX XXX
%3538:	trunc	 %3537
%3539:	getelementptr	 %3254 XXX XXX
%3540:	store	 %3538 %3539
%3541:	load	 %3411
%3542:	trunc	 %3541
%3543:	getelementptr	 %3254 XXX XXX
%3544:	bitcast	 %3543
%3545:	store	 %3542 %3544
%3546:	getelementptr	 %3411 XXX
%3547:	br	 if.end183

BASIC BLOCK if.else171
%3548:	load	 %3411
%3549:	sub	 %3548 s
%3550:	zext	 %3549
%3551:	getelementptr	 e %3550
%3552:	load	 %3551
%3553:	trunc	 %3552
%3554:	getelementptr	 %3254 XXX XXX
%3555:	store	 %3553 %3554
%3556:	getelementptr	 %3411 XXX
%3557:	load	 %3411
%3558:	sub	 %3557 s
%3559:	zext	 %3558
%3560:	getelementptr	 d %3559
%3561:	load	 %3560
%3562:	getelementptr	 %3254 XXX XXX
%3563:	bitcast	 %3562
%3564:	store	 %3561 %3563
%3565:	br	 if.end183

BASIC BLOCK if.end183
%3566:	phi	 %3546 %3556
%3567:	br	 if.end184

BASIC BLOCK if.end184
%3568:	phi	 %3411 %3566
%3569:	sub	 %3394 %3423
%3570:	shl	 XXX %3569
%3571:	lshr	 %3408 %3423
%3572:	br	 for.cond188

BASIC BLOCK for.cond188
%3573:	phi	 %3571 %3582
%3574:	icmp	 %3573 %3424
%3575:	br	 %3574 for.end196 for.body191

BASIC BLOCK for.body191
%3576:	zext	 %3573
%3577:	getelementptr	 %3422 %3576
%3578:	bitcast	 %3577
%3579:	bitcast	 %3254
%3580:	call	 %3578 %3579 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%3581:	br	 for.inc194

BASIC BLOCK for.inc194
%3582:	add	 %3573 %3570
%3583:	br	 for.cond188

BASIC BLOCK for.end196
%3584:	sub	 %3394 XXX
%3585:	shl	 XXX %3584
%3586:	br	 for.cond199

BASIC BLOCK for.cond199
%3587:	phi	 %3585 %3594
%3588:	phi	 %3408 %3592
%3589:	and	 %3588 %3587
%3590:	icmp	 %3589 XXX
%3591:	br	 %3590 for.end204 for.body201

BASIC BLOCK for.body201
%3592:	xor	 %3588 %3587
%3593:	br	 for.inc202

BASIC BLOCK for.inc202
%3594:	lshr	 %3587 XXX
%3595:	br	 for.cond199

BASIC BLOCK for.end204
%3596:	xor	 %3588 %3587
%3597:	br	 while.cond206

BASIC BLOCK while.cond206
%3598:	phi	 %3420 %3608
%3599:	phi	 %3423 %3609
%3600:	shl	 XXX %3599
%3601:	sub	 %3600 XXX
%3602:	and	 %3596 %3601
%3603:	sext	 %3598
%3604:	getelementptr	 %3257 XXX %3603
%3605:	load	 %3604
%3606:	icmp	 %3602 %3605
%3607:	br	 %3606 while.end217 while.body214

BASIC BLOCK while.body214
%3608:	add	 %3598 XXX
%3609:	sub	 %3599 %3316
%3610:	br	 while.cond206

BASIC BLOCK while.end217
%3611:	br	 while.cond78

BASIC BLOCK while.end218
%3612:	br	 for.inc219

BASIC BLOCK for.inc219
%3613:	add	 %3394 XXX
%3614:	br	 for.cond73

BASIC BLOCK for.end221
%3615:	icmp	 %3338 XXX
%3616:	br	 %3615 land.end land.rhs

BASIC BLOCK land.rhs
%3617:	icmp	 %3301 XXX
%3618:	br	 land.end

BASIC BLOCK land.end
%3619:	phi	 XXX %3617
%3620:	zext	 %3619
%3621:	br	 return

BASIC BLOCK return
%3622:	phi	 XXX XXX XXX XXX %3620
%3623:	ret	 %3622

FUNCTION huft_free

BASIC BLOCK entry
%3624:	br	 while.cond

BASIC BLOCK while.cond
%3625:	phi	 t %3631
%3626:	icmp	 %3625 XXX
%3627:	br	 %3626 while.end while.body

BASIC BLOCK while.body
%3628:	getelementptr	 %3625 XXX
%3629:	getelementptr	 %3628 XXX XXX
%3630:	bitcast	 %3629
%3631:	load	 %3630
%3632:	bitcast	 %3628
%3633:	call	 %3632 free
%3634:	br	 while.cond

BASIC BLOCK while.end
%3635:	ret	 XXX

FUNCTION inflate_codes

BASIC BLOCK entry
%3636:	load	 bb
%3637:	load	 bk
%3638:	load	 outcnt
%3639:	sext	 bl
%3640:	getelementptr	 mask_bits XXX %3639
%3641:	load	 %3640
%3642:	zext	 %3641
%3643:	sext	 bd
%3644:	getelementptr	 mask_bits XXX %3643
%3645:	load	 %3644
%3646:	zext	 %3645
%3647:	br	 for.cond

BASIC BLOCK for.cond
%3648:	phi	 %3638 %4036
%3649:	phi	 %3636 %4037
%3650:	phi	 %3637 %4038
%3651:	br	 while.cond

BASIC BLOCK while.cond
%3652:	phi	 %3649 %3675
%3653:	phi	 %3650 %3676
%3654:	icmp	 %3653 bl
%3655:	br	 %3654 while.end while.body

BASIC BLOCK while.body
%3656:	load	 inptr
%3657:	load	 insize
%3658:	icmp	 %3656 %3657
%3659:	br	 %3658 cond.false cond.true

BASIC BLOCK cond.true
%3660:	load	 inptr
%3661:	add	 %3660 XXX
%3662:	store	 %3661 inptr
%3663:	zext	 %3660
%3664:	getelementptr	 inbuf XXX %3663
%3665:	load	 %3664
%3666:	zext	 %3665
%3667:	br	 cond.end

BASIC BLOCK cond.false
%3668:	call	 fill_inbuf
%3669:	br	 cond.end

BASIC BLOCK cond.end
%3670:	phi	 %3666 %3668
%3671:	trunc	 %3670
%3672:	zext	 %3671
%3673:	zext	 %3653
%3674:	shl	 %3672 %3673
%3675:	or	 %3652 %3674
%3676:	add	 %3653 XXX
%3677:	br	 while.cond

BASIC BLOCK while.end
%3678:	trunc	 %3652
%3679:	and	 %3678 %3642
%3680:	zext	 %3679
%3681:	getelementptr	 tl %3680
%3682:	getelementptr	 %3681 XXX XXX
%3683:	load	 %3682
%3684:	zext	 %3683
%3685:	icmp	 %3684 XXX
%3686:	br	 %3685 if.end60 if.then

BASIC BLOCK if.then
%3687:	br	 do.body

BASIC BLOCK do.body
%3688:	phi	 %3684 %3746
%3689:	phi	 %3681 %3743
%3690:	phi	 %3652 %3706
%3691:	phi	 %3653 %3707
%3692:	icmp	 %3688 XXX
%3693:	br	 %3692 if.end if.then19

BASIC BLOCK if.then19
%3694:	br	 return

BASIC BLOCK if.end
%3695:	getelementptr	 %3689 XXX XXX
%3696:	load	 %3695
%3697:	zext	 %3696
%3698:	zext	 %3697
%3699:	lshr	 %3690 %3698
%3700:	getelementptr	 %3689 XXX XXX
%3701:	load	 %3700
%3702:	zext	 %3701
%3703:	sub	 %3691 %3702
%3704:	sub	 %3688 XXX
%3705:	br	 while.cond26

BASIC BLOCK while.cond26
%3706:	phi	 %3699 %3729
%3707:	phi	 %3703 %3730
%3708:	icmp	 %3707 %3704
%3709:	br	 %3708 while.end47 while.body29

BASIC BLOCK while.body29
%3710:	load	 inptr
%3711:	load	 insize
%3712:	icmp	 %3710 %3711
%3713:	br	 %3712 cond.false37 cond.true32

BASIC BLOCK cond.true32
%3714:	load	 inptr
%3715:	add	 %3714 XXX
%3716:	store	 %3715 inptr
%3717:	zext	 %3714
%3718:	getelementptr	 inbuf XXX %3717
%3719:	load	 %3718
%3720:	zext	 %3719
%3721:	br	 cond.end39

BASIC BLOCK cond.false37
%3722:	call	 fill_inbuf
%3723:	br	 cond.end39

BASIC BLOCK cond.end39
%3724:	phi	 %3720 %3722
%3725:	trunc	 %3724
%3726:	zext	 %3725
%3727:	zext	 %3707
%3728:	shl	 %3726 %3727
%3729:	or	 %3706 %3728
%3730:	add	 %3707 XXX
%3731:	br	 while.cond26

BASIC BLOCK while.end47
%3732:	br	 do.cond

BASIC BLOCK do.cond
%3733:	getelementptr	 %3689 XXX XXX
%3734:	bitcast	 %3733
%3735:	load	 %3734
%3736:	trunc	 %3706
%3737:	zext	 %3704
%3738:	getelementptr	 mask_bits XXX %3737
%3739:	load	 %3738
%3740:	zext	 %3739
%3741:	and	 %3736 %3740
%3742:	zext	 %3741
%3743:	getelementptr	 %3735 %3742
%3744:	getelementptr	 %3743 XXX XXX
%3745:	load	 %3744
%3746:	zext	 %3745
%3747:	icmp	 %3746 XXX
%3748:	br	 %3747 do.end do.body

BASIC BLOCK do.end
%3749:	br	 if.end60

BASIC BLOCK if.end60
%3750:	phi	 %3746 %3684
%3751:	phi	 %3743 %3681
%3752:	phi	 %3706 %3652
%3753:	phi	 %3707 %3653
%3754:	getelementptr	 %3751 XXX XXX
%3755:	load	 %3754
%3756:	zext	 %3755
%3757:	zext	 %3756
%3758:	lshr	 %3752 %3757
%3759:	getelementptr	 %3751 XXX XXX
%3760:	load	 %3759
%3761:	zext	 %3760
%3762:	sub	 %3753 %3761
%3763:	icmp	 %3750 XXX
%3764:	br	 %3763 if.else if.then70

BASIC BLOCK if.then70
%3765:	getelementptr	 %3751 XXX XXX
%3766:	bitcast	 %3765
%3767:	load	 %3766
%3768:	trunc	 %3767
%3769:	add	 %3648 XXX
%3770:	zext	 %3648
%3771:	getelementptr	 window XXX %3770
%3772:	store	 %3768 %3771
%3773:	icmp	 %3769 XXX
%3774:	br	 %3773 if.end80 if.then79

BASIC BLOCK if.then79
%3775:	store	 %3769 outcnt
%3776:	call	 flush_window
%3777:	br	 if.end80

BASIC BLOCK if.end80
%3778:	phi	 XXX %3769
%3779:	br	 if.end288

BASIC BLOCK if.else
%3780:	icmp	 %3750 XXX
%3781:	br	 %3780 if.end84 if.then83

BASIC BLOCK if.then83
%3782:	br	 for.end

BASIC BLOCK if.end84
%3783:	br	 while.cond85

BASIC BLOCK while.cond85
%3784:	phi	 %3758 %3807
%3785:	phi	 %3762 %3808
%3786:	icmp	 %3785 %3750
%3787:	br	 %3786 while.end106 while.body88

BASIC BLOCK while.body88
%3788:	load	 inptr
%3789:	load	 insize
%3790:	icmp	 %3788 %3789
%3791:	br	 %3790 cond.false96 cond.true91

BASIC BLOCK cond.true91
%3792:	load	 inptr
%3793:	add	 %3792 XXX
%3794:	store	 %3793 inptr
%3795:	zext	 %3792
%3796:	getelementptr	 inbuf XXX %3795
%3797:	load	 %3796
%3798:	zext	 %3797
%3799:	br	 cond.end98

BASIC BLOCK cond.false96
%3800:	call	 fill_inbuf
%3801:	br	 cond.end98

BASIC BLOCK cond.end98
%3802:	phi	 %3798 %3800
%3803:	trunc	 %3802
%3804:	zext	 %3803
%3805:	zext	 %3785
%3806:	shl	 %3804 %3805
%3807:	or	 %3784 %3806
%3808:	add	 %3785 XXX
%3809:	br	 while.cond85

BASIC BLOCK while.end106
%3810:	getelementptr	 %3751 XXX XXX
%3811:	bitcast	 %3810
%3812:	load	 %3811
%3813:	zext	 %3812
%3814:	trunc	 %3784
%3815:	zext	 %3750
%3816:	getelementptr	 mask_bits XXX %3815
%3817:	load	 %3816
%3818:	zext	 %3817
%3819:	and	 %3814 %3818
%3820:	add	 %3813 %3819
%3821:	zext	 %3750
%3822:	lshr	 %3784 %3821
%3823:	sub	 %3785 %3750
%3824:	br	 while.cond119

BASIC BLOCK while.cond119
%3825:	phi	 %3822 %3848
%3826:	phi	 %3823 %3849
%3827:	icmp	 %3826 bd
%3828:	br	 %3827 while.end140 while.body122

BASIC BLOCK while.body122
%3829:	load	 inptr
%3830:	load	 insize
%3831:	icmp	 %3829 %3830
%3832:	br	 %3831 cond.false130 cond.true125

BASIC BLOCK cond.true125
%3833:	load	 inptr
%3834:	add	 %3833 XXX
%3835:	store	 %3834 inptr
%3836:	zext	 %3833
%3837:	getelementptr	 inbuf XXX %3836
%3838:	load	 %3837
%3839:	zext	 %3838
%3840:	br	 cond.end132

BASIC BLOCK cond.false130
%3841:	call	 fill_inbuf
%3842:	br	 cond.end132

BASIC BLOCK cond.end132
%3843:	phi	 %3839 %3841
%3844:	trunc	 %3843
%3845:	zext	 %3844
%3846:	zext	 %3826
%3847:	shl	 %3845 %3846
%3848:	or	 %3825 %3847
%3849:	add	 %3826 XXX
%3850:	br	 while.cond119

BASIC BLOCK while.end140
%3851:	trunc	 %3825
%3852:	and	 %3851 %3646
%3853:	zext	 %3852
%3854:	getelementptr	 td %3853
%3855:	getelementptr	 %3854 XXX XXX
%3856:	load	 %3855
%3857:	zext	 %3856
%3858:	icmp	 %3857 XXX
%3859:	br	 %3858 if.end200 if.then149

BASIC BLOCK if.then149
%3860:	br	 do.body150

BASIC BLOCK do.body150
%3861:	phi	 %3857 %3919
%3862:	phi	 %3854 %3916
%3863:	phi	 %3825 %3879
%3864:	phi	 %3826 %3880
%3865:	icmp	 %3861 XXX
%3866:	br	 %3865 if.end154 if.then153

BASIC BLOCK if.then153
%3867:	br	 return

BASIC BLOCK if.end154
%3868:	getelementptr	 %3862 XXX XXX
%3869:	load	 %3868
%3870:	zext	 %3869
%3871:	zext	 %3870
%3872:	lshr	 %3863 %3871
%3873:	getelementptr	 %3862 XXX XXX
%3874:	load	 %3873
%3875:	zext	 %3874
%3876:	sub	 %3864 %3875
%3877:	sub	 %3861 XXX
%3878:	br	 while.cond163

BASIC BLOCK while.cond163
%3879:	phi	 %3872 %3902
%3880:	phi	 %3876 %3903
%3881:	icmp	 %3880 %3877
%3882:	br	 %3881 while.end184 while.body166

BASIC BLOCK while.body166
%3883:	load	 inptr
%3884:	load	 insize
%3885:	icmp	 %3883 %3884
%3886:	br	 %3885 cond.false174 cond.true169

BASIC BLOCK cond.true169
%3887:	load	 inptr
%3888:	add	 %3887 XXX
%3889:	store	 %3888 inptr
%3890:	zext	 %3887
%3891:	getelementptr	 inbuf XXX %3890
%3892:	load	 %3891
%3893:	zext	 %3892
%3894:	br	 cond.end176

BASIC BLOCK cond.false174
%3895:	call	 fill_inbuf
%3896:	br	 cond.end176

BASIC BLOCK cond.end176
%3897:	phi	 %3893 %3895
%3898:	trunc	 %3897
%3899:	zext	 %3898
%3900:	zext	 %3880
%3901:	shl	 %3899 %3900
%3902:	or	 %3879 %3901
%3903:	add	 %3880 XXX
%3904:	br	 while.cond163

BASIC BLOCK while.end184
%3905:	br	 do.cond185

BASIC BLOCK do.cond185
%3906:	getelementptr	 %3862 XXX XXX
%3907:	bitcast	 %3906
%3908:	load	 %3907
%3909:	trunc	 %3879
%3910:	zext	 %3877
%3911:	getelementptr	 mask_bits XXX %3910
%3912:	load	 %3911
%3913:	zext	 %3912
%3914:	and	 %3909 %3913
%3915:	zext	 %3914
%3916:	getelementptr	 %3908 %3915
%3917:	getelementptr	 %3916 XXX XXX
%3918:	load	 %3917
%3919:	zext	 %3918
%3920:	icmp	 %3919 XXX
%3921:	br	 %3920 do.end199 do.body150

BASIC BLOCK do.end199
%3922:	br	 if.end200

BASIC BLOCK if.end200
%3923:	phi	 %3919 %3857
%3924:	phi	 %3916 %3854
%3925:	phi	 %3879 %3825
%3926:	phi	 %3880 %3826
%3927:	getelementptr	 %3924 XXX XXX
%3928:	load	 %3927
%3929:	zext	 %3928
%3930:	zext	 %3929
%3931:	lshr	 %3925 %3930
%3932:	getelementptr	 %3924 XXX XXX
%3933:	load	 %3932
%3934:	zext	 %3933
%3935:	sub	 %3926 %3934
%3936:	br	 while.cond208

BASIC BLOCK while.cond208
%3937:	phi	 %3931 %3960
%3938:	phi	 %3935 %3961
%3939:	icmp	 %3938 %3923
%3940:	br	 %3939 while.end229 while.body211

BASIC BLOCK while.body211
%3941:	load	 inptr
%3942:	load	 insize
%3943:	icmp	 %3941 %3942
%3944:	br	 %3943 cond.false219 cond.true214

BASIC BLOCK cond.true214
%3945:	load	 inptr
%3946:	add	 %3945 XXX
%3947:	store	 %3946 inptr
%3948:	zext	 %3945
%3949:	getelementptr	 inbuf XXX %3948
%3950:	load	 %3949
%3951:	zext	 %3950
%3952:	br	 cond.end221

BASIC BLOCK cond.false219
%3953:	call	 fill_inbuf
%3954:	br	 cond.end221

BASIC BLOCK cond.end221
%3955:	phi	 %3951 %3953
%3956:	trunc	 %3955
%3957:	zext	 %3956
%3958:	zext	 %3938
%3959:	shl	 %3957 %3958
%3960:	or	 %3937 %3959
%3961:	add	 %3938 XXX
%3962:	br	 while.cond208

BASIC BLOCK while.end229
%3963:	getelementptr	 %3924 XXX XXX
%3964:	bitcast	 %3963
%3965:	load	 %3964
%3966:	zext	 %3965
%3967:	sub	 %3648 %3966
%3968:	trunc	 %3937
%3969:	zext	 %3923
%3970:	getelementptr	 mask_bits XXX %3969
%3971:	load	 %3970
%3972:	zext	 %3971
%3973:	and	 %3968 %3972
%3974:	sub	 %3967 %3973
%3975:	zext	 %3923
%3976:	lshr	 %3937 %3975
%3977:	sub	 %3938 %3923
%3978:	br	 do.body243

BASIC BLOCK do.body243
%3979:	phi	 %3974 %4024
%3980:	phi	 %3820 %3994
%3981:	phi	 %3648 %4031
%3982:	and	 %3979 XXX
%3983:	icmp	 %3982 %3981
%3984:	br	 %3983 cond.false248 cond.true247

BASIC BLOCK cond.true247
%3985:	br	 cond.end249

BASIC BLOCK cond.false248
%3986:	br	 cond.end249

BASIC BLOCK cond.end249
%3987:	phi	 %3982 %3981
%3988:	sub	 XXX %3987
%3989:	icmp	 %3988 %3980
%3990:	br	 %3989 cond.false255 cond.true254

BASIC BLOCK cond.true254
%3991:	br	 cond.end256

BASIC BLOCK cond.false255
%3992:	br	 cond.end256

BASIC BLOCK cond.end256
%3993:	phi	 %3980 %3988
%3994:	sub	 %3980 %3993
%3995:	sub	 %3981 %3982
%3996:	icmp	 %3995 %3993
%3997:	br	 %3996 if.else270 if.then262

BASIC BLOCK if.then262
%3998:	zext	 %3981
%3999:	getelementptr	 XXX %3998
%4000:	zext	 %3982
%4001:	getelementptr	 XXX %4000
%4002:	zext	 %3993
%4003:	call	 %3999 %4001 %4002 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%4004:	add	 %3981 %3993
%4005:	add	 %3982 %3993
%4006:	br	 if.end280

BASIC BLOCK if.else270
%4007:	br	 do.body271

BASIC BLOCK do.body271
%4008:	phi	 %3982 %4011
%4009:	phi	 %3993 %4020
%4010:	phi	 %3981 %4015
%4011:	add	 %4008 XXX
%4012:	zext	 %4008
%4013:	getelementptr	 window XXX %4012
%4014:	load	 %4013
%4015:	add	 %4010 XXX
%4016:	zext	 %4010
%4017:	getelementptr	 window XXX %4016
%4018:	store	 %4014 %4017
%4019:	br	 do.cond278

BASIC BLOCK do.cond278
%4020:	add	 %4009 XXX
%4021:	icmp	 %4020 XXX
%4022:	br	 %4021 do.end279 do.body271

BASIC BLOCK do.end279
%4023:	br	 if.end280

BASIC BLOCK if.end280
%4024:	phi	 %4005 %4011
%4025:	phi	 %4004 %4015
%4026:	icmp	 %4025 XXX
%4027:	br	 %4026 if.end284 if.then283

BASIC BLOCK if.then283
%4028:	store	 %4025 outcnt
%4029:	call	 flush_window
%4030:	br	 if.end284

BASIC BLOCK if.end284
%4031:	phi	 XXX %4025
%4032:	br	 do.cond285

BASIC BLOCK do.cond285
%4033:	icmp	 %3994 XXX
%4034:	br	 %4033 do.end287 do.body243

BASIC BLOCK do.end287
%4035:	br	 if.end288

BASIC BLOCK if.end288
%4036:	phi	 %3778 %4031
%4037:	phi	 %3758 %3976
%4038:	phi	 %3762 %3977
%4039:	br	 for.cond

BASIC BLOCK for.end
%4040:	store	 %3648 outcnt
%4041:	store	 %3758 bb
%4042:	store	 %3762 bk
%4043:	br	 return

BASIC BLOCK return
%4044:	phi	 XXX XXX XXX
%4045:	ret	 %4044

FUNCTION fill_inbuf

BASIC BLOCK entry
%4046:	store	 XXX insize
%4047:	call	 __errno_location
%4048:	store	 XXX %4047
%4049:	br	 do.body

BASIC BLOCK do.body
%4050:	load	 ifd
%4051:	load	 insize
%4052:	zext	 %4051
%4053:	getelementptr	 XXX %4052
%4054:	load	 insize
%4055:	sub	 XXX %4054
%4056:	zext	 %4055
%4057:	call	 %4050 %4053 %4056 read
%4058:	trunc	 %4057
%4059:	icmp	 %4058 XXX
%4060:	br	 %4059 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4061:	icmp	 %4058 XXX
%4062:	br	 %4061 if.end if.then

BASIC BLOCK if.then
%4063:	br	 do.end

BASIC BLOCK if.end
%4064:	load	 insize
%4065:	add	 %4064 %4058
%4066:	store	 %4065 insize
%4067:	br	 do.cond

BASIC BLOCK do.cond
%4068:	load	 insize
%4069:	icmp	 %4068 XXX
%4070:	br	 %4069 do.end do.body

BASIC BLOCK do.end
%4071:	load	 insize
%4072:	icmp	 %4071 XXX
%4073:	br	 %4072 if.end11 if.then10

BASIC BLOCK if.then10
%4074:	call	 read_error
%4075:	br	 if.end11

BASIC BLOCK if.end11
%4076:	load	 insize
%4077:	zext	 %4076
%4078:	load	 bytes_in
%4079:	add	 %4078 %4077
%4080:	store	 %4079 bytes_in
%4081:	store	 XXX inptr
%4082:	load	 XXX
%4083:	zext	 %4082
%4084:	ret	 %4083

FUNCTION flush_window

BASIC BLOCK entry
%4085:	load	 outcnt
%4086:	icmp	 %4085 XXX
%4087:	br	 %4086 if.end if.then

BASIC BLOCK if.then
%4088:	br	 return

BASIC BLOCK if.end
%4089:	load	 outcnt
%4090:	call	 XXX %4089 updcrc
%4091:	load	 test
%4092:	icmp	 %4091 XXX
%4093:	br	 %4092 if.then1 if.end2

BASIC BLOCK if.then1
%4094:	load	 ofd
%4095:	load	 outcnt
%4096:	call	 %4094 XXX %4095 write_buf
%4097:	br	 if.end2

BASIC BLOCK if.end2
%4098:	load	 outcnt
%4099:	zext	 %4098
%4100:	load	 bytes_out
%4101:	add	 %4100 %4099
%4102:	store	 %4101 bytes_out
%4103:	store	 XXX outcnt
%4104:	br	 return

BASIC BLOCK return
%4105:	ret	

FUNCTION inflate_stored

BASIC BLOCK entry
%4106:	load	 bb
%4107:	load	 bk
%4108:	load	 outcnt
%4109:	and	 %4107 XXX
%4110:	zext	 %4109
%4111:	lshr	 %4106 %4110
%4112:	sub	 %4107 %4109
%4113:	br	 while.cond

BASIC BLOCK while.cond
%4114:	phi	 %4112 %4138
%4115:	phi	 %4111 %4137
%4116:	icmp	 %4114 XXX
%4117:	br	 %4116 while.end while.body

BASIC BLOCK while.body
%4118:	load	 inptr
%4119:	load	 insize
%4120:	icmp	 %4118 %4119
%4121:	br	 %4120 cond.false cond.true

BASIC BLOCK cond.true
%4122:	load	 inptr
%4123:	add	 %4122 XXX
%4124:	store	 %4123 inptr
%4125:	zext	 %4122
%4126:	getelementptr	 inbuf XXX %4125
%4127:	load	 %4126
%4128:	zext	 %4127
%4129:	br	 cond.end

BASIC BLOCK cond.false
%4130:	call	 fill_inbuf
%4131:	br	 cond.end

BASIC BLOCK cond.end
%4132:	phi	 %4128 %4130
%4133:	trunc	 %4132
%4134:	zext	 %4133
%4135:	zext	 %4114
%4136:	shl	 %4134 %4135
%4137:	or	 %4115 %4136
%4138:	add	 %4114 XXX
%4139:	br	 while.cond

BASIC BLOCK while.end
%4140:	trunc	 %4115
%4141:	and	 %4140 XXX
%4142:	lshr	 %4115 XXX
%4143:	sub	 %4114 XXX
%4144:	br	 while.cond9

BASIC BLOCK while.cond9
%4145:	phi	 %4143 %4169
%4146:	phi	 %4142 %4168
%4147:	icmp	 %4145 XXX
%4148:	br	 %4147 while.end30 while.body12

BASIC BLOCK while.body12
%4149:	load	 inptr
%4150:	load	 insize
%4151:	icmp	 %4149 %4150
%4152:	br	 %4151 cond.false20 cond.true15

BASIC BLOCK cond.true15
%4153:	load	 inptr
%4154:	add	 %4153 XXX
%4155:	store	 %4154 inptr
%4156:	zext	 %4153
%4157:	getelementptr	 inbuf XXX %4156
%4158:	load	 %4157
%4159:	zext	 %4158
%4160:	br	 cond.end22

BASIC BLOCK cond.false20
%4161:	call	 fill_inbuf
%4162:	br	 cond.end22

BASIC BLOCK cond.end22
%4163:	phi	 %4159 %4161
%4164:	trunc	 %4163
%4165:	zext	 %4164
%4166:	zext	 %4145
%4167:	shl	 %4165 %4166
%4168:	or	 %4146 %4167
%4169:	add	 %4145 XXX
%4170:	br	 while.cond9

BASIC BLOCK while.end30
%4171:	xor	 %4146 XXX
%4172:	and	 %4171 XXX
%4173:	trunc	 %4172
%4174:	icmp	 %4141 %4173
%4175:	br	 %4174 if.end if.then

BASIC BLOCK if.then
%4176:	br	 return

BASIC BLOCK if.end
%4177:	lshr	 %4146 XXX
%4178:	sub	 %4145 XXX
%4179:	br	 while.cond37

BASIC BLOCK while.cond37
%4180:	phi	 %4178 %4226
%4181:	phi	 %4177 %4225
%4182:	phi	 %4108 %4224
%4183:	phi	 %4141 %4184
%4184:	add	 %4183 XXX
%4185:	icmp	 %4183 XXX
%4186:	br	 %4185 while.end71 while.body38

BASIC BLOCK while.body38
%4187:	br	 while.cond39

BASIC BLOCK while.cond39
%4188:	phi	 %4180 %4212
%4189:	phi	 %4181 %4211
%4190:	icmp	 %4188 XXX
%4191:	br	 %4190 while.end60 while.body42

BASIC BLOCK while.body42
%4192:	load	 inptr
%4193:	load	 insize
%4194:	icmp	 %4192 %4193
%4195:	br	 %4194 cond.false50 cond.true45

BASIC BLOCK cond.true45
%4196:	load	 inptr
%4197:	add	 %4196 XXX
%4198:	store	 %4197 inptr
%4199:	zext	 %4196
%4200:	getelementptr	 inbuf XXX %4199
%4201:	load	 %4200
%4202:	zext	 %4201
%4203:	br	 cond.end52

BASIC BLOCK cond.false50
%4204:	call	 fill_inbuf
%4205:	br	 cond.end52

BASIC BLOCK cond.end52
%4206:	phi	 %4202 %4204
%4207:	trunc	 %4206
%4208:	zext	 %4207
%4209:	zext	 %4188
%4210:	shl	 %4208 %4209
%4211:	or	 %4189 %4210
%4212:	add	 %4188 XXX
%4213:	br	 while.cond39

BASIC BLOCK while.end60
%4214:	trunc	 %4189
%4215:	add	 %4182 XXX
%4216:	zext	 %4182
%4217:	getelementptr	 window XXX %4216
%4218:	store	 %4214 %4217
%4219:	icmp	 %4215 XXX
%4220:	br	 %4219 if.end68 if.then67

BASIC BLOCK if.then67
%4221:	store	 %4215 outcnt
%4222:	call	 flush_window
%4223:	br	 if.end68

BASIC BLOCK if.end68
%4224:	phi	 XXX %4215
%4225:	lshr	 %4189 XXX
%4226:	sub	 %4188 XXX
%4227:	br	 while.cond37

BASIC BLOCK while.end71
%4228:	store	 %4182 outcnt
%4229:	store	 %4181 bb
%4230:	store	 %4180 bk
%4231:	br	 return

BASIC BLOCK return
%4232:	phi	 XXX XXX
%4233:	ret	 %4232

FUNCTION inflate_fixed

BASIC BLOCK entry
%4234:	alloca	 XXX
%4235:	alloca	 XXX
%4236:	alloca	 XXX
%4237:	alloca	 XXX
%4238:	alloca	 XXX
%4239:	br	 for.cond

BASIC BLOCK for.cond
%4240:	phi	 XXX %4247
%4241:	icmp	 %4240 XXX
%4242:	br	 %4241 for.end for.body

BASIC BLOCK for.body
%4243:	sext	 %4240
%4244:	getelementptr	 %4238 XXX %4243
%4245:	store	 XXX %4244
%4246:	br	 for.inc

BASIC BLOCK for.inc
%4247:	add	 %4240 XXX
%4248:	br	 for.cond

BASIC BLOCK for.end
%4249:	br	 for.cond1

BASIC BLOCK for.cond1
%4250:	phi	 %4240 %4257
%4251:	icmp	 %4250 XXX
%4252:	br	 %4251 for.end8 for.body3

BASIC BLOCK for.body3
%4253:	sext	 %4250
%4254:	getelementptr	 %4238 XXX %4253
%4255:	store	 XXX %4254
%4256:	br	 for.inc6

BASIC BLOCK for.inc6
%4257:	add	 %4250 XXX
%4258:	br	 for.cond1

BASIC BLOCK for.end8
%4259:	br	 for.cond9

BASIC BLOCK for.cond9
%4260:	phi	 %4250 %4267
%4261:	icmp	 %4260 XXX
%4262:	br	 %4261 for.end16 for.body11

BASIC BLOCK for.body11
%4263:	sext	 %4260
%4264:	getelementptr	 %4238 XXX %4263
%4265:	store	 XXX %4264
%4266:	br	 for.inc14

BASIC BLOCK for.inc14
%4267:	add	 %4260 XXX
%4268:	br	 for.cond9

BASIC BLOCK for.end16
%4269:	br	 for.cond17

BASIC BLOCK for.cond17
%4270:	phi	 %4260 %4277
%4271:	icmp	 %4270 XXX
%4272:	br	 %4271 for.end24 for.body19

BASIC BLOCK for.body19
%4273:	sext	 %4270
%4274:	getelementptr	 %4238 XXX %4273
%4275:	store	 XXX %4274
%4276:	br	 for.inc22

BASIC BLOCK for.inc22
%4277:	add	 %4270 XXX
%4278:	br	 for.cond17

BASIC BLOCK for.end24
%4279:	store	 XXX %4236
%4280:	getelementptr	 %4238 XXX XXX
%4281:	call	 %4280 XXX XXX XXX XXX %4234 %4236 huft_build
%4282:	icmp	 %4281 XXX
%4283:	br	 %4282 if.end if.then

BASIC BLOCK if.then
%4284:	br	 return

BASIC BLOCK if.end
%4285:	br	 for.cond26

BASIC BLOCK for.cond26
%4286:	phi	 XXX %4293
%4287:	icmp	 %4286 XXX
%4288:	br	 %4287 for.end33 for.body28

BASIC BLOCK for.body28
%4289:	sext	 %4286
%4290:	getelementptr	 %4238 XXX %4289
%4291:	store	 XXX %4290
%4292:	br	 for.inc31

BASIC BLOCK for.inc31
%4293:	add	 %4286 XXX
%4294:	br	 for.cond26

BASIC BLOCK for.end33
%4295:	store	 XXX %4237
%4296:	getelementptr	 %4238 XXX XXX
%4297:	call	 %4296 XXX XXX XXX XXX %4235 %4237 huft_build
%4298:	icmp	 %4297 XXX
%4299:	br	 %4298 if.end39 if.then37

BASIC BLOCK if.then37
%4300:	load	 %4234
%4301:	call	 %4300 huft_free
%4302:	br	 return

BASIC BLOCK if.end39
%4303:	load	 %4234
%4304:	load	 %4235
%4305:	load	 %4236
%4306:	load	 %4237
%4307:	call	 %4303 %4304 %4305 %4306 inflate_codes
%4308:	icmp	 %4307 XXX
%4309:	br	 %4308 if.end42 if.then41

BASIC BLOCK if.then41
%4310:	br	 return

BASIC BLOCK if.end42
%4311:	load	 %4234
%4312:	call	 %4311 huft_free
%4313:	load	 %4235
%4314:	call	 %4313 huft_free
%4315:	br	 return

BASIC BLOCK return
%4316:	phi	 %4281 %4297 XXX XXX
%4317:	ret	 %4316

FUNCTION inflate_dynamic

BASIC BLOCK entry
%4318:	alloca	 XXX
%4319:	alloca	 XXX
%4320:	alloca	 XXX
%4321:	alloca	 XXX
%4322:	alloca	 XXX
%4323:	load	 bb
%4324:	load	 bk
%4325:	br	 while.cond

BASIC BLOCK while.cond
%4326:	phi	 %4323 %4349
%4327:	phi	 %4324 %4350
%4328:	icmp	 %4327 XXX
%4329:	br	 %4328 while.end while.body

BASIC BLOCK while.body
%4330:	load	 inptr
%4331:	load	 insize
%4332:	icmp	 %4330 %4331
%4333:	br	 %4332 cond.false cond.true

BASIC BLOCK cond.true
%4334:	load	 inptr
%4335:	add	 %4334 XXX
%4336:	store	 %4335 inptr
%4337:	zext	 %4334
%4338:	getelementptr	 inbuf XXX %4337
%4339:	load	 %4338
%4340:	zext	 %4339
%4341:	br	 cond.end

BASIC BLOCK cond.false
%4342:	call	 fill_inbuf
%4343:	br	 cond.end

BASIC BLOCK cond.end
%4344:	phi	 %4340 %4342
%4345:	trunc	 %4344
%4346:	zext	 %4345
%4347:	zext	 %4327
%4348:	shl	 %4346 %4347
%4349:	or	 %4326 %4348
%4350:	add	 %4327 XXX
%4351:	br	 while.cond

BASIC BLOCK while.end
%4352:	trunc	 %4326
%4353:	and	 %4352 XXX
%4354:	add	 XXX %4353
%4355:	lshr	 %4326 XXX
%4356:	sub	 %4327 XXX
%4357:	br	 while.cond6

BASIC BLOCK while.cond6
%4358:	phi	 %4355 %4381
%4359:	phi	 %4356 %4382
%4360:	icmp	 %4359 XXX
%4361:	br	 %4360 while.end27 while.body9

BASIC BLOCK while.body9
%4362:	load	 inptr
%4363:	load	 insize
%4364:	icmp	 %4362 %4363
%4365:	br	 %4364 cond.false17 cond.true12

BASIC BLOCK cond.true12
%4366:	load	 inptr
%4367:	add	 %4366 XXX
%4368:	store	 %4367 inptr
%4369:	zext	 %4366
%4370:	getelementptr	 inbuf XXX %4369
%4371:	load	 %4370
%4372:	zext	 %4371
%4373:	br	 cond.end19

BASIC BLOCK cond.false17
%4374:	call	 fill_inbuf
%4375:	br	 cond.end19

BASIC BLOCK cond.end19
%4376:	phi	 %4372 %4374
%4377:	trunc	 %4376
%4378:	zext	 %4377
%4379:	zext	 %4359
%4380:	shl	 %4378 %4379
%4381:	or	 %4358 %4380
%4382:	add	 %4359 XXX
%4383:	br	 while.cond6

BASIC BLOCK while.end27
%4384:	trunc	 %4358
%4385:	and	 %4384 XXX
%4386:	add	 XXX %4385
%4387:	lshr	 %4358 XXX
%4388:	sub	 %4359 XXX
%4389:	br	 while.cond33

BASIC BLOCK while.cond33
%4390:	phi	 %4387 %4413
%4391:	phi	 %4388 %4414
%4392:	icmp	 %4391 XXX
%4393:	br	 %4392 while.end54 while.body36

BASIC BLOCK while.body36
%4394:	load	 inptr
%4395:	load	 insize
%4396:	icmp	 %4394 %4395
%4397:	br	 %4396 cond.false44 cond.true39

BASIC BLOCK cond.true39
%4398:	load	 inptr
%4399:	add	 %4398 XXX
%4400:	store	 %4399 inptr
%4401:	zext	 %4398
%4402:	getelementptr	 inbuf XXX %4401
%4403:	load	 %4402
%4404:	zext	 %4403
%4405:	br	 cond.end46

BASIC BLOCK cond.false44
%4406:	call	 fill_inbuf
%4407:	br	 cond.end46

BASIC BLOCK cond.end46
%4408:	phi	 %4404 %4406
%4409:	trunc	 %4408
%4410:	zext	 %4409
%4411:	zext	 %4391
%4412:	shl	 %4410 %4411
%4413:	or	 %4390 %4412
%4414:	add	 %4391 XXX
%4415:	br	 while.cond33

BASIC BLOCK while.end54
%4416:	trunc	 %4390
%4417:	and	 %4416 XXX
%4418:	add	 XXX %4417
%4419:	lshr	 %4390 XXX
%4420:	sub	 %4391 XXX
%4421:	icmp	 %4354 XXX
%4422:	br	 %4421 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4423:	icmp	 %4386 XXX
%4424:	br	 %4423 if.end if.then

BASIC BLOCK if.then
%4425:	br	 return

BASIC BLOCK if.end
%4426:	br	 for.cond

BASIC BLOCK for.cond
%4427:	phi	 %4419 %4467
%4428:	phi	 %4420 %4468
%4429:	phi	 XXX %4470
%4430:	icmp	 %4429 %4418
%4431:	br	 %4430 for.end for.body

BASIC BLOCK for.body
%4432:	br	 while.cond66

BASIC BLOCK while.cond66
%4433:	phi	 %4427 %4456
%4434:	phi	 %4428 %4457
%4435:	icmp	 %4434 XXX
%4436:	br	 %4435 while.end87 while.body69

BASIC BLOCK while.body69
%4437:	load	 inptr
%4438:	load	 insize
%4439:	icmp	 %4437 %4438
%4440:	br	 %4439 cond.false77 cond.true72

BASIC BLOCK cond.true72
%4441:	load	 inptr
%4442:	add	 %4441 XXX
%4443:	store	 %4442 inptr
%4444:	zext	 %4441
%4445:	getelementptr	 inbuf XXX %4444
%4446:	load	 %4445
%4447:	zext	 %4446
%4448:	br	 cond.end79

BASIC BLOCK cond.false77
%4449:	call	 fill_inbuf
%4450:	br	 cond.end79

BASIC BLOCK cond.end79
%4451:	phi	 %4447 %4449
%4452:	trunc	 %4451
%4453:	zext	 %4452
%4454:	zext	 %4434
%4455:	shl	 %4453 %4454
%4456:	or	 %4433 %4455
%4457:	add	 %4434 XXX
%4458:	br	 while.cond66

BASIC BLOCK while.end87
%4459:	trunc	 %4433
%4460:	and	 %4459 XXX
%4461:	zext	 %4429
%4462:	getelementptr	 border XXX %4461
%4463:	load	 %4462
%4464:	zext	 %4463
%4465:	getelementptr	 %4322 XXX %4464
%4466:	store	 %4460 %4465
%4467:	lshr	 %4433 XXX
%4468:	sub	 %4434 XXX
%4469:	br	 for.inc

BASIC BLOCK for.inc
%4470:	add	 %4429 XXX
%4471:	br	 for.cond

BASIC BLOCK for.end
%4472:	br	 for.cond97

BASIC BLOCK for.cond97
%4473:	phi	 %4429 %4483
%4474:	icmp	 %4473 XXX
%4475:	br	 %4474 for.end107 for.body100

BASIC BLOCK for.body100
%4476:	zext	 %4473
%4477:	getelementptr	 border XXX %4476
%4478:	load	 %4477
%4479:	zext	 %4478
%4480:	getelementptr	 %4322 XXX %4479
%4481:	store	 XXX %4480
%4482:	br	 for.inc105

BASIC BLOCK for.inc105
%4483:	add	 %4473 XXX
%4484:	br	 for.cond97

BASIC BLOCK for.end107
%4485:	store	 XXX %4320
%4486:	getelementptr	 %4322 XXX XXX
%4487:	call	 %4486 XXX XXX XXX XXX %4318 %4320 huft_build
%4488:	icmp	 %4487 XXX
%4489:	br	 %4488 if.end117 if.then111

BASIC BLOCK if.then111
%4490:	icmp	 %4487 XXX
%4491:	br	 %4490 if.end116 if.then114

BASIC BLOCK if.then114
%4492:	load	 %4318
%4493:	call	 %4492 huft_free
%4494:	br	 if.end116

BASIC BLOCK if.end116
%4495:	br	 return

BASIC BLOCK if.end117
%4496:	add	 %4354 %4386
%4497:	load	 %4320
%4498:	sext	 %4497
%4499:	getelementptr	 mask_bits XXX %4498
%4500:	load	 %4499
%4501:	zext	 %4500
%4502:	br	 while.cond122

BASIC BLOCK while.cond122
%4503:	phi	 %4427 %4718
%4504:	phi	 %4428 %4719
%4505:	phi	 XXX %4720
%4506:	phi	 XXX %4721
%4507:	icmp	 %4506 %4496
%4508:	br	 %4507 while.end292 while.body125

BASIC BLOCK while.body125
%4509:	br	 while.cond126

BASIC BLOCK while.cond126
%4510:	phi	 %4503 %4534
%4511:	phi	 %4504 %4535
%4512:	load	 %4320
%4513:	icmp	 %4511 %4512
%4514:	br	 %4513 while.end147 while.body129

BASIC BLOCK while.body129
%4515:	load	 inptr
%4516:	load	 insize
%4517:	icmp	 %4515 %4516
%4518:	br	 %4517 cond.false137 cond.true132

BASIC BLOCK cond.true132
%4519:	load	 inptr
%4520:	add	 %4519 XXX
%4521:	store	 %4520 inptr
%4522:	zext	 %4519
%4523:	getelementptr	 inbuf XXX %4522
%4524:	load	 %4523
%4525:	zext	 %4524
%4526:	br	 cond.end139

BASIC BLOCK cond.false137
%4527:	call	 fill_inbuf
%4528:	br	 cond.end139

BASIC BLOCK cond.end139
%4529:	phi	 %4525 %4527
%4530:	trunc	 %4529
%4531:	zext	 %4530
%4532:	zext	 %4511
%4533:	shl	 %4531 %4532
%4534:	or	 %4510 %4533
%4535:	add	 %4511 XXX
%4536:	br	 while.cond126

BASIC BLOCK while.end147
%4537:	load	 %4318
%4538:	trunc	 %4510
%4539:	and	 %4538 %4501
%4540:	zext	 %4539
%4541:	getelementptr	 %4537 %4540
%4542:	store	 %4541 %4319
%4543:	getelementptr	 %4541 XXX XXX
%4544:	load	 %4543
%4545:	zext	 %4544
%4546:	zext	 %4545
%4547:	lshr	 %4510 %4546
%4548:	sub	 %4511 %4545
%4549:	load	 %4319
%4550:	getelementptr	 %4549 XXX XXX
%4551:	bitcast	 %4550
%4552:	load	 %4551
%4553:	zext	 %4552
%4554:	icmp	 %4553 XXX
%4555:	br	 %4554 if.else if.then159

BASIC BLOCK if.then159
%4556:	add	 %4506 XXX
%4557:	sext	 %4506
%4558:	getelementptr	 %4322 XXX %4557
%4559:	store	 %4553 %4558
%4560:	br	 if.end291

BASIC BLOCK if.else
%4561:	icmp	 %4553 XXX
%4562:	br	 %4561 if.else204 if.then165

BASIC BLOCK if.then165
%4563:	br	 while.cond166

BASIC BLOCK while.cond166
%4564:	phi	 %4547 %4587
%4565:	phi	 %4548 %4588
%4566:	icmp	 %4565 XXX
%4567:	br	 %4566 while.end187 while.body169

BASIC BLOCK while.body169
%4568:	load	 inptr
%4569:	load	 insize
%4570:	icmp	 %4568 %4569
%4571:	br	 %4570 cond.false177 cond.true172

BASIC BLOCK cond.true172
%4572:	load	 inptr
%4573:	add	 %4572 XXX
%4574:	store	 %4573 inptr
%4575:	zext	 %4572
%4576:	getelementptr	 inbuf XXX %4575
%4577:	load	 %4576
%4578:	zext	 %4577
%4579:	br	 cond.end179

BASIC BLOCK cond.false177
%4580:	call	 fill_inbuf
%4581:	br	 cond.end179

BASIC BLOCK cond.end179
%4582:	phi	 %4578 %4580
%4583:	trunc	 %4582
%4584:	zext	 %4583
%4585:	zext	 %4565
%4586:	shl	 %4584 %4585
%4587:	or	 %4564 %4586
%4588:	add	 %4565 XXX
%4589:	br	 while.cond166

BASIC BLOCK while.end187
%4590:	trunc	 %4564
%4591:	and	 %4590 XXX
%4592:	add	 XXX %4591
%4593:	lshr	 %4564 XXX
%4594:	sub	 %4565 XXX
%4595:	add	 %4506 %4592
%4596:	icmp	 %4595 %4496
%4597:	br	 %4596 if.end197 if.then196

BASIC BLOCK if.then196
%4598:	br	 return

BASIC BLOCK if.end197
%4599:	br	 while.cond198

BASIC BLOCK while.cond198
%4600:	phi	 %4592 %4602
%4601:	phi	 %4506 %4605
%4602:	add	 %4600 XXX
%4603:	icmp	 %4600 XXX
%4604:	br	 %4603 while.end203 while.body199

BASIC BLOCK while.body199
%4605:	add	 %4601 XXX
%4606:	sext	 %4601
%4607:	getelementptr	 %4322 XXX %4606
%4608:	store	 %4505 %4607
%4609:	br	 while.cond198

BASIC BLOCK while.end203
%4610:	br	 if.end290

BASIC BLOCK if.else204
%4611:	icmp	 %4553 XXX
%4612:	br	 %4611 if.else248 if.then207

BASIC BLOCK if.then207
%4613:	br	 while.cond208

BASIC BLOCK while.cond208
%4614:	phi	 %4547 %4637
%4615:	phi	 %4548 %4638
%4616:	icmp	 %4615 XXX
%4617:	br	 %4616 while.end229 while.body211

BASIC BLOCK while.body211
%4618:	load	 inptr
%4619:	load	 insize
%4620:	icmp	 %4618 %4619
%4621:	br	 %4620 cond.false219 cond.true214

BASIC BLOCK cond.true214
%4622:	load	 inptr
%4623:	add	 %4622 XXX
%4624:	store	 %4623 inptr
%4625:	zext	 %4622
%4626:	getelementptr	 inbuf XXX %4625
%4627:	load	 %4626
%4628:	zext	 %4627
%4629:	br	 cond.end221

BASIC BLOCK cond.false219
%4630:	call	 fill_inbuf
%4631:	br	 cond.end221

BASIC BLOCK cond.end221
%4632:	phi	 %4628 %4630
%4633:	trunc	 %4632
%4634:	zext	 %4633
%4635:	zext	 %4615
%4636:	shl	 %4634 %4635
%4637:	or	 %4614 %4636
%4638:	add	 %4615 XXX
%4639:	br	 while.cond208

BASIC BLOCK while.end229
%4640:	trunc	 %4614
%4641:	and	 %4640 XXX
%4642:	add	 XXX %4641
%4643:	lshr	 %4614 XXX
%4644:	sub	 %4615 XXX
%4645:	add	 %4506 %4642
%4646:	icmp	 %4645 %4496
%4647:	br	 %4646 if.end239 if.then238

BASIC BLOCK if.then238
%4648:	br	 return

BASIC BLOCK if.end239
%4649:	br	 while.cond240

BASIC BLOCK while.cond240
%4650:	phi	 %4642 %4652
%4651:	phi	 %4506 %4655
%4652:	add	 %4650 XXX
%4653:	icmp	 %4650 XXX
%4654:	br	 %4653 while.end247 while.body243

BASIC BLOCK while.body243
%4655:	add	 %4651 XXX
%4656:	sext	 %4651
%4657:	getelementptr	 %4322 XXX %4656
%4658:	store	 XXX %4657
%4659:	br	 while.cond240

BASIC BLOCK while.end247
%4660:	br	 if.end289

BASIC BLOCK if.else248
%4661:	br	 while.cond249

BASIC BLOCK while.cond249
%4662:	phi	 %4547 %4685
%4663:	phi	 %4548 %4686
%4664:	icmp	 %4663 XXX
%4665:	br	 %4664 while.end270 while.body252

BASIC BLOCK while.body252
%4666:	load	 inptr
%4667:	load	 insize
%4668:	icmp	 %4666 %4667
%4669:	br	 %4668 cond.false260 cond.true255

BASIC BLOCK cond.true255
%4670:	load	 inptr
%4671:	add	 %4670 XXX
%4672:	store	 %4671 inptr
%4673:	zext	 %4670
%4674:	getelementptr	 inbuf XXX %4673
%4675:	load	 %4674
%4676:	zext	 %4675
%4677:	br	 cond.end262

BASIC BLOCK cond.false260
%4678:	call	 fill_inbuf
%4679:	br	 cond.end262

BASIC BLOCK cond.end262
%4680:	phi	 %4676 %4678
%4681:	trunc	 %4680
%4682:	zext	 %4681
%4683:	zext	 %4663
%4684:	shl	 %4682 %4683
%4685:	or	 %4662 %4684
%4686:	add	 %4663 XXX
%4687:	br	 while.cond249

BASIC BLOCK while.end270
%4688:	trunc	 %4662
%4689:	and	 %4688 XXX
%4690:	add	 XXX %4689
%4691:	lshr	 %4662 XXX
%4692:	sub	 %4663 XXX
%4693:	add	 %4506 %4690
%4694:	icmp	 %4693 %4496
%4695:	br	 %4694 if.end280 if.then279

BASIC BLOCK if.then279
%4696:	br	 return

BASIC BLOCK if.end280
%4697:	br	 while.cond281

BASIC BLOCK while.cond281
%4698:	phi	 %4690 %4700
%4699:	phi	 %4506 %4703
%4700:	add	 %4698 XXX
%4701:	icmp	 %4698 XXX
%4702:	br	 %4701 while.end288 while.body284

BASIC BLOCK while.body284
%4703:	add	 %4699 XXX
%4704:	sext	 %4699
%4705:	getelementptr	 %4322 XXX %4704
%4706:	store	 XXX %4705
%4707:	br	 while.cond281

BASIC BLOCK while.end288
%4708:	br	 if.end289

BASIC BLOCK if.end289
%4709:	phi	 %4643 %4691
%4710:	phi	 %4644 %4692
%4711:	phi	 %4651 %4699
%4712:	br	 if.end290

BASIC BLOCK if.end290
%4713:	phi	 %4593 %4709
%4714:	phi	 %4594 %4710
%4715:	phi	 %4505 XXX
%4716:	phi	 %4601 %4711
%4717:	br	 if.end291

BASIC BLOCK if.end291
%4718:	phi	 %4547 %4713
%4719:	phi	 %4548 %4714
%4720:	phi	 %4553 %4715
%4721:	phi	 %4556 %4716
%4722:	br	 while.cond122

BASIC BLOCK while.end292
%4723:	load	 %4318
%4724:	call	 %4723 huft_free
%4725:	store	 %4503 bb
%4726:	store	 %4504 bk
%4727:	load	 lbits
%4728:	store	 %4727 %4320
%4729:	getelementptr	 %4322 XXX XXX
%4730:	call	 %4729 %4354 XXX XXX XXX %4318 %4320 huft_build
%4731:	icmp	 %4730 XXX
%4732:	br	 %4731 if.end305 if.then298

BASIC BLOCK if.then298
%4733:	icmp	 %4730 XXX
%4734:	br	 %4733 if.end304 if.then301

BASIC BLOCK if.then301
%4735:	load	 stderr
%4736:	call	 %4735 XXX fprintf
%4737:	load	 %4318
%4738:	call	 %4737 huft_free
%4739:	br	 if.end304

BASIC BLOCK if.end304
%4740:	br	 return

BASIC BLOCK if.end305
%4741:	load	 dbits
%4742:	store	 %4741 %4321
%4743:	getelementptr	 %4322 XXX XXX
%4744:	zext	 %4354
%4745:	getelementptr	 %4743 %4744
%4746:	call	 %4745 %4386 XXX XXX XXX %4319 %4321 huft_build
%4747:	icmp	 %4746 XXX
%4748:	br	 %4747 if.end320 if.then312

BASIC BLOCK if.then312
%4749:	icmp	 %4746 XXX
%4750:	br	 %4749 if.end318 if.then315

BASIC BLOCK if.then315
%4751:	load	 stderr
%4752:	call	 %4751 XXX fprintf
%4753:	load	 %4319
%4754:	call	 %4753 huft_free
%4755:	br	 if.end318

BASIC BLOCK if.end318
%4756:	load	 %4318
%4757:	call	 %4756 huft_free
%4758:	br	 return

BASIC BLOCK if.end320
%4759:	load	 %4318
%4760:	load	 %4319
%4761:	load	 %4320
%4762:	load	 %4321
%4763:	call	 %4759 %4760 %4761 %4762 inflate_codes
%4764:	icmp	 %4763 XXX
%4765:	br	 %4764 if.end324 if.then323

BASIC BLOCK if.then323
%4766:	br	 return

BASIC BLOCK if.end324
%4767:	load	 %4318
%4768:	call	 %4767 huft_free
%4769:	load	 %4319
%4770:	call	 %4769 huft_free
%4771:	br	 return

BASIC BLOCK return
%4772:	phi	 XXX %4487 XXX XXX XXX %4730 %4746 XXX XXX
%4773:	ret	 %4772

FUNCTION inflate_block

BASIC BLOCK entry
%4774:	load	 bb
%4775:	load	 bk
%4776:	br	 while.cond

BASIC BLOCK while.cond
%4777:	phi	 %4774 %4800
%4778:	phi	 %4775 %4801
%4779:	icmp	 %4778 XXX
%4780:	br	 %4779 while.end while.body

BASIC BLOCK while.body
%4781:	load	 inptr
%4782:	load	 insize
%4783:	icmp	 %4781 %4782
%4784:	br	 %4783 cond.false cond.true

BASIC BLOCK cond.true
%4785:	load	 inptr
%4786:	add	 %4785 XXX
%4787:	store	 %4786 inptr
%4788:	zext	 %4785
%4789:	getelementptr	 inbuf XXX %4788
%4790:	load	 %4789
%4791:	zext	 %4790
%4792:	br	 cond.end

BASIC BLOCK cond.false
%4793:	call	 fill_inbuf
%4794:	br	 cond.end

BASIC BLOCK cond.end
%4795:	phi	 %4791 %4793
%4796:	trunc	 %4795
%4797:	zext	 %4796
%4798:	zext	 %4778
%4799:	shl	 %4797 %4798
%4800:	or	 %4777 %4799
%4801:	add	 %4778 XXX
%4802:	br	 while.cond

BASIC BLOCK while.end
%4803:	trunc	 %4777
%4804:	and	 %4803 XXX
%4805:	store	 %4804 e
%4806:	lshr	 %4777 XXX
%4807:	sub	 %4778 XXX
%4808:	br	 while.cond5

BASIC BLOCK while.cond5
%4809:	phi	 %4806 %4832
%4810:	phi	 %4807 %4833
%4811:	icmp	 %4810 XXX
%4812:	br	 %4811 while.end26 while.body8

BASIC BLOCK while.body8
%4813:	load	 inptr
%4814:	load	 insize
%4815:	icmp	 %4813 %4814
%4816:	br	 %4815 cond.false16 cond.true11

BASIC BLOCK cond.true11
%4817:	load	 inptr
%4818:	add	 %4817 XXX
%4819:	store	 %4818 inptr
%4820:	zext	 %4817
%4821:	getelementptr	 inbuf XXX %4820
%4822:	load	 %4821
%4823:	zext	 %4822
%4824:	br	 cond.end18

BASIC BLOCK cond.false16
%4825:	call	 fill_inbuf
%4826:	br	 cond.end18

BASIC BLOCK cond.end18
%4827:	phi	 %4823 %4825
%4828:	trunc	 %4827
%4829:	zext	 %4828
%4830:	zext	 %4810
%4831:	shl	 %4829 %4830
%4832:	or	 %4809 %4831
%4833:	add	 %4810 XXX
%4834:	br	 while.cond5

BASIC BLOCK while.end26
%4835:	trunc	 %4809
%4836:	and	 %4835 XXX
%4837:	lshr	 %4809 XXX
%4838:	sub	 %4810 XXX
%4839:	store	 %4837 bb
%4840:	store	 %4838 bk
%4841:	icmp	 %4836 XXX
%4842:	br	 %4841 if.end if.then

BASIC BLOCK if.then
%4843:	call	 inflate_dynamic
%4844:	br	 return

BASIC BLOCK if.end
%4845:	icmp	 %4836 XXX
%4846:	br	 %4845 if.end38 if.then36

BASIC BLOCK if.then36
%4847:	call	 inflate_stored
%4848:	br	 return

BASIC BLOCK if.end38
%4849:	icmp	 %4836 XXX
%4850:	br	 %4849 if.end43 if.then41

BASIC BLOCK if.then41
%4851:	call	 inflate_fixed
%4852:	br	 return

BASIC BLOCK if.end43
%4853:	br	 return

BASIC BLOCK return
%4854:	phi	 %4843 %4847 %4851 XXX
%4855:	ret	 %4854

FUNCTION inflate

BASIC BLOCK entry
%4856:	alloca	 XXX
%4857:	store	 XXX outcnt
%4858:	store	 XXX bk
%4859:	store	 XXX bb
%4860:	br	 do.body

BASIC BLOCK do.body
%4861:	phi	 XXX %4872
%4862:	store	 XXX hufts
%4863:	call	 %4856 inflate_block
%4864:	icmp	 %4863 XXX
%4865:	br	 %4864 if.end if.then

BASIC BLOCK if.then
%4866:	br	 return

BASIC BLOCK if.end
%4867:	load	 hufts
%4868:	icmp	 %4867 %4861
%4869:	br	 %4868 if.end3 if.then2

BASIC BLOCK if.then2
%4870:	load	 hufts
%4871:	br	 if.end3

BASIC BLOCK if.end3
%4872:	phi	 %4870 %4861
%4873:	br	 do.cond

BASIC BLOCK do.cond
%4874:	load	 %4856
%4875:	icmp	 %4874 XXX
%4876:	xor	 %4875 XXX
%4877:	br	 %4876 do.end do.body

BASIC BLOCK do.end
%4878:	br	 while.cond

BASIC BLOCK while.cond
%4879:	load	 bk
%4880:	icmp	 %4879 XXX
%4881:	br	 %4880 while.end while.body

BASIC BLOCK while.body
%4882:	load	 bk
%4883:	sub	 %4882 XXX
%4884:	store	 %4883 bk
%4885:	load	 inptr
%4886:	add	 %4885 XXX
%4887:	store	 %4886 inptr
%4888:	br	 while.cond

BASIC BLOCK while.end
%4889:	load	 outcnt
%4890:	store	 %4889 outcnt
%4891:	call	 flush_window
%4892:	br	 return

BASIC BLOCK return
%4893:	phi	 %4863 XXX
%4894:	ret	 %4893

FUNCTION ct_init

BASIC BLOCK entry
%4895:	store	 attr file_type
%4896:	store	 methodp file_method
%4897:	store	 XXX input_len
%4898:	store	 XXX compressed_len
%4899:	load	 XXX
%4900:	zext	 %4899
%4901:	icmp	 %4900 XXX
%4902:	br	 %4901 if.end if.then

BASIC BLOCK if.then
%4903:	br	 return

BASIC BLOCK if.end
%4904:	br	 for.cond

BASIC BLOCK for.cond
%4905:	phi	 XXX %4913
%4906:	phi	 XXX %4930
%4907:	icmp	 %4906 XXX
%4908:	br	 %4907 for.end16 for.body

BASIC BLOCK for.body
%4909:	sext	 %4906
%4910:	getelementptr	 base_length XXX %4909
%4911:	store	 %4905 %4910
%4912:	br	 for.cond4

BASIC BLOCK for.cond4
%4913:	phi	 %4905 %4922
%4914:	phi	 XXX %4927
%4915:	sext	 %4906
%4916:	getelementptr	 extra_lbits XXX %4915
%4917:	load	 %4916
%4918:	shl	 XXX %4917
%4919:	icmp	 %4914 %4918
%4920:	br	 %4919 for.end for.body9

BASIC BLOCK for.body9
%4921:	trunc	 %4906
%4922:	add	 %4913 XXX
%4923:	sext	 %4913
%4924:	getelementptr	 length_code XXX %4923
%4925:	store	 %4921 %4924
%4926:	br	 for.inc

BASIC BLOCK for.inc
%4927:	add	 %4914 XXX
%4928:	br	 for.cond4

BASIC BLOCK for.end
%4929:	br	 for.inc14

BASIC BLOCK for.inc14
%4930:	add	 %4906 XXX
%4931:	br	 for.cond

BASIC BLOCK for.end16
%4932:	trunc	 %4906
%4933:	sub	 %4905 XXX
%4934:	sext	 %4933
%4935:	getelementptr	 length_code XXX %4934
%4936:	store	 %4932 %4935
%4937:	br	 for.cond20

BASIC BLOCK for.cond20
%4938:	phi	 XXX %4963
%4939:	phi	 XXX %4947
%4940:	icmp	 %4938 XXX
%4941:	br	 %4940 for.end42 for.body23

BASIC BLOCK for.body23
%4942:	sext	 %4938
%4943:	getelementptr	 base_dist XXX %4942
%4944:	store	 %4939 %4943
%4945:	br	 for.cond26

BASIC BLOCK for.cond26
%4946:	phi	 XXX %4960
%4947:	phi	 %4939 %4955
%4948:	sext	 %4938
%4949:	getelementptr	 extra_dbits XXX %4948
%4950:	load	 %4949
%4951:	shl	 XXX %4950
%4952:	icmp	 %4946 %4951
%4953:	br	 %4952 for.end39 for.body32

BASIC BLOCK for.body32
%4954:	trunc	 %4938
%4955:	add	 %4947 XXX
%4956:	sext	 %4947
%4957:	getelementptr	 dist_code XXX %4956
%4958:	store	 %4954 %4957
%4959:	br	 for.inc37

BASIC BLOCK for.inc37
%4960:	add	 %4946 XXX
%4961:	br	 for.cond26

BASIC BLOCK for.end39
%4962:	br	 for.inc40

BASIC BLOCK for.inc40
%4963:	add	 %4938 XXX
%4964:	br	 for.cond20

BASIC BLOCK for.end42
%4965:	ashr	 %4939 XXX
%4966:	br	 for.cond43

BASIC BLOCK for.cond43
%4967:	phi	 %4938 %4995
%4968:	phi	 %4965 %4977
%4969:	icmp	 %4967 XXX
%4970:	br	 %4969 for.end67 for.body46

BASIC BLOCK for.body46
%4971:	shl	 %4968 XXX
%4972:	sext	 %4967
%4973:	getelementptr	 base_dist XXX %4972
%4974:	store	 %4971 %4973
%4975:	br	 for.cond50

BASIC BLOCK for.cond50
%4976:	phi	 XXX %4992
%4977:	phi	 %4968 %4986
%4978:	sext	 %4967
%4979:	getelementptr	 extra_dbits XXX %4978
%4980:	load	 %4979
%4981:	sub	 %4980 XXX
%4982:	shl	 XXX %4981
%4983:	icmp	 %4976 %4982
%4984:	br	 %4983 for.end64 for.body57

BASIC BLOCK for.body57
%4985:	trunc	 %4967
%4986:	add	 %4977 XXX
%4987:	add	 XXX %4977
%4988:	sext	 %4987
%4989:	getelementptr	 dist_code XXX %4988
%4990:	store	 %4985 %4989
%4991:	br	 for.inc62

BASIC BLOCK for.inc62
%4992:	add	 %4976 XXX
%4993:	br	 for.cond50

BASIC BLOCK for.end64
%4994:	br	 for.inc65

BASIC BLOCK for.inc65
%4995:	add	 %4967 XXX
%4996:	br	 for.cond43

BASIC BLOCK for.end67
%4997:	br	 for.cond68

BASIC BLOCK for.cond68
%4998:	phi	 XXX %5005
%4999:	icmp	 %4998 XXX
%5000:	br	 %4999 for.end76 for.body71

BASIC BLOCK for.body71
%5001:	sext	 %4998
%5002:	getelementptr	 bl_count XXX %5001
%5003:	store	 XXX %5002
%5004:	br	 for.inc74

BASIC BLOCK for.inc74
%5005:	add	 %4998 XXX
%5006:	br	 for.cond68

BASIC BLOCK for.end76
%5007:	br	 while.cond

BASIC BLOCK while.cond
%5008:	phi	 XXX %5011
%5009:	icmp	 %5008 XXX
%5010:	br	 %5009 while.end while.body

BASIC BLOCK while.body
%5011:	add	 %5008 XXX
%5012:	sext	 %5008
%5013:	getelementptr	 static_ltree XXX %5012
%5014:	getelementptr	 %5013 XXX XXX
%5015:	bitcast	 %5014
%5016:	store	 XXX %5015
%5017:	load	 XXX
%5018:	add	 %5017 XXX
%5019:	store	 %5018 XXX
%5020:	br	 while.cond

BASIC BLOCK while.end
%5021:	br	 while.cond83

BASIC BLOCK while.cond83
%5022:	phi	 %5008 %5025
%5023:	icmp	 %5022 XXX
%5024:	br	 %5023 while.end93 while.body86

BASIC BLOCK while.body86
%5025:	add	 %5022 XXX
%5026:	sext	 %5022
%5027:	getelementptr	 static_ltree XXX %5026
%5028:	getelementptr	 %5027 XXX XXX
%5029:	bitcast	 %5028
%5030:	store	 XXX %5029
%5031:	load	 XXX
%5032:	add	 %5031 XXX
%5033:	store	 %5032 XXX
%5034:	br	 while.cond83

BASIC BLOCK while.end93
%5035:	br	 while.cond94

BASIC BLOCK while.cond94
%5036:	phi	 %5022 %5039
%5037:	icmp	 %5036 XXX
%5038:	br	 %5037 while.end104 while.body97

BASIC BLOCK while.body97
%5039:	add	 %5036 XXX
%5040:	sext	 %5036
%5041:	getelementptr	 static_ltree XXX %5040
%5042:	getelementptr	 %5041 XXX XXX
%5043:	bitcast	 %5042
%5044:	store	 XXX %5043
%5045:	load	 XXX
%5046:	add	 %5045 XXX
%5047:	store	 %5046 XXX
%5048:	br	 while.cond94

BASIC BLOCK while.end104
%5049:	br	 while.cond105

BASIC BLOCK while.cond105
%5050:	phi	 %5036 %5053
%5051:	icmp	 %5050 XXX
%5052:	br	 %5051 while.end115 while.body108

BASIC BLOCK while.body108
%5053:	add	 %5050 XXX
%5054:	sext	 %5050
%5055:	getelementptr	 static_ltree XXX %5054
%5056:	getelementptr	 %5055 XXX XXX
%5057:	bitcast	 %5056
%5058:	store	 XXX %5057
%5059:	load	 XXX
%5060:	add	 %5059 XXX
%5061:	store	 %5060 XXX
%5062:	br	 while.cond105

BASIC BLOCK while.end115
%5063:	call	 XXX XXX gen_codes
%5064:	br	 for.cond116

BASIC BLOCK for.cond116
%5065:	phi	 XXX %5081
%5066:	icmp	 %5065 XXX
%5067:	br	 %5066 for.end130 for.body119

BASIC BLOCK for.body119
%5068:	sext	 %5065
%5069:	getelementptr	 static_dtree XXX %5068
%5070:	getelementptr	 %5069 XXX XXX
%5071:	bitcast	 %5070
%5072:	store	 XXX %5071
%5073:	call	 %5065 XXX bi_reverse
%5074:	trunc	 %5073
%5075:	sext	 %5065
%5076:	getelementptr	 static_dtree XXX %5075
%5077:	getelementptr	 %5076 XXX XXX
%5078:	bitcast	 %5077
%5079:	store	 %5074 %5078
%5080:	br	 for.inc128

BASIC BLOCK for.inc128
%5081:	add	 %5065 XXX
%5082:	br	 for.cond116

BASIC BLOCK for.end130
%5083:	call	 init_block
%5084:	br	 return

BASIC BLOCK return
%5085:	ret	

FUNCTION gen_codes

BASIC BLOCK entry
%5086:	alloca	 XXX
%5087:	br	 for.cond

BASIC BLOCK for.cond
%5088:	phi	 XXX %5100
%5089:	phi	 XXX %5105
%5090:	icmp	 %5089 XXX
%5091:	br	 %5090 for.end for.body

BASIC BLOCK for.body
%5092:	zext	 %5088
%5093:	sub	 %5089 XXX
%5094:	sext	 %5093
%5095:	getelementptr	 bl_count XXX %5094
%5096:	load	 %5095
%5097:	zext	 %5096
%5098:	add	 %5092 %5097
%5099:	shl	 %5098 XXX
%5100:	trunc	 %5099
%5101:	sext	 %5089
%5102:	getelementptr	 %5086 XXX %5101
%5103:	store	 %5100 %5102
%5104:	br	 for.inc

BASIC BLOCK for.inc
%5105:	add	 %5089 XXX
%5106:	br	 for.cond

BASIC BLOCK for.end
%5107:	br	 for.cond5

BASIC BLOCK for.cond5
%5108:	phi	 XXX %5134
%5109:	icmp	 %5108 max_code
%5110:	br	 %5109 for.end25 for.body8

BASIC BLOCK for.body8
%5111:	sext	 %5108
%5112:	getelementptr	 tree %5111
%5113:	getelementptr	 %5112 XXX XXX
%5114:	bitcast	 %5113
%5115:	load	 %5114
%5116:	zext	 %5115
%5117:	icmp	 %5116 XXX
%5118:	br	 %5117 if.end if.then

BASIC BLOCK if.then
%5119:	br	 for.inc23

BASIC BLOCK if.end
%5120:	sext	 %5116
%5121:	getelementptr	 %5086 XXX %5120
%5122:	load	 %5121
%5123:	add	 %5122 XXX
%5124:	store	 %5123 %5121
%5125:	zext	 %5122
%5126:	call	 %5125 %5116 bi_reverse
%5127:	trunc	 %5126
%5128:	sext	 %5108
%5129:	getelementptr	 tree %5128
%5130:	getelementptr	 %5129 XXX XXX
%5131:	bitcast	 %5130
%5132:	store	 %5127 %5131
%5133:	br	 for.inc23

BASIC BLOCK for.inc23
%5134:	add	 %5108 XXX
%5135:	br	 for.cond5

BASIC BLOCK for.end25
%5136:	ret	

FUNCTION init_block

BASIC BLOCK entry
%5137:	br	 for.cond

BASIC BLOCK for.cond
%5138:	phi	 XXX %5147
%5139:	icmp	 %5138 XXX
%5140:	br	 %5139 for.end for.body

BASIC BLOCK for.body
%5141:	sext	 %5138
%5142:	getelementptr	 dyn_ltree XXX %5141
%5143:	getelementptr	 %5142 XXX XXX
%5144:	bitcast	 %5143
%5145:	store	 XXX %5144
%5146:	br	 for.inc

BASIC BLOCK for.inc
%5147:	add	 %5138 XXX
%5148:	br	 for.cond

BASIC BLOCK for.end
%5149:	br	 for.cond1

BASIC BLOCK for.cond1
%5150:	phi	 XXX %5159
%5151:	icmp	 %5150 XXX
%5152:	br	 %5151 for.end10 for.body3

BASIC BLOCK for.body3
%5153:	sext	 %5150
%5154:	getelementptr	 dyn_dtree XXX %5153
%5155:	getelementptr	 %5154 XXX XXX
%5156:	bitcast	 %5155
%5157:	store	 XXX %5156
%5158:	br	 for.inc8

BASIC BLOCK for.inc8
%5159:	add	 %5150 XXX
%5160:	br	 for.cond1

BASIC BLOCK for.end10
%5161:	br	 for.cond11

BASIC BLOCK for.cond11
%5162:	phi	 XXX %5171
%5163:	icmp	 %5162 XXX
%5164:	br	 %5163 for.end20 for.body13

BASIC BLOCK for.body13
%5165:	sext	 %5162
%5166:	getelementptr	 bl_tree XXX %5165
%5167:	getelementptr	 %5166 XXX XXX
%5168:	bitcast	 %5167
%5169:	store	 XXX %5168
%5170:	br	 for.inc18

BASIC BLOCK for.inc18
%5171:	add	 %5162 XXX
%5172:	br	 for.cond11

BASIC BLOCK for.end20
%5173:	store	 XXX XXX
%5174:	store	 XXX static_len
%5175:	store	 XXX opt_len
%5176:	store	 XXX last_flags
%5177:	store	 XXX last_dist
%5178:	store	 XXX last_lit
%5179:	store	 XXX flags
%5180:	store	 XXX flag_bit
%5181:	ret	

FUNCTION set_file_type

BASIC BLOCK entry
%5182:	br	 while.cond

BASIC BLOCK while.cond
%5183:	phi	 XXX %5194
%5184:	phi	 XXX %5187
%5185:	icmp	 %5184 XXX
%5186:	br	 %5185 while.end while.body

BASIC BLOCK while.body
%5187:	add	 %5184 XXX
%5188:	sext	 %5184
%5189:	getelementptr	 dyn_ltree XXX %5188
%5190:	getelementptr	 %5189 XXX XXX
%5191:	bitcast	 %5190
%5192:	load	 %5191
%5193:	zext	 %5192
%5194:	add	 %5183 %5193
%5195:	br	 while.cond

BASIC BLOCK while.end
%5196:	br	 while.cond1

BASIC BLOCK while.cond1
%5197:	phi	 XXX %5208
%5198:	phi	 %5184 %5201
%5199:	icmp	 %5198 XXX
%5200:	br	 %5199 while.end12 while.body4

BASIC BLOCK while.body4
%5201:	add	 %5198 XXX
%5202:	sext	 %5198
%5203:	getelementptr	 dyn_ltree XXX %5202
%5204:	getelementptr	 %5203 XXX XXX
%5205:	bitcast	 %5204
%5206:	load	 %5205
%5207:	zext	 %5206
%5208:	add	 %5197 %5207
%5209:	br	 while.cond1

BASIC BLOCK while.end12
%5210:	br	 while.cond13

BASIC BLOCK while.cond13
%5211:	phi	 %5183 %5222
%5212:	phi	 %5198 %5215
%5213:	icmp	 %5212 XXX
%5214:	br	 %5213 while.end24 while.body16

BASIC BLOCK while.body16
%5215:	add	 %5212 XXX
%5216:	sext	 %5212
%5217:	getelementptr	 dyn_ltree XXX %5216
%5218:	getelementptr	 %5217 XXX XXX
%5219:	bitcast	 %5218
%5220:	load	 %5219
%5221:	zext	 %5220
%5222:	add	 %5211 %5221
%5223:	br	 while.cond13

BASIC BLOCK while.end24
%5224:	lshr	 %5197 XXX
%5225:	icmp	 %5211 %5224
%5226:	select	 %5225 XXX XXX
%5227:	trunc	 %5226
%5228:	load	 file_type
%5229:	store	 %5227 %5228
%5230:	load	 file_type
%5231:	load	 %5230
%5232:	zext	 %5231
%5233:	icmp	 %5232 XXX
%5234:	br	 %5233 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%5235:	br	 XXX if.end if.then

BASIC BLOCK if.then
%5236:	call	 XXX XXX warn
%5237:	br	 if.end

BASIC BLOCK if.end
%5238:	ret	

FUNCTION build_tree

BASIC BLOCK entry
%5239:	getelementptr	 desc XXX XXX
%5240:	load	 %5239
%5241:	getelementptr	 desc XXX XXX
%5242:	load	 %5241
%5243:	getelementptr	 desc XXX XXX
%5244:	load	 %5243
%5245:	store	 XXX heap_len
%5246:	store	 XXX heap_max
%5247:	br	 for.cond

BASIC BLOCK for.cond
%5248:	phi	 XXX %5278
%5249:	phi	 XXX %5276
%5250:	icmp	 %5248 %5244
%5251:	br	 %5250 for.end for.body

BASIC BLOCK for.body
%5252:	sext	 %5248
%5253:	getelementptr	 %5240 %5252
%5254:	getelementptr	 %5253 XXX XXX
%5255:	bitcast	 %5254
%5256:	load	 %5255
%5257:	zext	 %5256
%5258:	icmp	 %5257 XXX
%5259:	br	 %5258 if.else if.then

BASIC BLOCK if.then
%5260:	load	 heap_len
%5261:	add	 %5260 XXX
%5262:	store	 %5261 heap_len
%5263:	sext	 %5261
%5264:	getelementptr	 heap XXX %5263
%5265:	store	 %5248 %5264
%5266:	sext	 %5248
%5267:	getelementptr	 depth XXX %5266
%5268:	store	 XXX %5267
%5269:	br	 if.end

BASIC BLOCK if.else
%5270:	sext	 %5248
%5271:	getelementptr	 %5240 %5270
%5272:	getelementptr	 %5271 XXX XXX
%5273:	bitcast	 %5272
%5274:	store	 XXX %5273
%5275:	br	 if.end

BASIC BLOCK if.end
%5276:	phi	 %5248 %5249
%5277:	br	 for.inc

BASIC BLOCK for.inc
%5278:	add	 %5248 XXX
%5279:	br	 for.cond

BASIC BLOCK for.end
%5280:	br	 while.cond

BASIC BLOCK while.cond
%5281:	phi	 %5249 %5290
%5282:	load	 heap_len
%5283:	icmp	 %5282 XXX
%5284:	br	 %5283 while.end while.body

BASIC BLOCK while.body
%5285:	icmp	 %5281 XXX
%5286:	br	 %5285 cond.false cond.true

BASIC BLOCK cond.true
%5287:	add	 %5281 XXX
%5288:	br	 cond.end

BASIC BLOCK cond.false
%5289:	br	 cond.end

BASIC BLOCK cond.end
%5290:	phi	 %5287 %5281
%5291:	phi	 %5287 XXX
%5292:	load	 heap_len
%5293:	add	 %5292 XXX
%5294:	store	 %5293 heap_len
%5295:	sext	 %5293
%5296:	getelementptr	 heap XXX %5295
%5297:	store	 %5291 %5296
%5298:	sext	 %5291
%5299:	getelementptr	 %5240 %5298
%5300:	getelementptr	 %5299 XXX XXX
%5301:	bitcast	 %5300
%5302:	store	 XXX %5301
%5303:	sext	 %5291
%5304:	getelementptr	 depth XXX %5303
%5305:	store	 XXX %5304
%5306:	load	 opt_len
%5307:	add	 %5306 XXX
%5308:	store	 %5307 opt_len
%5309:	icmp	 %5242 XXX
%5310:	br	 %5309 if.end31 if.then25

BASIC BLOCK if.then25
%5311:	sext	 %5291
%5312:	getelementptr	 %5242 %5311
%5313:	getelementptr	 %5312 XXX XXX
%5314:	bitcast	 %5313
%5315:	load	 %5314
%5316:	zext	 %5315
%5317:	load	 static_len
%5318:	sub	 %5317 %5316
%5319:	store	 %5318 static_len
%5320:	br	 if.end31

BASIC BLOCK if.end31
%5321:	br	 while.cond

BASIC BLOCK while.end
%5322:	getelementptr	 desc XXX XXX
%5323:	store	 %5281 %5322
%5324:	load	 heap_len
%5325:	sdiv	 %5324 XXX
%5326:	br	 for.cond33

BASIC BLOCK for.cond33
%5327:	phi	 %5325 %5332
%5328:	icmp	 %5327 XXX
%5329:	br	 %5328 for.end39 for.body36

BASIC BLOCK for.body36
%5330:	call	 %5240 %5327 pqdownheap
%5331:	br	 for.inc37

BASIC BLOCK for.inc37
%5332:	add	 %5327 XXX
%5333:	br	 for.cond33

BASIC BLOCK for.end39
%5334:	br	 do.body

BASIC BLOCK do.body
%5335:	phi	 %5244 %5414
%5336:	load	 XXX
%5337:	load	 heap_len
%5338:	add	 %5337 XXX
%5339:	store	 %5338 heap_len
%5340:	sext	 %5337
%5341:	getelementptr	 heap XXX %5340
%5342:	load	 %5341
%5343:	store	 %5342 XXX
%5344:	call	 %5240 XXX pqdownheap
%5345:	load	 XXX
%5346:	load	 heap_max
%5347:	add	 %5346 XXX
%5348:	store	 %5347 heap_max
%5349:	sext	 %5347
%5350:	getelementptr	 heap XXX %5349
%5351:	store	 %5336 %5350
%5352:	load	 heap_max
%5353:	add	 %5352 XXX
%5354:	store	 %5353 heap_max
%5355:	sext	 %5353
%5356:	getelementptr	 heap XXX %5355
%5357:	store	 %5345 %5356
%5358:	sext	 %5336
%5359:	getelementptr	 %5240 %5358
%5360:	getelementptr	 %5359 XXX XXX
%5361:	bitcast	 %5360
%5362:	load	 %5361
%5363:	zext	 %5362
%5364:	sext	 %5345
%5365:	getelementptr	 %5240 %5364
%5366:	getelementptr	 %5365 XXX XXX
%5367:	bitcast	 %5366
%5368:	load	 %5367
%5369:	zext	 %5368
%5370:	add	 %5363 %5369
%5371:	trunc	 %5370
%5372:	sext	 %5335
%5373:	getelementptr	 %5240 %5372
%5374:	getelementptr	 %5373 XXX XXX
%5375:	bitcast	 %5374
%5376:	store	 %5371 %5375
%5377:	sext	 %5336
%5378:	getelementptr	 depth XXX %5377
%5379:	load	 %5378
%5380:	zext	 %5379
%5381:	sext	 %5345
%5382:	getelementptr	 depth XXX %5381
%5383:	load	 %5382
%5384:	zext	 %5383
%5385:	icmp	 %5380 %5384
%5386:	br	 %5385 cond.false76 cond.true72

BASIC BLOCK cond.true72
%5387:	sext	 %5336
%5388:	getelementptr	 depth XXX %5387
%5389:	load	 %5388
%5390:	zext	 %5389
%5391:	br	 cond.end80

BASIC BLOCK cond.false76
%5392:	sext	 %5345
%5393:	getelementptr	 depth XXX %5392
%5394:	load	 %5393
%5395:	zext	 %5394
%5396:	br	 cond.end80

BASIC BLOCK cond.end80
%5397:	phi	 %5390 %5395
%5398:	add	 %5397 XXX
%5399:	trunc	 %5398
%5400:	sext	 %5335
%5401:	getelementptr	 depth XXX %5400
%5402:	store	 %5399 %5401
%5403:	trunc	 %5335
%5404:	sext	 %5345
%5405:	getelementptr	 %5240 %5404
%5406:	getelementptr	 %5405 XXX XXX
%5407:	bitcast	 %5406
%5408:	store	 %5403 %5407
%5409:	sext	 %5336
%5410:	getelementptr	 %5240 %5409
%5411:	getelementptr	 %5410 XXX XXX
%5412:	bitcast	 %5411
%5413:	store	 %5403 %5412
%5414:	add	 %5335 XXX
%5415:	store	 %5335 XXX
%5416:	call	 %5240 XXX pqdownheap
%5417:	br	 do.cond

BASIC BLOCK do.cond
%5418:	load	 heap_len
%5419:	icmp	 %5418 XXX
%5420:	br	 %5419 do.end do.body

BASIC BLOCK do.end
%5421:	load	 XXX
%5422:	load	 heap_max
%5423:	add	 %5422 XXX
%5424:	store	 %5423 heap_max
%5425:	sext	 %5423
%5426:	getelementptr	 heap XXX %5425
%5427:	store	 %5421 %5426
%5428:	call	 desc gen_bitlen
%5429:	call	 %5240 %5281 gen_codes
%5430:	ret	

FUNCTION build_bl_tree

BASIC BLOCK entry
%5431:	load	 XXX
%5432:	call	 XXX %5431 scan_tree
%5433:	load	 XXX
%5434:	call	 XXX %5433 scan_tree
%5435:	call	 bl_desc build_tree
%5436:	br	 for.cond

BASIC BLOCK for.cond
%5437:	phi	 XXX %5453
%5438:	icmp	 %5437 XXX
%5439:	br	 %5438 for.end for.body

BASIC BLOCK for.body
%5440:	sext	 %5437
%5441:	getelementptr	 bl_order XXX %5440
%5442:	load	 %5441
%5443:	zext	 %5442
%5444:	getelementptr	 bl_tree XXX %5443
%5445:	getelementptr	 %5444 XXX XXX
%5446:	bitcast	 %5445
%5447:	load	 %5446
%5448:	zext	 %5447
%5449:	icmp	 %5448 XXX
%5450:	br	 %5449 if.end if.then

BASIC BLOCK if.then
%5451:	br	 for.end

BASIC BLOCK if.end
%5452:	br	 for.inc

BASIC BLOCK for.inc
%5453:	add	 %5437 XXX
%5454:	br	 for.cond

BASIC BLOCK for.end
%5455:	add	 %5437 XXX
%5456:	mul	 XXX %5455
%5457:	add	 %5456 XXX
%5458:	add	 %5457 XXX
%5459:	add	 %5458 XXX
%5460:	sext	 %5459
%5461:	load	 opt_len
%5462:	add	 %5461 %5460
%5463:	store	 %5462 opt_len
%5464:	ret	 %5437

FUNCTION compress_block

BASIC BLOCK entry
%5465:	load	 last_lit
%5466:	icmp	 %5465 XXX
%5467:	br	 %5466 if.end80 if.then

BASIC BLOCK if.then
%5468:	br	 do.body

BASIC BLOCK do.body
%5469:	phi	 XXX %5586
%5470:	phi	 XXX %5482
%5471:	phi	 XXX %5583
%5472:	phi	 XXX %5483
%5473:	and	 %5472 XXX
%5474:	icmp	 %5473 XXX
%5475:	br	 %5474 if.end if.then2

BASIC BLOCK if.then2
%5476:	add	 %5470 XXX
%5477:	zext	 %5470
%5478:	getelementptr	 flag_buf XXX %5477
%5479:	load	 %5478
%5480:	br	 if.end

BASIC BLOCK if.end
%5481:	phi	 %5479 %5469
%5482:	phi	 %5476 %5470
%5483:	add	 %5472 XXX
%5484:	zext	 %5472
%5485:	getelementptr	 inbuf XXX %5484
%5486:	load	 %5485
%5487:	zext	 %5486
%5488:	zext	 %5481
%5489:	and	 %5488 XXX
%5490:	icmp	 %5489 XXX
%5491:	br	 %5490 if.else if.then10

BASIC BLOCK if.then10
%5492:	sext	 %5487
%5493:	getelementptr	 ltree %5492
%5494:	getelementptr	 %5493 XXX XXX
%5495:	bitcast	 %5494
%5496:	load	 %5495
%5497:	zext	 %5496
%5498:	sext	 %5487
%5499:	getelementptr	 ltree %5498
%5500:	getelementptr	 %5499 XXX XXX
%5501:	bitcast	 %5500
%5502:	load	 %5501
%5503:	zext	 %5502
%5504:	call	 %5497 %5503 send_bits
%5505:	br	 if.end74

BASIC BLOCK if.else
%5506:	sext	 %5487
%5507:	getelementptr	 length_code XXX %5506
%5508:	load	 %5507
%5509:	zext	 %5508
%5510:	add	 %5509 XXX
%5511:	add	 %5510 XXX
%5512:	zext	 %5511
%5513:	getelementptr	 ltree %5512
%5514:	getelementptr	 %5513 XXX XXX
%5515:	bitcast	 %5514
%5516:	load	 %5515
%5517:	zext	 %5516
%5518:	add	 %5509 XXX
%5519:	add	 %5518 XXX
%5520:	zext	 %5519
%5521:	getelementptr	 ltree %5520
%5522:	getelementptr	 %5521 XXX XXX
%5523:	bitcast	 %5522
%5524:	load	 %5523
%5525:	zext	 %5524
%5526:	call	 %5517 %5525 send_bits
%5527:	zext	 %5509
%5528:	getelementptr	 extra_lbits XXX %5527
%5529:	load	 %5528
%5530:	icmp	 %5529 XXX
%5531:	br	 %5530 if.end41 if.then38

BASIC BLOCK if.then38
%5532:	zext	 %5509
%5533:	getelementptr	 base_length XXX %5532
%5534:	load	 %5533
%5535:	sub	 %5487 %5534
%5536:	call	 %5535 %5529 send_bits
%5537:	br	 if.end41

BASIC BLOCK if.end41
%5538:	add	 %5471 XXX
%5539:	zext	 %5471
%5540:	getelementptr	 d_buf XXX %5539
%5541:	load	 %5540
%5542:	zext	 %5541
%5543:	icmp	 %5542 XXX
%5544:	br	 %5543 cond.false cond.true

BASIC BLOCK cond.true
%5545:	zext	 %5542
%5546:	getelementptr	 dist_code XXX %5545
%5547:	load	 %5546
%5548:	zext	 %5547
%5549:	br	 cond.end

BASIC BLOCK cond.false
%5550:	lshr	 %5542 XXX
%5551:	add	 XXX %5550
%5552:	zext	 %5551
%5553:	getelementptr	 dist_code XXX %5552
%5554:	load	 %5553
%5555:	zext	 %5554
%5556:	br	 cond.end

BASIC BLOCK cond.end
%5557:	phi	 %5548 %5555
%5558:	zext	 %5557
%5559:	getelementptr	 dtree %5558
%5560:	getelementptr	 %5559 XXX XXX
%5561:	bitcast	 %5560
%5562:	load	 %5561
%5563:	zext	 %5562
%5564:	zext	 %5557
%5565:	getelementptr	 dtree %5564
%5566:	getelementptr	 %5565 XXX XXX
%5567:	bitcast	 %5566
%5568:	load	 %5567
%5569:	zext	 %5568
%5570:	call	 %5563 %5569 send_bits
%5571:	zext	 %5557
%5572:	getelementptr	 extra_dbits XXX %5571
%5573:	load	 %5572
%5574:	icmp	 %5573 XXX
%5575:	br	 %5574 if.end73 if.then69

BASIC BLOCK if.then69
%5576:	zext	 %5557
%5577:	getelementptr	 base_dist XXX %5576
%5578:	load	 %5577
%5579:	sub	 %5542 %5578
%5580:	call	 %5579 %5573 send_bits
%5581:	br	 if.end73

BASIC BLOCK if.end73
%5582:	br	 if.end74

BASIC BLOCK if.end74
%5583:	phi	 %5471 %5538
%5584:	zext	 %5481
%5585:	ashr	 %5584 XXX
%5586:	trunc	 %5585
%5587:	br	 do.cond

BASIC BLOCK do.cond
%5588:	load	 last_lit
%5589:	icmp	 %5483 %5588
%5590:	br	 %5589 do.end do.body

BASIC BLOCK do.end
%5591:	br	 if.end80

BASIC BLOCK if.end80
%5592:	getelementptr	 ltree XXX
%5593:	getelementptr	 %5592 XXX XXX
%5594:	bitcast	 %5593
%5595:	load	 %5594
%5596:	zext	 %5595
%5597:	getelementptr	 ltree XXX
%5598:	getelementptr	 %5597 XXX XXX
%5599:	bitcast	 %5598
%5600:	load	 %5599
%5601:	zext	 %5600
%5602:	call	 %5596 %5601 send_bits
%5603:	ret	

FUNCTION send_all_trees

BASIC BLOCK entry
%5604:	sub	 lcodes XXX
%5605:	call	 %5604 XXX send_bits
%5606:	sub	 dcodes XXX
%5607:	call	 %5606 XXX send_bits
%5608:	sub	 blcodes XXX
%5609:	call	 %5608 XXX send_bits
%5610:	br	 for.cond

BASIC BLOCK for.cond
%5611:	phi	 XXX %5625
%5612:	icmp	 %5611 blcodes
%5613:	br	 %5612 for.end for.body

BASIC BLOCK for.body
%5614:	sext	 %5611
%5615:	getelementptr	 bl_order XXX %5614
%5616:	load	 %5615
%5617:	zext	 %5616
%5618:	getelementptr	 bl_tree XXX %5617
%5619:	getelementptr	 %5618 XXX XXX
%5620:	bitcast	 %5619
%5621:	load	 %5620
%5622:	zext	 %5621
%5623:	call	 %5622 XXX send_bits
%5624:	br	 for.inc

BASIC BLOCK for.inc
%5625:	add	 %5611 XXX
%5626:	br	 for.cond

BASIC BLOCK for.end
%5627:	sub	 lcodes XXX
%5628:	call	 XXX %5627 send_tree
%5629:	sub	 dcodes XXX
%5630:	call	 XXX %5629 send_tree
%5631:	ret	

FUNCTION unlzw

BASIC BLOCK entry
%5632:	load	 inptr
%5633:	load	 insize
%5634:	icmp	 %5632 %5633
%5635:	br	 %5634 cond.false cond.true

BASIC BLOCK cond.true
%5636:	load	 inptr
%5637:	add	 %5636 XXX
%5638:	store	 %5637 inptr
%5639:	zext	 %5636
%5640:	getelementptr	 inbuf XXX %5639
%5641:	load	 %5640
%5642:	zext	 %5641
%5643:	br	 cond.end

BASIC BLOCK cond.false
%5644:	call	 fill_inbuf
%5645:	br	 cond.end

BASIC BLOCK cond.end
%5646:	phi	 %5642 %5644
%5647:	store	 %5646 maxbits
%5648:	load	 maxbits
%5649:	and	 %5648 XXX
%5650:	store	 %5649 block_mode
%5651:	load	 maxbits
%5652:	and	 %5651 XXX
%5653:	icmp	 %5652 XXX
%5654:	br	 %5653 if.end11 if.then

BASIC BLOCK if.then
%5655:	load	 quiet
%5656:	icmp	 %5655 XXX
%5657:	br	 %5656 if.then4 if.end

BASIC BLOCK if.then4
%5658:	load	 stderr
%5659:	load	 progname
%5660:	load	 maxbits
%5661:	and	 %5660 XXX
%5662:	call	 %5658 XXX %5659 XXX %5661 fprintf
%5663:	br	 if.end

BASIC BLOCK if.end
%5664:	load	 exit_code
%5665:	icmp	 %5664 XXX
%5666:	br	 %5665 if.end10 if.then9

BASIC BLOCK if.then9
%5667:	store	 XXX exit_code
%5668:	br	 if.end10

BASIC BLOCK if.end10
%5669:	br	 if.end11

BASIC BLOCK if.end11
%5670:	load	 maxbits
%5671:	and	 %5670 XXX
%5672:	store	 %5671 maxbits
%5673:	load	 maxbits
%5674:	zext	 %5673
%5675:	shl	 XXX %5674
%5676:	load	 maxbits
%5677:	icmp	 %5676 XXX
%5678:	br	 %5677 if.end17 if.then15

BASIC BLOCK if.then15
%5679:	load	 stderr
%5680:	load	 progname
%5681:	load	 maxbits
%5682:	call	 %5679 XXX %5680 XXX %5681 XXX fprintf
%5683:	store	 XXX exit_code
%5684:	br	 return

BASIC BLOCK if.end17
%5685:	load	 insize
%5686:	shl	 XXX XXX
%5687:	sub	 %5686 XXX
%5688:	load	 inptr
%5689:	shl	 %5688 XXX
%5690:	zext	 %5689
%5691:	load	 block_mode
%5692:	icmp	 %5691 XXX
%5693:	select	 %5692 XXX XXX
%5694:	sext	 %5693
%5695:	call	 XXX XXX XXX XXX XXX llvm.memset.p0i8.i64
%5696:	br	 for.cond

BASIC BLOCK for.cond
%5697:	phi	 XXX %5704
%5698:	icmp	 %5697 XXX
%5699:	br	 %5698 for.end for.body

BASIC BLOCK for.body
%5700:	trunc	 %5697
%5701:	getelementptr	 window XXX %5697
%5702:	store	 %5700 %5701
%5703:	br	 for.inc

BASIC BLOCK for.inc
%5704:	add	 %5697 XXX
%5705:	br	 for.cond

BASIC BLOCK for.end
%5706:	br	 do.body

BASIC BLOCK do.body
%5707:	phi	 XXX %5717
%5708:	phi	 %5694 %5785
%5709:	phi	 %5687 %5719
%5710:	phi	 XXX %5786
%5711:	phi	 %5690 %5787
%5712:	phi	 XXX %5722
%5713:	phi	 %5685 %5765
%5714:	phi	 XXX %5788
%5715:	phi	 XXX %5789
%5716:	br	 resetbuf

BASIC BLOCK resetbuf
%5717:	phi	 %5707 %5815 XXX
%5718:	phi	 %5708 %5785 XXX
%5719:	phi	 %5709 %5817 %5868
%5720:	phi	 %5710 %5786 %5786
%5721:	phi	 %5711 %5805 %5866
%5722:	phi	 %5712 %5806 XXX
%5723:	phi	 %5713 %5765 %5765
%5724:	phi	 %5714 %5788 %5788
%5725:	phi	 %5715 %5789 %5789
%5726:	load	 insize
%5727:	ashr	 %5721 XXX
%5728:	trunc	 %5727
%5729:	sub	 %5726 %5728
%5730:	br	 for.cond30

BASIC BLOCK for.cond30
%5731:	phi	 XXX %5742
%5732:	icmp	 %5731 %5729
%5733:	br	 %5732 for.end40 for.body33

BASIC BLOCK for.body33
%5734:	add	 %5731 %5728
%5735:	sext	 %5734
%5736:	getelementptr	 inbuf XXX %5735
%5737:	load	 %5736
%5738:	sext	 %5731
%5739:	getelementptr	 inbuf XXX %5738
%5740:	store	 %5737 %5739
%5741:	br	 for.inc38

BASIC BLOCK for.inc38
%5742:	add	 %5731 XXX
%5743:	br	 for.cond30

BASIC BLOCK for.end40
%5744:	store	 %5729 insize
%5745:	load	 insize
%5746:	icmp	 %5745 XXX
%5747:	br	 %5746 if.end53 if.then43

BASIC BLOCK if.then43
%5748:	load	 insize
%5749:	zext	 %5748
%5750:	getelementptr	 XXX %5749
%5751:	call	 in %5750 XXX read
%5752:	trunc	 %5751
%5753:	icmp	 %5752 XXX
%5754:	br	 %5753 if.end49 if.then48

BASIC BLOCK if.then48
%5755:	call	 read_error
%5756:	br	 if.end49

BASIC BLOCK if.end49
%5757:	load	 insize
%5758:	add	 %5757 %5752
%5759:	store	 %5758 insize
%5760:	sext	 %5752
%5761:	load	 bytes_in
%5762:	add	 %5761 %5760
%5763:	store	 %5762 bytes_in
%5764:	br	 if.end53

BASIC BLOCK if.end53
%5765:	phi	 %5752 %5723
%5766:	icmp	 %5765 XXX
%5767:	br	 %5766 cond.false61 cond.true56

BASIC BLOCK cond.true56
%5768:	load	 insize
%5769:	zext	 %5768
%5770:	load	 insize
%5771:	urem	 %5770 %5722
%5772:	zext	 %5771
%5773:	sub	 %5769 %5772
%5774:	shl	 %5773 XXX
%5775:	br	 cond.end67

BASIC BLOCK cond.false61
%5776:	load	 insize
%5777:	zext	 %5776
%5778:	shl	 %5777 XXX
%5779:	sub	 %5722 XXX
%5780:	sext	 %5779
%5781:	sub	 %5778 %5780
%5782:	br	 cond.end67

BASIC BLOCK cond.end67
%5783:	phi	 %5774 %5781
%5784:	br	 while.cond

BASIC BLOCK while.cond
%5785:	phi	 %5718 %5785 %5976
%5786:	phi	 %5720 %5844 %5965
%5787:	phi	 XXX %5839 %5839
%5788:	phi	 %5724 %5837 %5837
%5789:	phi	 %5725 %5842 %5908
%5790:	icmp	 %5783 %5787
%5791:	br	 %5790 while.end223 while.body

BASIC BLOCK while.body
%5792:	icmp	 %5785 %5717
%5793:	br	 %5792 if.end96 if.then73

BASIC BLOCK if.then73
%5794:	sub	 %5787 XXX
%5795:	shl	 %5722 XXX
%5796:	sext	 %5795
%5797:	sub	 %5787 XXX
%5798:	shl	 %5722 XXX
%5799:	sext	 %5798
%5800:	add	 %5797 %5799
%5801:	shl	 %5722 XXX
%5802:	sext	 %5801
%5803:	srem	 %5800 %5802
%5804:	sub	 %5796 %5803
%5805:	add	 %5794 %5804
%5806:	add	 %5722 XXX
%5807:	load	 maxbits
%5808:	icmp	 %5806 %5807
%5809:	br	 %5808 if.else if.then89

BASIC BLOCK if.then89
%5810:	br	 if.end93

BASIC BLOCK if.else
%5811:	zext	 %5806
%5812:	shl	 XXX %5811
%5813:	sub	 %5812 XXX
%5814:	br	 if.end93

BASIC BLOCK if.end93
%5815:	phi	 %5675 %5813
%5816:	shl	 XXX %5806
%5817:	sub	 %5816 XXX
%5818:	br	 resetbuf

BASIC BLOCK if.end96
%5819:	ashr	 %5787 XXX
%5820:	getelementptr	 inbuf XXX %5819
%5821:	getelementptr	 %5820 XXX
%5822:	load	 %5821
%5823:	zext	 %5822
%5824:	getelementptr	 %5820 XXX
%5825:	load	 %5824
%5826:	zext	 %5825
%5827:	shl	 %5826 XXX
%5828:	or	 %5823 %5827
%5829:	getelementptr	 %5820 XXX
%5830:	load	 %5829
%5831:	zext	 %5830
%5832:	shl	 %5831 XXX
%5833:	or	 %5828 %5832
%5834:	and	 %5787 XXX
%5835:	ashr	 %5833 %5834
%5836:	zext	 %5719
%5837:	and	 %5835 %5836
%5838:	sext	 %5722
%5839:	add	 %5787 %5838
%5840:	icmp	 %5788 XXX
%5841:	br	 %5840 if.end122 if.then116

BASIC BLOCK if.then116
%5842:	trunc	 %5837
%5843:	trunc	 %5842
%5844:	add	 %5786 XXX
%5845:	sext	 %5786
%5846:	getelementptr	 outbuf XXX %5845
%5847:	store	 %5843 %5846
%5848:	br	 while.cond

BASIC BLOCK if.end122
%5849:	icmp	 %5837 XXX
%5850:	br	 %5849 if.end141 land.lhs.true

BASIC BLOCK land.lhs.true
%5851:	load	 block_mode
%5852:	icmp	 %5851 XXX
%5853:	br	 %5852 if.end141 if.then126

BASIC BLOCK if.then126
%5854:	call	 XXX XXX XXX XXX XXX llvm.memset.p0i8.i64
%5855:	sub	 %5839 XXX
%5856:	shl	 %5722 XXX
%5857:	sext	 %5856
%5858:	sub	 %5839 XXX
%5859:	shl	 %5722 XXX
%5860:	sext	 %5859
%5861:	add	 %5858 %5860
%5862:	shl	 %5722 XXX
%5863:	sext	 %5862
%5864:	srem	 %5861 %5863
%5865:	sub	 %5857 %5864
%5866:	add	 %5855 %5865
%5867:	shl	 XXX XXX
%5868:	sub	 %5867 XXX
%5869:	br	 resetbuf

BASIC BLOCK if.end141
%5870:	icmp	 %5837 %5785
%5871:	br	 %5870 if.end158 if.then144

BASIC BLOCK if.then144
%5872:	icmp	 %5837 %5785
%5873:	br	 %5872 if.end156 if.then147

BASIC BLOCK if.then147
%5874:	load	 test
%5875:	icmp	 %5874 XXX
%5876:	br	 %5875 land.lhs.true149 if.end155

BASIC BLOCK land.lhs.true149
%5877:	icmp	 %5786 XXX
%5878:	br	 %5877 if.end155 if.then152

BASIC BLOCK if.then152
%5879:	call	 out XXX %5786 write_buf
%5880:	sext	 %5786
%5881:	load	 bytes_out
%5882:	add	 %5881 %5880
%5883:	store	 %5882 bytes_out
%5884:	br	 if.end155

BASIC BLOCK if.end155
%5885:	call	 XXX error
%5886:	br	 if.end156

BASIC BLOCK if.end156
%5887:	trunc	 %5789
%5888:	getelementptr	 XXX XXX
%5889:	store	 %5887 %5888
%5890:	br	 if.end158

BASIC BLOCK if.end158
%5891:	phi	 %5788 %5837
%5892:	phi	 %5888 XXX
%5893:	br	 while.cond159

BASIC BLOCK while.cond159
%5894:	phi	 %5891 %5904
%5895:	phi	 %5892 %5900
%5896:	icmp	 %5894 XXX
%5897:	br	 %5896 while.end while.body162

BASIC BLOCK while.body162
%5898:	getelementptr	 window XXX %5894
%5899:	load	 %5898
%5900:	getelementptr	 %5895 XXX
%5901:	store	 %5899 %5900
%5902:	getelementptr	 prev XXX %5894
%5903:	load	 %5902
%5904:	zext	 %5903
%5905:	br	 while.cond159

BASIC BLOCK while.end
%5906:	getelementptr	 window XXX %5894
%5907:	load	 %5906
%5908:	zext	 %5907
%5909:	trunc	 %5908
%5910:	getelementptr	 %5895 XXX
%5911:	store	 %5909 %5910
%5912:	ptrtoint	 %5910
%5913:	sub	 XXX %5912
%5914:	trunc	 %5913
%5915:	add	 %5786 %5914
%5916:	icmp	 %5915 XXX
%5917:	br	 %5916 if.else208 if.then176

BASIC BLOCK if.then176
%5918:	br	 do.body177

BASIC BLOCK do.body177
%5919:	phi	 %5786 %5949
%5920:	phi	 %5910 %5951
%5921:	phi	 %5914 %5955
%5922:	sub	 XXX %5919
%5923:	icmp	 %5921 %5922
%5924:	br	 %5923 if.end183 if.then181

BASIC BLOCK if.then181
%5925:	sub	 XXX %5919
%5926:	br	 if.end183

BASIC BLOCK if.end183
%5927:	phi	 %5925 %5921
%5928:	icmp	 %5927 XXX
%5929:	br	 %5928 if.end191 if.then186

BASIC BLOCK if.then186
%5930:	sext	 %5919
%5931:	getelementptr	 XXX %5930
%5932:	sext	 %5927
%5933:	call	 %5931 %5920 %5932 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%5934:	add	 %5919 %5927
%5935:	br	 if.end191

BASIC BLOCK if.end191
%5936:	phi	 %5934 %5919
%5937:	icmp	 %5936 XXX
%5938:	br	 %5937 if.end200 if.then194

BASIC BLOCK if.then194
%5939:	load	 test
%5940:	icmp	 %5939 XXX
%5941:	br	 %5940 if.then196 if.end199

BASIC BLOCK if.then196
%5942:	call	 out XXX %5936 write_buf
%5943:	sext	 %5936
%5944:	load	 bytes_out
%5945:	add	 %5944 %5943
%5946:	store	 %5945 bytes_out
%5947:	br	 if.end199

BASIC BLOCK if.end199
%5948:	br	 if.end200

BASIC BLOCK if.end200
%5949:	phi	 XXX %5936
%5950:	sext	 %5927
%5951:	getelementptr	 %5920 %5950
%5952:	br	 do.cond

BASIC BLOCK do.cond
%5953:	ptrtoint	 %5951
%5954:	sub	 XXX %5953
%5955:	trunc	 %5954
%5956:	icmp	 %5955 XXX
%5957:	br	 %5956 do.end do.body177

BASIC BLOCK do.end
%5958:	br	 if.end213

BASIC BLOCK if.else208
%5959:	sext	 %5786
%5960:	getelementptr	 XXX %5959
%5961:	sext	 %5914
%5962:	call	 %5960 %5910 %5961 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%5963:	add	 %5786 %5914
%5964:	br	 if.end213

BASIC BLOCK if.end213
%5965:	phi	 %5949 %5963
%5966:	icmp	 %5785 %5675
%5967:	br	 %5966 if.end222 if.then216

BASIC BLOCK if.then216
%5968:	trunc	 %5788
%5969:	getelementptr	 prev XXX %5785
%5970:	store	 %5968 %5969
%5971:	trunc	 %5908
%5972:	getelementptr	 window XXX %5785
%5973:	store	 %5971 %5972
%5974:	add	 %5785 XXX
%5975:	br	 if.end222

BASIC BLOCK if.end222
%5976:	phi	 %5974 %5785
%5977:	br	 while.cond

BASIC BLOCK while.end223
%5978:	br	 do.cond224

BASIC BLOCK do.cond224
%5979:	icmp	 %5765 XXX
%5980:	br	 %5979 do.end227 do.body

BASIC BLOCK do.end227
%5981:	load	 test
%5982:	icmp	 %5981 XXX
%5983:	br	 %5982 land.lhs.true229 if.end235

BASIC BLOCK land.lhs.true229
%5984:	icmp	 %5786 XXX
%5985:	br	 %5984 if.end235 if.then232

BASIC BLOCK if.then232
%5986:	call	 out XXX %5786 write_buf
%5987:	sext	 %5786
%5988:	load	 bytes_out
%5989:	add	 %5988 %5987
%5990:	store	 %5989 bytes_out
%5991:	br	 if.end235

BASIC BLOCK if.end235
%5992:	br	 return

BASIC BLOCK return
%5993:	phi	 XXX XXX
%5994:	ret	 %5993

FUNCTION read_error

BASIC BLOCK entry
%5995:	load	 stderr
%5996:	load	 progname
%5997:	call	 %5995 XXX %5996 fprintf
%5998:	call	 __errno_location
%5999:	load	 %5998
%6000:	icmp	 %5999 XXX
%6001:	br	 %6000 if.else if.then

BASIC BLOCK if.then
%6002:	call	 XXX perror
%6003:	br	 if.end

BASIC BLOCK if.else
%6004:	load	 stderr
%6005:	call	 %6004 XXX XXX fprintf
%6006:	br	 if.end

BASIC BLOCK if.end
%6007:	call	 abort_gzip
%6008:	ret	

FUNCTION write_buf

BASIC BLOCK entry
%6009:	br	 while.cond

BASIC BLOCK while.cond
%6010:	phi	 buf %6023
%6011:	phi	 cnt %6021
%6012:	zext	 %6011
%6013:	call	 fd %6010 %6012 write
%6014:	trunc	 %6013
%6015:	icmp	 %6014 %6011
%6016:	br	 %6015 while.end while.body

BASIC BLOCK while.body
%6017:	icmp	 %6014 XXX
%6018:	br	 %6017 if.end if.then

BASIC BLOCK if.then
%6019:	call	 write_error
%6020:	br	 if.end

BASIC BLOCK if.end
%6021:	sub	 %6011 %6014
%6022:	zext	 %6014
%6023:	getelementptr	 %6010 %6022
%6024:	br	 while.cond

BASIC BLOCK while.end
%6025:	ret	

FUNCTION unpack

BASIC BLOCK entry
%6026:	store	 in ifd
%6027:	store	 out ofd
%6028:	call	 read_tree
%6029:	call	 un_build_tree
%6030:	store	 XXX valid
%6031:	store	 XXX bitbuf
%6032:	load	 peek_bits
%6033:	shl	 XXX %6032
%6034:	sub	 %6033 XXX
%6035:	load	 max_len
%6036:	sext	 %6035
%6037:	getelementptr	 leaves XXX %6036
%6038:	load	 %6037
%6039:	sub	 %6038 XXX
%6040:	br	 for.cond

BASIC BLOCK for.cond
%6041:	br	 while.cond

BASIC BLOCK while.cond
%6042:	load	 valid
%6043:	load	 peek_bits
%6044:	icmp	 %6042 %6043
%6045:	br	 %6044 while.end while.body

BASIC BLOCK while.body
%6046:	load	 bitbuf
%6047:	shl	 %6046 XXX
%6048:	load	 inptr
%6049:	load	 insize
%6050:	icmp	 %6048 %6049
%6051:	br	 %6050 cond.false cond.true

BASIC BLOCK cond.true
%6052:	load	 inptr
%6053:	add	 %6052 XXX
%6054:	store	 %6053 inptr
%6055:	zext	 %6052
%6056:	getelementptr	 inbuf XXX %6055
%6057:	load	 %6056
%6058:	zext	 %6057
%6059:	br	 cond.end

BASIC BLOCK cond.false
%6060:	call	 fill_inbuf
%6061:	br	 cond.end

BASIC BLOCK cond.end
%6062:	phi	 %6058 %6060
%6063:	sext	 %6062
%6064:	or	 %6047 %6063
%6065:	store	 %6064 bitbuf
%6066:	load	 valid
%6067:	add	 %6066 XXX
%6068:	store	 %6067 valid
%6069:	br	 while.cond

BASIC BLOCK while.end
%6070:	load	 bitbuf
%6071:	load	 valid
%6072:	load	 peek_bits
%6073:	sub	 %6071 %6072
%6074:	zext	 %6073
%6075:	lshr	 %6070 %6074
%6076:	zext	 %6034
%6077:	and	 %6075 %6076
%6078:	trunc	 %6077
%6079:	zext	 %6078
%6080:	getelementptr	 prefix_len XXX %6079
%6081:	load	 %6080
%6082:	zext	 %6081
%6083:	icmp	 %6082 XXX
%6084:	br	 %6083 if.else if.then

BASIC BLOCK if.then
%6085:	load	 peek_bits
%6086:	sub	 %6085 %6082
%6087:	lshr	 %6078 %6086
%6088:	br	 if.end

BASIC BLOCK if.else
%6089:	zext	 %6034
%6090:	load	 peek_bits
%6091:	br	 do.body

BASIC BLOCK do.body
%6092:	phi	 %6090 %6094
%6093:	phi	 %6089 %6096
%6094:	add	 %6092 XXX
%6095:	shl	 %6093 XXX
%6096:	add	 %6095 XXX
%6097:	br	 while.cond21

BASIC BLOCK while.cond21
%6098:	load	 valid
%6099:	icmp	 %6098 %6094
%6100:	br	 %6099 while.end40 while.body24

BASIC BLOCK while.body24
%6101:	load	 bitbuf
%6102:	shl	 %6101 XXX
%6103:	load	 inptr
%6104:	load	 insize
%6105:	icmp	 %6103 %6104
%6106:	br	 %6105 cond.false33 cond.true28

BASIC BLOCK cond.true28
%6107:	load	 inptr
%6108:	add	 %6107 XXX
%6109:	store	 %6108 inptr
%6110:	zext	 %6107
%6111:	getelementptr	 inbuf XXX %6110
%6112:	load	 %6111
%6113:	zext	 %6112
%6114:	br	 cond.end35

BASIC BLOCK cond.false33
%6115:	call	 fill_inbuf
%6116:	br	 cond.end35

BASIC BLOCK cond.end35
%6117:	phi	 %6113 %6115
%6118:	sext	 %6117
%6119:	or	 %6102 %6118
%6120:	store	 %6119 bitbuf
%6121:	load	 valid
%6122:	add	 %6121 XXX
%6123:	store	 %6122 valid
%6124:	br	 while.cond21

BASIC BLOCK while.end40
%6125:	load	 bitbuf
%6126:	load	 valid
%6127:	sub	 %6126 %6094
%6128:	zext	 %6127
%6129:	lshr	 %6125 %6128
%6130:	and	 %6129 %6096
%6131:	trunc	 %6130
%6132:	br	 do.cond

BASIC BLOCK do.cond
%6133:	sext	 %6094
%6134:	getelementptr	 parents XXX %6133
%6135:	load	 %6134
%6136:	icmp	 %6131 %6135
%6137:	br	 %6136 do.end do.body

BASIC BLOCK do.end
%6138:	br	 if.end

BASIC BLOCK if.end
%6139:	phi	 %6082 %6094
%6140:	phi	 %6087 %6131
%6141:	icmp	 %6140 %6039
%6142:	br	 %6141 if.end55 land.lhs.true

BASIC BLOCK land.lhs.true
%6143:	load	 max_len
%6144:	icmp	 %6139 %6143
%6145:	br	 %6144 if.end55 if.then54

BASIC BLOCK if.then54
%6146:	br	 for.end

BASIC BLOCK if.end55
%6147:	sext	 %6139
%6148:	getelementptr	 lit_base XXX %6147
%6149:	load	 %6148
%6150:	add	 %6140 %6149
%6151:	zext	 %6150
%6152:	getelementptr	 literal XXX %6151
%6153:	load	 %6152
%6154:	load	 outcnt
%6155:	add	 %6154 XXX
%6156:	store	 %6155 outcnt
%6157:	zext	 %6154
%6158:	getelementptr	 window XXX %6157
%6159:	store	 %6153 %6158
%6160:	load	 outcnt
%6161:	icmp	 %6160 XXX
%6162:	br	 %6161 if.end67 if.then66

BASIC BLOCK if.then66
%6163:	call	 flush_window
%6164:	br	 if.end67

BASIC BLOCK if.end67
%6165:	load	 valid
%6166:	sub	 %6165 %6139
%6167:	store	 %6166 valid
%6168:	br	 for.cond

BASIC BLOCK for.end
%6169:	call	 flush_window
%6170:	load	 orig_len
%6171:	load	 bytes_out
%6172:	icmp	 %6170 %6171
%6173:	br	 %6172 if.end72 if.then71

BASIC BLOCK if.then71
%6174:	call	 XXX error
%6175:	br	 if.end72

BASIC BLOCK if.end72
%6176:	ret	 XXX

FUNCTION read_tree

BASIC BLOCK entry
%6177:	store	 XXX orig_len
%6178:	br	 for.cond

BASIC BLOCK for.cond
%6179:	phi	 XXX %6203
%6180:	icmp	 %6179 XXX
%6181:	br	 %6180 for.end for.body

BASIC BLOCK for.body
%6182:	load	 orig_len
%6183:	shl	 %6182 XXX
%6184:	load	 inptr
%6185:	load	 insize
%6186:	icmp	 %6184 %6185
%6187:	br	 %6186 cond.false cond.true

BASIC BLOCK cond.true
%6188:	load	 inptr
%6189:	add	 %6188 XXX
%6190:	store	 %6189 inptr
%6191:	zext	 %6188
%6192:	getelementptr	 inbuf XXX %6191
%6193:	load	 %6192
%6194:	zext	 %6193
%6195:	br	 cond.end

BASIC BLOCK cond.false
%6196:	call	 fill_inbuf
%6197:	br	 cond.end

BASIC BLOCK cond.end
%6198:	phi	 %6194 %6196
%6199:	sext	 %6198
%6200:	or	 %6183 %6199
%6201:	store	 %6200 orig_len
%6202:	br	 for.inc

BASIC BLOCK for.inc
%6203:	add	 %6179 XXX
%6204:	br	 for.cond

BASIC BLOCK for.end
%6205:	load	 inptr
%6206:	load	 insize
%6207:	icmp	 %6205 %6206
%6208:	br	 %6207 cond.false11 cond.true6

BASIC BLOCK cond.true6
%6209:	load	 inptr
%6210:	add	 %6209 XXX
%6211:	store	 %6210 inptr
%6212:	zext	 %6209
%6213:	getelementptr	 inbuf XXX %6212
%6214:	load	 %6213
%6215:	zext	 %6214
%6216:	br	 cond.end13

BASIC BLOCK cond.false11
%6217:	call	 fill_inbuf
%6218:	br	 cond.end13

BASIC BLOCK cond.end13
%6219:	phi	 %6215 %6217
%6220:	store	 %6219 max_len
%6221:	load	 max_len
%6222:	icmp	 %6221 XXX
%6223:	br	 %6222 if.end if.then

BASIC BLOCK if.then
%6224:	call	 XXX error
%6225:	br	 if.end

BASIC BLOCK if.end
%6226:	br	 for.cond17

BASIC BLOCK for.cond17
%6227:	phi	 XXX %6253
%6228:	phi	 XXX %6255
%6229:	load	 max_len
%6230:	icmp	 %6228 %6229
%6231:	br	 %6230 for.end38 for.body20

BASIC BLOCK for.body20
%6232:	load	 inptr
%6233:	load	 insize
%6234:	icmp	 %6232 %6233
%6235:	br	 %6234 cond.false28 cond.true23

BASIC BLOCK cond.true23
%6236:	load	 inptr
%6237:	add	 %6236 XXX
%6238:	store	 %6237 inptr
%6239:	zext	 %6236
%6240:	getelementptr	 inbuf XXX %6239
%6241:	load	 %6240
%6242:	zext	 %6241
%6243:	br	 cond.end30

BASIC BLOCK cond.false28
%6244:	call	 fill_inbuf
%6245:	br	 cond.end30

BASIC BLOCK cond.end30
%6246:	phi	 %6242 %6244
%6247:	sext	 %6228
%6248:	getelementptr	 leaves XXX %6247
%6249:	store	 %6246 %6248
%6250:	sext	 %6228
%6251:	getelementptr	 leaves XXX %6250
%6252:	load	 %6251
%6253:	add	 %6227 %6252
%6254:	br	 for.inc36

BASIC BLOCK for.inc36
%6255:	add	 %6228 XXX
%6256:	br	 for.cond17

BASIC BLOCK for.end38
%6257:	icmp	 %6227 XXX
%6258:	br	 %6257 if.end42 if.then41

BASIC BLOCK if.then41
%6259:	call	 XXX error
%6260:	br	 if.end42

BASIC BLOCK if.end42
%6261:	load	 max_len
%6262:	sext	 %6261
%6263:	getelementptr	 leaves XXX %6262
%6264:	load	 %6263
%6265:	add	 %6264 XXX
%6266:	store	 %6265 %6263
%6267:	br	 for.cond46

BASIC BLOCK for.cond46
%6268:	phi	 XXX %6281
%6269:	phi	 XXX %6308
%6270:	load	 max_len
%6271:	icmp	 %6269 %6270
%6272:	br	 %6271 for.end77 for.body49

BASIC BLOCK for.body49
%6273:	sext	 %6269
%6274:	getelementptr	 lit_base XXX %6273
%6275:	store	 %6268 %6274
%6276:	sext	 %6269
%6277:	getelementptr	 leaves XXX %6276
%6278:	load	 %6277
%6279:	br	 for.cond54

BASIC BLOCK for.cond54
%6280:	phi	 %6278 %6305
%6281:	phi	 %6268 %6300
%6282:	icmp	 %6280 XXX
%6283:	br	 %6282 for.end74 for.body57

BASIC BLOCK for.body57
%6284:	load	 inptr
%6285:	load	 insize
%6286:	icmp	 %6284 %6285
%6287:	br	 %6286 cond.false65 cond.true60

BASIC BLOCK cond.true60
%6288:	load	 inptr
%6289:	add	 %6288 XXX
%6290:	store	 %6289 inptr
%6291:	zext	 %6288
%6292:	getelementptr	 inbuf XXX %6291
%6293:	load	 %6292
%6294:	zext	 %6293
%6295:	br	 cond.end67

BASIC BLOCK cond.false65
%6296:	call	 fill_inbuf
%6297:	br	 cond.end67

BASIC BLOCK cond.end67
%6298:	phi	 %6294 %6296
%6299:	trunc	 %6298
%6300:	add	 %6281 XXX
%6301:	sext	 %6281
%6302:	getelementptr	 literal XXX %6301
%6303:	store	 %6299 %6302
%6304:	br	 for.inc73

BASIC BLOCK for.inc73
%6305:	add	 %6280 XXX
%6306:	br	 for.cond54

BASIC BLOCK for.end74
%6307:	br	 for.inc75

BASIC BLOCK for.inc75
%6308:	add	 %6269 XXX
%6309:	br	 for.cond46

BASIC BLOCK for.end77
%6310:	load	 max_len
%6311:	sext	 %6310
%6312:	getelementptr	 leaves XXX %6311
%6313:	load	 %6312
%6314:	add	 %6313 XXX
%6315:	store	 %6314 %6312
%6316:	ret	

FUNCTION un_build_tree

BASIC BLOCK entry
%6317:	load	 max_len
%6318:	br	 for.cond

BASIC BLOCK for.cond
%6319:	phi	 %6317 %6337
%6320:	phi	 XXX %6335
%6321:	icmp	 %6319 XXX
%6322:	br	 %6321 for.end for.body

BASIC BLOCK for.body
%6323:	ashr	 %6320 XXX
%6324:	sext	 %6319
%6325:	getelementptr	 parents XXX %6324
%6326:	store	 %6323 %6325
%6327:	sext	 %6319
%6328:	getelementptr	 lit_base XXX %6327
%6329:	load	 %6328
%6330:	sub	 %6329 %6323
%6331:	store	 %6330 %6328
%6332:	sext	 %6319
%6333:	getelementptr	 leaves XXX %6332
%6334:	load	 %6333
%6335:	add	 %6323 %6334
%6336:	br	 for.inc

BASIC BLOCK for.inc
%6337:	add	 %6319 XXX
%6338:	br	 for.cond

BASIC BLOCK for.end
%6339:	load	 max_len
%6340:	icmp	 %6339 XXX
%6341:	br	 %6340 cond.false cond.true

BASIC BLOCK cond.true
%6342:	load	 max_len
%6343:	br	 cond.end

BASIC BLOCK cond.false
%6344:	br	 cond.end

BASIC BLOCK cond.end
%6345:	phi	 %6342 XXX
%6346:	store	 %6345 peek_bits
%6347:	load	 peek_bits
%6348:	shl	 XXX %6347
%6349:	sext	 %6348
%6350:	getelementptr	 prefix_len XXX %6349
%6351:	br	 for.cond8

BASIC BLOCK for.cond8
%6352:	phi	 %6350 %6365
%6353:	phi	 XXX %6374
%6354:	load	 peek_bits
%6355:	icmp	 %6353 %6354
%6356:	br	 %6355 for.end17 for.body10

BASIC BLOCK for.body10
%6357:	sext	 %6353
%6358:	getelementptr	 leaves XXX %6357
%6359:	load	 %6358
%6360:	load	 peek_bits
%6361:	sub	 %6360 %6353
%6362:	shl	 %6359 %6361
%6363:	br	 while.cond

BASIC BLOCK while.cond
%6364:	phi	 %6362 %6366
%6365:	phi	 %6352 %6370
%6366:	add	 %6364 XXX
%6367:	icmp	 %6364 XXX
%6368:	br	 %6367 while.end while.body

BASIC BLOCK while.body
%6369:	trunc	 %6353
%6370:	getelementptr	 %6365 XXX
%6371:	store	 %6369 %6370
%6372:	br	 while.cond

BASIC BLOCK while.end
%6373:	br	 for.inc16

BASIC BLOCK for.inc16
%6374:	add	 %6353 XXX
%6375:	br	 for.cond8

BASIC BLOCK for.end17
%6376:	br	 while.cond18

BASIC BLOCK while.cond18
%6377:	phi	 %6352 %6380
%6378:	icmp	 %6377 XXX
%6379:	br	 %6378 while.end23 while.body21

BASIC BLOCK while.body21
%6380:	getelementptr	 %6377 XXX
%6381:	store	 XXX %6380
%6382:	br	 while.cond18

BASIC BLOCK while.end23
%6383:	ret	

FUNCTION check_zipfile

BASIC BLOCK entry
%6384:	load	 inptr
%6385:	zext	 %6384
%6386:	getelementptr	 XXX %6385
%6387:	store	 in ifd
%6388:	getelementptr	 %6386 XXX
%6389:	getelementptr	 %6388 XXX
%6390:	load	 %6389
%6391:	zext	 %6390
%6392:	zext	 %6391
%6393:	getelementptr	 %6386 XXX
%6394:	getelementptr	 %6393 XXX
%6395:	load	 %6394
%6396:	zext	 %6395
%6397:	zext	 %6396
%6398:	shl	 %6397 XXX
%6399:	or	 %6392 %6398
%6400:	add	 XXX %6399
%6401:	getelementptr	 %6386 XXX
%6402:	getelementptr	 %6401 XXX
%6403:	load	 %6402
%6404:	zext	 %6403
%6405:	zext	 %6404
%6406:	getelementptr	 %6386 XXX
%6407:	getelementptr	 %6406 XXX
%6408:	load	 %6407
%6409:	zext	 %6408
%6410:	zext	 %6409
%6411:	shl	 %6410 XXX
%6412:	or	 %6405 %6411
%6413:	add	 %6400 %6412
%6414:	load	 inptr
%6415:	add	 %6414 %6413
%6416:	store	 %6415 inptr
%6417:	load	 inptr
%6418:	load	 insize
%6419:	icmp	 %6417 %6418
%6420:	br	 %6419 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%6421:	getelementptr	 %6386 XXX
%6422:	load	 %6421
%6423:	zext	 %6422
%6424:	zext	 %6423
%6425:	getelementptr	 %6386 XXX
%6426:	load	 %6425
%6427:	zext	 %6426
%6428:	zext	 %6427
%6429:	shl	 %6428 XXX
%6430:	or	 %6424 %6429
%6431:	sext	 %6430
%6432:	getelementptr	 %6386 XXX
%6433:	getelementptr	 %6432 XXX
%6434:	load	 %6433
%6435:	zext	 %6434
%6436:	zext	 %6435
%6437:	getelementptr	 %6386 XXX
%6438:	getelementptr	 %6437 XXX
%6439:	load	 %6438
%6440:	zext	 %6439
%6441:	zext	 %6440
%6442:	shl	 %6441 XXX
%6443:	or	 %6436 %6442
%6444:	sext	 %6443
%6445:	shl	 %6444 XXX
%6446:	or	 %6431 %6445
%6447:	icmp	 %6446 XXX
%6448:	br	 %6447 if.end if.then

BASIC BLOCK if.then
%6449:	load	 stderr
%6450:	load	 progname
%6451:	call	 %6449 XXX %6450 XXX fprintf
%6452:	store	 XXX exit_code
%6453:	br	 return

BASIC BLOCK if.end
%6454:	getelementptr	 %6386 XXX
%6455:	load	 %6454
%6456:	zext	 %6455
%6457:	store	 %6456 method
%6458:	load	 method
%6459:	icmp	 %6458 XXX
%6460:	br	 %6459 if.end52 land.lhs.true

BASIC BLOCK land.lhs.true
%6461:	load	 method
%6462:	icmp	 %6461 XXX
%6463:	br	 %6462 if.end52 if.then50

BASIC BLOCK if.then50
%6464:	load	 stderr
%6465:	load	 progname
%6466:	call	 %6464 XXX %6465 XXX fprintf
%6467:	store	 XXX exit_code
%6468:	br	 return

BASIC BLOCK if.end52
%6469:	getelementptr	 %6386 XXX
%6470:	load	 %6469
%6471:	zext	 %6470
%6472:	and	 %6471 XXX
%6473:	store	 %6472 decrypt
%6474:	icmp	 %6472 XXX
%6475:	br	 %6474 if.end59 if.then57

BASIC BLOCK if.then57
%6476:	load	 stderr
%6477:	load	 progname
%6478:	call	 %6476 XXX %6477 XXX fprintf
%6479:	store	 XXX exit_code
%6480:	br	 return

BASIC BLOCK if.end59
%6481:	getelementptr	 %6386 XXX
%6482:	load	 %6481
%6483:	zext	 %6482
%6484:	and	 %6483 XXX
%6485:	icmp	 %6484 XXX
%6486:	zext	 %6485
%6487:	store	 %6486 ext_header
%6488:	store	 XXX pkzip
%6489:	br	 return

BASIC BLOCK return
%6490:	phi	 XXX XXX XXX XXX
%6491:	ret	 %6490

FUNCTION unzip

BASIC BLOCK entry
%6492:	alloca	 XXX
%6493:	store	 in ifd
%6494:	store	 out ofd
%6495:	call	 XXX XXX updcrc
%6496:	load	 pkzip
%6497:	icmp	 %6496 XXX
%6498:	br	 %6497 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%6499:	load	 ext_header
%6500:	icmp	 %6499 XXX
%6501:	br	 %6500 if.then if.end

BASIC BLOCK if.then
%6502:	load	 XXX
%6503:	zext	 %6502
%6504:	zext	 %6503
%6505:	load	 XXX
%6506:	zext	 %6505
%6507:	zext	 %6506
%6508:	shl	 %6507 XXX
%6509:	or	 %6504 %6508
%6510:	sext	 %6509
%6511:	load	 XXX
%6512:	zext	 %6511
%6513:	zext	 %6512
%6514:	load	 XXX
%6515:	zext	 %6514
%6516:	zext	 %6515
%6517:	shl	 %6516 XXX
%6518:	or	 %6513 %6517
%6519:	sext	 %6518
%6520:	shl	 %6519 XXX
%6521:	or	 %6510 %6520
%6522:	load	 XXX
%6523:	zext	 %6522
%6524:	zext	 %6523
%6525:	load	 XXX
%6526:	zext	 %6525
%6527:	zext	 %6526
%6528:	shl	 %6527 XXX
%6529:	or	 %6524 %6528
%6530:	sext	 %6529
%6531:	load	 XXX
%6532:	zext	 %6531
%6533:	zext	 %6532
%6534:	load	 XXX
%6535:	zext	 %6534
%6536:	zext	 %6535
%6537:	shl	 %6536 XXX
%6538:	or	 %6533 %6537
%6539:	sext	 %6538
%6540:	shl	 %6539 XXX
%6541:	or	 %6530 %6540
%6542:	br	 if.end

BASIC BLOCK if.end
%6543:	phi	 XXX %6541 XXX
%6544:	phi	 XXX %6521 XXX
%6545:	load	 method
%6546:	icmp	 %6545 XXX
%6547:	br	 %6546 if.else42 if.then32

BASIC BLOCK if.then32
%6548:	call	 inflate
%6549:	icmp	 %6548 XXX
%6550:	br	 %6549 if.else if.then36

BASIC BLOCK if.then36
%6551:	call	 XXX error
%6552:	br	 if.end41

BASIC BLOCK if.else
%6553:	icmp	 %6548 XXX
%6554:	br	 %6553 if.end40 if.then39

BASIC BLOCK if.then39
%6555:	call	 XXX error
%6556:	br	 if.end40

BASIC BLOCK if.end40
%6557:	br	 if.end41

BASIC BLOCK if.end41
%6558:	br	 if.end120

BASIC BLOCK if.else42
%6559:	load	 pkzip
%6560:	icmp	 %6559 XXX
%6561:	br	 %6560 if.else118 land.lhs.true44

BASIC BLOCK land.lhs.true44
%6562:	load	 method
%6563:	icmp	 %6562 XXX
%6564:	br	 %6563 if.else118 if.then47

BASIC BLOCK if.then47
%6565:	load	 XXX
%6566:	zext	 %6565
%6567:	zext	 %6566
%6568:	load	 XXX
%6569:	zext	 %6568
%6570:	zext	 %6569
%6571:	shl	 %6570 XXX
%6572:	or	 %6567 %6571
%6573:	sext	 %6572
%6574:	load	 XXX
%6575:	zext	 %6574
%6576:	zext	 %6575
%6577:	load	 XXX
%6578:	zext	 %6577
%6579:	zext	 %6578
%6580:	shl	 %6579 XXX
%6581:	or	 %6576 %6580
%6582:	sext	 %6581
%6583:	shl	 %6582 XXX
%6584:	or	 %6573 %6583
%6585:	load	 XXX
%6586:	zext	 %6585
%6587:	zext	 %6586
%6588:	load	 XXX
%6589:	zext	 %6588
%6590:	zext	 %6589
%6591:	shl	 %6590 XXX
%6592:	or	 %6587 %6591
%6593:	sext	 %6592
%6594:	load	 XXX
%6595:	zext	 %6594
%6596:	zext	 %6595
%6597:	load	 XXX
%6598:	zext	 %6597
%6599:	zext	 %6598
%6600:	shl	 %6599 XXX
%6601:	or	 %6596 %6600
%6602:	sext	 %6601
%6603:	shl	 %6602 XXX
%6604:	or	 %6593 %6603
%6605:	load	 decrypt
%6606:	icmp	 %6605 XXX
%6607:	select	 %6606 XXX XXX
%6608:	sext	 %6607
%6609:	sub	 %6604 %6608
%6610:	icmp	 %6584 %6609
%6611:	br	 %6610 if.end103 if.then85

BASIC BLOCK if.then85
%6612:	load	 stderr
%6613:	load	 XXX
%6614:	zext	 %6613
%6615:	zext	 %6614
%6616:	load	 XXX
%6617:	zext	 %6616
%6618:	zext	 %6617
%6619:	shl	 %6618 XXX
%6620:	or	 %6615 %6619
%6621:	sext	 %6620
%6622:	load	 XXX
%6623:	zext	 %6622
%6624:	zext	 %6623
%6625:	load	 XXX
%6626:	zext	 %6625
%6627:	zext	 %6626
%6628:	shl	 %6627 XXX
%6629:	or	 %6624 %6628
%6630:	sext	 %6629
%6631:	shl	 %6630 XXX
%6632:	or	 %6621 %6631
%6633:	call	 %6612 XXX %6584 %6632 fprintf
%6634:	call	 XXX error
%6635:	br	 if.end103

BASIC BLOCK if.end103
%6636:	br	 while.cond

BASIC BLOCK while.cond
%6637:	phi	 %6584 %6638
%6638:	add	 %6637 XXX
%6639:	icmp	 %6637 XXX
%6640:	br	 %6639 while.end while.body

BASIC BLOCK while.body
%6641:	load	 inptr
%6642:	load	 insize
%6643:	icmp	 %6641 %6642
%6644:	br	 %6643 cond.false cond.true

BASIC BLOCK cond.true
%6645:	load	 inptr
%6646:	add	 %6645 XXX
%6647:	store	 %6646 inptr
%6648:	zext	 %6645
%6649:	getelementptr	 inbuf XXX %6648
%6650:	load	 %6649
%6651:	zext	 %6650
%6652:	br	 cond.end

BASIC BLOCK cond.false
%6653:	call	 fill_inbuf
%6654:	br	 cond.end

BASIC BLOCK cond.end
%6655:	phi	 %6651 %6653
%6656:	trunc	 %6655
%6657:	load	 outcnt
%6658:	add	 %6657 XXX
%6659:	store	 %6658 outcnt
%6660:	zext	 %6657
%6661:	getelementptr	 window XXX %6660
%6662:	store	 %6656 %6661
%6663:	load	 outcnt
%6664:	icmp	 %6663 XXX
%6665:	br	 %6664 if.end117 if.then116

BASIC BLOCK if.then116
%6666:	call	 flush_window
%6667:	br	 if.end117

BASIC BLOCK if.end117
%6668:	br	 while.cond

BASIC BLOCK while.end
%6669:	call	 flush_window
%6670:	br	 if.end119

BASIC BLOCK if.else118
%6671:	call	 XXX error
%6672:	br	 if.end119

BASIC BLOCK if.end119
%6673:	br	 if.end120

BASIC BLOCK if.end120
%6674:	load	 pkzip
%6675:	icmp	 %6674 XXX
%6676:	br	 %6675 if.then122 if.else192

BASIC BLOCK if.then122
%6677:	br	 for.cond

BASIC BLOCK for.cond
%6678:	phi	 XXX %6701
%6679:	icmp	 %6678 XXX
%6680:	br	 %6679 for.end for.body

BASIC BLOCK for.body
%6681:	load	 inptr
%6682:	load	 insize
%6683:	icmp	 %6681 %6682
%6684:	br	 %6683 cond.false132 cond.true127

BASIC BLOCK cond.true127
%6685:	load	 inptr
%6686:	add	 %6685 XXX
%6687:	store	 %6686 inptr
%6688:	zext	 %6685
%6689:	getelementptr	 inbuf XXX %6688
%6690:	load	 %6689
%6691:	zext	 %6690
%6692:	br	 cond.end134

BASIC BLOCK cond.false132
%6693:	call	 fill_inbuf
%6694:	br	 cond.end134

BASIC BLOCK cond.end134
%6695:	phi	 %6691 %6693
%6696:	trunc	 %6695
%6697:	sext	 %6678
%6698:	getelementptr	 %6492 XXX %6697
%6699:	store	 %6696 %6698
%6700:	br	 for.inc

BASIC BLOCK for.inc
%6701:	add	 %6678 XXX
%6702:	br	 for.cond

BASIC BLOCK for.end
%6703:	getelementptr	 %6492 XXX XXX
%6704:	load	 %6703
%6705:	zext	 %6704
%6706:	zext	 %6705
%6707:	getelementptr	 %6492 XXX XXX
%6708:	load	 %6707
%6709:	zext	 %6708
%6710:	zext	 %6709
%6711:	shl	 %6710 XXX
%6712:	or	 %6706 %6711
%6713:	sext	 %6712
%6714:	getelementptr	 %6492 XXX XXX
%6715:	getelementptr	 %6714 XXX
%6716:	getelementptr	 %6715 XXX
%6717:	load	 %6716
%6718:	zext	 %6717
%6719:	zext	 %6718
%6720:	getelementptr	 %6492 XXX XXX
%6721:	getelementptr	 %6720 XXX
%6722:	getelementptr	 %6721 XXX
%6723:	load	 %6722
%6724:	zext	 %6723
%6725:	zext	 %6724
%6726:	shl	 %6725 XXX
%6727:	or	 %6719 %6726
%6728:	sext	 %6727
%6729:	shl	 %6728 XXX
%6730:	or	 %6713 %6729
%6731:	getelementptr	 %6492 XXX XXX
%6732:	getelementptr	 %6731 XXX
%6733:	getelementptr	 %6732 XXX
%6734:	load	 %6733
%6735:	zext	 %6734
%6736:	zext	 %6735
%6737:	getelementptr	 %6492 XXX XXX
%6738:	getelementptr	 %6737 XXX
%6739:	getelementptr	 %6738 XXX
%6740:	load	 %6739
%6741:	zext	 %6740
%6742:	zext	 %6741
%6743:	shl	 %6742 XXX
%6744:	or	 %6736 %6743
%6745:	sext	 %6744
%6746:	getelementptr	 %6492 XXX XXX
%6747:	getelementptr	 %6746 XXX
%6748:	getelementptr	 %6747 XXX
%6749:	getelementptr	 %6748 XXX
%6750:	load	 %6749
%6751:	zext	 %6750
%6752:	zext	 %6751
%6753:	getelementptr	 %6492 XXX XXX
%6754:	getelementptr	 %6753 XXX
%6755:	getelementptr	 %6754 XXX
%6756:	getelementptr	 %6755 XXX
%6757:	load	 %6756
%6758:	zext	 %6757
%6759:	zext	 %6758
%6760:	shl	 %6759 XXX
%6761:	or	 %6752 %6760
%6762:	sext	 %6761
%6763:	shl	 %6762 XXX
%6764:	or	 %6745 %6763
%6765:	br	 if.end277

BASIC BLOCK if.else192
%6766:	load	 ext_header
%6767:	icmp	 %6766 XXX
%6768:	br	 %6767 if.end276 if.then194

BASIC BLOCK if.then194
%6769:	br	 for.cond195

BASIC BLOCK for.cond195
%6770:	phi	 XXX %6793
%6771:	icmp	 %6770 XXX
%6772:	br	 %6771 for.end215 for.body198

BASIC BLOCK for.body198
%6773:	load	 inptr
%6774:	load	 insize
%6775:	icmp	 %6773 %6774
%6776:	br	 %6775 cond.false206 cond.true201

BASIC BLOCK cond.true201
%6777:	load	 inptr
%6778:	add	 %6777 XXX
%6779:	store	 %6778 inptr
%6780:	zext	 %6777
%6781:	getelementptr	 inbuf XXX %6780
%6782:	load	 %6781
%6783:	zext	 %6782
%6784:	br	 cond.end208

BASIC BLOCK cond.false206
%6785:	call	 fill_inbuf
%6786:	br	 cond.end208

BASIC BLOCK cond.end208
%6787:	phi	 %6783 %6785
%6788:	trunc	 %6787
%6789:	sext	 %6770
%6790:	getelementptr	 %6492 XXX %6789
%6791:	store	 %6788 %6790
%6792:	br	 for.inc213

BASIC BLOCK for.inc213
%6793:	add	 %6770 XXX
%6794:	br	 for.cond195

BASIC BLOCK for.end215
%6795:	getelementptr	 %6492 XXX XXX
%6796:	getelementptr	 %6795 XXX
%6797:	getelementptr	 %6796 XXX
%6798:	load	 %6797
%6799:	zext	 %6798
%6800:	zext	 %6799
%6801:	getelementptr	 %6492 XXX XXX
%6802:	getelementptr	 %6801 XXX
%6803:	getelementptr	 %6802 XXX
%6804:	load	 %6803
%6805:	zext	 %6804
%6806:	zext	 %6805
%6807:	shl	 %6806 XXX
%6808:	or	 %6800 %6807
%6809:	sext	 %6808
%6810:	getelementptr	 %6492 XXX XXX
%6811:	getelementptr	 %6810 XXX
%6812:	getelementptr	 %6811 XXX
%6813:	getelementptr	 %6812 XXX
%6814:	load	 %6813
%6815:	zext	 %6814
%6816:	zext	 %6815
%6817:	getelementptr	 %6492 XXX XXX
%6818:	getelementptr	 %6817 XXX
%6819:	getelementptr	 %6818 XXX
%6820:	getelementptr	 %6819 XXX
%6821:	load	 %6820
%6822:	zext	 %6821
%6823:	zext	 %6822
%6824:	shl	 %6823 XXX
%6825:	or	 %6816 %6824
%6826:	sext	 %6825
%6827:	shl	 %6826 XXX
%6828:	or	 %6809 %6827
%6829:	getelementptr	 %6492 XXX XXX
%6830:	getelementptr	 %6829 XXX
%6831:	getelementptr	 %6830 XXX
%6832:	load	 %6831
%6833:	zext	 %6832
%6834:	zext	 %6833
%6835:	getelementptr	 %6492 XXX XXX
%6836:	getelementptr	 %6835 XXX
%6837:	getelementptr	 %6836 XXX
%6838:	load	 %6837
%6839:	zext	 %6838
%6840:	zext	 %6839
%6841:	shl	 %6840 XXX
%6842:	or	 %6834 %6841
%6843:	sext	 %6842
%6844:	getelementptr	 %6492 XXX XXX
%6845:	getelementptr	 %6844 XXX
%6846:	getelementptr	 %6845 XXX
%6847:	getelementptr	 %6846 XXX
%6848:	load	 %6847
%6849:	zext	 %6848
%6850:	zext	 %6849
%6851:	getelementptr	 %6492 XXX XXX
%6852:	getelementptr	 %6851 XXX
%6853:	getelementptr	 %6852 XXX
%6854:	getelementptr	 %6853 XXX
%6855:	load	 %6854
%6856:	zext	 %6855
%6857:	zext	 %6856
%6858:	shl	 %6857 XXX
%6859:	or	 %6850 %6858
%6860:	sext	 %6859
%6861:	shl	 %6860 XXX
%6862:	or	 %6843 %6861
%6863:	br	 if.end276

BASIC BLOCK if.end276
%6864:	phi	 %6862 %6543
%6865:	phi	 %6828 %6544
%6866:	br	 if.end277

BASIC BLOCK if.end277
%6867:	phi	 %6864 %6764
%6868:	phi	 %6865 %6730
%6869:	call	 XXX XXX updcrc
%6870:	icmp	 %6868 %6869
%6871:	br	 %6870 if.end282 if.then281

BASIC BLOCK if.then281
%6872:	call	 XXX error
%6873:	br	 if.end282

BASIC BLOCK if.end282
%6874:	load	 bytes_out
%6875:	icmp	 %6867 %6874
%6876:	br	 %6875 if.end286 if.then285

BASIC BLOCK if.then285
%6877:	call	 XXX error
%6878:	br	 if.end286

BASIC BLOCK if.end286
%6879:	load	 pkzip
%6880:	icmp	 %6879 XXX
%6881:	br	 %6880 if.end337 land.lhs.true288

BASIC BLOCK land.lhs.true288
%6882:	load	 inptr
%6883:	add	 %6882 XXX
%6884:	load	 insize
%6885:	icmp	 %6883 %6884
%6886:	br	 %6885 if.end337 land.lhs.true291

BASIC BLOCK land.lhs.true291
%6887:	load	 inptr
%6888:	zext	 %6887
%6889:	getelementptr	 XXX %6888
%6890:	getelementptr	 %6889 XXX
%6891:	load	 %6890
%6892:	zext	 %6891
%6893:	zext	 %6892
%6894:	load	 inptr
%6895:	zext	 %6894
%6896:	getelementptr	 XXX %6895
%6897:	getelementptr	 %6896 XXX
%6898:	load	 %6897
%6899:	zext	 %6898
%6900:	zext	 %6899
%6901:	shl	 %6900 XXX
%6902:	or	 %6893 %6901
%6903:	sext	 %6902
%6904:	load	 inptr
%6905:	zext	 %6904
%6906:	getelementptr	 XXX %6905
%6907:	getelementptr	 %6906 XXX
%6908:	getelementptr	 %6907 XXX
%6909:	load	 %6908
%6910:	zext	 %6909
%6911:	zext	 %6910
%6912:	load	 inptr
%6913:	zext	 %6912
%6914:	getelementptr	 XXX %6913
%6915:	getelementptr	 %6914 XXX
%6916:	getelementptr	 %6915 XXX
%6917:	load	 %6916
%6918:	zext	 %6917
%6919:	zext	 %6918
%6920:	shl	 %6919 XXX
%6921:	or	 %6911 %6920
%6922:	sext	 %6921
%6923:	shl	 %6922 XXX
%6924:	or	 %6903 %6923
%6925:	icmp	 %6924 XXX
%6926:	br	 %6925 if.end337 if.then323

BASIC BLOCK if.then323
%6927:	load	 to_stdout
%6928:	icmp	 %6927 XXX
%6929:	br	 %6928 if.else334 if.then325

BASIC BLOCK if.then325
%6930:	load	 quiet
%6931:	icmp	 %6930 XXX
%6932:	br	 %6931 if.then327 if.end329

BASIC BLOCK if.then327
%6933:	load	 stderr
%6934:	load	 progname
%6935:	call	 %6933 XXX %6934 XXX fprintf
%6936:	br	 if.end329

BASIC BLOCK if.end329
%6937:	load	 exit_code
%6938:	icmp	 %6937 XXX
%6939:	br	 %6938 if.end333 if.then332

BASIC BLOCK if.then332
%6940:	store	 XXX exit_code
%6941:	br	 if.end333

BASIC BLOCK if.end333
%6942:	br	 if.end336

BASIC BLOCK if.else334
%6943:	load	 stderr
%6944:	load	 progname
%6945:	call	 %6943 XXX %6944 XXX fprintf
%6946:	store	 XXX exit_code
%6947:	store	 XXX pkzip
%6948:	store	 XXX ext_header
%6949:	br	 return

BASIC BLOCK if.end336
%6950:	br	 if.end337

BASIC BLOCK if.end337
%6951:	store	 XXX pkzip
%6952:	store	 XXX ext_header
%6953:	br	 return

BASIC BLOCK return
%6954:	phi	 XXX XXX
%6955:	ret	 %6954

FUNCTION updcrc

BASIC BLOCK entry
%6956:	icmp	 s XXX
%6957:	br	 %6956 if.else if.then

BASIC BLOCK if.then
%6958:	br	 if.end5

BASIC BLOCK if.else
%6959:	load	 updcrc.crc
%6960:	icmp	 n XXX
%6961:	br	 %6960 if.end if.then1

BASIC BLOCK if.then1
%6962:	br	 do.body

BASIC BLOCK do.body
%6963:	phi	 %6959 %6976
%6964:	phi	 n %6978
%6965:	phi	 s %6967
%6966:	trunc	 %6963
%6967:	getelementptr	 %6965 XXX
%6968:	load	 %6965
%6969:	zext	 %6968
%6970:	xor	 %6966 %6969
%6971:	and	 %6970 XXX
%6972:	sext	 %6971
%6973:	getelementptr	 XXX XXX %6972
%6974:	load	 %6973
%6975:	lshr	 %6963 XXX
%6976:	xor	 %6974 %6975
%6977:	br	 do.cond

BASIC BLOCK do.cond
%6978:	add	 %6964 XXX
%6979:	icmp	 %6978 XXX
%6980:	br	 %6979 do.end do.body

BASIC BLOCK do.end
%6981:	br	 if.end

BASIC BLOCK if.end
%6982:	phi	 %6976 %6959
%6983:	br	 if.end5

BASIC BLOCK if.end5
%6984:	phi	 XXX %6982
%6985:	store	 %6984 updcrc.crc
%6986:	xor	 %6984 XXX
%6987:	ret	 %6986

FUNCTION clear_bufs

BASIC BLOCK entry
%6988:	store	 XXX outcnt
%6989:	store	 XXX inptr
%6990:	store	 XXX insize
%6991:	store	 XXX bytes_out
%6992:	store	 XXX bytes_in
%6993:	ret	

FUNCTION write_error

BASIC BLOCK entry
%6994:	load	 stderr
%6995:	load	 progname
%6996:	call	 %6994 XXX %6995 fprintf
%6997:	call	 XXX perror
%6998:	call	 abort_gzip
%6999:	ret	

FUNCTION strlwr

BASIC BLOCK entry
%7000:	br	 for.cond

BASIC BLOCK for.cond
%7001:	phi	 s %7028
%7002:	load	 %7001
%7003:	icmp	 %7002 XXX
%7004:	br	 %7003 for.end for.body

BASIC BLOCK for.body
%7005:	load	 %7001
%7006:	sext	 %7005
%7007:	sext	 %7006
%7008:	call	 __ctype_b_loc
%7009:	load	 %7008
%7010:	getelementptr	 %7009 %7007
%7011:	load	 %7010
%7012:	zext	 %7011
%7013:	and	 %7012 XXX
%7014:	icmp	 %7013 XXX
%7015:	br	 %7014 cond.false cond.true

BASIC BLOCK cond.true
%7016:	load	 %7001
%7017:	sext	 %7016
%7018:	sub	 %7017 XXX
%7019:	add	 %7018 XXX
%7020:	br	 cond.end

BASIC BLOCK cond.false
%7021:	load	 %7001
%7022:	sext	 %7021
%7023:	br	 cond.end

BASIC BLOCK cond.end
%7024:	phi	 %7019 %7022
%7025:	trunc	 %7024
%7026:	store	 %7025 %7001
%7027:	br	 for.inc

BASIC BLOCK for.inc
%7028:	getelementptr	 %7001 XXX
%7029:	br	 for.cond

BASIC BLOCK for.end
%7030:	ret	 s

FUNCTION xmalloc

BASIC BLOCK entry
%7031:	zext	 size
%7032:	call	 %7031 malloc
%7033:	icmp	 %7032 XXX
%7034:	br	 %7033 if.end if.then

BASIC BLOCK if.then
%7035:	call	 XXX error
%7036:	br	 if.end

BASIC BLOCK if.end
%7037:	ret	 %7032

FUNCTION warn

BASIC BLOCK entry
%7038:	load	 quiet
%7039:	icmp	 %7038 XXX
%7040:	br	 %7039 if.then if.end

BASIC BLOCK if.then
%7041:	load	 stderr
%7042:	load	 progname
%7043:	call	 %7041 XXX %7042 XXX a b fprintf
%7044:	br	 if.end

BASIC BLOCK if.end
%7045:	load	 exit_code
%7046:	icmp	 %7045 XXX
%7047:	br	 %7046 if.end2 if.then1

BASIC BLOCK if.then1
%7048:	store	 XXX exit_code
%7049:	br	 if.end2

BASIC BLOCK if.end2
%7050:	ret	

FUNCTION display_ratio

BASIC BLOCK entry
%7051:	icmp	 den XXX
%7052:	br	 %7051 if.else if.then

BASIC BLOCK if.then
%7053:	br	 if.end6

BASIC BLOCK if.else
%7054:	icmp	 den XXX
%7055:	br	 %7054 if.else3 if.then2

BASIC BLOCK if.then2
%7056:	mul	 XXX num
%7057:	sdiv	 %7056 den
%7058:	br	 if.end

BASIC BLOCK if.else3
%7059:	sdiv	 den XXX
%7060:	sdiv	 num %7059
%7061:	br	 if.end

BASIC BLOCK if.end
%7062:	phi	 %7057 %7060
%7063:	br	 if.end6

BASIC BLOCK if.end6
%7064:	phi	 XXX %7062
%7065:	icmp	 %7064 XXX
%7066:	br	 %7065 if.end9 if.then8

BASIC BLOCK if.then8
%7067:	load	 stderr
%7068:	call	 XXX %7067 _IO_putc
%7069:	sub	 XXX %7064
%7070:	br	 if.end9

BASIC BLOCK if.end9
%7071:	phi	 %7069 %7064
%7072:	load	 stderr
%7073:	sdiv	 %7071 XXX
%7074:	srem	 %7071 XXX
%7075:	call	 %7072 XXX %7073 %7074 fprintf
%7076:	ret	

FUNCTION send_tree

BASIC BLOCK entry
%7077:	getelementptr	 tree XXX
%7078:	getelementptr	 %7077 XXX XXX
%7079:	bitcast	 %7078
%7080:	load	 %7079
%7081:	zext	 %7080
%7082:	icmp	 %7081 XXX
%7083:	br	 %7082 if.end if.then

BASIC BLOCK if.then
%7084:	br	 if.end

BASIC BLOCK if.end
%7085:	phi	 XXX XXX
%7086:	phi	 XXX XXX
%7087:	br	 for.cond

BASIC BLOCK for.cond
%7088:	phi	 %7081 %7102
%7089:	phi	 XXX %7193
%7090:	phi	 XXX %7194
%7091:	phi	 XXX %7197
%7092:	phi	 %7085 %7195
%7093:	phi	 %7086 %7196
%7094:	icmp	 %7091 max_code
%7095:	br	 %7094 for.end for.body

BASIC BLOCK for.body
%7096:	add	 %7091 XXX
%7097:	sext	 %7096
%7098:	getelementptr	 tree %7097
%7099:	getelementptr	 %7098 XXX XXX
%7100:	bitcast	 %7099
%7101:	load	 %7100
%7102:	zext	 %7101
%7103:	add	 %7089 XXX
%7104:	icmp	 %7103 %7092
%7105:	br	 %7104 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%7106:	icmp	 %7088 %7102
%7107:	br	 %7106 if.else if.then12

BASIC BLOCK if.then12
%7108:	br	 for.inc

BASIC BLOCK if.else
%7109:	icmp	 %7103 %7093
%7110:	br	 %7109 if.else26 if.then15

BASIC BLOCK if.then15
%7111:	br	 do.body

BASIC BLOCK do.body
%7112:	phi	 %7103 %7127
%7113:	sext	 %7088
%7114:	getelementptr	 bl_tree XXX %7113
%7115:	getelementptr	 %7114 XXX XXX
%7116:	bitcast	 %7115
%7117:	load	 %7116
%7118:	zext	 %7117
%7119:	sext	 %7088
%7120:	getelementptr	 bl_tree XXX %7119
%7121:	getelementptr	 %7120 XXX XXX
%7122:	bitcast	 %7121
%7123:	load	 %7122
%7124:	zext	 %7123
%7125:	call	 %7118 %7124 send_bits
%7126:	br	 do.cond

BASIC BLOCK do.cond
%7127:	add	 %7112 XXX
%7128:	icmp	 %7127 XXX
%7129:	br	 %7128 do.end do.body

BASIC BLOCK do.end
%7130:	br	 if.end60

BASIC BLOCK if.else26
%7131:	icmp	 %7088 XXX
%7132:	br	 %7131 if.else47 if.then29

BASIC BLOCK if.then29
%7133:	icmp	 %7088 %7090
%7134:	br	 %7133 if.end44 if.then32

BASIC BLOCK if.then32
%7135:	sext	 %7088
%7136:	getelementptr	 bl_tree XXX %7135
%7137:	getelementptr	 %7136 XXX XXX
%7138:	bitcast	 %7137
%7139:	load	 %7138
%7140:	zext	 %7139
%7141:	sext	 %7088
%7142:	getelementptr	 bl_tree XXX %7141
%7143:	getelementptr	 %7142 XXX XXX
%7144:	bitcast	 %7143
%7145:	load	 %7144
%7146:	zext	 %7145
%7147:	call	 %7140 %7146 send_bits
%7148:	add	 %7103 XXX
%7149:	br	 if.end44

BASIC BLOCK if.end44
%7150:	phi	 %7148 %7103
%7151:	load	 XXX
%7152:	zext	 %7151
%7153:	load	 XXX
%7154:	zext	 %7153
%7155:	call	 %7152 %7154 send_bits
%7156:	sub	 %7150 XXX
%7157:	call	 %7156 XXX send_bits
%7158:	br	 if.end59

BASIC BLOCK if.else47
%7159:	icmp	 %7103 XXX
%7160:	br	 %7159 if.else54 if.then50

BASIC BLOCK if.then50
%7161:	load	 XXX
%7162:	zext	 %7161
%7163:	load	 XXX
%7164:	zext	 %7163
%7165:	call	 %7162 %7164 send_bits
%7166:	sub	 %7103 XXX
%7167:	call	 %7166 XXX send_bits
%7168:	br	 if.end58

BASIC BLOCK if.else54
%7169:	load	 XXX
%7170:	zext	 %7169
%7171:	load	 XXX
%7172:	zext	 %7171
%7173:	call	 %7170 %7172 send_bits
%7174:	sub	 %7103 XXX
%7175:	call	 %7174 XXX send_bits
%7176:	br	 if.end58

BASIC BLOCK if.end58
%7177:	br	 if.end59

BASIC BLOCK if.end59
%7178:	br	 if.end60

BASIC BLOCK if.end60
%7179:	br	 if.end61

BASIC BLOCK if.end61
%7180:	icmp	 %7102 XXX
%7181:	br	 %7180 if.else65 if.then64

BASIC BLOCK if.then64
%7182:	br	 if.end71

BASIC BLOCK if.else65
%7183:	icmp	 %7088 %7102
%7184:	br	 %7183 if.else69 if.then68

BASIC BLOCK if.then68
%7185:	br	 if.end70

BASIC BLOCK if.else69
%7186:	br	 if.end70

BASIC BLOCK if.end70
%7187:	phi	 XXX XXX
%7188:	phi	 XXX XXX
%7189:	br	 if.end71

BASIC BLOCK if.end71
%7190:	phi	 XXX %7187
%7191:	phi	 XXX %7188
%7192:	br	 for.inc

BASIC BLOCK for.inc
%7193:	phi	 %7103 XXX
%7194:	phi	 %7090 %7088
%7195:	phi	 %7092 %7190
%7196:	phi	 %7093 %7191
%7197:	add	 %7091 XXX
%7198:	br	 for.cond

BASIC BLOCK for.end
%7199:	ret	

FUNCTION scan_tree

BASIC BLOCK entry
%7200:	getelementptr	 tree XXX
%7201:	getelementptr	 %7200 XXX XXX
%7202:	bitcast	 %7201
%7203:	load	 %7202
%7204:	zext	 %7203
%7205:	icmp	 %7204 XXX
%7206:	br	 %7205 if.end if.then

BASIC BLOCK if.then
%7207:	br	 if.end

BASIC BLOCK if.end
%7208:	phi	 XXX XXX
%7209:	phi	 XXX XXX
%7210:	add	 max_code XXX
%7211:	sext	 %7210
%7212:	getelementptr	 tree %7211
%7213:	getelementptr	 %7212 XXX XXX
%7214:	bitcast	 %7213
%7215:	store	 XXX %7214
%7216:	br	 for.cond

BASIC BLOCK for.cond
%7217:	phi	 %7204 %7231
%7218:	phi	 XXX %7292
%7219:	phi	 XXX %7293
%7220:	phi	 XXX %7296
%7221:	phi	 %7208 %7294
%7222:	phi	 %7209 %7295
%7223:	icmp	 %7220 max_code
%7224:	br	 %7223 for.end for.body

BASIC BLOCK for.body
%7225:	add	 %7220 XXX
%7226:	sext	 %7225
%7227:	getelementptr	 tree %7226
%7228:	getelementptr	 %7227 XXX XXX
%7229:	bitcast	 %7228
%7230:	load	 %7229
%7231:	zext	 %7230
%7232:	add	 %7218 XXX
%7233:	icmp	 %7232 %7221
%7234:	br	 %7233 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%7235:	icmp	 %7217 %7231
%7236:	br	 %7235 if.else if.then17

BASIC BLOCK if.then17
%7237:	br	 for.inc

BASIC BLOCK if.else
%7238:	icmp	 %7232 %7222
%7239:	br	 %7238 if.else26 if.then20

BASIC BLOCK if.then20
%7240:	sext	 %7217
%7241:	getelementptr	 bl_tree XXX %7240
%7242:	getelementptr	 %7241 XXX XXX
%7243:	bitcast	 %7242
%7244:	load	 %7243
%7245:	zext	 %7244
%7246:	add	 %7245 %7232
%7247:	trunc	 %7246
%7248:	store	 %7247 %7243
%7249:	br	 if.end49

BASIC BLOCK if.else26
%7250:	icmp	 %7217 XXX
%7251:	br	 %7250 if.else40 if.then29

BASIC BLOCK if.then29
%7252:	icmp	 %7217 %7219
%7253:	br	 %7252 if.end38 if.then32

BASIC BLOCK if.then32
%7254:	sext	 %7217
%7255:	getelementptr	 bl_tree XXX %7254
%7256:	getelementptr	 %7255 XXX XXX
%7257:	bitcast	 %7256
%7258:	load	 %7257
%7259:	add	 %7258 XXX
%7260:	store	 %7259 %7257
%7261:	br	 if.end38

BASIC BLOCK if.end38
%7262:	load	 XXX
%7263:	add	 %7262 XXX
%7264:	store	 %7263 XXX
%7265:	br	 if.end48

BASIC BLOCK if.else40
%7266:	icmp	 %7232 XXX
%7267:	br	 %7266 if.else45 if.then43

BASIC BLOCK if.then43
%7268:	load	 XXX
%7269:	add	 %7268 XXX
%7270:	store	 %7269 XXX
%7271:	br	 if.end47

BASIC BLOCK if.else45
%7272:	load	 XXX
%7273:	add	 %7272 XXX
%7274:	store	 %7273 XXX
%7275:	br	 if.end47

BASIC BLOCK if.end47
%7276:	br	 if.end48

BASIC BLOCK if.end48
%7277:	br	 if.end49

BASIC BLOCK if.end49
%7278:	br	 if.end50

BASIC BLOCK if.end50
%7279:	icmp	 %7231 XXX
%7280:	br	 %7279 if.else54 if.then53

BASIC BLOCK if.then53
%7281:	br	 if.end60

BASIC BLOCK if.else54
%7282:	icmp	 %7217 %7231
%7283:	br	 %7282 if.else58 if.then57

BASIC BLOCK if.then57
%7284:	br	 if.end59

BASIC BLOCK if.else58
%7285:	br	 if.end59

BASIC BLOCK if.end59
%7286:	phi	 XXX XXX
%7287:	phi	 XXX XXX
%7288:	br	 if.end60

BASIC BLOCK if.end60
%7289:	phi	 XXX %7286
%7290:	phi	 XXX %7287
%7291:	br	 for.inc

BASIC BLOCK for.inc
%7292:	phi	 %7232 XXX
%7293:	phi	 %7219 %7217
%7294:	phi	 %7221 %7289
%7295:	phi	 %7222 %7290
%7296:	add	 %7220 XXX
%7297:	br	 for.cond

BASIC BLOCK for.end
%7298:	ret	

FUNCTION pqdownheap

BASIC BLOCK entry
%7299:	sext	 k
%7300:	getelementptr	 heap XXX %7299
%7301:	load	 %7300
%7302:	shl	 k XXX
%7303:	br	 while.cond

BASIC BLOCK while.cond
%7304:	phi	 k %7373
%7305:	phi	 %7302 %7428
%7306:	load	 heap_len
%7307:	icmp	 %7305 %7306
%7308:	br	 %7307 while.end while.body

BASIC BLOCK while.body
%7309:	load	 heap_len
%7310:	icmp	 %7305 %7309
%7311:	br	 %7310 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%7312:	add	 %7305 XXX
%7313:	sext	 %7312
%7314:	getelementptr	 heap XXX %7313
%7315:	load	 %7314
%7316:	sext	 %7315
%7317:	getelementptr	 tree %7316
%7318:	getelementptr	 %7317 XXX XXX
%7319:	bitcast	 %7318
%7320:	load	 %7319
%7321:	zext	 %7320
%7322:	sext	 %7305
%7323:	getelementptr	 heap XXX %7322
%7324:	load	 %7323
%7325:	sext	 %7324
%7326:	getelementptr	 tree %7325
%7327:	getelementptr	 %7326 XXX XXX
%7328:	bitcast	 %7327
%7329:	load	 %7328
%7330:	zext	 %7329
%7331:	icmp	 %7321 %7330
%7332:	br	 %7331 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%7333:	add	 %7305 XXX
%7334:	sext	 %7333
%7335:	getelementptr	 heap XXX %7334
%7336:	load	 %7335
%7337:	sext	 %7336
%7338:	getelementptr	 tree %7337
%7339:	getelementptr	 %7338 XXX XXX
%7340:	bitcast	 %7339
%7341:	load	 %7340
%7342:	zext	 %7341
%7343:	sext	 %7305
%7344:	getelementptr	 heap XXX %7343
%7345:	load	 %7344
%7346:	sext	 %7345
%7347:	getelementptr	 tree %7346
%7348:	getelementptr	 %7347 XXX XXX
%7349:	bitcast	 %7348
%7350:	load	 %7349
%7351:	zext	 %7350
%7352:	icmp	 %7342 %7351
%7353:	br	 %7352 if.end land.lhs.true32

BASIC BLOCK land.lhs.true32
%7354:	add	 %7305 XXX
%7355:	sext	 %7354
%7356:	getelementptr	 heap XXX %7355
%7357:	load	 %7356
%7358:	sext	 %7357
%7359:	getelementptr	 depth XXX %7358
%7360:	load	 %7359
%7361:	zext	 %7360
%7362:	sext	 %7305
%7363:	getelementptr	 heap XXX %7362
%7364:	load	 %7363
%7365:	sext	 %7364
%7366:	getelementptr	 depth XXX %7365
%7367:	load	 %7366
%7368:	zext	 %7367
%7369:	icmp	 %7361 %7368
%7370:	br	 %7369 if.end if.then

BASIC BLOCK if.then
%7371:	add	 %7305 XXX
%7372:	br	 if.end

BASIC BLOCK if.end
%7373:	phi	 %7371 %7305 %7305 %7305
%7374:	sext	 %7301
%7375:	getelementptr	 tree %7374
%7376:	getelementptr	 %7375 XXX XXX
%7377:	bitcast	 %7376
%7378:	load	 %7377
%7379:	zext	 %7378
%7380:	sext	 %7373
%7381:	getelementptr	 heap XXX %7380
%7382:	load	 %7381
%7383:	sext	 %7382
%7384:	getelementptr	 tree %7383
%7385:	getelementptr	 %7384 XXX XXX
%7386:	bitcast	 %7385
%7387:	load	 %7386
%7388:	zext	 %7387
%7389:	icmp	 %7379 %7388
%7390:	br	 %7389 lor.lhs.false60 if.then86

BASIC BLOCK lor.lhs.false60
%7391:	sext	 %7301
%7392:	getelementptr	 tree %7391
%7393:	getelementptr	 %7392 XXX XXX
%7394:	bitcast	 %7393
%7395:	load	 %7394
%7396:	zext	 %7395
%7397:	sext	 %7373
%7398:	getelementptr	 heap XXX %7397
%7399:	load	 %7398
%7400:	sext	 %7399
%7401:	getelementptr	 tree %7400
%7402:	getelementptr	 %7401 XXX XXX
%7403:	bitcast	 %7402
%7404:	load	 %7403
%7405:	zext	 %7404
%7406:	icmp	 %7396 %7405
%7407:	br	 %7406 if.end87 land.lhs.true75

BASIC BLOCK land.lhs.true75
%7408:	sext	 %7301
%7409:	getelementptr	 depth XXX %7408
%7410:	load	 %7409
%7411:	zext	 %7410
%7412:	sext	 %7373
%7413:	getelementptr	 heap XXX %7412
%7414:	load	 %7413
%7415:	sext	 %7414
%7416:	getelementptr	 depth XXX %7415
%7417:	load	 %7416
%7418:	zext	 %7417
%7419:	icmp	 %7411 %7418
%7420:	br	 %7419 if.end87 if.then86

BASIC BLOCK if.then86
%7421:	br	 while.end

BASIC BLOCK if.end87
%7422:	sext	 %7373
%7423:	getelementptr	 heap XXX %7422
%7424:	load	 %7423
%7425:	sext	 %7304
%7426:	getelementptr	 heap XXX %7425
%7427:	store	 %7424 %7426
%7428:	shl	 %7373 XXX
%7429:	br	 while.cond

BASIC BLOCK while.end
%7430:	sext	 %7304
%7431:	getelementptr	 heap XXX %7430
%7432:	store	 %7301 %7431
%7433:	ret	

FUNCTION gen_bitlen

BASIC BLOCK entry
%7434:	getelementptr	 desc XXX XXX
%7435:	load	 %7434
%7436:	getelementptr	 desc XXX XXX
%7437:	load	 %7436
%7438:	getelementptr	 desc XXX XXX
%7439:	load	 %7438
%7440:	getelementptr	 desc XXX XXX
%7441:	load	 %7440
%7442:	getelementptr	 desc XXX XXX
%7443:	load	 %7442
%7444:	getelementptr	 desc XXX XXX
%7445:	load	 %7444
%7446:	br	 for.cond

BASIC BLOCK for.cond
%7447:	phi	 XXX %7454
%7448:	icmp	 %7447 XXX
%7449:	br	 %7448 for.end for.body

BASIC BLOCK for.body
%7450:	sext	 %7447
%7451:	getelementptr	 bl_count XXX %7450
%7452:	store	 XXX %7451
%7453:	br	 for.inc

BASIC BLOCK for.inc
%7454:	add	 %7447 XXX
%7455:	br	 for.cond

BASIC BLOCK for.end
%7456:	load	 heap_max
%7457:	sext	 %7456
%7458:	getelementptr	 heap XXX %7457
%7459:	load	 %7458
%7460:	sext	 %7459
%7461:	getelementptr	 %7435 %7460
%7462:	getelementptr	 %7461 XXX XXX
%7463:	bitcast	 %7462
%7464:	store	 XXX %7463
%7465:	load	 heap_max
%7466:	add	 %7465 XXX
%7467:	br	 for.cond7

BASIC BLOCK for.cond7
%7468:	phi	 %7466 %7544
%7469:	phi	 XXX %7492
%7470:	icmp	 %7468 XXX
%7471:	br	 %7470 for.end61 for.body9

BASIC BLOCK for.body9
%7472:	sext	 %7468
%7473:	getelementptr	 heap XXX %7472
%7474:	load	 %7473
%7475:	sext	 %7474
%7476:	getelementptr	 %7435 %7475
%7477:	getelementptr	 %7476 XXX XXX
%7478:	bitcast	 %7477
%7479:	load	 %7478
%7480:	zext	 %7479
%7481:	getelementptr	 %7435 %7480
%7482:	getelementptr	 %7481 XXX XXX
%7483:	bitcast	 %7482
%7484:	load	 %7483
%7485:	zext	 %7484
%7486:	add	 %7485 XXX
%7487:	icmp	 %7486 %7443
%7488:	br	 %7487 if.end if.then

BASIC BLOCK if.then
%7489:	add	 %7469 XXX
%7490:	br	 if.end

BASIC BLOCK if.end
%7491:	phi	 %7443 %7486
%7492:	phi	 %7489 %7469
%7493:	trunc	 %7491
%7494:	sext	 %7474
%7495:	getelementptr	 %7435 %7494
%7496:	getelementptr	 %7495 XXX XXX
%7497:	bitcast	 %7496
%7498:	store	 %7493 %7497
%7499:	icmp	 %7474 %7441
%7500:	br	 %7499 if.end31 if.then30

BASIC BLOCK if.then30
%7501:	br	 for.inc59

BASIC BLOCK if.end31
%7502:	sext	 %7491
%7503:	getelementptr	 bl_count XXX %7502
%7504:	load	 %7503
%7505:	add	 %7504 XXX
%7506:	store	 %7505 %7503
%7507:	icmp	 %7474 %7439
%7508:	br	 %7507 if.end40 if.then37

BASIC BLOCK if.then37
%7509:	sub	 %7474 %7439
%7510:	sext	 %7509
%7511:	getelementptr	 %7437 %7510
%7512:	load	 %7511
%7513:	br	 if.end40

BASIC BLOCK if.end40
%7514:	phi	 %7512 XXX
%7515:	sext	 %7474
%7516:	getelementptr	 %7435 %7515
%7517:	getelementptr	 %7516 XXX XXX
%7518:	bitcast	 %7517
%7519:	load	 %7518
%7520:	zext	 %7519
%7521:	add	 %7491 %7514
%7522:	sext	 %7521
%7523:	mul	 %7520 %7522
%7524:	load	 opt_len
%7525:	add	 %7524 %7523
%7526:	store	 %7525 opt_len
%7527:	icmp	 %7445 XXX
%7528:	br	 %7527 if.end58 if.then47

BASIC BLOCK if.then47
%7529:	zext	 %7519
%7530:	sext	 %7474
%7531:	getelementptr	 %7445 %7530
%7532:	getelementptr	 %7531 XXX XXX
%7533:	bitcast	 %7532
%7534:	load	 %7533
%7535:	zext	 %7534
%7536:	add	 %7535 %7514
%7537:	sext	 %7536
%7538:	mul	 %7529 %7537
%7539:	load	 static_len
%7540:	add	 %7539 %7538
%7541:	store	 %7540 static_len
%7542:	br	 if.end58

BASIC BLOCK if.end58
%7543:	br	 for.inc59

BASIC BLOCK for.inc59
%7544:	add	 %7468 XXX
%7545:	br	 for.cond7

BASIC BLOCK for.end61
%7546:	icmp	 %7469 XXX
%7547:	br	 %7546 if.end65 if.then64

BASIC BLOCK if.then64
%7548:	br	 for.end137

BASIC BLOCK if.end65
%7549:	br	 do.body

BASIC BLOCK do.body
%7550:	phi	 %7469 %7580
%7551:	sub	 %7443 XXX
%7552:	br	 while.cond

BASIC BLOCK while.cond
%7553:	phi	 %7551 %7560
%7554:	sext	 %7553
%7555:	getelementptr	 bl_count XXX %7554
%7556:	load	 %7555
%7557:	zext	 %7556
%7558:	icmp	 %7557 XXX
%7559:	br	 %7558 while.end while.body

BASIC BLOCK while.body
%7560:	add	 %7553 XXX
%7561:	br	 while.cond

BASIC BLOCK while.end
%7562:	sext	 %7553
%7563:	getelementptr	 bl_count XXX %7562
%7564:	load	 %7563
%7565:	add	 %7564 XXX
%7566:	store	 %7565 %7563
%7567:	add	 %7553 XXX
%7568:	sext	 %7567
%7569:	getelementptr	 bl_count XXX %7568
%7570:	load	 %7569
%7571:	zext	 %7570
%7572:	add	 %7571 XXX
%7573:	trunc	 %7572
%7574:	store	 %7573 %7569
%7575:	sext	 %7443
%7576:	getelementptr	 bl_count XXX %7575
%7577:	load	 %7576
%7578:	add	 %7577 XXX
%7579:	store	 %7578 %7576
%7580:	sub	 %7550 XXX
%7581:	br	 do.cond

BASIC BLOCK do.cond
%7582:	icmp	 %7580 XXX
%7583:	br	 %7582 do.end do.body

BASIC BLOCK do.end
%7584:	br	 for.cond87

BASIC BLOCK for.cond87
%7585:	phi	 %7468 %7594
%7586:	phi	 %7443 %7641
%7587:	icmp	 %7586 XXX
%7588:	br	 %7587 for.end137 for.body90

BASIC BLOCK for.body90
%7589:	sext	 %7586
%7590:	getelementptr	 bl_count XXX %7589
%7591:	load	 %7590
%7592:	zext	 %7591
%7593:	br	 while.cond94

BASIC BLOCK while.cond94
%7594:	phi	 %7585 %7598 %7598
%7595:	phi	 %7592 %7595 %7638
%7596:	icmp	 %7595 XXX
%7597:	br	 %7596 while.end134 while.body97

BASIC BLOCK while.body97
%7598:	add	 %7594 XXX
%7599:	sext	 %7598
%7600:	getelementptr	 heap XXX %7599
%7601:	load	 %7600
%7602:	icmp	 %7601 %7441
%7603:	br	 %7602 if.end104 if.then103

BASIC BLOCK if.then103
%7604:	br	 while.cond94

BASIC BLOCK if.end104
%7605:	sext	 %7601
%7606:	getelementptr	 %7435 %7605
%7607:	getelementptr	 %7606 XXX XXX
%7608:	bitcast	 %7607
%7609:	load	 %7608
%7610:	zext	 %7609
%7611:	icmp	 %7610 %7586
%7612:	br	 %7611 if.end132 if.then112

BASIC BLOCK if.then112
%7613:	sext	 %7586
%7614:	sext	 %7601
%7615:	getelementptr	 %7435 %7614
%7616:	getelementptr	 %7615 XXX XXX
%7617:	bitcast	 %7616
%7618:	load	 %7617
%7619:	zext	 %7618
%7620:	sub	 %7613 %7619
%7621:	sext	 %7601
%7622:	getelementptr	 %7435 %7621
%7623:	getelementptr	 %7622 XXX XXX
%7624:	bitcast	 %7623
%7625:	load	 %7624
%7626:	zext	 %7625
%7627:	mul	 %7620 %7626
%7628:	load	 opt_len
%7629:	add	 %7628 %7627
%7630:	store	 %7629 opt_len
%7631:	trunc	 %7586
%7632:	sext	 %7601
%7633:	getelementptr	 %7435 %7632
%7634:	getelementptr	 %7633 XXX XXX
%7635:	bitcast	 %7634
%7636:	store	 %7631 %7635
%7637:	br	 if.end132

BASIC BLOCK if.end132
%7638:	add	 %7595 XXX
%7639:	br	 while.cond94

BASIC BLOCK while.end134
%7640:	br	 for.inc135

BASIC BLOCK for.inc135
%7641:	add	 %7586 XXX
%7642:	br	 for.cond87

BASIC BLOCK for.end137
%7643:	ret	

FUNCTION get_istat

BASIC BLOCK entry
%7644:	call	 XXX iname strcpy
%7645:	call	 XXX sbuf do_stat
%7646:	icmp	 %7645 XXX
%7647:	br	 %7646 if.end if.then

BASIC BLOCK if.then
%7648:	br	 return

BASIC BLOCK if.end
%7649:	load	 decompress
%7650:	icmp	 %7649 XXX
%7651:	br	 %7650 if.then4 lor.lhs.false

BASIC BLOCK lor.lhs.false
%7652:	call	 __errno_location
%7653:	load	 %7652
%7654:	icmp	 %7653 XXX
%7655:	br	 %7654 if.end5 if.then4

BASIC BLOCK if.then4
%7656:	call	 XXX perror
%7657:	store	 XXX exit_code
%7658:	br	 return

BASIC BLOCK if.end5
%7659:	call	 XXX get_suffix
%7660:	icmp	 %7659 XXX
%7661:	br	 %7660 if.end9 if.then8

BASIC BLOCK if.then8
%7662:	call	 XXX perror
%7663:	store	 XXX exit_code
%7664:	br	 return

BASIC BLOCK if.end9
%7665:	call	 XXX strlen
%7666:	trunc	 %7665
%7667:	call	 XXX XXX strcmp
%7668:	icmp	 %7667 XXX
%7669:	br	 %7668 if.end15 if.then14

BASIC BLOCK if.then14
%7670:	getelementptr	 XXX XXX
%7671:	br	 if.end15

BASIC BLOCK if.end15
%7672:	phi	 %7670 XXX
%7673:	br	 do.body

BASIC BLOCK do.body
%7674:	phi	 %7672 %7685
%7675:	load	 %7674
%7676:	call	 XXX %7675 strcat
%7677:	call	 XXX sbuf do_stat
%7678:	icmp	 %7677 XXX
%7679:	br	 %7678 if.end21 if.then20

BASIC BLOCK if.then20
%7680:	br	 return

BASIC BLOCK if.end21
%7681:	sext	 %7666
%7682:	getelementptr	 ifname XXX %7681
%7683:	store	 XXX %7682
%7684:	br	 do.cond

BASIC BLOCK do.cond
%7685:	getelementptr	 %7674 XXX
%7686:	load	 %7685
%7687:	icmp	 %7686 XXX
%7688:	br	 %7687 do.end do.body

BASIC BLOCK do.end
%7689:	call	 XXX XXX strcat
%7690:	call	 XXX perror
%7691:	store	 XXX exit_code
%7692:	br	 return

BASIC BLOCK return
%7693:	phi	 XXX XXX XXX XXX XXX
%7694:	ret	 %7693

FUNCTION treat_dir

BASIC BLOCK entry
%7695:	alloca	 XXX
%7696:	call	 dir opendir
%7697:	icmp	 %7696 XXX
%7698:	br	 %7697 if.end if.then

BASIC BLOCK if.then
%7699:	load	 stderr
%7700:	load	 progname
%7701:	call	 %7699 XXX %7700 dir fprintf
%7702:	store	 XXX exit_code
%7703:	br	 return

BASIC BLOCK if.end
%7704:	br	 while.cond

BASIC BLOCK while.cond
%7705:	call	 %7696 readdir
%7706:	icmp	 %7705 XXX
%7707:	br	 %7706 while.end while.body

BASIC BLOCK while.body
%7708:	getelementptr	 %7705 XXX XXX
%7709:	getelementptr	 %7708 XXX XXX
%7710:	call	 %7709 XXX strcmp
%7711:	icmp	 %7710 XXX
%7712:	br	 %7711 lor.lhs.false if.then10

BASIC BLOCK lor.lhs.false
%7713:	getelementptr	 %7705 XXX XXX
%7714:	getelementptr	 %7713 XXX XXX
%7715:	call	 %7714 XXX strcmp
%7716:	icmp	 %7715 XXX
%7717:	br	 %7716 if.end11 if.then10

BASIC BLOCK if.then10
%7718:	br	 while.cond

BASIC BLOCK if.end11
%7719:	call	 dir strlen
%7720:	trunc	 %7719
%7721:	getelementptr	 %7705 XXX XXX
%7722:	getelementptr	 %7721 XXX XXX
%7723:	call	 %7722 strlen
%7724:	trunc	 %7723
%7725:	add	 %7720 %7724
%7726:	add	 %7725 XXX
%7727:	icmp	 %7726 XXX
%7728:	br	 %7727 if.else if.then20

BASIC BLOCK if.then20
%7729:	getelementptr	 %7695 XXX XXX
%7730:	call	 %7729 dir strcpy
%7731:	icmp	 %7720 XXX
%7732:	br	 %7731 if.end26 if.then25

BASIC BLOCK if.then25
%7733:	add	 %7720 XXX
%7734:	sext	 %7720
%7735:	getelementptr	 %7695 XXX %7734
%7736:	store	 XXX %7735
%7737:	br	 if.end26

BASIC BLOCK if.end26
%7738:	phi	 %7733 %7720
%7739:	getelementptr	 %7695 XXX XXX
%7740:	sext	 %7738
%7741:	getelementptr	 %7739 %7740
%7742:	getelementptr	 %7705 XXX XXX
%7743:	getelementptr	 %7742 XXX XXX
%7744:	call	 %7741 %7743 strcpy
%7745:	getelementptr	 %7695 XXX XXX
%7746:	call	 %7745 treat_file
%7747:	br	 if.end35

BASIC BLOCK if.else
%7748:	load	 stderr
%7749:	load	 progname
%7750:	getelementptr	 %7705 XXX XXX
%7751:	getelementptr	 %7750 XXX XXX
%7752:	call	 %7748 XXX %7749 dir %7751 fprintf
%7753:	store	 XXX exit_code
%7754:	br	 if.end35

BASIC BLOCK if.end35
%7755:	br	 while.cond

BASIC BLOCK while.end
%7756:	call	 %7696 closedir
%7757:	br	 return

BASIC BLOCK return
%7758:	ret	

FUNCTION reset_times

BASIC BLOCK entry
%7759:	alloca	 XXX
%7760:	getelementptr	 statb XXX XXX
%7761:	getelementptr	 %7760 XXX XXX
%7762:	load	 %7761
%7763:	getelementptr	 %7759 XXX XXX
%7764:	store	 %7762 %7763
%7765:	getelementptr	 statb XXX XXX
%7766:	getelementptr	 %7765 XXX XXX
%7767:	load	 %7766
%7768:	getelementptr	 %7759 XXX XXX
%7769:	store	 %7767 %7768
%7770:	call	 name %7759 utime
%7771:	icmp	 %7770 XXX
%7772:	br	 %7771 if.end11 land.lhs.true

BASIC BLOCK land.lhs.true
%7773:	getelementptr	 statb XXX XXX
%7774:	load	 %7773
%7775:	and	 %7774 XXX
%7776:	icmp	 %7775 XXX
%7777:	br	 %7776 if.then if.end11

BASIC BLOCK if.then
%7778:	load	 quiet
%7779:	icmp	 %7778 XXX
%7780:	br	 %7779 if.then3 if.end

BASIC BLOCK if.then3
%7781:	load	 stderr
%7782:	load	 progname
%7783:	call	 %7781 XXX %7782 fprintf
%7784:	br	 if.end

BASIC BLOCK if.end
%7785:	load	 exit_code
%7786:	icmp	 %7785 XXX
%7787:	br	 %7786 if.end7 if.then6

BASIC BLOCK if.then6
%7788:	store	 XXX exit_code
%7789:	br	 if.end7

BASIC BLOCK if.end7
%7790:	load	 quiet
%7791:	icmp	 %7790 XXX
%7792:	br	 %7791 if.then9 if.end10

BASIC BLOCK if.then9
%7793:	call	 XXX perror
%7794:	br	 if.end10

BASIC BLOCK if.end10
%7795:	br	 if.end11

BASIC BLOCK if.end11
%7796:	ret	

FUNCTION make_ofname

BASIC BLOCK entry
%7797:	call	 XXX XXX strcpy
%7798:	call	 XXX get_suffix
%7799:	load	 decompress
%7800:	icmp	 %7799 XXX
%7801:	br	 %7800 if.else18 if.then

BASIC BLOCK if.then
%7802:	icmp	 %7798 XXX
%7803:	br	 %7802 if.end9 if.then2

BASIC BLOCK if.then2
%7804:	load	 quiet
%7805:	icmp	 %7804 XXX
%7806:	br	 %7805 if.then4 if.end

BASIC BLOCK if.then4
%7807:	load	 stderr
%7808:	load	 progname
%7809:	call	 %7807 XXX %7808 XXX fprintf
%7810:	br	 if.end

BASIC BLOCK if.end
%7811:	load	 exit_code
%7812:	icmp	 %7811 XXX
%7813:	br	 %7812 if.end8 if.then7

BASIC BLOCK if.then7
%7814:	store	 XXX exit_code
%7815:	br	 if.end8

BASIC BLOCK if.end8
%7816:	br	 return

BASIC BLOCK if.end9
%7817:	call	 %7798 strlwr
%7818:	call	 %7798 XXX strcmp
%7819:	icmp	 %7818 XXX
%7820:	br	 %7819 lor.lhs.false if.then15

BASIC BLOCK lor.lhs.false
%7821:	call	 %7798 XXX strcmp
%7822:	icmp	 %7821 XXX
%7823:	br	 %7822 if.else if.then15

BASIC BLOCK if.then15
%7824:	call	 %7798 XXX strcpy
%7825:	br	 if.end17

BASIC BLOCK if.else
%7826:	store	 XXX %7798
%7827:	br	 if.end17

BASIC BLOCK if.end17
%7828:	br	 if.end34

BASIC BLOCK if.else18
%7829:	icmp	 %7798 XXX
%7830:	br	 %7829 if.else31 if.then20

BASIC BLOCK if.then20
%7831:	load	 verbose
%7832:	icmp	 %7831 XXX
%7833:	br	 %7832 lor.lhs.false22 if.then25

BASIC BLOCK lor.lhs.false22
%7834:	load	 recursive
%7835:	icmp	 %7834 XXX
%7836:	br	 %7835 land.lhs.true if.end27

BASIC BLOCK land.lhs.true
%7837:	load	 quiet
%7838:	icmp	 %7837 XXX
%7839:	br	 %7838 if.then25 if.end27

BASIC BLOCK if.then25
%7840:	load	 stderr
%7841:	load	 progname
%7842:	call	 %7840 XXX %7841 XXX %7798 fprintf
%7843:	br	 if.end27

BASIC BLOCK if.end27
%7844:	load	 exit_code
%7845:	icmp	 %7844 XXX
%7846:	br	 %7845 if.end30 if.then29

BASIC BLOCK if.then29
%7847:	store	 XXX exit_code
%7848:	br	 if.end30

BASIC BLOCK if.end30
%7849:	br	 return

BASIC BLOCK if.else31
%7850:	store	 XXX save_orig_name
%7851:	call	 XXX XXX strcat
%7852:	br	 if.end33

BASIC BLOCK if.end33
%7853:	br	 if.end34

BASIC BLOCK if.end34
%7854:	br	 return

BASIC BLOCK return
%7855:	phi	 XXX XXX XXX
%7856:	ret	 %7855

FUNCTION get_method

BASIC BLOCK entry
%7857:	alloca	 XXX
%7858:	load	 inptr
%7859:	load	 insize
%7860:	icmp	 %7858 %7859
%7861:	br	 %7860 cond.false cond.true

BASIC BLOCK cond.true
%7862:	load	 inptr
%7863:	add	 %7862 XXX
%7864:	store	 %7863 inptr
%7865:	zext	 %7862
%7866:	getelementptr	 inbuf XXX %7865
%7867:	load	 %7866
%7868:	zext	 %7867
%7869:	br	 cond.end

BASIC BLOCK cond.false
%7870:	call	 fill_inbuf
%7871:	br	 cond.end

BASIC BLOCK cond.end
%7872:	phi	 %7868 %7870
%7873:	trunc	 %7872
%7874:	getelementptr	 %7857 XXX XXX
%7875:	store	 %7873 %7874
%7876:	load	 inptr
%7877:	load	 insize
%7878:	icmp	 %7876 %7877
%7879:	br	 %7878 cond.false10 cond.true5

BASIC BLOCK cond.true5
%7880:	load	 inptr
%7881:	add	 %7880 XXX
%7882:	store	 %7881 inptr
%7883:	zext	 %7880
%7884:	getelementptr	 inbuf XXX %7883
%7885:	load	 %7884
%7886:	zext	 %7885
%7887:	br	 cond.end12

BASIC BLOCK cond.false10
%7888:	call	 fill_inbuf
%7889:	br	 cond.end12

BASIC BLOCK cond.end12
%7890:	phi	 %7886 %7888
%7891:	trunc	 %7890
%7892:	getelementptr	 %7857 XXX XXX
%7893:	store	 %7891 %7892
%7894:	store	 XXX time_stamp
%7895:	store	 XXX method
%7896:	load	 part_nb
%7897:	add	 %7896 XXX
%7898:	store	 %7897 part_nb
%7899:	store	 XXX header_bytes
%7900:	store	 XXX last_member
%7901:	getelementptr	 %7857 XXX XXX
%7902:	call	 %7901 XXX XXX memcmp
%7903:	icmp	 %7902 XXX
%7904:	br	 %7903 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%7905:	getelementptr	 %7857 XXX XXX
%7906:	call	 %7905 XXX XXX memcmp
%7907:	icmp	 %7906 XXX
%7908:	br	 %7907 if.else313 if.then

BASIC BLOCK if.then
%7909:	load	 inptr
%7910:	load	 insize
%7911:	icmp	 %7909 %7910
%7912:	br	 %7911 cond.false31 cond.true26

BASIC BLOCK cond.true26
%7913:	load	 inptr
%7914:	add	 %7913 XXX
%7915:	store	 %7914 inptr
%7916:	zext	 %7913
%7917:	getelementptr	 inbuf XXX %7916
%7918:	load	 %7917
%7919:	zext	 %7918
%7920:	br	 cond.end33

BASIC BLOCK cond.false31
%7921:	call	 fill_inbuf
%7922:	br	 cond.end33

BASIC BLOCK cond.end33
%7923:	phi	 %7919 %7921
%7924:	store	 %7923 method
%7925:	load	 method
%7926:	icmp	 %7925 XXX
%7927:	br	 %7926 if.end if.then37

BASIC BLOCK if.then37
%7928:	load	 stderr
%7929:	load	 progname
%7930:	load	 method
%7931:	call	 %7928 XXX %7929 XXX %7930 fprintf
%7932:	store	 XXX exit_code
%7933:	br	 return

BASIC BLOCK if.end
%7934:	store	 unzip work
%7935:	load	 inptr
%7936:	load	 insize
%7937:	icmp	 %7935 %7936
%7938:	br	 %7937 cond.false46 cond.true41

BASIC BLOCK cond.true41
%7939:	load	 inptr
%7940:	add	 %7939 XXX
%7941:	store	 %7940 inptr
%7942:	zext	 %7939
%7943:	getelementptr	 inbuf XXX %7942
%7944:	load	 %7943
%7945:	zext	 %7944
%7946:	br	 cond.end48

BASIC BLOCK cond.false46
%7947:	call	 fill_inbuf
%7948:	br	 cond.end48

BASIC BLOCK cond.end48
%7949:	phi	 %7945 %7947
%7950:	trunc	 %7949
%7951:	zext	 %7950
%7952:	and	 %7951 XXX
%7953:	icmp	 %7952 XXX
%7954:	br	 %7953 if.end56 if.then54

BASIC BLOCK if.then54
%7955:	load	 stderr
%7956:	load	 progname
%7957:	call	 %7955 XXX %7956 XXX fprintf
%7958:	store	 XXX exit_code
%7959:	br	 return

BASIC BLOCK if.end56
%7960:	zext	 %7950
%7961:	and	 %7960 XXX
%7962:	icmp	 %7961 XXX
%7963:	br	 %7962 if.end67 if.then61

BASIC BLOCK if.then61
%7964:	load	 stderr
%7965:	load	 progname
%7966:	call	 %7964 XXX %7965 XXX fprintf
%7967:	store	 XXX exit_code
%7968:	load	 force
%7969:	icmp	 %7968 XXX
%7970:	br	 %7969 if.end66 if.then65

BASIC BLOCK if.then65
%7971:	br	 return

BASIC BLOCK if.end66
%7972:	br	 if.end67

BASIC BLOCK if.end67
%7973:	zext	 %7950
%7974:	and	 %7973 XXX
%7975:	icmp	 %7974 XXX
%7976:	br	 %7975 if.end79 if.then72

BASIC BLOCK if.then72
%7977:	load	 stderr
%7978:	load	 progname
%7979:	zext	 %7950
%7980:	call	 %7977 XXX %7978 XXX %7979 fprintf
%7981:	store	 XXX exit_code
%7982:	load	 force
%7983:	icmp	 %7982 XXX
%7984:	br	 %7983 if.end78 if.then77

BASIC BLOCK if.then77
%7985:	br	 return

BASIC BLOCK if.end78
%7986:	br	 if.end79

BASIC BLOCK if.end79
%7987:	load	 inptr
%7988:	load	 insize
%7989:	icmp	 %7987 %7988
%7990:	br	 %7989 cond.false87 cond.true82

BASIC BLOCK cond.true82
%7991:	load	 inptr
%7992:	add	 %7991 XXX
%7993:	store	 %7992 inptr
%7994:	zext	 %7991
%7995:	getelementptr	 inbuf XXX %7994
%7996:	load	 %7995
%7997:	zext	 %7996
%7998:	br	 cond.end89

BASIC BLOCK cond.false87
%7999:	call	 fill_inbuf
%8000:	br	 cond.end89

BASIC BLOCK cond.end89
%8001:	phi	 %7997 %7999
%8002:	sext	 %8001
%8003:	store	 %8002 time_stamp
%8004:	load	 inptr
%8005:	load	 insize
%8006:	icmp	 %8004 %8005
%8007:	br	 %8006 cond.false99 cond.true94

BASIC BLOCK cond.true94
%8008:	load	 inptr
%8009:	add	 %8008 XXX
%8010:	store	 %8009 inptr
%8011:	zext	 %8008
%8012:	getelementptr	 inbuf XXX %8011
%8013:	load	 %8012
%8014:	zext	 %8013
%8015:	br	 cond.end101

BASIC BLOCK cond.false99
%8016:	call	 fill_inbuf
%8017:	br	 cond.end101

BASIC BLOCK cond.end101
%8018:	phi	 %8014 %8016
%8019:	sext	 %8018
%8020:	shl	 %8019 XXX
%8021:	load	 time_stamp
%8022:	or	 %8021 %8020
%8023:	store	 %8022 time_stamp
%8024:	load	 inptr
%8025:	load	 insize
%8026:	icmp	 %8024 %8025
%8027:	br	 %8026 cond.false111 cond.true106

BASIC BLOCK cond.true106
%8028:	load	 inptr
%8029:	add	 %8028 XXX
%8030:	store	 %8029 inptr
%8031:	zext	 %8028
%8032:	getelementptr	 inbuf XXX %8031
%8033:	load	 %8032
%8034:	zext	 %8033
%8035:	br	 cond.end113

BASIC BLOCK cond.false111
%8036:	call	 fill_inbuf
%8037:	br	 cond.end113

BASIC BLOCK cond.end113
%8038:	phi	 %8034 %8036
%8039:	sext	 %8038
%8040:	shl	 %8039 XXX
%8041:	load	 time_stamp
%8042:	or	 %8041 %8040
%8043:	store	 %8042 time_stamp
%8044:	load	 inptr
%8045:	load	 insize
%8046:	icmp	 %8044 %8045
%8047:	br	 %8046 cond.false125 cond.true120

BASIC BLOCK cond.true120
%8048:	load	 inptr
%8049:	add	 %8048 XXX
%8050:	store	 %8049 inptr
%8051:	zext	 %8048
%8052:	getelementptr	 inbuf XXX %8051
%8053:	load	 %8052
%8054:	zext	 %8053
%8055:	br	 cond.end127

BASIC BLOCK cond.false125
%8056:	call	 fill_inbuf
%8057:	br	 cond.end127

BASIC BLOCK cond.end127
%8058:	phi	 %8054 %8056
%8059:	sext	 %8058
%8060:	shl	 %8059 XXX
%8061:	load	 time_stamp
%8062:	or	 %8061 %8060
%8063:	store	 %8062 time_stamp
%8064:	store	 XXX time_stamp
%8065:	load	 inptr
%8066:	load	 insize
%8067:	icmp	 %8065 %8066
%8068:	br	 %8067 cond.false139 cond.true134

BASIC BLOCK cond.true134
%8069:	load	 inptr
%8070:	add	 %8069 XXX
%8071:	store	 %8070 inptr
%8072:	zext	 %8069
%8073:	getelementptr	 inbuf XXX %8072
%8074:	load	 %8073
%8075:	zext	 %8074
%8076:	br	 cond.end141

BASIC BLOCK cond.false139
%8077:	call	 fill_inbuf
%8078:	br	 cond.end141

BASIC BLOCK cond.end141
%8079:	phi	 %8075 %8077
%8080:	load	 inptr
%8081:	load	 insize
%8082:	icmp	 %8080 %8081
%8083:	br	 %8082 cond.false150 cond.true145

BASIC BLOCK cond.true145
%8084:	load	 inptr
%8085:	add	 %8084 XXX
%8086:	store	 %8085 inptr
%8087:	zext	 %8084
%8088:	getelementptr	 inbuf XXX %8087
%8089:	load	 %8088
%8090:	zext	 %8089
%8091:	br	 cond.end152

BASIC BLOCK cond.false150
%8092:	call	 fill_inbuf
%8093:	br	 cond.end152

BASIC BLOCK cond.end152
%8094:	phi	 %8090 %8092
%8095:	zext	 %7950
%8096:	and	 %8095 XXX
%8097:	icmp	 %8096 XXX
%8098:	br	 %8097 if.end186 if.then158

BASIC BLOCK if.then158
%8099:	load	 inptr
%8100:	load	 insize
%8101:	icmp	 %8099 %8100
%8102:	br	 %8101 cond.false166 cond.true161

BASIC BLOCK cond.true161
%8103:	load	 inptr
%8104:	add	 %8103 XXX
%8105:	store	 %8104 inptr
%8106:	zext	 %8103
%8107:	getelementptr	 inbuf XXX %8106
%8108:	load	 %8107
%8109:	zext	 %8108
%8110:	br	 cond.end168

BASIC BLOCK cond.false166
%8111:	call	 fill_inbuf
%8112:	br	 cond.end168

BASIC BLOCK cond.end168
%8113:	phi	 %8109 %8111
%8114:	load	 inptr
%8115:	load	 insize
%8116:	icmp	 %8114 %8115
%8117:	br	 %8116 cond.false177 cond.true172

BASIC BLOCK cond.true172
%8118:	load	 inptr
%8119:	add	 %8118 XXX
%8120:	store	 %8119 inptr
%8121:	zext	 %8118
%8122:	getelementptr	 inbuf XXX %8121
%8123:	load	 %8122
%8124:	zext	 %8123
%8125:	br	 cond.end179

BASIC BLOCK cond.false177
%8126:	call	 fill_inbuf
%8127:	br	 cond.end179

BASIC BLOCK cond.end179
%8128:	phi	 %8124 %8126
%8129:	shl	 %8128 XXX
%8130:	or	 %8113 %8129
%8131:	load	 verbose
%8132:	icmp	 %8131 XXX
%8133:	br	 %8132 if.end185 if.then183

BASIC BLOCK if.then183
%8134:	load	 stderr
%8135:	load	 progname
%8136:	call	 %8134 XXX %8135 XXX %8130 fprintf
%8137:	br	 if.end185

BASIC BLOCK if.end185
%8138:	br	 if.end186

BASIC BLOCK if.end186
%8139:	zext	 %7950
%8140:	and	 %8139 XXX
%8141:	icmp	 %8140 XXX
%8142:	br	 %8141 if.end232 if.then191

BASIC BLOCK if.then191
%8143:	load	 inptr
%8144:	load	 insize
%8145:	icmp	 %8143 %8144
%8146:	br	 %8145 cond.false199 cond.true194

BASIC BLOCK cond.true194
%8147:	load	 inptr
%8148:	add	 %8147 XXX
%8149:	store	 %8148 inptr
%8150:	zext	 %8147
%8151:	getelementptr	 inbuf XXX %8150
%8152:	load	 %8151
%8153:	zext	 %8152
%8154:	br	 cond.end201

BASIC BLOCK cond.false199
%8155:	call	 fill_inbuf
%8156:	br	 cond.end201

BASIC BLOCK cond.end201
%8157:	phi	 %8153 %8155
%8158:	load	 inptr
%8159:	load	 insize
%8160:	icmp	 %8158 %8159
%8161:	br	 %8160 cond.false210 cond.true205

BASIC BLOCK cond.true205
%8162:	load	 inptr
%8163:	add	 %8162 XXX
%8164:	store	 %8163 inptr
%8165:	zext	 %8162
%8166:	getelementptr	 inbuf XXX %8165
%8167:	load	 %8166
%8168:	zext	 %8167
%8169:	br	 cond.end212

BASIC BLOCK cond.false210
%8170:	call	 fill_inbuf
%8171:	br	 cond.end212

BASIC BLOCK cond.end212
%8172:	phi	 %8168 %8170
%8173:	shl	 %8172 XXX
%8174:	or	 %8157 %8173
%8175:	load	 verbose
%8176:	icmp	 %8175 XXX
%8177:	br	 %8176 if.end219 if.then217

BASIC BLOCK if.then217
%8178:	load	 stderr
%8179:	load	 progname
%8180:	call	 %8178 XXX %8179 XXX %8174 fprintf
%8181:	br	 if.end219

BASIC BLOCK if.end219
%8182:	br	 while.cond

BASIC BLOCK while.cond
%8183:	phi	 %8174 %8184
%8184:	add	 %8183 XXX
%8185:	icmp	 %8183 XXX
%8186:	br	 %8185 while.end while.body

BASIC BLOCK while.body
%8187:	load	 inptr
%8188:	load	 insize
%8189:	icmp	 %8187 %8188
%8190:	br	 %8189 cond.false228 cond.true223

BASIC BLOCK cond.true223
%8191:	load	 inptr
%8192:	add	 %8191 XXX
%8193:	store	 %8192 inptr
%8194:	zext	 %8191
%8195:	getelementptr	 inbuf XXX %8194
%8196:	load	 %8195
%8197:	zext	 %8196
%8198:	br	 cond.end230

BASIC BLOCK cond.false228
%8199:	call	 fill_inbuf
%8200:	br	 cond.end230

BASIC BLOCK cond.end230
%8201:	phi	 %8197 %8199
%8202:	br	 while.cond

BASIC BLOCK while.end
%8203:	br	 if.end232

BASIC BLOCK if.end232
%8204:	zext	 %7950
%8205:	and	 %8204 XXX
%8206:	icmp	 %8205 XXX
%8207:	br	 %8206 if.end285 if.then237

BASIC BLOCK if.then237
%8208:	load	 to_stdout
%8209:	icmp	 %8208 XXX
%8210:	br	 %8209 lor.lhs.false239 if.then242

BASIC BLOCK lor.lhs.false239
%8211:	load	 part_nb
%8212:	icmp	 %8211 XXX
%8213:	br	 %8212 if.else if.then242

BASIC BLOCK if.then242
%8214:	br	 while.cond243

BASIC BLOCK while.cond243
%8215:	load	 inptr
%8216:	load	 insize
%8217:	icmp	 %8215 %8216
%8218:	br	 %8217 cond.false251 cond.true246

BASIC BLOCK cond.true246
%8219:	load	 inptr
%8220:	add	 %8219 XXX
%8221:	store	 %8220 inptr
%8222:	zext	 %8219
%8223:	getelementptr	 inbuf XXX %8222
%8224:	load	 %8223
%8225:	zext	 %8224
%8226:	br	 cond.end253

BASIC BLOCK cond.false251
%8227:	call	 fill_inbuf
%8228:	br	 cond.end253

BASIC BLOCK cond.end253
%8229:	phi	 %8225 %8227
%8230:	trunc	 %8229
%8231:	sext	 %8230
%8232:	icmp	 %8231 XXX
%8233:	br	 %8232 while.end261 while.body259

BASIC BLOCK while.body259
%8234:	br	 while.cond243

BASIC BLOCK while.end261
%8235:	br	 if.end284

BASIC BLOCK if.else
%8236:	call	 XXX basename
%8237:	br	 for.cond

BASIC BLOCK for.cond
%8238:	phi	 %8236 %8256
%8239:	load	 inptr
%8240:	load	 insize
%8241:	icmp	 %8239 %8240
%8242:	br	 %8241 cond.false270 cond.true265

BASIC BLOCK cond.true265
%8243:	load	 inptr
%8244:	add	 %8243 XXX
%8245:	store	 %8244 inptr
%8246:	zext	 %8243
%8247:	getelementptr	 inbuf XXX %8246
%8248:	load	 %8247
%8249:	zext	 %8248
%8250:	br	 cond.end272

BASIC BLOCK cond.false270
%8251:	call	 fill_inbuf
%8252:	br	 cond.end272

BASIC BLOCK cond.end272
%8253:	phi	 %8249 %8251
%8254:	trunc	 %8253
%8255:	store	 %8254 %8238
%8256:	getelementptr	 %8238 XXX
%8257:	load	 %8238
%8258:	sext	 %8257
%8259:	icmp	 %8258 XXX
%8260:	br	 %8259 if.end279 if.then278

BASIC BLOCK if.then278
%8261:	br	 for.end

BASIC BLOCK if.end279
%8262:	icmp	 %8256 XXX
%8263:	br	 %8262 if.end283 if.then282

BASIC BLOCK if.then282
%8264:	call	 XXX error
%8265:	br	 if.end283

BASIC BLOCK if.end283
%8266:	br	 for.cond

BASIC BLOCK for.end
%8267:	br	 if.end284

BASIC BLOCK if.end284
%8268:	br	 if.end285

BASIC BLOCK if.end285
%8269:	zext	 %7950
%8270:	and	 %8269 XXX
%8271:	icmp	 %8270 XXX
%8272:	br	 %8271 if.end307 if.then290

BASIC BLOCK if.then290
%8273:	br	 while.cond291

BASIC BLOCK while.cond291
%8274:	load	 inptr
%8275:	load	 insize
%8276:	icmp	 %8274 %8275
%8277:	br	 %8276 cond.false299 cond.true294

BASIC BLOCK cond.true294
%8278:	load	 inptr
%8279:	add	 %8278 XXX
%8280:	store	 %8279 inptr
%8281:	zext	 %8278
%8282:	getelementptr	 inbuf XXX %8281
%8283:	load	 %8282
%8284:	zext	 %8283
%8285:	br	 cond.end301

BASIC BLOCK cond.false299
%8286:	call	 fill_inbuf
%8287:	br	 cond.end301

BASIC BLOCK cond.end301
%8288:	phi	 %8284 %8286
%8289:	icmp	 %8288 XXX
%8290:	br	 %8289 while.end306 while.body305

BASIC BLOCK while.body305
%8291:	br	 while.cond291

BASIC BLOCK while.end306
%8292:	br	 if.end307

BASIC BLOCK if.end307
%8293:	load	 part_nb
%8294:	icmp	 %8293 XXX
%8295:	br	 %8294 if.end312 if.then310

BASIC BLOCK if.then310
%8296:	load	 inptr
%8297:	zext	 %8296
%8298:	add	 %8297 XXX
%8299:	store	 %8298 header_bytes
%8300:	br	 if.end312

BASIC BLOCK if.end312
%8301:	br	 if.end345

BASIC BLOCK if.else313
%8302:	getelementptr	 %7857 XXX XXX
%8303:	call	 %8302 XXX XXX memcmp
%8304:	icmp	 %8303 XXX
%8305:	br	 %8304 if.else330 land.lhs.true

BASIC BLOCK land.lhs.true
%8306:	load	 inptr
%8307:	icmp	 %8306 XXX
%8308:	br	 %8307 if.else330 land.lhs.true320

BASIC BLOCK land.lhs.true320
%8309:	call	 XXX XXX XXX memcmp
%8310:	icmp	 %8309 XXX
%8311:	br	 %8310 if.else330 if.then324

BASIC BLOCK if.then324
%8312:	store	 XXX inptr
%8313:	store	 unzip work
%8314:	call	 in check_zipfile
%8315:	icmp	 %8314 XXX
%8316:	br	 %8315 if.end329 if.then328

BASIC BLOCK if.then328
%8317:	br	 return

BASIC BLOCK if.end329
%8318:	store	 XXX last_member
%8319:	br	 if.end344

BASIC BLOCK if.else330
%8320:	getelementptr	 %7857 XXX XXX
%8321:	call	 %8320 XXX XXX memcmp
%8322:	icmp	 %8321 XXX
%8323:	br	 %8322 if.else336 if.then335

BASIC BLOCK if.then335
%8324:	store	 unpack work
%8325:	store	 XXX method
%8326:	br	 if.end343

BASIC BLOCK if.else336
%8327:	getelementptr	 %7857 XXX XXX
%8328:	call	 %8327 XXX XXX memcmp
%8329:	icmp	 %8328 XXX
%8330:	br	 %8329 if.end342 if.then341

BASIC BLOCK if.then341
%8331:	store	 unlzw work
%8332:	store	 XXX method
%8333:	store	 XXX last_member
%8334:	br	 if.end342

BASIC BLOCK if.end342
%8335:	br	 if.end343

BASIC BLOCK if.end343
%8336:	br	 if.end344

BASIC BLOCK if.end344
%8337:	br	 if.end345

BASIC BLOCK if.end345
%8338:	load	 method
%8339:	icmp	 %8338 XXX
%8340:	br	 %8339 if.end349 if.then348

BASIC BLOCK if.then348
%8341:	load	 method
%8342:	br	 return

BASIC BLOCK if.end349
%8343:	load	 part_nb
%8344:	icmp	 %8343 XXX
%8345:	br	 %8344 if.else354 if.then352

BASIC BLOCK if.then352
%8346:	load	 stderr
%8347:	load	 progname
%8348:	call	 %8346 XXX %8347 XXX fprintf
%8349:	store	 XXX exit_code
%8350:	br	 return

BASIC BLOCK if.else354
%8351:	load	 quiet
%8352:	icmp	 %8351 XXX
%8353:	br	 %8352 if.then356 if.end358

BASIC BLOCK if.then356
%8354:	load	 stderr
%8355:	load	 progname
%8356:	call	 %8354 XXX %8355 XXX fprintf
%8357:	br	 if.end358

BASIC BLOCK if.end358
%8358:	load	 exit_code
%8359:	icmp	 %8358 XXX
%8360:	br	 %8359 if.end362 if.then361

BASIC BLOCK if.then361
%8361:	store	 XXX exit_code
%8362:	br	 if.end362

BASIC BLOCK if.end362
%8363:	br	 return

BASIC BLOCK return
%8364:	phi	 XXX XXX XXX XXX %8341 XXX XXX XXX
%8365:	ret	 %8364

FUNCTION create_outfile

BASIC BLOCK entry
%8366:	alloca	 XXX
%8367:	load	 stdout
%8368:	call	 %8367 XXX fprintf
%8369:	load	 ascii
%8370:	icmp	 %8369 XXX
%8371:	br	 %8370 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%8372:	load	 decompress
%8373:	icmp	 %8372 XXX
%8374:	br	 %8373 if.end if.then

BASIC BLOCK if.then
%8375:	br	 if.end

BASIC BLOCK if.end
%8376:	br	 for.cond

BASIC BLOCK for.cond
%8377:	call	 XXX strlen
%8378:	trunc	 %8377
%8379:	icmp	 %8378 XXX
%8380:	br	 %8379 lor.lhs.false if.then7

BASIC BLOCK lor.lhs.false
%8381:	sext	 %8378
%8382:	getelementptr	 ofname XXX %8381
%8383:	load	 %8382
%8384:	sext	 %8383
%8385:	icmp	 %8384 XXX
%8386:	br	 %8385 if.end8 if.then7

BASIC BLOCK if.then7
%8387:	br	 for.end

BASIC BLOCK if.end8
%8388:	call	 check_ofname
%8389:	icmp	 %8388 XXX
%8390:	br	 %8389 if.end14 if.then12

BASIC BLOCK if.then12
%8391:	load	 ifd
%8392:	call	 %8391 close
%8393:	br	 return

BASIC BLOCK if.end14
%8394:	store	 XXX remove_ofname
%8395:	call	 XXX XXX XXX open
%8396:	store	 %8395 ofd
%8397:	load	 ofd
%8398:	icmp	 %8397 XXX
%8399:	br	 %8398 if.end20 if.then18

BASIC BLOCK if.then18
%8400:	call	 XXX perror
%8401:	load	 ifd
%8402:	call	 %8401 close
%8403:	store	 XXX exit_code
%8404:	br	 return

BASIC BLOCK if.end20
%8405:	load	 ofd
%8406:	call	 %8405 %8366 fstat
%8407:	icmp	 %8406 XXX
%8408:	br	 %8407 if.end29 if.then24

BASIC BLOCK if.then24
%8409:	load	 stderr
%8410:	load	 progname
%8411:	call	 %8409 XXX %8410 fprintf
%8412:	call	 XXX perror
%8413:	load	 ifd
%8414:	call	 %8413 close
%8415:	load	 ofd
%8416:	call	 %8415 close
%8417:	call	 XXX unlink
%8418:	store	 XXX exit_code
%8419:	br	 return

BASIC BLOCK if.end29
%8420:	call	 XXX %8366 name_too_long
%8421:	icmp	 %8420 XXX
%8422:	br	 %8421 if.then32 if.end33

BASIC BLOCK if.then32
%8423:	br	 return

BASIC BLOCK if.end33
%8424:	load	 decompress
%8425:	icmp	 %8424 XXX
%8426:	br	 %8425 if.else if.then35

BASIC BLOCK if.then35
%8427:	load	 quiet
%8428:	icmp	 %8427 XXX
%8429:	br	 %8428 if.then37 if.end39

BASIC BLOCK if.then37
%8430:	load	 stderr
%8431:	load	 progname
%8432:	call	 %8430 XXX %8431 XXX fprintf
%8433:	br	 if.end39

BASIC BLOCK if.end39
%8434:	load	 exit_code
%8435:	icmp	 %8434 XXX
%8436:	br	 %8435 if.end43 if.then42

BASIC BLOCK if.then42
%8437:	store	 XXX exit_code
%8438:	br	 if.end43

BASIC BLOCK if.end43
%8439:	br	 return

BASIC BLOCK if.else
%8440:	load	 ofd
%8441:	call	 %8440 close
%8442:	call	 XXX unlink
%8443:	store	 XXX save_orig_name
%8444:	call	 XXX strlen
%8445:	getelementptr	 XXX %8444
%8446:	load	 z_len
%8447:	sext	 %8446
%8448:	sub	 XXX %8447
%8449:	getelementptr	 %8445 %8448
%8450:	getelementptr	 %8449 XXX
%8451:	call	 %8450 XXX strcpy
%8452:	br	 if.end50

BASIC BLOCK if.end50
%8453:	br	 for.cond

BASIC BLOCK for.end
%8454:	load	 ifd
%8455:	call	 %8454 close
%8456:	load	 stderr
%8457:	load	 progname
%8458:	call	 %8456 XXX %8457 XXX fprintf
%8459:	store	 XXX exit_code
%8460:	br	 return

BASIC BLOCK return
%8461:	phi	 XXX XXX XXX XXX XXX XXX
%8462:	ret	 %8461

FUNCTION copy_stat

BASIC BLOCK entry
%8463:	load	 decompress
%8464:	icmp	 %8463 XXX
%8465:	br	 %8464 if.end7 land.lhs.true

BASIC BLOCK land.lhs.true
%8466:	load	 time_stamp
%8467:	icmp	 %8466 XXX
%8468:	br	 %8467 if.end7 land.lhs.true1

BASIC BLOCK land.lhs.true1
%8469:	getelementptr	 ifstat XXX XXX
%8470:	getelementptr	 %8469 XXX XXX
%8471:	load	 %8470
%8472:	load	 time_stamp
%8473:	icmp	 %8471 %8472
%8474:	br	 %8473 if.end7 if.then

BASIC BLOCK if.then
%8475:	load	 time_stamp
%8476:	getelementptr	 ifstat XXX XXX
%8477:	getelementptr	 %8476 XXX XXX
%8478:	store	 %8475 %8477
%8479:	load	 verbose
%8480:	icmp	 %8479 XXX
%8481:	br	 %8480 if.end if.then6

BASIC BLOCK if.then6
%8482:	load	 stderr
%8483:	call	 %8482 XXX XXX fprintf
%8484:	br	 if.end

BASIC BLOCK if.end
%8485:	br	 if.end7

BASIC BLOCK if.end7
%8486:	call	 XXX ifstat reset_times
%8487:	getelementptr	 ifstat XXX XXX
%8488:	load	 %8487
%8489:	and	 %8488 XXX
%8490:	call	 XXX %8489 chmod
%8491:	icmp	 %8490 XXX
%8492:	br	 %8491 if.end21 if.then10

BASIC BLOCK if.then10
%8493:	load	 quiet
%8494:	icmp	 %8493 XXX
%8495:	br	 %8494 if.then12 if.end14

BASIC BLOCK if.then12
%8496:	load	 stderr
%8497:	load	 progname
%8498:	call	 %8496 XXX %8497 fprintf
%8499:	br	 if.end14

BASIC BLOCK if.end14
%8500:	load	 exit_code
%8501:	icmp	 %8500 XXX
%8502:	br	 %8501 if.end17 if.then16

BASIC BLOCK if.then16
%8503:	store	 XXX exit_code
%8504:	br	 if.end17

BASIC BLOCK if.end17
%8505:	load	 quiet
%8506:	icmp	 %8505 XXX
%8507:	br	 %8506 if.then19 if.end20

BASIC BLOCK if.then19
%8508:	call	 XXX perror
%8509:	br	 if.end20

BASIC BLOCK if.end20
%8510:	br	 if.end21

BASIC BLOCK if.end21
%8511:	getelementptr	 ifstat XXX XXX
%8512:	load	 %8511
%8513:	getelementptr	 ifstat XXX XXX
%8514:	load	 %8513
%8515:	call	 XXX %8512 %8514 chown
%8516:	store	 XXX remove_ofname
%8517:	call	 XXX XXX chmod
%8518:	call	 XXX unlink
%8519:	icmp	 %8518 XXX
%8520:	br	 %8519 if.end37 if.then26

BASIC BLOCK if.then26
%8521:	load	 quiet
%8522:	icmp	 %8521 XXX
%8523:	br	 %8522 if.then28 if.end30

BASIC BLOCK if.then28
%8524:	load	 stderr
%8525:	load	 progname
%8526:	call	 %8524 XXX %8525 fprintf
%8527:	br	 if.end30

BASIC BLOCK if.end30
%8528:	load	 exit_code
%8529:	icmp	 %8528 XXX
%8530:	br	 %8529 if.end33 if.then32

BASIC BLOCK if.then32
%8531:	store	 XXX exit_code
%8532:	br	 if.end33

BASIC BLOCK if.end33
%8533:	load	 quiet
%8534:	icmp	 %8533 XXX
%8535:	br	 %8534 if.then35 if.end36

BASIC BLOCK if.then35
%8536:	call	 XXX perror
%8537:	br	 if.end36

BASIC BLOCK if.end36
%8538:	br	 if.end37

BASIC BLOCK if.end37
%8539:	ret	

FUNCTION check_ofname

BASIC BLOCK entry
%8540:	alloca	 XXX
%8541:	alloca	 XXX
%8542:	call	 XXX strlen
%8543:	trunc	 %8542
%8544:	call	 XXX %8540 stat
%8545:	icmp	 %8544 XXX
%8546:	br	 %8545 if.end if.then

BASIC BLOCK if.then
%8547:	br	 return

BASIC BLOCK if.end
%8548:	load	 decompress
%8549:	icmp	 %8548 XXX
%8550:	br	 %8549 land.lhs.true if.end18

BASIC BLOCK land.lhs.true
%8551:	icmp	 %8543 XXX
%8552:	br	 %8551 if.end18 land.lhs.true5

BASIC BLOCK land.lhs.true5
%8553:	call	 XXX %8540 name_too_long
%8554:	icmp	 %8553 XXX
%8555:	br	 %8554 if.end18 if.then8

BASIC BLOCK if.then8
%8556:	store	 XXX save_orig_name
%8557:	sext	 %8543
%8558:	getelementptr	 XXX %8557
%8559:	load	 z_len
%8560:	sext	 %8559
%8561:	sub	 XXX %8560
%8562:	getelementptr	 %8558 %8561
%8563:	getelementptr	 %8562 XXX
%8564:	call	 %8563 XXX strcpy
%8565:	call	 XXX %8540 stat
%8566:	icmp	 %8565 XXX
%8567:	br	 %8566 if.end17 if.then16

BASIC BLOCK if.then16
%8568:	br	 return

BASIC BLOCK if.end17
%8569:	br	 if.end18

BASIC BLOCK if.end18
%8570:	call	 istat %8540 same_file
%8571:	icmp	 %8570 XXX
%8572:	br	 %8571 if.end23 if.then21

BASIC BLOCK if.then21
%8573:	load	 stderr
%8574:	load	 progname
%8575:	call	 %8573 XXX %8574 XXX XXX fprintf
%8576:	store	 XXX exit_code
%8577:	br	 return

BASIC BLOCK if.end23
%8578:	load	 force
%8579:	icmp	 %8578 XXX
%8580:	br	 %8579 if.then25 if.end57

BASIC BLOCK if.then25
%8581:	getelementptr	 %8541 XXX XXX
%8582:	call	 %8581 XXX strcpy
%8583:	load	 stderr
%8584:	load	 progname
%8585:	call	 %8583 XXX %8584 XXX fprintf
%8586:	load	 foreground
%8587:	icmp	 %8586 XXX
%8588:	br	 %8587 if.end38 land.lhs.true29

BASIC BLOCK land.lhs.true29
%8589:	load	 stdin
%8590:	call	 %8589 fileno
%8591:	call	 %8590 isatty
%8592:	icmp	 %8591 XXX
%8593:	br	 %8592 if.end38 if.then33

BASIC BLOCK if.then33
%8594:	load	 stderr
%8595:	call	 %8594 XXX fprintf
%8596:	load	 stderr
%8597:	call	 %8596 fflush
%8598:	getelementptr	 %8541 XXX XXX
%8599:	load	 stdin
%8600:	call	 %8598 XXX %8599 fgets
%8601:	br	 if.end38

BASIC BLOCK if.end38
%8602:	getelementptr	 %8541 XXX XXX
%8603:	load	 %8602
%8604:	sext	 %8603
%8605:	sext	 %8604
%8606:	call	 __ctype_b_loc
%8607:	load	 %8606
%8608:	getelementptr	 %8607 %8605
%8609:	load	 %8608
%8610:	zext	 %8609
%8611:	and	 %8610 XXX
%8612:	icmp	 %8611 XXX
%8613:	br	 %8612 cond.false cond.true

BASIC BLOCK cond.true
%8614:	getelementptr	 %8541 XXX XXX
%8615:	load	 %8614
%8616:	sext	 %8615
%8617:	sub	 %8616 XXX
%8618:	add	 %8617 XXX
%8619:	br	 cond.end

BASIC BLOCK cond.false
%8620:	getelementptr	 %8541 XXX XXX
%8621:	load	 %8620
%8622:	sext	 %8621
%8623:	br	 cond.end

BASIC BLOCK cond.end
%8624:	phi	 %8618 %8622
%8625:	icmp	 %8624 XXX
%8626:	br	 %8625 if.end56 if.then50

BASIC BLOCK if.then50
%8627:	load	 stderr
%8628:	call	 %8627 XXX fprintf
%8629:	load	 exit_code
%8630:	icmp	 %8629 XXX
%8631:	br	 %8630 if.end55 if.then54

BASIC BLOCK if.then54
%8632:	store	 XXX exit_code
%8633:	br	 if.end55

BASIC BLOCK if.end55
%8634:	br	 return

BASIC BLOCK if.end56
%8635:	br	 if.end57

BASIC BLOCK if.end57
%8636:	call	 XXX XXX chmod
%8637:	call	 XXX unlink
%8638:	icmp	 %8637 XXX
%8639:	br	 %8638 if.end63 if.then61

BASIC BLOCK if.then61
%8640:	load	 stderr
%8641:	load	 progname
%8642:	call	 %8640 XXX %8641 fprintf
%8643:	call	 XXX perror
%8644:	store	 XXX exit_code
%8645:	br	 return

BASIC BLOCK if.end63
%8646:	br	 return

BASIC BLOCK return
%8647:	phi	 XXX XXX XXX XXX XXX XXX
%8648:	ret	 %8647

FUNCTION name_too_long

BASIC BLOCK entry
%8649:	alloca	 XXX
%8650:	call	 name strlen
%8651:	trunc	 %8650
%8652:	sub	 %8651 XXX
%8653:	sext	 %8652
%8654:	getelementptr	 name %8653
%8655:	load	 %8654
%8656:	bitcast	 %8649
%8657:	bitcast	 statb
%8658:	call	 %8656 %8657 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%8659:	sub	 %8651 XXX
%8660:	sext	 %8659
%8661:	getelementptr	 name %8660
%8662:	store	 XXX %8661
%8663:	call	 name %8649 stat
%8664:	icmp	 %8663 XXX
%8665:	br	 %8664 land.end land.rhs

BASIC BLOCK land.rhs
%8666:	call	 statb %8649 same_file
%8667:	icmp	 %8666 XXX
%8668:	br	 land.end

BASIC BLOCK land.end
%8669:	phi	 XXX %8667
%8670:	zext	 %8669
%8671:	sub	 %8651 XXX
%8672:	sext	 %8671
%8673:	getelementptr	 name %8672
%8674:	store	 %8655 %8673
%8675:	ret	 %8670

FUNCTION same_file

BASIC BLOCK entry
%8676:	getelementptr	 stat1 XXX XXX
%8677:	load	 %8676
%8678:	getelementptr	 stat2 XXX XXX
%8679:	load	 %8678
%8680:	icmp	 %8677 %8679
%8681:	br	 %8680 land.end land.rhs

BASIC BLOCK land.rhs
%8682:	getelementptr	 stat1 XXX XXX
%8683:	load	 %8682
%8684:	getelementptr	 stat2 XXX XXX
%8685:	load	 %8684
%8686:	icmp	 %8683 %8685
%8687:	br	 land.end

BASIC BLOCK land.end
%8688:	phi	 XXX %8686
%8689:	zext	 %8688
%8690:	ret	 %8689

FUNCTION get_suffix

BASIC BLOCK entry
%8691:	alloca	 XXX
%8692:	call	 XXX XXX strcmp
%8693:	icmp	 %8692 XXX
%8694:	br	 %8693 if.end if.then

BASIC BLOCK if.then
%8695:	getelementptr	 XXX XXX
%8696:	br	 if.end

BASIC BLOCK if.end
%8697:	phi	 %8695 XXX
%8698:	call	 name strlen
%8699:	trunc	 %8698
%8700:	icmp	 %8699 XXX
%8701:	br	 %8700 if.else if.then4

BASIC BLOCK if.then4
%8702:	getelementptr	 %8691 XXX XXX
%8703:	call	 %8702 name strcpy
%8704:	br	 if.end10

BASIC BLOCK if.else
%8705:	getelementptr	 %8691 XXX XXX
%8706:	sext	 %8699
%8707:	getelementptr	 name %8706
%8708:	getelementptr	 %8707 XXX
%8709:	getelementptr	 %8708 XXX
%8710:	call	 %8705 %8709 strcpy
%8711:	br	 if.end10

BASIC BLOCK if.end10
%8712:	getelementptr	 %8691 XXX XXX
%8713:	call	 %8712 strlwr
%8714:	getelementptr	 %8691 XXX XXX
%8715:	call	 %8714 strlen
%8716:	trunc	 %8715
%8717:	br	 do.body

BASIC BLOCK do.body
%8718:	phi	 %8697 %8749
%8719:	load	 %8718
%8720:	call	 %8719 strlen
%8721:	trunc	 %8720
%8722:	icmp	 %8716 %8721
%8723:	br	 %8722 if.end39 land.lhs.true

BASIC BLOCK land.lhs.true
%8724:	sub	 %8716 %8721
%8725:	sub	 %8724 XXX
%8726:	sext	 %8725
%8727:	getelementptr	 %8691 XXX %8726
%8728:	load	 %8727
%8729:	sext	 %8728
%8730:	icmp	 %8729 XXX
%8731:	br	 %8730 if.end39 land.lhs.true24

BASIC BLOCK land.lhs.true24
%8732:	getelementptr	 %8691 XXX XXX
%8733:	sext	 %8716
%8734:	getelementptr	 %8732 %8733
%8735:	sext	 %8721
%8736:	sub	 XXX %8735
%8737:	getelementptr	 %8734 %8736
%8738:	load	 %8718
%8739:	call	 %8737 %8738 strcmp
%8740:	icmp	 %8739 XXX
%8741:	br	 %8740 if.end39 if.then33

BASIC BLOCK if.then33
%8742:	sext	 %8699
%8743:	getelementptr	 name %8742
%8744:	sext	 %8721
%8745:	sub	 XXX %8744
%8746:	getelementptr	 %8743 %8745
%8747:	br	 return

BASIC BLOCK if.end39
%8748:	br	 do.cond

BASIC BLOCK do.cond
%8749:	getelementptr	 %8718 XXX
%8750:	load	 %8749
%8751:	icmp	 %8750 XXX
%8752:	br	 %8751 do.end do.body

BASIC BLOCK do.end
%8753:	br	 return

BASIC BLOCK return
%8754:	phi	 %8746 XXX
%8755:	ret	 %8754

FUNCTION do_stat

BASIC BLOCK entry
%8756:	call	 __errno_location
%8757:	store	 XXX %8756
%8758:	load	 to_stdout
%8759:	icmp	 %8758 XXX
%8760:	br	 %8759 land.lhs.true if.end

BASIC BLOCK land.lhs.true
%8761:	load	 force
%8762:	icmp	 %8761 XXX
%8763:	br	 %8762 if.then if.end

BASIC BLOCK if.then
%8764:	call	 name sbuf lstat
%8765:	br	 return

BASIC BLOCK if.end
%8766:	call	 name sbuf stat
%8767:	br	 return

BASIC BLOCK return
%8768:	phi	 %8766 %8764
%8769:	ret	 %8768
