gzip.c:379:25: warning: field '__cd' with variable sized type 'struct __gconv_info' not at the end of a struct or class is a GNU extension [-Wgnu]
    struct __gconv_info __cd;
                        ^
1 warning generated.

FUNCTION gnu_dev_major

BASIC BLOCK entry
%1:	lshr	 __dev XXX
%2:	and	 %1 XXX
%3:	lshr	 __dev XXX
%4:	trunc	 %3
%5:	and	 %4 XXX
%6:	zext	 %5
%7:	or	 %2 %6
%8:	trunc	 %7
%9:	ret	 %8

FUNCTION gnu_dev_minor

BASIC BLOCK entry
%10:	and	 __dev XXX
%11:	lshr	 __dev XXX
%12:	trunc	 %11
%13:	and	 %12 XXX
%14:	zext	 %13
%15:	or	 %10 %14
%16:	trunc	 %15
%17:	ret	 %16

FUNCTION gnu_dev_makedev

BASIC BLOCK entry
%18:	and	 __minor XXX
%19:	and	 __major XXX
%20:	shl	 %19 XXX
%21:	or	 %18 %20
%22:	zext	 %21
%23:	and	 __minor XXX
%24:	zext	 %23
%25:	shl	 %24 XXX
%26:	or	 %22 %25
%27:	and	 __major XXX
%28:	zext	 %27
%29:	shl	 %28 XXX
%30:	or	 %26 %29
%31:	ret	 %30

FUNCTION stat

BASIC BLOCK entry
%32:	call	 XXX __path __statbuf __xstat
%33:	ret	 %32

FUNCTION lstat

BASIC BLOCK entry
%34:	call	 XXX __path __statbuf __lxstat
%35:	ret	 %34

FUNCTION fstat

BASIC BLOCK entry
%36:	call	 XXX __fd __statbuf __fxstat
%37:	ret	 %36

FUNCTION mknod

BASIC BLOCK entry
%38:	alloca	 XXX
%39:	store	 __dev %38
%40:	call	 XXX __path __mode %38 __xmknod
%41:	ret	 %40

FUNCTION file_read

BASIC BLOCK entry
%42:	load	 ifd
%43:	zext	 size
%44:	call	 %42 buf %43 read
%45:	trunc	 %44
%46:	icmp	 %45 XXX
%47:	br	 %46 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%48:	icmp	 %45 XXX
%49:	br	 %48 if.end if.then

BASIC BLOCK if.then
%50:	br	 return

BASIC BLOCK if.end
%51:	call	 buf %45 updcrc
%52:	store	 %51 crc
%53:	zext	 %45
%54:	load	 bytes_in
%55:	add	 %54 %53
%56:	store	 %55 bytes_in
%57:	br	 return

BASIC BLOCK return
%58:	ret	 %45

FUNCTION bi_init

BASIC BLOCK entry
%59:	store	 zipfile zfile
%60:	store	 XXX bi_buf
%61:	store	 XXX bi_valid
%62:	load	 zfile
%63:	icmp	 %62 XXX
%64:	br	 %63 if.end if.then

BASIC BLOCK if.then
%65:	store	 file_read read_buf
%66:	br	 if.end

BASIC BLOCK if.end
%67:	ret	

FUNCTION send_bits

BASIC BLOCK entry
%68:	load	 bi_valid
%69:	sub	 XXX length
%70:	icmp	 %68 %69
%71:	br	 %70 if.else42 if.then

BASIC BLOCK if.then
%72:	load	 bi_valid
%73:	shl	 value %72
%74:	load	 bi_buf
%75:	zext	 %74
%76:	or	 %75 %73
%77:	trunc	 %76
%78:	store	 %77 bi_buf
%79:	load	 outcnt
%80:	icmp	 %79 XXX
%81:	br	 %80 if.else if.then4

BASIC BLOCK if.then4
%82:	load	 bi_buf
%83:	zext	 %82
%84:	and	 %83 XXX
%85:	trunc	 %84
%86:	load	 outcnt
%87:	add	 %86 XXX
%88:	store	 %87 outcnt
%89:	zext	 %86
%90:	getelementptr	 XXX XXX %89
%91:	store	 %85 %90
%92:	load	 bi_buf
%93:	zext	 %92
%94:	ashr	 %93 XXX
%95:	trunc	 %94
%96:	load	 outcnt
%97:	add	 %96 XXX
%98:	store	 %97 outcnt
%99:	zext	 %96
%100:	getelementptr	 XXX XXX %99
%101:	store	 %95 %100
%102:	br	 if.end31

BASIC BLOCK if.else
%103:	load	 bi_buf
%104:	zext	 %103
%105:	and	 %104 XXX
%106:	trunc	 %105
%107:	load	 outcnt
%108:	add	 %107 XXX
%109:	store	 %108 outcnt
%110:	zext	 %107
%111:	getelementptr	 XXX XXX %110
%112:	store	 %106 %111
%113:	load	 outcnt
%114:	icmp	 %113 XXX
%115:	br	 %114 if.end if.then20

BASIC BLOCK if.then20
%116:	call	 flush_outbuf
%117:	br	 if.end

BASIC BLOCK if.end
%118:	load	 bi_buf
%119:	zext	 %118
%120:	ashr	 %119 XXX
%121:	trunc	 %120
%122:	load	 outcnt
%123:	add	 %122 XXX
%124:	store	 %123 outcnt
%125:	zext	 %122
%126:	getelementptr	 XXX XXX %125
%127:	store	 %121 %126
%128:	load	 outcnt
%129:	icmp	 %128 XXX
%130:	br	 %129 if.end30 if.then29

BASIC BLOCK if.then29
%131:	call	 flush_outbuf
%132:	br	 if.end30

BASIC BLOCK if.end30
%133:	br	 if.end31

BASIC BLOCK if.end31
%134:	trunc	 value
%135:	zext	 %134
%136:	load	 bi_valid
%137:	sext	 %136
%138:	sub	 XXX %137
%139:	trunc	 %138
%140:	ashr	 %135 %139
%141:	trunc	 %140
%142:	store	 %141 bi_buf
%143:	sext	 length
%144:	sub	 %143 XXX
%145:	load	 bi_valid
%146:	sext	 %145
%147:	add	 %146 %144
%148:	trunc	 %147
%149:	store	 %148 bi_valid
%150:	br	 if.end48

BASIC BLOCK if.else42
%151:	load	 bi_valid
%152:	shl	 value %151
%153:	load	 bi_buf
%154:	zext	 %153
%155:	or	 %154 %152
%156:	trunc	 %155
%157:	store	 %156 bi_buf
%158:	load	 bi_valid
%159:	add	 %158 length
%160:	store	 %159 bi_valid
%161:	br	 if.end48

BASIC BLOCK if.end48
%162:	ret	

FUNCTION flush_outbuf

BASIC BLOCK entry
%163:	load	 outcnt
%164:	icmp	 %163 XXX
%165:	br	 %164 if.end if.then

BASIC BLOCK if.then
%166:	br	 return

BASIC BLOCK if.end
%167:	load	 ofd
%168:	load	 outcnt
%169:	call	 %167 XXX %168 write_buf
%170:	load	 outcnt
%171:	zext	 %170
%172:	load	 bytes_out
%173:	add	 %172 %171
%174:	store	 %173 bytes_out
%175:	store	 XXX outcnt
%176:	br	 return

BASIC BLOCK return
%177:	ret	

FUNCTION bi_reverse

BASIC BLOCK entry
%178:	br	 do.body

BASIC BLOCK do.body
%179:	phi	 XXX %185
%180:	phi	 len %187
%181:	phi	 code %184
%182:	and	 %181 XXX
%183:	or	 %179 %182
%184:	lshr	 %181 XXX
%185:	shl	 %183 XXX
%186:	br	 do.cond

BASIC BLOCK do.cond
%187:	add	 %180 XXX
%188:	icmp	 %187 XXX
%189:	br	 %188 do.end do.body

BASIC BLOCK do.end
%190:	lshr	 %185 XXX
%191:	ret	 %190

FUNCTION bi_windup

BASIC BLOCK entry
%192:	load	 bi_valid
%193:	icmp	 %192 XXX
%194:	br	 %193 if.else29 if.then

BASIC BLOCK if.then
%195:	load	 outcnt
%196:	icmp	 %195 XXX
%197:	br	 %196 if.else if.then2

BASIC BLOCK if.then2
%198:	load	 bi_buf
%199:	zext	 %198
%200:	and	 %199 XXX
%201:	trunc	 %200
%202:	load	 outcnt
%203:	add	 %202 XXX
%204:	store	 %203 outcnt
%205:	zext	 %202
%206:	getelementptr	 XXX XXX %205
%207:	store	 %201 %206
%208:	load	 bi_buf
%209:	zext	 %208
%210:	ashr	 %209 XXX
%211:	trunc	 %210
%212:	load	 outcnt
%213:	add	 %212 XXX
%214:	store	 %213 outcnt
%215:	zext	 %212
%216:	getelementptr	 XXX XXX %215
%217:	store	 %211 %216
%218:	br	 if.end28

BASIC BLOCK if.else
%219:	load	 bi_buf
%220:	zext	 %219
%221:	and	 %220 XXX
%222:	trunc	 %221
%223:	load	 outcnt
%224:	add	 %223 XXX
%225:	store	 %224 outcnt
%226:	zext	 %223
%227:	getelementptr	 XXX XXX %226
%228:	store	 %222 %227
%229:	load	 outcnt
%230:	icmp	 %229 XXX
%231:	br	 %230 if.end if.then17

BASIC BLOCK if.then17
%232:	call	 flush_outbuf
%233:	br	 if.end

BASIC BLOCK if.end
%234:	load	 bi_buf
%235:	zext	 %234
%236:	ashr	 %235 XXX
%237:	trunc	 %236
%238:	load	 outcnt
%239:	add	 %238 XXX
%240:	store	 %239 outcnt
%241:	zext	 %238
%242:	getelementptr	 XXX XXX %241
%243:	store	 %237 %242
%244:	load	 outcnt
%245:	icmp	 %244 XXX
%246:	br	 %245 if.end27 if.then26

BASIC BLOCK if.then26
%247:	call	 flush_outbuf
%248:	br	 if.end27

BASIC BLOCK if.end27
%249:	br	 if.end28

BASIC BLOCK if.end28
%250:	br	 if.end42

BASIC BLOCK if.else29
%251:	load	 bi_valid
%252:	icmp	 %251 XXX
%253:	br	 %252 if.end41 if.then32

BASIC BLOCK if.then32
%254:	load	 bi_buf
%255:	trunc	 %254
%256:	load	 outcnt
%257:	add	 %256 XXX
%258:	store	 %257 outcnt
%259:	zext	 %256
%260:	getelementptr	 XXX XXX %259
%261:	store	 %255 %260
%262:	load	 outcnt
%263:	icmp	 %262 XXX
%264:	br	 %263 if.end40 if.then39

BASIC BLOCK if.then39
%265:	call	 flush_outbuf
%266:	br	 if.end40

BASIC BLOCK if.end40
%267:	br	 if.end41

BASIC BLOCK if.end41
%268:	br	 if.end42

BASIC BLOCK if.end42
%269:	store	 XXX bi_buf
%270:	store	 XXX bi_valid
%271:	ret	

FUNCTION copy_block

BASIC BLOCK entry
%272:	call	 bi_windup
%273:	icmp	 header XXX
%274:	br	 %273 if.end76 if.then

BASIC BLOCK if.then
%275:	load	 outcnt
%276:	icmp	 %275 XXX
%277:	br	 %276 if.else if.then1

BASIC BLOCK if.then1
%278:	trunc	 len
%279:	zext	 %278
%280:	and	 %279 XXX
%281:	trunc	 %280
%282:	load	 outcnt
%283:	add	 %282 XXX
%284:	store	 %283 outcnt
%285:	zext	 %282
%286:	getelementptr	 XXX XXX %285
%287:	store	 %281 %286
%288:	trunc	 len
%289:	zext	 %288
%290:	ashr	 %289 XXX
%291:	trunc	 %290
%292:	load	 outcnt
%293:	add	 %292 XXX
%294:	store	 %293 outcnt
%295:	zext	 %292
%296:	getelementptr	 XXX XXX %295
%297:	store	 %291 %296
%298:	br	 if.end31

BASIC BLOCK if.else
%299:	trunc	 len
%300:	zext	 %299
%301:	and	 %300 XXX
%302:	trunc	 %301
%303:	load	 outcnt
%304:	add	 %303 XXX
%305:	store	 %304 outcnt
%306:	zext	 %303
%307:	getelementptr	 XXX XXX %306
%308:	store	 %302 %307
%309:	load	 outcnt
%310:	icmp	 %309 XXX
%311:	br	 %310 if.end if.then19

BASIC BLOCK if.then19
%312:	call	 flush_outbuf
%313:	br	 if.end

BASIC BLOCK if.end
%314:	trunc	 len
%315:	zext	 %314
%316:	ashr	 %315 XXX
%317:	trunc	 %316
%318:	load	 outcnt
%319:	add	 %318 XXX
%320:	store	 %319 outcnt
%321:	zext	 %318
%322:	getelementptr	 XXX XXX %321
%323:	store	 %317 %322
%324:	load	 outcnt
%325:	icmp	 %324 XXX
%326:	br	 %325 if.end30 if.then29

BASIC BLOCK if.then29
%327:	call	 flush_outbuf
%328:	br	 if.end30

BASIC BLOCK if.end30
%329:	br	 if.end31

BASIC BLOCK if.end31
%330:	load	 outcnt
%331:	icmp	 %330 XXX
%332:	br	 %331 if.else50 if.then34

BASIC BLOCK if.then34
%333:	xor	 len XXX
%334:	trunc	 %333
%335:	zext	 %334
%336:	and	 %335 XXX
%337:	trunc	 %336
%338:	load	 outcnt
%339:	add	 %338 XXX
%340:	store	 %339 outcnt
%341:	zext	 %338
%342:	getelementptr	 XXX XXX %341
%343:	store	 %337 %342
%344:	xor	 len XXX
%345:	trunc	 %344
%346:	zext	 %345
%347:	ashr	 %346 XXX
%348:	trunc	 %347
%349:	load	 outcnt
%350:	add	 %349 XXX
%351:	store	 %350 outcnt
%352:	zext	 %349
%353:	getelementptr	 XXX XXX %352
%354:	store	 %348 %353
%355:	br	 if.end75

BASIC BLOCK if.else50
%356:	xor	 len XXX
%357:	trunc	 %356
%358:	zext	 %357
%359:	and	 %358 XXX
%360:	trunc	 %359
%361:	load	 outcnt
%362:	add	 %361 XXX
%363:	store	 %362 outcnt
%364:	zext	 %361
%365:	getelementptr	 XXX XXX %364
%366:	store	 %360 %365
%367:	load	 outcnt
%368:	icmp	 %367 XXX
%369:	br	 %368 if.end62 if.then61

BASIC BLOCK if.then61
%370:	call	 flush_outbuf
%371:	br	 if.end62

BASIC BLOCK if.end62
%372:	xor	 len XXX
%373:	trunc	 %372
%374:	zext	 %373
%375:	ashr	 %374 XXX
%376:	trunc	 %375
%377:	load	 outcnt
%378:	add	 %377 XXX
%379:	store	 %378 outcnt
%380:	zext	 %377
%381:	getelementptr	 XXX XXX %380
%382:	store	 %376 %381
%383:	load	 outcnt
%384:	icmp	 %383 XXX
%385:	br	 %384 if.end74 if.then73

BASIC BLOCK if.then73
%386:	call	 flush_outbuf
%387:	br	 if.end74

BASIC BLOCK if.end74
%388:	br	 if.end75

BASIC BLOCK if.end75
%389:	br	 if.end76

BASIC BLOCK if.end76
%390:	br	 while.cond

BASIC BLOCK while.cond
%391:	phi	 len %393
%392:	phi	 buf %396
%393:	add	 %391 XXX
%394:	icmp	 %391 XXX
%395:	br	 %394 while.end while.body

BASIC BLOCK while.body
%396:	getelementptr	 %392 XXX
%397:	load	 %392
%398:	load	 outcnt
%399:	add	 %398 XXX
%400:	store	 %399 outcnt
%401:	zext	 %398
%402:	getelementptr	 XXX XXX %401
%403:	store	 %397 %402
%404:	load	 outcnt
%405:	icmp	 %404 XXX
%406:	br	 %405 if.end84 if.then83

BASIC BLOCK if.then83
%407:	call	 flush_outbuf
%408:	br	 if.end84

BASIC BLOCK if.end84
%409:	br	 while.cond

BASIC BLOCK while.end
%410:	ret	

FUNCTION lm_init

BASIC BLOCK entry
%411:	icmp	 pack_level XXX
%412:	br	 %411 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%413:	icmp	 pack_level XXX
%414:	br	 %413 if.end if.then

BASIC BLOCK if.then
%415:	call	 XXX error
%416:	br	 if.end

BASIC BLOCK if.end
%417:	call	 XXX XXX XXX XXX XXX llvm.memset.p0i8.i64
%418:	sext	 pack_level
%419:	getelementptr	 configuration_table XXX %418
%420:	getelementptr	 %419 XXX XXX
%421:	load	 %420
%422:	zext	 %421
%423:	store	 %422 max_lazy_match
%424:	sext	 pack_level
%425:	getelementptr	 configuration_table XXX %424
%426:	getelementptr	 %425 XXX XXX
%427:	load	 %426
%428:	zext	 %427
%429:	store	 %428 good_match
%430:	sext	 pack_level
%431:	getelementptr	 configuration_table XXX %430
%432:	getelementptr	 %431 XXX XXX
%433:	load	 %432
%434:	zext	 %433
%435:	store	 %434 nice_match
%436:	sext	 pack_level
%437:	getelementptr	 configuration_table XXX %436
%438:	getelementptr	 %437 XXX XXX
%439:	load	 %438
%440:	zext	 %439
%441:	store	 %440 max_chain_length
%442:	icmp	 pack_level XXX
%443:	br	 %442 if.else if.then13

BASIC BLOCK if.then13
%444:	load	 flags
%445:	zext	 %444
%446:	or	 %445 XXX
%447:	trunc	 %446
%448:	store	 %447 flags
%449:	br	 if.end23

BASIC BLOCK if.else
%450:	icmp	 pack_level XXX
%451:	br	 %450 if.end22 if.then18

BASIC BLOCK if.then18
%452:	load	 flags
%453:	zext	 %452
%454:	or	 %453 XXX
%455:	trunc	 %454
%456:	store	 %455 flags
%457:	br	 if.end22

BASIC BLOCK if.end22
%458:	br	 if.end23

BASIC BLOCK if.end23
%459:	store	 XXX strstart
%460:	store	 XXX block_start
%461:	load	 read_buf
%462:	call	 XXX XXX %461
%463:	store	 %462 lookahead
%464:	load	 lookahead
%465:	icmp	 %464 XXX
%466:	br	 %465 lor.lhs.false26 if.then29

BASIC BLOCK lor.lhs.false26
%467:	load	 lookahead
%468:	icmp	 %467 XXX
%469:	br	 %468 if.end30 if.then29

BASIC BLOCK if.then29
%470:	store	 XXX eofile
%471:	store	 XXX lookahead
%472:	br	 for.end

BASIC BLOCK if.end30
%473:	store	 XXX eofile
%474:	br	 while.cond

BASIC BLOCK while.cond
%475:	load	 lookahead
%476:	icmp	 %475 XXX
%477:	br	 %476 land.end land.rhs

BASIC BLOCK land.rhs
%478:	load	 eofile
%479:	icmp	 %478 XXX
%480:	xor	 %479 XXX
%481:	br	 land.end

BASIC BLOCK land.end
%482:	phi	 XXX %480
%483:	br	 %482 while.end while.body

BASIC BLOCK while.body
%484:	call	 fill_window
%485:	br	 while.cond

BASIC BLOCK while.end
%486:	store	 XXX ins_h
%487:	br	 for.cond

BASIC BLOCK for.cond
%488:	phi	 XXX %501
%489:	icmp	 %488 XXX
%490:	br	 %489 for.end for.body

BASIC BLOCK for.body
%491:	load	 ins_h
%492:	shl	 %491 XXX
%493:	zext	 %488
%494:	getelementptr	 XXX XXX %493
%495:	load	 %494
%496:	zext	 %495
%497:	xor	 %492 %496
%498:	and	 %497 XXX
%499:	store	 %498 ins_h
%500:	br	 for.inc

BASIC BLOCK for.inc
%501:	add	 %488 XXX
%502:	br	 for.cond

BASIC BLOCK for.end
%503:	ret	

FUNCTION error

BASIC BLOCK entry
%504:	load	 stderr
%505:	load	 progname
%506:	call	 %504 XXX %505 XXX m fprintf
%507:	call	 abort_gzip
%508:	ret	

FUNCTION fill_window

BASIC BLOCK entry
%509:	load	 window_size
%510:	load	 lookahead
%511:	zext	 %510
%512:	sub	 %509 %511
%513:	load	 strstart
%514:	zext	 %513
%515:	sub	 %512 %514
%516:	trunc	 %515
%517:	icmp	 %516 XXX
%518:	br	 %517 if.else if.then

BASIC BLOCK if.then
%519:	add	 %516 XXX
%520:	br	 if.end40

BASIC BLOCK if.else
%521:	load	 strstart
%522:	icmp	 %521 XXX
%523:	br	 %522 if.end if.then7

BASIC BLOCK if.then7
%524:	call	 XXX XXX XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%525:	load	 match_start
%526:	sub	 %525 XXX
%527:	store	 %526 match_start
%528:	load	 strstart
%529:	sub	 %528 XXX
%530:	store	 %529 strstart
%531:	load	 block_start
%532:	sub	 %531 XXX
%533:	store	 %532 block_start
%534:	br	 for.cond

BASIC BLOCK for.cond
%535:	phi	 XXX %553
%536:	icmp	 %535 XXX
%537:	br	 %536 for.end for.body

BASIC BLOCK for.body
%538:	zext	 %535
%539:	getelementptr	 XXX %538
%540:	load	 %539
%541:	zext	 %540
%542:	icmp	 %541 XXX
%543:	br	 %542 cond.false cond.true

BASIC BLOCK cond.true
%544:	sub	 %541 XXX
%545:	br	 cond.end

BASIC BLOCK cond.false
%546:	br	 cond.end

BASIC BLOCK cond.end
%547:	phi	 %544 XXX
%548:	trunc	 %547
%549:	zext	 %535
%550:	getelementptr	 XXX %549
%551:	store	 %548 %550
%552:	br	 for.inc

BASIC BLOCK for.inc
%553:	add	 %535 XXX
%554:	br	 for.cond

BASIC BLOCK for.end
%555:	br	 for.cond20

BASIC BLOCK for.cond20
%556:	phi	 XXX %574
%557:	icmp	 %556 XXX
%558:	br	 %557 for.end39 for.body23

BASIC BLOCK for.body23
%559:	zext	 %556
%560:	getelementptr	 XXX XXX %559
%561:	load	 %560
%562:	zext	 %561
%563:	icmp	 %562 XXX
%564:	br	 %563 cond.false31 cond.true29

BASIC BLOCK cond.true29
%565:	sub	 %562 XXX
%566:	br	 cond.end32

BASIC BLOCK cond.false31
%567:	br	 cond.end32

BASIC BLOCK cond.end32
%568:	phi	 %565 XXX
%569:	trunc	 %568
%570:	zext	 %556
%571:	getelementptr	 XXX XXX %570
%572:	store	 %569 %571
%573:	br	 for.inc37

BASIC BLOCK for.inc37
%574:	add	 %556 XXX
%575:	br	 for.cond20

BASIC BLOCK for.end39
%576:	add	 %516 XXX
%577:	br	 if.end

BASIC BLOCK if.end
%578:	phi	 %576 %516
%579:	br	 if.end40

BASIC BLOCK if.end40
%580:	phi	 %519 %578
%581:	load	 eofile
%582:	icmp	 %581 XXX
%583:	br	 %582 if.then41 if.end52

BASIC BLOCK if.then41
%584:	load	 read_buf
%585:	load	 strstart
%586:	zext	 %585
%587:	getelementptr	 XXX %586
%588:	load	 lookahead
%589:	zext	 %588
%590:	getelementptr	 %587 %589
%591:	call	 %590 %580 %584
%592:	icmp	 %591 XXX
%593:	br	 %592 lor.lhs.false if.then48

BASIC BLOCK lor.lhs.false
%594:	icmp	 %591 XXX
%595:	br	 %594 if.else49 if.then48

BASIC BLOCK if.then48
%596:	store	 XXX eofile
%597:	br	 if.end51

BASIC BLOCK if.else49
%598:	load	 lookahead
%599:	add	 %598 %591
%600:	store	 %599 lookahead
%601:	br	 if.end51

BASIC BLOCK if.end51
%602:	br	 if.end52

BASIC BLOCK if.end52
%603:	ret	

FUNCTION longest_match

BASIC BLOCK entry
%604:	load	 max_chain_length
%605:	load	 strstart
%606:	zext	 %605
%607:	getelementptr	 XXX %606
%608:	load	 prev_length
%609:	load	 strstart
%610:	icmp	 %609 XXX
%611:	br	 %610 cond.false cond.true

BASIC BLOCK cond.true
%612:	load	 strstart
%613:	sub	 %612 XXX
%614:	br	 cond.end

BASIC BLOCK cond.false
%615:	br	 cond.end

BASIC BLOCK cond.end
%616:	phi	 %613 XXX
%617:	load	 strstart
%618:	zext	 %617
%619:	getelementptr	 XXX %618
%620:	getelementptr	 %619 XXX
%621:	sub	 %608 XXX
%622:	sext	 %621
%623:	getelementptr	 %607 %622
%624:	load	 %623
%625:	sext	 %608
%626:	getelementptr	 %607 %625
%627:	load	 %626
%628:	load	 prev_length
%629:	load	 good_match
%630:	icmp	 %628 %629
%631:	br	 %630 if.end if.then

BASIC BLOCK if.then
%632:	lshr	 %604 XXX
%633:	br	 if.end

BASIC BLOCK if.end
%634:	phi	 %632 %604
%635:	br	 do.body

BASIC BLOCK do.body
%636:	phi	 %624 %775
%637:	phi	 %608 %776
%638:	phi	 %627 %777
%639:	phi	 %607 %778
%640:	phi	 %634 %789
%641:	phi	 cur_match %783
%642:	zext	 %641
%643:	getelementptr	 XXX %642
%644:	sext	 %637
%645:	getelementptr	 %643 %644
%646:	load	 %645
%647:	zext	 %646
%648:	zext	 %638
%649:	icmp	 %647 %648
%650:	br	 %649 lor.lhs.false if.then33

BASIC BLOCK lor.lhs.false
%651:	sub	 %637 XXX
%652:	sext	 %651
%653:	getelementptr	 %643 %652
%654:	load	 %653
%655:	zext	 %654
%656:	zext	 %636
%657:	icmp	 %655 %656
%658:	br	 %657 lor.lhs.false22 if.then33

BASIC BLOCK lor.lhs.false22
%659:	load	 %643
%660:	zext	 %659
%661:	load	 %639
%662:	zext	 %661
%663:	icmp	 %660 %662
%664:	br	 %663 lor.lhs.false27 if.then33

BASIC BLOCK lor.lhs.false27
%665:	getelementptr	 %643 XXX
%666:	load	 %665
%667:	zext	 %666
%668:	getelementptr	 %639 XXX
%669:	load	 %668
%670:	zext	 %669
%671:	icmp	 %667 %670
%672:	br	 %671 if.end34 if.then33

BASIC BLOCK if.then33
%673:	br	 do.cond110

BASIC BLOCK if.end34
%674:	getelementptr	 %639 XXX
%675:	getelementptr	 %665 XXX
%676:	br	 do.body37

BASIC BLOCK do.body37
%677:	phi	 %675 %746
%678:	phi	 %674 %747
%679:	br	 do.cond

BASIC BLOCK do.cond
%680:	getelementptr	 %678 XXX
%681:	load	 %680
%682:	zext	 %681
%683:	getelementptr	 %677 XXX
%684:	load	 %683
%685:	zext	 %684
%686:	icmp	 %682 %685
%687:	br	 %686 land.end land.lhs.true

BASIC BLOCK land.lhs.true
%688:	getelementptr	 %680 XXX
%689:	load	 %688
%690:	zext	 %689
%691:	getelementptr	 %683 XXX
%692:	load	 %691
%693:	zext	 %692
%694:	icmp	 %690 %693
%695:	br	 %694 land.end land.lhs.true50

BASIC BLOCK land.lhs.true50
%696:	getelementptr	 %688 XXX
%697:	load	 %696
%698:	zext	 %697
%699:	getelementptr	 %691 XXX
%700:	load	 %699
%701:	zext	 %700
%702:	icmp	 %698 %701
%703:	br	 %702 land.end land.lhs.true57

BASIC BLOCK land.lhs.true57
%704:	getelementptr	 %696 XXX
%705:	load	 %704
%706:	zext	 %705
%707:	getelementptr	 %699 XXX
%708:	load	 %707
%709:	zext	 %708
%710:	icmp	 %706 %709
%711:	br	 %710 land.end land.lhs.true64

BASIC BLOCK land.lhs.true64
%712:	getelementptr	 %704 XXX
%713:	load	 %712
%714:	zext	 %713
%715:	getelementptr	 %707 XXX
%716:	load	 %715
%717:	zext	 %716
%718:	icmp	 %714 %717
%719:	br	 %718 land.end land.lhs.true71

BASIC BLOCK land.lhs.true71
%720:	getelementptr	 %712 XXX
%721:	load	 %720
%722:	zext	 %721
%723:	getelementptr	 %715 XXX
%724:	load	 %723
%725:	zext	 %724
%726:	icmp	 %722 %725
%727:	br	 %726 land.end land.lhs.true78

BASIC BLOCK land.lhs.true78
%728:	getelementptr	 %720 XXX
%729:	load	 %728
%730:	zext	 %729
%731:	getelementptr	 %723 XXX
%732:	load	 %731
%733:	zext	 %732
%734:	icmp	 %730 %733
%735:	br	 %734 land.end land.lhs.true85

BASIC BLOCK land.lhs.true85
%736:	getelementptr	 %728 XXX
%737:	load	 %736
%738:	zext	 %737
%739:	getelementptr	 %731 XXX
%740:	load	 %739
%741:	zext	 %740
%742:	icmp	 %738 %741
%743:	br	 %742 land.end land.rhs

BASIC BLOCK land.rhs
%744:	icmp	 %736 %620
%745:	br	 land.end

BASIC BLOCK land.end
%746:	phi	 %739 %739 %731 %723 %715 %707 %699 %691 %683
%747:	phi	 %736 %736 %728 %720 %712 %704 %696 %688 %680
%748:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX %744
%749:	br	 %748 do.end do.body37

BASIC BLOCK do.end
%750:	ptrtoint	 %620
%751:	ptrtoint	 %747
%752:	sub	 %750 %751
%753:	trunc	 %752
%754:	sub	 XXX %753
%755:	getelementptr	 %620 XXX
%756:	icmp	 %754 %637
%757:	br	 %756 if.end109 if.then99

BASIC BLOCK if.then99
%758:	store	 %641 match_start
%759:	load	 nice_match
%760:	icmp	 %754 %759
%761:	br	 %760 if.end103 if.then102

BASIC BLOCK if.then102
%762:	br	 do.end120

BASIC BLOCK if.end103
%763:	sub	 %754 XXX
%764:	sext	 %763
%765:	getelementptr	 %755 %764
%766:	load	 %765
%767:	sext	 %754
%768:	getelementptr	 %755 %767
%769:	load	 %768
%770:	br	 if.end109

BASIC BLOCK if.end109
%771:	phi	 %766 %636
%772:	phi	 %754 %637
%773:	phi	 %769 %638
%774:	br	 do.cond110

BASIC BLOCK do.cond110
%775:	phi	 %636 %771
%776:	phi	 %637 %772
%777:	phi	 %638 %773
%778:	phi	 %639 %755
%779:	and	 %641 XXX
%780:	zext	 %779
%781:	getelementptr	 XXX XXX %780
%782:	load	 %781
%783:	zext	 %782
%784:	icmp	 %783 %616
%785:	br	 %784 land.end119 land.rhs116

BASIC BLOCK land.rhs116
%786:	add	 %640 XXX
%787:	icmp	 %786 XXX
%788:	br	 land.end119

BASIC BLOCK land.end119
%789:	phi	 %786 %640
%790:	phi	 XXX %787
%791:	br	 %790 do.end120 do.body

BASIC BLOCK do.end120
%792:	phi	 %776 %754
%793:	ret	 %792

FUNCTION deflate

BASIC BLOCK entry
%794:	br	 while.cond

BASIC BLOCK while.cond
%795:	phi	 XXX %990
%796:	phi	 XXX %991
%797:	load	 lookahead
%798:	icmp	 %797 XXX
%799:	br	 %798 while.end112 while.body

BASIC BLOCK while.body
%800:	load	 ins_h
%801:	shl	 %800 XXX
%802:	load	 strstart
%803:	add	 %802 XXX
%804:	sub	 %803 XXX
%805:	zext	 %804
%806:	getelementptr	 XXX XXX %805
%807:	load	 %806
%808:	zext	 %807
%809:	xor	 %801 %808
%810:	and	 %809 XXX
%811:	store	 %810 ins_h
%812:	load	 ins_h
%813:	zext	 %812
%814:	getelementptr	 XXX %813
%815:	load	 %814
%816:	zext	 %815
%817:	trunc	 %816
%818:	load	 strstart
%819:	and	 %818 XXX
%820:	zext	 %819
%821:	getelementptr	 XXX XXX %820
%822:	store	 %817 %821
%823:	load	 strstart
%824:	trunc	 %823
%825:	load	 ins_h
%826:	zext	 %825
%827:	getelementptr	 XXX %826
%828:	store	 %824 %827
%829:	store	 %796 prev_length
%830:	load	 match_start
%831:	icmp	 %816 XXX
%832:	br	 %831 if.end30 land.lhs.true

BASIC BLOCK land.lhs.true
%833:	load	 prev_length
%834:	load	 max_lazy_match
%835:	icmp	 %833 %834
%836:	br	 %835 if.end30 land.lhs.true15

BASIC BLOCK land.lhs.true15
%837:	load	 strstart
%838:	sub	 %837 %816
%839:	icmp	 %838 XXX
%840:	br	 %839 if.end30 if.then

BASIC BLOCK if.then
%841:	call	 %816 longest_match
%842:	load	 lookahead
%843:	icmp	 %841 %842
%844:	br	 %843 if.end if.then21

BASIC BLOCK if.then21
%845:	load	 lookahead
%846:	br	 if.end

BASIC BLOCK if.end
%847:	phi	 %845 %841
%848:	icmp	 %847 XXX
%849:	br	 %848 if.end29 land.lhs.true24

BASIC BLOCK land.lhs.true24
%850:	load	 strstart
%851:	load	 match_start
%852:	sub	 %850 %851
%853:	icmp	 %852 XXX
%854:	br	 %853 if.end29 if.then28

BASIC BLOCK if.then28
%855:	add	 %847 XXX
%856:	br	 if.end29

BASIC BLOCK if.end29
%857:	phi	 %855 %847 %847
%858:	br	 if.end30

BASIC BLOCK if.end30
%859:	phi	 %857 XXX XXX XXX
%860:	load	 prev_length
%861:	icmp	 %860 XXX
%862:	br	 %861 if.else land.lhs.true33

BASIC BLOCK land.lhs.true33
%863:	load	 prev_length
%864:	icmp	 %859 %863
%865:	br	 %864 if.else if.then36

BASIC BLOCK if.then36
%866:	load	 strstart
%867:	sub	 %866 XXX
%868:	sub	 %867 %830
%869:	load	 prev_length
%870:	sub	 %869 XXX
%871:	call	 %868 %870 ct_tally
%872:	load	 prev_length
%873:	sub	 %872 XXX
%874:	load	 lookahead
%875:	sub	 %874 %873
%876:	store	 %875 lookahead
%877:	load	 prev_length
%878:	sub	 %877 XXX
%879:	store	 %878 prev_length
%880:	br	 do.body

BASIC BLOCK do.body
%881:	load	 strstart
%882:	add	 %881 XXX
%883:	store	 %882 strstart
%884:	load	 ins_h
%885:	shl	 %884 XXX
%886:	load	 strstart
%887:	add	 %886 XXX
%888:	sub	 %887 XXX
%889:	zext	 %888
%890:	getelementptr	 XXX XXX %889
%891:	load	 %890
%892:	zext	 %891
%893:	xor	 %885 %892
%894:	and	 %893 XXX
%895:	store	 %894 ins_h
%896:	load	 ins_h
%897:	zext	 %896
%898:	getelementptr	 XXX %897
%899:	load	 %898
%900:	zext	 %899
%901:	trunc	 %900
%902:	load	 strstart
%903:	and	 %902 XXX
%904:	zext	 %903
%905:	getelementptr	 XXX XXX %904
%906:	store	 %901 %905
%907:	load	 strstart
%908:	trunc	 %907
%909:	load	 ins_h
%910:	zext	 %909
%911:	getelementptr	 XXX %910
%912:	store	 %908 %911
%913:	br	 do.cond

BASIC BLOCK do.cond
%914:	load	 prev_length
%915:	add	 %914 XXX
%916:	store	 %915 prev_length
%917:	icmp	 %915 XXX
%918:	br	 %917 do.end do.body

BASIC BLOCK do.end
%919:	load	 strstart
%920:	add	 %919 XXX
%921:	store	 %920 strstart
%922:	icmp	 %871 XXX
%923:	br	 %922 if.end76 if.then66

BASIC BLOCK if.then66
%924:	load	 block_start
%925:	icmp	 %924 XXX
%926:	br	 %925 cond.false cond.true

BASIC BLOCK cond.true
%927:	load	 block_start
%928:	trunc	 %927
%929:	zext	 %928
%930:	getelementptr	 XXX XXX %929
%931:	br	 cond.end

BASIC BLOCK cond.false
%932:	br	 cond.end

BASIC BLOCK cond.end
%933:	phi	 %930 XXX
%934:	load	 strstart
%935:	zext	 %934
%936:	load	 block_start
%937:	sub	 %935 %936
%938:	call	 %933 %937 XXX flush_block
%939:	load	 strstart
%940:	zext	 %939
%941:	store	 %940 block_start
%942:	br	 if.end76

BASIC BLOCK if.end76
%943:	br	 if.end106

BASIC BLOCK if.else
%944:	icmp	 %795 XXX
%945:	br	 %944 if.else102 if.then78

BASIC BLOCK if.then78
%946:	load	 strstart
%947:	sub	 %946 XXX
%948:	zext	 %947
%949:	getelementptr	 XXX XXX %948
%950:	load	 %949
%951:	zext	 %950
%952:	call	 XXX %951 ct_tally
%953:	icmp	 %952 XXX
%954:	br	 %953 if.end99 if.then85

BASIC BLOCK if.then85
%955:	load	 block_start
%956:	icmp	 %955 XXX
%957:	br	 %956 cond.false92 cond.true88

BASIC BLOCK cond.true88
%958:	load	 block_start
%959:	trunc	 %958
%960:	zext	 %959
%961:	getelementptr	 XXX XXX %960
%962:	br	 cond.end93

BASIC BLOCK cond.false92
%963:	br	 cond.end93

BASIC BLOCK cond.end93
%964:	phi	 %961 XXX
%965:	load	 strstart
%966:	zext	 %965
%967:	load	 block_start
%968:	sub	 %966 %967
%969:	call	 %964 %968 XXX flush_block
%970:	load	 strstart
%971:	zext	 %970
%972:	store	 %971 block_start
%973:	br	 if.end99

BASIC BLOCK if.end99
%974:	load	 strstart
%975:	add	 %974 XXX
%976:	store	 %975 strstart
%977:	load	 lookahead
%978:	add	 %977 XXX
%979:	store	 %978 lookahead
%980:	br	 if.end105

BASIC BLOCK if.else102
%981:	load	 strstart
%982:	add	 %981 XXX
%983:	store	 %982 strstart
%984:	load	 lookahead
%985:	add	 %984 XXX
%986:	store	 %985 lookahead
%987:	br	 if.end105

BASIC BLOCK if.end105
%988:	phi	 %795 XXX
%989:	br	 if.end106

BASIC BLOCK if.end106
%990:	phi	 XXX %988
%991:	phi	 XXX %859
%992:	br	 while.cond107

BASIC BLOCK while.cond107
%993:	load	 lookahead
%994:	icmp	 %993 XXX
%995:	br	 %994 land.end land.rhs

BASIC BLOCK land.rhs
%996:	load	 eofile
%997:	icmp	 %996 XXX
%998:	xor	 %997 XXX
%999:	br	 land.end

BASIC BLOCK land.end
%1000:	phi	 XXX %998
%1001:	br	 %1000 while.end while.body111

BASIC BLOCK while.body111
%1002:	call	 fill_window
%1003:	br	 while.cond107

BASIC BLOCK while.end
%1004:	br	 while.cond

BASIC BLOCK while.end112
%1005:	icmp	 %795 XXX
%1006:	br	 %1005 if.end120 if.then114

BASIC BLOCK if.then114
%1007:	load	 strstart
%1008:	sub	 %1007 XXX
%1009:	zext	 %1008
%1010:	getelementptr	 XXX XXX %1009
%1011:	load	 %1010
%1012:	zext	 %1011
%1013:	call	 XXX %1012 ct_tally
%1014:	br	 if.end120

BASIC BLOCK if.end120
%1015:	load	 block_start
%1016:	icmp	 %1015 XXX
%1017:	br	 %1016 cond.false127 cond.true123

BASIC BLOCK cond.true123
%1018:	load	 block_start
%1019:	trunc	 %1018
%1020:	zext	 %1019
%1021:	getelementptr	 XXX XXX %1020
%1022:	br	 cond.end128

BASIC BLOCK cond.false127
%1023:	br	 cond.end128

BASIC BLOCK cond.end128
%1024:	phi	 %1021 XXX
%1025:	load	 strstart
%1026:	zext	 %1025
%1027:	load	 block_start
%1028:	sub	 %1026 %1027
%1029:	call	 %1024 %1028 XXX flush_block
%1030:	ret	 %1029

FUNCTION ct_tally

BASIC BLOCK entry
%1031:	trunc	 lc
%1032:	load	 last_lit
%1033:	add	 %1032 XXX
%1034:	store	 %1033 last_lit
%1035:	zext	 %1032
%1036:	getelementptr	 inbuf XXX %1035
%1037:	store	 %1031 %1036
%1038:	icmp	 dist XXX
%1039:	br	 %1038 if.else if.then

BASIC BLOCK if.then
%1040:	sext	 lc
%1041:	getelementptr	 dyn_ltree XXX %1040
%1042:	getelementptr	 %1041 XXX XXX
%1043:	bitcast	 %1042
%1044:	load	 %1043
%1045:	add	 %1044 XXX
%1046:	store	 %1045 %1043
%1047:	br	 if.end

BASIC BLOCK if.else
%1048:	add	 dist XXX
%1049:	sext	 lc
%1050:	getelementptr	 length_code XXX %1049
%1051:	load	 %1050
%1052:	zext	 %1051
%1053:	add	 %1052 XXX
%1054:	add	 %1053 XXX
%1055:	sext	 %1054
%1056:	getelementptr	 dyn_ltree XXX %1055
%1057:	getelementptr	 %1056 XXX XXX
%1058:	bitcast	 %1057
%1059:	load	 %1058
%1060:	add	 %1059 XXX
%1061:	store	 %1060 %1058
%1062:	icmp	 %1048 XXX
%1063:	br	 %1062 cond.false cond.true

BASIC BLOCK cond.true
%1064:	sext	 %1048
%1065:	getelementptr	 dist_code XXX %1064
%1066:	load	 %1065
%1067:	zext	 %1066
%1068:	br	 cond.end

BASIC BLOCK cond.false
%1069:	ashr	 %1048 XXX
%1070:	add	 XXX %1069
%1071:	sext	 %1070
%1072:	getelementptr	 dist_code XXX %1071
%1073:	load	 %1072
%1074:	zext	 %1073
%1075:	br	 cond.end

BASIC BLOCK cond.end
%1076:	phi	 %1067 %1074
%1077:	sext	 %1076
%1078:	getelementptr	 dyn_dtree XXX %1077
%1079:	getelementptr	 %1078 XXX XXX
%1080:	bitcast	 %1079
%1081:	load	 %1080
%1082:	add	 %1081 XXX
%1083:	store	 %1082 %1080
%1084:	trunc	 %1048
%1085:	load	 last_dist
%1086:	add	 %1085 XXX
%1087:	store	 %1086 last_dist
%1088:	zext	 %1085
%1089:	getelementptr	 d_buf XXX %1088
%1090:	store	 %1084 %1089
%1091:	load	 flag_bit
%1092:	zext	 %1091
%1093:	load	 flags
%1094:	zext	 %1093
%1095:	or	 %1094 %1092
%1096:	trunc	 %1095
%1097:	store	 %1096 flags
%1098:	br	 if.end

BASIC BLOCK if.end
%1099:	load	 flag_bit
%1100:	zext	 %1099
%1101:	shl	 %1100 XXX
%1102:	trunc	 %1101
%1103:	store	 %1102 flag_bit
%1104:	load	 last_lit
%1105:	and	 %1104 XXX
%1106:	icmp	 %1105 XXX
%1107:	br	 %1106 if.end43 if.then39

BASIC BLOCK if.then39
%1108:	load	 flags
%1109:	load	 last_flags
%1110:	add	 %1109 XXX
%1111:	store	 %1110 last_flags
%1112:	zext	 %1109
%1113:	getelementptr	 flag_buf XXX %1112
%1114:	store	 %1108 %1113
%1115:	store	 XXX flags
%1116:	store	 XXX flag_bit
%1117:	br	 if.end43

BASIC BLOCK if.end43
%1118:	load	 level
%1119:	icmp	 %1118 XXX
%1120:	br	 %1119 if.end75 land.lhs.true

BASIC BLOCK land.lhs.true
%1121:	load	 last_lit
%1122:	and	 %1121 XXX
%1123:	icmp	 %1122 XXX
%1124:	br	 %1123 if.end75 if.then49

BASIC BLOCK if.then49
%1125:	load	 last_lit
%1126:	zext	 %1125
%1127:	mul	 %1126 XXX
%1128:	load	 strstart
%1129:	zext	 %1128
%1130:	load	 block_start
%1131:	sub	 %1129 %1130
%1132:	br	 for.cond

BASIC BLOCK for.cond
%1133:	phi	 %1127 %1149
%1134:	phi	 XXX %1151
%1135:	icmp	 %1134 XXX
%1136:	br	 %1135 for.end for.body

BASIC BLOCK for.body
%1137:	sext	 %1134
%1138:	getelementptr	 dyn_dtree XXX %1137
%1139:	getelementptr	 %1138 XXX XXX
%1140:	bitcast	 %1139
%1141:	load	 %1140
%1142:	zext	 %1141
%1143:	sext	 %1134
%1144:	getelementptr	 extra_dbits XXX %1143
%1145:	load	 %1144
%1146:	sext	 %1145
%1147:	add	 XXX %1146
%1148:	mul	 %1142 %1147
%1149:	add	 %1133 %1148
%1150:	br	 for.inc

BASIC BLOCK for.inc
%1151:	add	 %1134 XXX
%1152:	br	 for.cond

BASIC BLOCK for.end
%1153:	lshr	 %1133 XXX
%1154:	load	 last_dist
%1155:	load	 last_lit
%1156:	udiv	 %1155 XXX
%1157:	icmp	 %1154 %1156
%1158:	br	 %1157 if.end74 land.lhs.true69

BASIC BLOCK land.lhs.true69
%1159:	udiv	 %1131 XXX
%1160:	icmp	 %1153 %1159
%1161:	br	 %1160 if.end74 if.then73

BASIC BLOCK if.then73
%1162:	br	 return

BASIC BLOCK if.end74
%1163:	br	 if.end75

BASIC BLOCK if.end75
%1164:	load	 last_lit
%1165:	icmp	 %1164 XXX
%1166:	br	 %1165 lor.rhs lor.end

BASIC BLOCK lor.rhs
%1167:	load	 last_dist
%1168:	icmp	 %1167 XXX
%1169:	br	 lor.end

BASIC BLOCK lor.end
%1170:	phi	 XXX %1168
%1171:	zext	 %1170
%1172:	br	 return

BASIC BLOCK return
%1173:	phi	 XXX %1171
%1174:	ret	 %1173

FUNCTION flush_block

BASIC BLOCK entry
%1175:	load	 flags
%1176:	load	 last_flags
%1177:	zext	 %1176
%1178:	getelementptr	 flag_buf XXX %1177
%1179:	store	 %1175 %1178
%1180:	load	 file_type
%1181:	load	 %1180
%1182:	zext	 %1181
%1183:	icmp	 %1182 XXX
%1184:	br	 %1183 if.end if.then

BASIC BLOCK if.then
%1185:	call	 set_file_type
%1186:	br	 if.end

BASIC BLOCK if.end
%1187:	call	 l_desc build_tree
%1188:	call	 d_desc build_tree
%1189:	call	 build_bl_tree
%1190:	load	 opt_len
%1191:	add	 %1190 XXX
%1192:	add	 %1191 XXX
%1193:	lshr	 %1192 XXX
%1194:	load	 static_len
%1195:	add	 %1194 XXX
%1196:	add	 %1195 XXX
%1197:	lshr	 %1196 XXX
%1198:	load	 input_len
%1199:	add	 %1198 stored_len
%1200:	store	 %1199 input_len
%1201:	icmp	 %1197 %1193
%1202:	br	 %1201 if.end10 if.then9

BASIC BLOCK if.then9
%1203:	br	 if.end10

BASIC BLOCK if.end10
%1204:	phi	 %1197 %1193
%1205:	icmp	 stored_len %1204
%1206:	br	 %1205 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%1207:	icmp	 eof XXX
%1208:	br	 %1207 if.else land.lhs.true13

BASIC BLOCK land.lhs.true13
%1209:	load	 compressed_len
%1210:	icmp	 %1209 XXX
%1211:	br	 %1210 if.else land.lhs.true16

BASIC BLOCK land.lhs.true16
%1212:	br	 XXX if.else if.then17

BASIC BLOCK if.then17
%1213:	icmp	 buf XXX
%1214:	br	 %1213 if.end21 if.then20

BASIC BLOCK if.then20
%1215:	call	 XXX error
%1216:	br	 if.end21

BASIC BLOCK if.end21
%1217:	trunc	 stored_len
%1218:	call	 buf %1217 XXX copy_block
%1219:	shl	 stored_len XXX
%1220:	store	 %1219 compressed_len
%1221:	load	 file_method
%1222:	store	 XXX %1221
%1223:	br	 if.end53

BASIC BLOCK if.else
%1224:	add	 stored_len XXX
%1225:	icmp	 %1224 %1204
%1226:	br	 %1225 if.else37 land.lhs.true26

BASIC BLOCK land.lhs.true26
%1227:	icmp	 buf XXX
%1228:	br	 %1227 if.else37 if.then29

BASIC BLOCK if.then29
%1229:	add	 XXX eof
%1230:	call	 %1229 XXX send_bits
%1231:	load	 compressed_len
%1232:	add	 %1231 XXX
%1233:	add	 %1232 XXX
%1234:	and	 %1233 XXX
%1235:	store	 %1234 compressed_len
%1236:	add	 stored_len XXX
%1237:	shl	 %1236 XXX
%1238:	load	 compressed_len
%1239:	add	 %1238 %1237
%1240:	store	 %1239 compressed_len
%1241:	trunc	 stored_len
%1242:	call	 buf %1241 XXX copy_block
%1243:	br	 if.end52

BASIC BLOCK if.else37
%1244:	icmp	 %1197 %1204
%1245:	br	 %1244 if.else44 if.then40

BASIC BLOCK if.then40
%1246:	add	 XXX eof
%1247:	call	 %1246 XXX send_bits
%1248:	call	 XXX XXX compress_block
%1249:	load	 static_len
%1250:	add	 XXX %1249
%1251:	load	 compressed_len
%1252:	add	 %1251 %1250
%1253:	store	 %1252 compressed_len
%1254:	br	 if.end51

BASIC BLOCK if.else44
%1255:	add	 XXX eof
%1256:	call	 %1255 XXX send_bits
%1257:	load	 XXX
%1258:	add	 %1257 XXX
%1259:	load	 XXX
%1260:	add	 %1259 XXX
%1261:	add	 %1189 XXX
%1262:	call	 %1258 %1260 %1261 send_all_trees
%1263:	call	 XXX XXX compress_block
%1264:	load	 opt_len
%1265:	add	 XXX %1264
%1266:	load	 compressed_len
%1267:	add	 %1266 %1265
%1268:	store	 %1267 compressed_len
%1269:	br	 if.end51

BASIC BLOCK if.end51
%1270:	br	 if.end52

BASIC BLOCK if.end52
%1271:	br	 if.end53

BASIC BLOCK if.end53
%1272:	call	 init_block
%1273:	icmp	 eof XXX
%1274:	br	 %1273 if.end57 if.then55

BASIC BLOCK if.then55
%1275:	call	 bi_windup
%1276:	load	 compressed_len
%1277:	add	 %1276 XXX
%1278:	store	 %1277 compressed_len
%1279:	br	 if.end57

BASIC BLOCK if.end57
%1280:	load	 compressed_len
%1281:	lshr	 %1280 XXX
%1282:	ret	 %1281

FUNCTION _getopt_internal

BASIC BLOCK entry
%1283:	store	 XXX optarg
%1284:	load	 optind
%1285:	icmp	 %1284 XXX
%1286:	br	 %1285 if.end17 if.then

BASIC BLOCK if.then
%1287:	store	 XXX optind
%1288:	store	 XXX last_nonopt
%1289:	store	 XXX first_nonopt
%1290:	store	 XXX nextchar
%1291:	getelementptr	 optstring XXX
%1292:	load	 %1291
%1293:	sext	 %1292
%1294:	icmp	 %1293 XXX
%1295:	br	 %1294 if.else if.then3

BASIC BLOCK if.then3
%1296:	store	 XXX ordering
%1297:	getelementptr	 optstring XXX
%1298:	br	 if.end16

BASIC BLOCK if.else
%1299:	getelementptr	 optstring XXX
%1300:	load	 %1299
%1301:	sext	 %1300
%1302:	icmp	 %1301 XXX
%1303:	br	 %1302 if.else10 if.then8

BASIC BLOCK if.then8
%1304:	store	 XXX ordering
%1305:	getelementptr	 optstring XXX
%1306:	br	 if.end15

BASIC BLOCK if.else10
%1307:	call	 XXX getenv
%1308:	icmp	 %1307 XXX
%1309:	br	 %1308 if.else14 if.then13

BASIC BLOCK if.then13
%1310:	store	 XXX ordering
%1311:	br	 if.end

BASIC BLOCK if.else14
%1312:	store	 XXX ordering
%1313:	br	 if.end

BASIC BLOCK if.end
%1314:	br	 if.end15

BASIC BLOCK if.end15
%1315:	phi	 %1305 optstring
%1316:	br	 if.end16

BASIC BLOCK if.end16
%1317:	phi	 %1297 %1315
%1318:	br	 if.end17

BASIC BLOCK if.end17
%1319:	phi	 %1317 optstring
%1320:	load	 nextchar
%1321:	icmp	 %1320 XXX
%1322:	br	 %1321 lor.lhs.false if.then23

BASIC BLOCK lor.lhs.false
%1323:	load	 nextchar
%1324:	load	 %1323
%1325:	sext	 %1324
%1326:	icmp	 %1325 XXX
%1327:	br	 %1326 if.end150 if.then23

BASIC BLOCK if.then23
%1328:	load	 ordering
%1329:	icmp	 %1328 XXX
%1330:	br	 %1329 if.end68 if.then26

BASIC BLOCK if.then26
%1331:	load	 first_nonopt
%1332:	load	 last_nonopt
%1333:	icmp	 %1331 %1332
%1334:	br	 %1333 if.else32 land.lhs.true

BASIC BLOCK land.lhs.true
%1335:	load	 last_nonopt
%1336:	load	 optind
%1337:	icmp	 %1335 %1336
%1338:	br	 %1337 if.else32 if.then31

BASIC BLOCK if.then31
%1339:	call	 argv exchange
%1340:	br	 if.end37

BASIC BLOCK if.else32
%1341:	load	 last_nonopt
%1342:	load	 optind
%1343:	icmp	 %1341 %1342
%1344:	br	 %1343 if.end36 if.then35

BASIC BLOCK if.then35
%1345:	load	 optind
%1346:	store	 %1345 first_nonopt
%1347:	br	 if.end36

BASIC BLOCK if.end36
%1348:	br	 if.end37

BASIC BLOCK if.end37
%1349:	br	 while.cond

BASIC BLOCK while.cond
%1350:	load	 optind
%1351:	icmp	 %1350 argc
%1352:	br	 %1351 land.end land.lhs.true40

BASIC BLOCK land.lhs.true40
%1353:	load	 optind
%1354:	sext	 %1353
%1355:	getelementptr	 argv %1354
%1356:	load	 %1355
%1357:	getelementptr	 %1356 XXX
%1358:	load	 %1357
%1359:	sext	 %1358
%1360:	icmp	 %1359 XXX
%1361:	br	 %1360 lor.lhs.false46 land.rhs

BASIC BLOCK lor.lhs.false46
%1362:	load	 optind
%1363:	sext	 %1362
%1364:	getelementptr	 argv %1363
%1365:	load	 %1364
%1366:	getelementptr	 %1365 XXX
%1367:	load	 %1366
%1368:	sext	 %1367
%1369:	icmp	 %1368 XXX
%1370:	br	 %1369 land.end land.rhs

BASIC BLOCK land.rhs
%1371:	icmp	 longopts XXX
%1372:	br	 %1371 lor.lhs.false55 lor.end

BASIC BLOCK lor.lhs.false55
%1373:	load	 optind
%1374:	sext	 %1373
%1375:	getelementptr	 argv %1374
%1376:	load	 %1375
%1377:	getelementptr	 %1376 XXX
%1378:	load	 %1377
%1379:	sext	 %1378
%1380:	icmp	 %1379 XXX
%1381:	br	 %1380 lor.rhs lor.end

BASIC BLOCK lor.rhs
%1382:	load	 optind
%1383:	sext	 %1382
%1384:	getelementptr	 argv %1383
%1385:	load	 %1384
%1386:	getelementptr	 %1385 XXX
%1387:	load	 %1386
%1388:	sext	 %1387
%1389:	icmp	 %1388 XXX
%1390:	br	 lor.end

BASIC BLOCK lor.end
%1391:	phi	 XXX XXX %1389
%1392:	br	 land.end

BASIC BLOCK land.end
%1393:	phi	 XXX XXX %1391
%1394:	br	 %1393 while.end while.body

BASIC BLOCK while.body
%1395:	load	 optind
%1396:	add	 %1395 XXX
%1397:	store	 %1396 optind
%1398:	br	 while.cond

BASIC BLOCK while.end
%1399:	load	 optind
%1400:	store	 %1399 last_nonopt
%1401:	br	 if.end68

BASIC BLOCK if.end68
%1402:	load	 optind
%1403:	icmp	 %1402 argc
%1404:	br	 %1403 if.end89 land.lhs.true71

BASIC BLOCK land.lhs.true71
%1405:	load	 optind
%1406:	sext	 %1405
%1407:	getelementptr	 argv %1406
%1408:	load	 %1407
%1409:	call	 %1408 XXX strcmp
%1410:	icmp	 %1409 XXX
%1411:	br	 %1410 if.then75 if.end89

BASIC BLOCK if.then75
%1412:	load	 optind
%1413:	add	 %1412 XXX
%1414:	store	 %1413 optind
%1415:	load	 first_nonopt
%1416:	load	 last_nonopt
%1417:	icmp	 %1415 %1416
%1418:	br	 %1417 if.else83 land.lhs.true79

BASIC BLOCK land.lhs.true79
%1419:	load	 last_nonopt
%1420:	load	 optind
%1421:	icmp	 %1419 %1420
%1422:	br	 %1421 if.else83 if.then82

BASIC BLOCK if.then82
%1423:	call	 argv exchange
%1424:	br	 if.end88

BASIC BLOCK if.else83
%1425:	load	 first_nonopt
%1426:	load	 last_nonopt
%1427:	icmp	 %1425 %1426
%1428:	br	 %1427 if.end87 if.then86

BASIC BLOCK if.then86
%1429:	load	 optind
%1430:	store	 %1429 first_nonopt
%1431:	br	 if.end87

BASIC BLOCK if.end87
%1432:	br	 if.end88

BASIC BLOCK if.end88
%1433:	store	 argc last_nonopt
%1434:	store	 argc optind
%1435:	br	 if.end89

BASIC BLOCK if.end89
%1436:	load	 optind
%1437:	icmp	 %1436 argc
%1438:	br	 %1437 if.end97 if.then92

BASIC BLOCK if.then92
%1439:	load	 first_nonopt
%1440:	load	 last_nonopt
%1441:	icmp	 %1439 %1440
%1442:	br	 %1441 if.end96 if.then95

BASIC BLOCK if.then95
%1443:	load	 first_nonopt
%1444:	store	 %1443 optind
%1445:	br	 if.end96

BASIC BLOCK if.end96
%1446:	br	 return

BASIC BLOCK if.end97
%1447:	load	 optind
%1448:	sext	 %1447
%1449:	getelementptr	 argv %1448
%1450:	load	 %1449
%1451:	getelementptr	 %1450 XXX
%1452:	load	 %1451
%1453:	sext	 %1452
%1454:	icmp	 %1453 XXX
%1455:	br	 %1454 lor.lhs.false104 land.lhs.true111

BASIC BLOCK lor.lhs.false104
%1456:	load	 optind
%1457:	sext	 %1456
%1458:	getelementptr	 argv %1457
%1459:	load	 %1458
%1460:	getelementptr	 %1459 XXX
%1461:	load	 %1460
%1462:	sext	 %1461
%1463:	icmp	 %1462 XXX
%1464:	br	 %1463 if.end136 land.lhs.true111

BASIC BLOCK land.lhs.true111
%1465:	icmp	 longopts XXX
%1466:	br	 %1465 lor.lhs.false114 if.then128

BASIC BLOCK lor.lhs.false114
%1467:	load	 optind
%1468:	sext	 %1467
%1469:	getelementptr	 argv %1468
%1470:	load	 %1469
%1471:	getelementptr	 %1470 XXX
%1472:	load	 %1471
%1473:	sext	 %1472
%1474:	icmp	 %1473 XXX
%1475:	br	 %1474 lor.lhs.false121 if.then128

BASIC BLOCK lor.lhs.false121
%1476:	load	 optind
%1477:	sext	 %1476
%1478:	getelementptr	 argv %1477
%1479:	load	 %1478
%1480:	getelementptr	 %1479 XXX
%1481:	load	 %1480
%1482:	sext	 %1481
%1483:	icmp	 %1482 XXX
%1484:	br	 %1483 if.end136 if.then128

BASIC BLOCK if.then128
%1485:	load	 ordering
%1486:	icmp	 %1485 XXX
%1487:	br	 %1486 if.end132 if.then131

BASIC BLOCK if.then131
%1488:	br	 return

BASIC BLOCK if.end132
%1489:	load	 optind
%1490:	add	 %1489 XXX
%1491:	store	 %1490 optind
%1492:	sext	 %1489
%1493:	getelementptr	 argv %1492
%1494:	load	 %1493
%1495:	store	 %1494 optarg
%1496:	br	 return

BASIC BLOCK if.end136
%1497:	load	 optind
%1498:	sext	 %1497
%1499:	getelementptr	 argv %1498
%1500:	load	 %1499
%1501:	getelementptr	 %1500 XXX
%1502:	icmp	 longopts XXX
%1503:	br	 %1502 land.end148 land.rhs141

BASIC BLOCK land.rhs141
%1504:	load	 optind
%1505:	sext	 %1504
%1506:	getelementptr	 argv %1505
%1507:	load	 %1506
%1508:	getelementptr	 %1507 XXX
%1509:	load	 %1508
%1510:	sext	 %1509
%1511:	icmp	 %1510 XXX
%1512:	br	 land.end148

BASIC BLOCK land.end148
%1513:	phi	 XXX %1511
%1514:	zext	 %1513
%1515:	sext	 %1514
%1516:	getelementptr	 %1501 %1515
%1517:	store	 %1516 nextchar
%1518:	br	 if.end150

BASIC BLOCK if.end150
%1519:	icmp	 longopts XXX
%1520:	br	 %1519 if.end343 land.lhs.true153

BASIC BLOCK land.lhs.true153
%1521:	load	 optind
%1522:	sext	 %1521
%1523:	getelementptr	 argv %1522
%1524:	load	 %1523
%1525:	getelementptr	 %1524 XXX
%1526:	load	 %1525
%1527:	sext	 %1526
%1528:	icmp	 %1527 XXX
%1529:	br	 %1528 lor.lhs.false169 land.lhs.true160

BASIC BLOCK land.lhs.true160
%1530:	load	 optind
%1531:	sext	 %1530
%1532:	getelementptr	 argv %1531
%1533:	load	 %1532
%1534:	getelementptr	 %1533 XXX
%1535:	load	 %1534
%1536:	sext	 %1535
%1537:	icmp	 %1536 XXX
%1538:	br	 %1537 lor.lhs.false167 if.then176

BASIC BLOCK lor.lhs.false167
%1539:	icmp	 long_only XXX
%1540:	br	 %1539 lor.lhs.false169 if.then176

BASIC BLOCK lor.lhs.false169
%1541:	load	 optind
%1542:	sext	 %1541
%1543:	getelementptr	 argv %1542
%1544:	load	 %1543
%1545:	getelementptr	 %1544 XXX
%1546:	load	 %1545
%1547:	sext	 %1546
%1548:	icmp	 %1547 XXX
%1549:	br	 %1548 if.end343 if.then176

BASIC BLOCK if.then176
%1550:	load	 nextchar
%1551:	br	 while.cond177

BASIC BLOCK while.cond177
%1552:	phi	 %1550 %1563
%1553:	load	 %1552
%1554:	sext	 %1553
%1555:	icmp	 %1554 XXX
%1556:	br	 %1555 land.end184 land.rhs180

BASIC BLOCK land.rhs180
%1557:	load	 %1552
%1558:	sext	 %1557
%1559:	icmp	 %1558 XXX
%1560:	br	 land.end184

BASIC BLOCK land.end184
%1561:	phi	 XXX %1559
%1562:	br	 %1561 while.end188 while.body186

BASIC BLOCK while.body186
%1563:	getelementptr	 %1552 XXX
%1564:	br	 while.cond177

BASIC BLOCK while.end188
%1565:	br	 for.cond

BASIC BLOCK for.cond
%1566:	phi	 longopts %1608
%1567:	phi	 XXX %1609
%1568:	phi	 XXX %1604
%1569:	phi	 XXX %1605
%1570:	phi	 XXX %1606
%1571:	getelementptr	 %1566 XXX XXX
%1572:	load	 %1571
%1573:	icmp	 %1572 XXX
%1574:	br	 %1573 for.end for.body

BASIC BLOCK for.body
%1575:	getelementptr	 %1566 XXX XXX
%1576:	load	 %1575
%1577:	load	 nextchar
%1578:	load	 nextchar
%1579:	ptrtoint	 %1552
%1580:	ptrtoint	 %1578
%1581:	sub	 %1579 %1580
%1582:	call	 %1576 %1577 %1581 strncmp
%1583:	icmp	 %1582 XXX
%1584:	br	 %1583 if.then193 if.end209

BASIC BLOCK if.then193
%1585:	load	 nextchar
%1586:	ptrtoint	 %1552
%1587:	ptrtoint	 %1585
%1588:	sub	 %1586 %1587
%1589:	getelementptr	 %1566 XXX XXX
%1590:	load	 %1589
%1591:	call	 %1590 strlen
%1592:	icmp	 %1588 %1591
%1593:	br	 %1592 if.else202 if.then201

BASIC BLOCK if.then201
%1594:	br	 for.end

BASIC BLOCK if.else202
%1595:	icmp	 %1569 XXX
%1596:	br	 %1595 if.else206 if.then205

BASIC BLOCK if.then205
%1597:	br	 if.end207

BASIC BLOCK if.else206
%1598:	br	 if.end207

BASIC BLOCK if.end207
%1599:	phi	 %1568 XXX
%1600:	phi	 %1566 %1569
%1601:	phi	 %1567 %1570
%1602:	br	 if.end208

BASIC BLOCK if.end208
%1603:	br	 if.end209

BASIC BLOCK if.end209
%1604:	phi	 %1568 %1599
%1605:	phi	 %1569 %1600
%1606:	phi	 %1570 %1601
%1607:	br	 for.inc

BASIC BLOCK for.inc
%1608:	getelementptr	 %1566 XXX
%1609:	add	 %1567 XXX
%1610:	br	 for.cond

BASIC BLOCK for.end
%1611:	phi	 XXX XXX
%1612:	phi	 %1566 %1569
%1613:	phi	 %1567 %1570
%1614:	icmp	 %1568 XXX
%1615:	br	 %1614 if.end226 land.lhs.true213

BASIC BLOCK land.lhs.true213
%1616:	icmp	 %1611 XXX
%1617:	br	 %1616 if.then215 if.end226

BASIC BLOCK if.then215
%1618:	load	 opterr
%1619:	icmp	 %1618 XXX
%1620:	br	 %1619 if.end222 if.then217

BASIC BLOCK if.then217
%1621:	load	 stderr
%1622:	getelementptr	 argv XXX
%1623:	load	 %1622
%1624:	load	 optind
%1625:	sext	 %1624
%1626:	getelementptr	 argv %1625
%1627:	load	 %1626
%1628:	call	 %1621 XXX %1623 %1627 fprintf
%1629:	br	 if.end222

BASIC BLOCK if.end222
%1630:	load	 nextchar
%1631:	call	 %1630 strlen
%1632:	load	 nextchar
%1633:	getelementptr	 %1632 %1631
%1634:	store	 %1633 nextchar
%1635:	load	 optind
%1636:	add	 %1635 XXX
%1637:	store	 %1636 optind
%1638:	br	 return

BASIC BLOCK if.end226
%1639:	icmp	 %1612 XXX
%1640:	br	 %1639 if.end299 if.then229

BASIC BLOCK if.then229
%1641:	load	 optind
%1642:	add	 %1641 XXX
%1643:	store	 %1642 optind
%1644:	load	 %1552
%1645:	icmp	 %1644 XXX
%1646:	br	 %1645 if.else263 if.then232

BASIC BLOCK if.then232
%1647:	getelementptr	 %1612 XXX XXX
%1648:	load	 %1647
%1649:	icmp	 %1648 XXX
%1650:	br	 %1649 if.else236 if.then234

BASIC BLOCK if.then234
%1651:	getelementptr	 %1552 XXX
%1652:	store	 %1651 optarg
%1653:	br	 if.end262

BASIC BLOCK if.else236
%1654:	load	 opterr
%1655:	icmp	 %1654 XXX
%1656:	br	 %1655 if.end259 if.then238

BASIC BLOCK if.then238
%1657:	load	 optind
%1658:	sub	 %1657 XXX
%1659:	sext	 %1658
%1660:	getelementptr	 argv %1659
%1661:	load	 %1660
%1662:	getelementptr	 %1661 XXX
%1663:	load	 %1662
%1664:	sext	 %1663
%1665:	icmp	 %1664 XXX
%1666:	br	 %1665 if.else249 if.then245

BASIC BLOCK if.then245
%1667:	load	 stderr
%1668:	getelementptr	 argv XXX
%1669:	load	 %1668
%1670:	getelementptr	 %1612 XXX XXX
%1671:	load	 %1670
%1672:	call	 %1667 XXX %1669 %1671 fprintf
%1673:	br	 if.end258

BASIC BLOCK if.else249
%1674:	load	 stderr
%1675:	getelementptr	 argv XXX
%1676:	load	 %1675
%1677:	load	 optind
%1678:	sub	 %1677 XXX
%1679:	sext	 %1678
%1680:	getelementptr	 argv %1679
%1681:	load	 %1680
%1682:	getelementptr	 %1681 XXX
%1683:	load	 %1682
%1684:	sext	 %1683
%1685:	getelementptr	 %1612 XXX XXX
%1686:	load	 %1685
%1687:	call	 %1674 XXX %1676 %1684 %1686 fprintf
%1688:	br	 if.end258

BASIC BLOCK if.end258
%1689:	br	 if.end259

BASIC BLOCK if.end259
%1690:	load	 nextchar
%1691:	call	 %1690 strlen
%1692:	load	 nextchar
%1693:	getelementptr	 %1692 %1691
%1694:	store	 %1693 nextchar
%1695:	br	 return

BASIC BLOCK if.end262
%1696:	br	 if.end287

BASIC BLOCK if.else263
%1697:	getelementptr	 %1612 XXX XXX
%1698:	load	 %1697
%1699:	icmp	 %1698 XXX
%1700:	br	 %1699 if.end286 if.then267

BASIC BLOCK if.then267
%1701:	load	 optind
%1702:	icmp	 %1701 argc
%1703:	br	 %1702 if.else274 if.then270

BASIC BLOCK if.then270
%1704:	load	 optind
%1705:	add	 %1704 XXX
%1706:	store	 %1705 optind
%1707:	sext	 %1704
%1708:	getelementptr	 argv %1707
%1709:	load	 %1708
%1710:	store	 %1709 optarg
%1711:	br	 if.end285

BASIC BLOCK if.else274
%1712:	load	 opterr
%1713:	icmp	 %1712 XXX
%1714:	br	 %1713 if.end282 if.then276

BASIC BLOCK if.then276
%1715:	load	 stderr
%1716:	getelementptr	 argv XXX
%1717:	load	 %1716
%1718:	load	 optind
%1719:	sub	 %1718 XXX
%1720:	sext	 %1719
%1721:	getelementptr	 argv %1720
%1722:	load	 %1721
%1723:	call	 %1715 XXX %1717 %1722 fprintf
%1724:	br	 if.end282

BASIC BLOCK if.end282
%1725:	load	 nextchar
%1726:	call	 %1725 strlen
%1727:	load	 nextchar
%1728:	getelementptr	 %1727 %1726
%1729:	store	 %1728 nextchar
%1730:	br	 return

BASIC BLOCK if.end285
%1731:	br	 if.end286

BASIC BLOCK if.end286
%1732:	br	 if.end287

BASIC BLOCK if.end287
%1733:	load	 nextchar
%1734:	call	 %1733 strlen
%1735:	load	 nextchar
%1736:	getelementptr	 %1735 %1734
%1737:	store	 %1736 nextchar
%1738:	icmp	 longind XXX
%1739:	br	 %1738 if.end293 if.then292

BASIC BLOCK if.then292
%1740:	store	 %1613 longind
%1741:	br	 if.end293

BASIC BLOCK if.end293
%1742:	getelementptr	 %1612 XXX XXX
%1743:	load	 %1742
%1744:	icmp	 %1743 XXX
%1745:	br	 %1744 if.end297 if.then295

BASIC BLOCK if.then295
%1746:	getelementptr	 %1612 XXX XXX
%1747:	load	 %1746
%1748:	getelementptr	 %1612 XXX XXX
%1749:	load	 %1748
%1750:	store	 %1747 %1749
%1751:	br	 return

BASIC BLOCK if.end297
%1752:	getelementptr	 %1612 XXX XXX
%1753:	load	 %1752
%1754:	br	 return

BASIC BLOCK if.end299
%1755:	icmp	 long_only XXX
%1756:	br	 %1755 if.then320 lor.lhs.false301

BASIC BLOCK lor.lhs.false301
%1757:	load	 optind
%1758:	sext	 %1757
%1759:	getelementptr	 argv %1758
%1760:	load	 %1759
%1761:	getelementptr	 %1760 XXX
%1762:	load	 %1761
%1763:	sext	 %1762
%1764:	icmp	 %1763 XXX
%1765:	br	 %1764 lor.lhs.false308 if.then320

BASIC BLOCK lor.lhs.false308
%1766:	load	 optind
%1767:	sext	 %1766
%1768:	getelementptr	 argv %1767
%1769:	load	 %1768
%1770:	getelementptr	 %1769 XXX
%1771:	load	 %1770
%1772:	sext	 %1771
%1773:	icmp	 %1772 XXX
%1774:	br	 %1773 lor.lhs.false315 if.then320

BASIC BLOCK lor.lhs.false315
%1775:	load	 nextchar
%1776:	load	 %1775
%1777:	sext	 %1776
%1778:	call	 %1319 %1777 strchr
%1779:	icmp	 %1778 XXX
%1780:	br	 %1779 if.end342 if.then320

BASIC BLOCK if.then320
%1781:	load	 opterr
%1782:	icmp	 %1781 XXX
%1783:	br	 %1782 if.end340 if.then322

BASIC BLOCK if.then322
%1784:	load	 optind
%1785:	sext	 %1784
%1786:	getelementptr	 argv %1785
%1787:	load	 %1786
%1788:	getelementptr	 %1787 XXX
%1789:	load	 %1788
%1790:	sext	 %1789
%1791:	icmp	 %1790 XXX
%1792:	br	 %1791 if.else332 if.then329

BASIC BLOCK if.then329
%1793:	load	 stderr
%1794:	getelementptr	 argv XXX
%1795:	load	 %1794
%1796:	load	 nextchar
%1797:	call	 %1793 XXX %1795 %1796 fprintf
%1798:	br	 if.end339

BASIC BLOCK if.else332
%1799:	load	 stderr
%1800:	getelementptr	 argv XXX
%1801:	load	 %1800
%1802:	load	 optind
%1803:	sext	 %1802
%1804:	getelementptr	 argv %1803
%1805:	load	 %1804
%1806:	getelementptr	 %1805 XXX
%1807:	load	 %1806
%1808:	sext	 %1807
%1809:	load	 nextchar
%1810:	call	 %1799 XXX %1801 %1808 %1809 fprintf
%1811:	br	 if.end339

BASIC BLOCK if.end339
%1812:	br	 if.end340

BASIC BLOCK if.end340
%1813:	store	 XXX nextchar
%1814:	load	 optind
%1815:	add	 %1814 XXX
%1816:	store	 %1815 optind
%1817:	br	 return

BASIC BLOCK if.end342
%1818:	br	 if.end343

BASIC BLOCK if.end343
%1819:	load	 nextchar
%1820:	getelementptr	 %1819 XXX
%1821:	store	 %1820 nextchar
%1822:	load	 %1819
%1823:	sext	 %1822
%1824:	call	 %1319 %1823 strchr
%1825:	load	 nextchar
%1826:	load	 %1825
%1827:	sext	 %1826
%1828:	icmp	 %1827 XXX
%1829:	br	 %1828 if.end352 if.then350

BASIC BLOCK if.then350
%1830:	load	 optind
%1831:	add	 %1830 XXX
%1832:	store	 %1831 optind
%1833:	br	 if.end352

BASIC BLOCK if.end352
%1834:	icmp	 %1824 XXX
%1835:	br	 %1834 lor.lhs.false355 if.then359

BASIC BLOCK lor.lhs.false355
%1836:	sext	 %1822
%1837:	icmp	 %1836 XXX
%1838:	br	 %1837 if.end379 if.then359

BASIC BLOCK if.then359
%1839:	load	 opterr
%1840:	icmp	 %1839 XXX
%1841:	br	 %1840 if.end378 if.then361

BASIC BLOCK if.then361
%1842:	sext	 %1822
%1843:	icmp	 %1842 XXX
%1844:	br	 %1843 lor.lhs.false365 if.then369

BASIC BLOCK lor.lhs.false365
%1845:	sext	 %1822
%1846:	icmp	 %1845 XXX
%1847:	br	 %1846 if.else373 if.then369

BASIC BLOCK if.then369
%1848:	load	 stderr
%1849:	getelementptr	 argv XXX
%1850:	load	 %1849
%1851:	sext	 %1822
%1852:	call	 %1848 XXX %1850 %1851 fprintf
%1853:	br	 if.end377

BASIC BLOCK if.else373
%1854:	load	 stderr
%1855:	getelementptr	 argv XXX
%1856:	load	 %1855
%1857:	sext	 %1822
%1858:	call	 %1854 XXX %1856 %1857 fprintf
%1859:	br	 if.end377

BASIC BLOCK if.end377
%1860:	br	 if.end378

BASIC BLOCK if.end378
%1861:	br	 return

BASIC BLOCK if.end379
%1862:	getelementptr	 %1824 XXX
%1863:	load	 %1862
%1864:	sext	 %1863
%1865:	icmp	 %1864 XXX
%1866:	br	 %1865 if.end420 if.then384

BASIC BLOCK if.then384
%1867:	getelementptr	 %1824 XXX
%1868:	load	 %1867
%1869:	sext	 %1868
%1870:	icmp	 %1869 XXX
%1871:	br	 %1870 if.else397 if.then389

BASIC BLOCK if.then389
%1872:	load	 nextchar
%1873:	load	 %1872
%1874:	sext	 %1873
%1875:	icmp	 %1874 XXX
%1876:	br	 %1875 if.else395 if.then393

BASIC BLOCK if.then393
%1877:	load	 nextchar
%1878:	store	 %1877 optarg
%1879:	load	 optind
%1880:	add	 %1879 XXX
%1881:	store	 %1880 optind
%1882:	br	 if.end396

BASIC BLOCK if.else395
%1883:	store	 XXX optarg
%1884:	br	 if.end396

BASIC BLOCK if.end396
%1885:	store	 XXX nextchar
%1886:	br	 if.end419

BASIC BLOCK if.else397
%1887:	load	 nextchar
%1888:	load	 %1887
%1889:	sext	 %1888
%1890:	icmp	 %1889 XXX
%1891:	br	 %1890 if.else403 if.then401

BASIC BLOCK if.then401
%1892:	load	 nextchar
%1893:	store	 %1892 optarg
%1894:	load	 optind
%1895:	add	 %1894 XXX
%1896:	store	 %1895 optind
%1897:	br	 if.end418

BASIC BLOCK if.else403
%1898:	load	 optind
%1899:	icmp	 %1898 argc
%1900:	br	 %1899 if.else413 if.then406

BASIC BLOCK if.then406
%1901:	load	 opterr
%1902:	icmp	 %1901 XXX
%1903:	br	 %1902 if.end412 if.then408

BASIC BLOCK if.then408
%1904:	load	 stderr
%1905:	getelementptr	 argv XXX
%1906:	load	 %1905
%1907:	sext	 %1822
%1908:	call	 %1904 XXX %1906 %1907 fprintf
%1909:	br	 if.end412

BASIC BLOCK if.end412
%1910:	br	 if.end417

BASIC BLOCK if.else413
%1911:	load	 optind
%1912:	add	 %1911 XXX
%1913:	store	 %1912 optind
%1914:	sext	 %1911
%1915:	getelementptr	 argv %1914
%1916:	load	 %1915
%1917:	store	 %1916 optarg
%1918:	br	 if.end417

BASIC BLOCK if.end417
%1919:	phi	 XXX %1822
%1920:	br	 if.end418

BASIC BLOCK if.end418
%1921:	phi	 %1822 %1919
%1922:	store	 XXX nextchar
%1923:	br	 if.end419

BASIC BLOCK if.end419
%1924:	phi	 %1822 %1921
%1925:	br	 if.end420

BASIC BLOCK if.end420
%1926:	phi	 %1924 %1822
%1927:	sext	 %1926
%1928:	br	 return

BASIC BLOCK return
%1929:	phi	 XXX XXX XXX XXX %1753 XXX XXX XXX XXX %1927 XXX
%1930:	ret	 %1929

FUNCTION exchange

BASIC BLOCK entry
%1931:	load	 last_nonopt
%1932:	load	 first_nonopt
%1933:	sub	 %1931 %1932
%1934:	sext	 %1933
%1935:	mul	 %1934 XXX
%1936:	trunc	 %1935
%1937:	sext	 %1936
%1938:	alloca	 %1937
%1939:	bitcast	 %1938
%1940:	bitcast	 %1939
%1941:	load	 first_nonopt
%1942:	sext	 %1941
%1943:	getelementptr	 argv %1942
%1944:	bitcast	 %1943
%1945:	sext	 %1936
%1946:	call	 %1940 %1944 %1945 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%1947:	load	 first_nonopt
%1948:	sext	 %1947
%1949:	getelementptr	 argv %1948
%1950:	bitcast	 %1949
%1951:	load	 last_nonopt
%1952:	sext	 %1951
%1953:	getelementptr	 argv %1952
%1954:	bitcast	 %1953
%1955:	load	 optind
%1956:	load	 last_nonopt
%1957:	sub	 %1955 %1956
%1958:	sext	 %1957
%1959:	mul	 %1958 XXX
%1960:	call	 %1950 %1954 %1959 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%1961:	load	 first_nonopt
%1962:	load	 optind
%1963:	add	 %1961 %1962
%1964:	load	 last_nonopt
%1965:	sub	 %1963 %1964
%1966:	sext	 %1965
%1967:	getelementptr	 argv %1966
%1968:	bitcast	 %1967
%1969:	bitcast	 %1939
%1970:	sext	 %1936
%1971:	call	 %1968 %1969 %1970 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%1972:	load	 optind
%1973:	load	 last_nonopt
%1974:	sub	 %1972 %1973
%1975:	load	 first_nonopt
%1976:	add	 %1975 %1974
%1977:	store	 %1976 first_nonopt
%1978:	load	 optind
%1979:	store	 %1978 last_nonopt
%1980:	ret	

FUNCTION getopt

BASIC BLOCK entry
%1981:	call	 argc argv optstring XXX XXX XXX _getopt_internal
%1982:	ret	 %1981

FUNCTION getopt_long

BASIC BLOCK entry
%1983:	call	 argc argv options long_options opt_index XXX _getopt_internal
%1984:	ret	 %1983

FUNCTION getopt_long_only

BASIC BLOCK entry
%1985:	call	 argc argv options long_options opt_index XXX _getopt_internal
%1986:	ret	 %1985

FUNCTION zip

BASIC BLOCK entry
%1987:	alloca	 XXX
%1988:	alloca	 XXX
%1989:	store	 XXX %1987
%1990:	store	 XXX %1988
%1991:	store	 in ifd
%1992:	store	 out ofd
%1993:	store	 XXX outcnt
%1994:	store	 XXX method
%1995:	load	 XXX
%1996:	load	 outcnt
%1997:	add	 %1996 XXX
%1998:	store	 %1997 outcnt
%1999:	zext	 %1996
%2000:	getelementptr	 outbuf XXX %1999
%2001:	store	 %1995 %2000
%2002:	load	 outcnt
%2003:	icmp	 %2002 XXX
%2004:	br	 %2003 if.end if.then

BASIC BLOCK if.then
%2005:	call	 flush_outbuf
%2006:	br	 if.end

BASIC BLOCK if.end
%2007:	load	 XXX
%2008:	load	 outcnt
%2009:	add	 %2008 XXX
%2010:	store	 %2009 outcnt
%2011:	zext	 %2008
%2012:	getelementptr	 outbuf XXX %2011
%2013:	store	 %2007 %2012
%2014:	load	 outcnt
%2015:	icmp	 %2014 XXX
%2016:	br	 %2015 if.end6 if.then5

BASIC BLOCK if.then5
%2017:	call	 flush_outbuf
%2018:	br	 if.end6

BASIC BLOCK if.end6
%2019:	load	 outcnt
%2020:	add	 %2019 XXX
%2021:	store	 %2020 outcnt
%2022:	zext	 %2019
%2023:	getelementptr	 outbuf XXX %2022
%2024:	store	 XXX %2023
%2025:	load	 outcnt
%2026:	icmp	 %2025 XXX
%2027:	br	 %2026 if.end12 if.then11

BASIC BLOCK if.then11
%2028:	call	 flush_outbuf
%2029:	br	 if.end12

BASIC BLOCK if.end12
%2030:	load	 save_orig_name
%2031:	icmp	 %2030 XXX
%2032:	br	 %2031 if.end15 if.then13

BASIC BLOCK if.then13
%2033:	zext	 XXX
%2034:	or	 %2033 XXX
%2035:	trunc	 %2034
%2036:	br	 if.end15

BASIC BLOCK if.end15
%2037:	phi	 %2035 XXX
%2038:	load	 outcnt
%2039:	add	 %2038 XXX
%2040:	store	 %2039 outcnt
%2041:	zext	 %2038
%2042:	getelementptr	 outbuf XXX %2041
%2043:	store	 %2037 %2042
%2044:	load	 outcnt
%2045:	icmp	 %2044 XXX
%2046:	br	 %2045 if.end22 if.then21

BASIC BLOCK if.then21
%2047:	call	 flush_outbuf
%2048:	br	 if.end22

BASIC BLOCK if.end22
%2049:	load	 outcnt
%2050:	icmp	 %2049 XXX
%2051:	br	 %2050 if.else if.then25

BASIC BLOCK if.then25
%2052:	load	 time_stamp
%2053:	and	 %2052 XXX
%2054:	and	 %2053 XXX
%2055:	trunc	 %2054
%2056:	load	 outcnt
%2057:	add	 %2056 XXX
%2058:	store	 %2057 outcnt
%2059:	zext	 %2056
%2060:	getelementptr	 outbuf XXX %2059
%2061:	store	 %2055 %2060
%2062:	load	 time_stamp
%2063:	and	 %2062 XXX
%2064:	trunc	 %2063
%2065:	zext	 %2064
%2066:	ashr	 %2065 XXX
%2067:	trunc	 %2066
%2068:	load	 outcnt
%2069:	add	 %2068 XXX
%2070:	store	 %2069 outcnt
%2071:	zext	 %2068
%2072:	getelementptr	 outbuf XXX %2071
%2073:	store	 %2067 %2072
%2074:	br	 if.end60

BASIC BLOCK if.else
%2075:	load	 time_stamp
%2076:	and	 %2075 XXX
%2077:	and	 %2076 XXX
%2078:	trunc	 %2077
%2079:	load	 outcnt
%2080:	add	 %2079 XXX
%2081:	store	 %2080 outcnt
%2082:	zext	 %2079
%2083:	getelementptr	 outbuf XXX %2082
%2084:	store	 %2078 %2083
%2085:	load	 outcnt
%2086:	icmp	 %2085 XXX
%2087:	br	 %2086 if.end47 if.then46

BASIC BLOCK if.then46
%2088:	call	 flush_outbuf
%2089:	br	 if.end47

BASIC BLOCK if.end47
%2090:	load	 time_stamp
%2091:	and	 %2090 XXX
%2092:	trunc	 %2091
%2093:	zext	 %2092
%2094:	ashr	 %2093 XXX
%2095:	trunc	 %2094
%2096:	load	 outcnt
%2097:	add	 %2096 XXX
%2098:	store	 %2097 outcnt
%2099:	zext	 %2096
%2100:	getelementptr	 outbuf XXX %2099
%2101:	store	 %2095 %2100
%2102:	load	 outcnt
%2103:	icmp	 %2102 XXX
%2104:	br	 %2103 if.end59 if.then58

BASIC BLOCK if.then58
%2105:	call	 flush_outbuf
%2106:	br	 if.end59

BASIC BLOCK if.end59
%2107:	br	 if.end60

BASIC BLOCK if.end60
%2108:	load	 outcnt
%2109:	icmp	 %2108 XXX
%2110:	br	 %2109 if.else78 if.then63

BASIC BLOCK if.then63
%2111:	load	 time_stamp
%2112:	lshr	 %2111 XXX
%2113:	and	 %2112 XXX
%2114:	trunc	 %2113
%2115:	load	 outcnt
%2116:	add	 %2115 XXX
%2117:	store	 %2116 outcnt
%2118:	zext	 %2115
%2119:	getelementptr	 outbuf XXX %2118
%2120:	store	 %2114 %2119
%2121:	load	 time_stamp
%2122:	lshr	 %2121 XXX
%2123:	trunc	 %2122
%2124:	zext	 %2123
%2125:	ashr	 %2124 XXX
%2126:	trunc	 %2125
%2127:	load	 outcnt
%2128:	add	 %2127 XXX
%2129:	store	 %2128 outcnt
%2130:	zext	 %2127
%2131:	getelementptr	 outbuf XXX %2130
%2132:	store	 %2126 %2131
%2133:	br	 if.end101

BASIC BLOCK if.else78
%2134:	load	 time_stamp
%2135:	lshr	 %2134 XXX
%2136:	and	 %2135 XXX
%2137:	trunc	 %2136
%2138:	load	 outcnt
%2139:	add	 %2138 XXX
%2140:	store	 %2139 outcnt
%2141:	zext	 %2138
%2142:	getelementptr	 outbuf XXX %2141
%2143:	store	 %2137 %2142
%2144:	load	 outcnt
%2145:	icmp	 %2144 XXX
%2146:	br	 %2145 if.end88 if.then87

BASIC BLOCK if.then87
%2147:	call	 flush_outbuf
%2148:	br	 if.end88

BASIC BLOCK if.end88
%2149:	load	 time_stamp
%2150:	lshr	 %2149 XXX
%2151:	trunc	 %2150
%2152:	zext	 %2151
%2153:	ashr	 %2152 XXX
%2154:	trunc	 %2153
%2155:	load	 outcnt
%2156:	add	 %2155 XXX
%2157:	store	 %2156 outcnt
%2158:	zext	 %2155
%2159:	getelementptr	 outbuf XXX %2158
%2160:	store	 %2154 %2159
%2161:	load	 outcnt
%2162:	icmp	 %2161 XXX
%2163:	br	 %2162 if.end100 if.then99

BASIC BLOCK if.then99
%2164:	call	 flush_outbuf
%2165:	br	 if.end100

BASIC BLOCK if.end100
%2166:	br	 if.end101

BASIC BLOCK if.end101
%2167:	call	 XXX XXX updcrc
%2168:	store	 %2167 crc
%2169:	call	 out bi_init
%2170:	call	 %1987 method ct_init
%2171:	load	 level
%2172:	call	 %2171 %1988 lm_init
%2173:	load	 %1988
%2174:	trunc	 %2173
%2175:	load	 outcnt
%2176:	add	 %2175 XXX
%2177:	store	 %2176 outcnt
%2178:	zext	 %2175
%2179:	getelementptr	 outbuf XXX %2178
%2180:	store	 %2174 %2179
%2181:	load	 outcnt
%2182:	icmp	 %2181 XXX
%2183:	br	 %2182 if.end109 if.then108

BASIC BLOCK if.then108
%2184:	call	 flush_outbuf
%2185:	br	 if.end109

BASIC BLOCK if.end109
%2186:	load	 outcnt
%2187:	add	 %2186 XXX
%2188:	store	 %2187 outcnt
%2189:	zext	 %2186
%2190:	getelementptr	 outbuf XXX %2189
%2191:	store	 XXX %2190
%2192:	load	 outcnt
%2193:	icmp	 %2192 XXX
%2194:	br	 %2193 if.end116 if.then115

BASIC BLOCK if.then115
%2195:	call	 flush_outbuf
%2196:	br	 if.end116

BASIC BLOCK if.end116
%2197:	load	 save_orig_name
%2198:	icmp	 %2197 XXX
%2199:	br	 %2198 if.end128 if.then118

BASIC BLOCK if.then118
%2200:	call	 XXX basename
%2201:	br	 do.body

BASIC BLOCK do.body
%2202:	phi	 %2200 %2216
%2203:	load	 %2202
%2204:	load	 outcnt
%2205:	add	 %2204 XXX
%2206:	store	 %2205 outcnt
%2207:	zext	 %2204
%2208:	getelementptr	 outbuf XXX %2207
%2209:	store	 %2203 %2208
%2210:	load	 outcnt
%2211:	icmp	 %2210 XXX
%2212:	br	 %2211 if.end126 if.then125

BASIC BLOCK if.then125
%2213:	call	 flush_outbuf
%2214:	br	 if.end126

BASIC BLOCK if.end126
%2215:	br	 do.cond

BASIC BLOCK do.cond
%2216:	getelementptr	 %2202 XXX
%2217:	load	 %2202
%2218:	icmp	 %2217 XXX
%2219:	br	 %2218 do.end do.body

BASIC BLOCK do.end
%2220:	br	 if.end128

BASIC BLOCK if.end128
%2221:	load	 outcnt
%2222:	zext	 %2221
%2223:	store	 %2222 header_bytes
%2224:	call	 deflate
%2225:	load	 outcnt
%2226:	icmp	 %2225 XXX
%2227:	br	 %2226 if.else148 if.then133

BASIC BLOCK if.then133
%2228:	load	 crc
%2229:	and	 %2228 XXX
%2230:	and	 %2229 XXX
%2231:	trunc	 %2230
%2232:	load	 outcnt
%2233:	add	 %2232 XXX
%2234:	store	 %2233 outcnt
%2235:	zext	 %2232
%2236:	getelementptr	 outbuf XXX %2235
%2237:	store	 %2231 %2236
%2238:	load	 crc
%2239:	and	 %2238 XXX
%2240:	trunc	 %2239
%2241:	zext	 %2240
%2242:	ashr	 %2241 XXX
%2243:	trunc	 %2242
%2244:	load	 outcnt
%2245:	add	 %2244 XXX
%2246:	store	 %2245 outcnt
%2247:	zext	 %2244
%2248:	getelementptr	 outbuf XXX %2247
%2249:	store	 %2243 %2248
%2250:	br	 if.end171

BASIC BLOCK if.else148
%2251:	load	 crc
%2252:	and	 %2251 XXX
%2253:	and	 %2252 XXX
%2254:	trunc	 %2253
%2255:	load	 outcnt
%2256:	add	 %2255 XXX
%2257:	store	 %2256 outcnt
%2258:	zext	 %2255
%2259:	getelementptr	 outbuf XXX %2258
%2260:	store	 %2254 %2259
%2261:	load	 outcnt
%2262:	icmp	 %2261 XXX
%2263:	br	 %2262 if.end158 if.then157

BASIC BLOCK if.then157
%2264:	call	 flush_outbuf
%2265:	br	 if.end158

BASIC BLOCK if.end158
%2266:	load	 crc
%2267:	and	 %2266 XXX
%2268:	trunc	 %2267
%2269:	zext	 %2268
%2270:	ashr	 %2269 XXX
%2271:	trunc	 %2270
%2272:	load	 outcnt
%2273:	add	 %2272 XXX
%2274:	store	 %2273 outcnt
%2275:	zext	 %2272
%2276:	getelementptr	 outbuf XXX %2275
%2277:	store	 %2271 %2276
%2278:	load	 outcnt
%2279:	icmp	 %2278 XXX
%2280:	br	 %2279 if.end170 if.then169

BASIC BLOCK if.then169
%2281:	call	 flush_outbuf
%2282:	br	 if.end170

BASIC BLOCK if.end170
%2283:	br	 if.end171

BASIC BLOCK if.end171
%2284:	load	 outcnt
%2285:	icmp	 %2284 XXX
%2286:	br	 %2285 if.else189 if.then174

BASIC BLOCK if.then174
%2287:	load	 crc
%2288:	lshr	 %2287 XXX
%2289:	and	 %2288 XXX
%2290:	trunc	 %2289
%2291:	load	 outcnt
%2292:	add	 %2291 XXX
%2293:	store	 %2292 outcnt
%2294:	zext	 %2291
%2295:	getelementptr	 outbuf XXX %2294
%2296:	store	 %2290 %2295
%2297:	load	 crc
%2298:	lshr	 %2297 XXX
%2299:	trunc	 %2298
%2300:	zext	 %2299
%2301:	ashr	 %2300 XXX
%2302:	trunc	 %2301
%2303:	load	 outcnt
%2304:	add	 %2303 XXX
%2305:	store	 %2304 outcnt
%2306:	zext	 %2303
%2307:	getelementptr	 outbuf XXX %2306
%2308:	store	 %2302 %2307
%2309:	br	 if.end212

BASIC BLOCK if.else189
%2310:	load	 crc
%2311:	lshr	 %2310 XXX
%2312:	and	 %2311 XXX
%2313:	trunc	 %2312
%2314:	load	 outcnt
%2315:	add	 %2314 XXX
%2316:	store	 %2315 outcnt
%2317:	zext	 %2314
%2318:	getelementptr	 outbuf XXX %2317
%2319:	store	 %2313 %2318
%2320:	load	 outcnt
%2321:	icmp	 %2320 XXX
%2322:	br	 %2321 if.end199 if.then198

BASIC BLOCK if.then198
%2323:	call	 flush_outbuf
%2324:	br	 if.end199

BASIC BLOCK if.end199
%2325:	load	 crc
%2326:	lshr	 %2325 XXX
%2327:	trunc	 %2326
%2328:	zext	 %2327
%2329:	ashr	 %2328 XXX
%2330:	trunc	 %2329
%2331:	load	 outcnt
%2332:	add	 %2331 XXX
%2333:	store	 %2332 outcnt
%2334:	zext	 %2331
%2335:	getelementptr	 outbuf XXX %2334
%2336:	store	 %2330 %2335
%2337:	load	 outcnt
%2338:	icmp	 %2337 XXX
%2339:	br	 %2338 if.end211 if.then210

BASIC BLOCK if.then210
%2340:	call	 flush_outbuf
%2341:	br	 if.end211

BASIC BLOCK if.end211
%2342:	br	 if.end212

BASIC BLOCK if.end212
%2343:	load	 outcnt
%2344:	icmp	 %2343 XXX
%2345:	br	 %2344 if.else230 if.then215

BASIC BLOCK if.then215
%2346:	load	 bytes_in
%2347:	and	 %2346 XXX
%2348:	and	 %2347 XXX
%2349:	trunc	 %2348
%2350:	load	 outcnt
%2351:	add	 %2350 XXX
%2352:	store	 %2351 outcnt
%2353:	zext	 %2350
%2354:	getelementptr	 outbuf XXX %2353
%2355:	store	 %2349 %2354
%2356:	load	 bytes_in
%2357:	and	 %2356 XXX
%2358:	trunc	 %2357
%2359:	zext	 %2358
%2360:	ashr	 %2359 XXX
%2361:	trunc	 %2360
%2362:	load	 outcnt
%2363:	add	 %2362 XXX
%2364:	store	 %2363 outcnt
%2365:	zext	 %2362
%2366:	getelementptr	 outbuf XXX %2365
%2367:	store	 %2361 %2366
%2368:	br	 if.end253

BASIC BLOCK if.else230
%2369:	load	 bytes_in
%2370:	and	 %2369 XXX
%2371:	and	 %2370 XXX
%2372:	trunc	 %2371
%2373:	load	 outcnt
%2374:	add	 %2373 XXX
%2375:	store	 %2374 outcnt
%2376:	zext	 %2373
%2377:	getelementptr	 outbuf XXX %2376
%2378:	store	 %2372 %2377
%2379:	load	 outcnt
%2380:	icmp	 %2379 XXX
%2381:	br	 %2380 if.end240 if.then239

BASIC BLOCK if.then239
%2382:	call	 flush_outbuf
%2383:	br	 if.end240

BASIC BLOCK if.end240
%2384:	load	 bytes_in
%2385:	and	 %2384 XXX
%2386:	trunc	 %2385
%2387:	zext	 %2386
%2388:	ashr	 %2387 XXX
%2389:	trunc	 %2388
%2390:	load	 outcnt
%2391:	add	 %2390 XXX
%2392:	store	 %2391 outcnt
%2393:	zext	 %2390
%2394:	getelementptr	 outbuf XXX %2393
%2395:	store	 %2389 %2394
%2396:	load	 outcnt
%2397:	icmp	 %2396 XXX
%2398:	br	 %2397 if.end252 if.then251

BASIC BLOCK if.then251
%2399:	call	 flush_outbuf
%2400:	br	 if.end252

BASIC BLOCK if.end252
%2401:	br	 if.end253

BASIC BLOCK if.end253
%2402:	load	 outcnt
%2403:	icmp	 %2402 XXX
%2404:	br	 %2403 if.else271 if.then256

BASIC BLOCK if.then256
%2405:	load	 bytes_in
%2406:	lshr	 %2405 XXX
%2407:	and	 %2406 XXX
%2408:	trunc	 %2407
%2409:	load	 outcnt
%2410:	add	 %2409 XXX
%2411:	store	 %2410 outcnt
%2412:	zext	 %2409
%2413:	getelementptr	 outbuf XXX %2412
%2414:	store	 %2408 %2413
%2415:	load	 bytes_in
%2416:	lshr	 %2415 XXX
%2417:	trunc	 %2416
%2418:	zext	 %2417
%2419:	ashr	 %2418 XXX
%2420:	trunc	 %2419
%2421:	load	 outcnt
%2422:	add	 %2421 XXX
%2423:	store	 %2422 outcnt
%2424:	zext	 %2421
%2425:	getelementptr	 outbuf XXX %2424
%2426:	store	 %2420 %2425
%2427:	br	 if.end294

BASIC BLOCK if.else271
%2428:	load	 bytes_in
%2429:	lshr	 %2428 XXX
%2430:	and	 %2429 XXX
%2431:	trunc	 %2430
%2432:	load	 outcnt
%2433:	add	 %2432 XXX
%2434:	store	 %2433 outcnt
%2435:	zext	 %2432
%2436:	getelementptr	 outbuf XXX %2435
%2437:	store	 %2431 %2436
%2438:	load	 outcnt
%2439:	icmp	 %2438 XXX
%2440:	br	 %2439 if.end281 if.then280

BASIC BLOCK if.then280
%2441:	call	 flush_outbuf
%2442:	br	 if.end281

BASIC BLOCK if.end281
%2443:	load	 bytes_in
%2444:	lshr	 %2443 XXX
%2445:	trunc	 %2444
%2446:	zext	 %2445
%2447:	ashr	 %2446 XXX
%2448:	trunc	 %2447
%2449:	load	 outcnt
%2450:	add	 %2449 XXX
%2451:	store	 %2450 outcnt
%2452:	zext	 %2449
%2453:	getelementptr	 outbuf XXX %2452
%2454:	store	 %2448 %2453
%2455:	load	 outcnt
%2456:	icmp	 %2455 XXX
%2457:	br	 %2456 if.end293 if.then292

BASIC BLOCK if.then292
%2458:	call	 flush_outbuf
%2459:	br	 if.end293

BASIC BLOCK if.end293
%2460:	br	 if.end294

BASIC BLOCK if.end294
%2461:	load	 header_bytes
%2462:	add	 %2461 XXX
%2463:	store	 %2462 header_bytes
%2464:	call	 flush_outbuf
%2465:	ret	 XXX

FUNCTION main

BASIC BLOCK entry
%2466:	alloca	 XXX
%2467:	alloca	 XXX
%2468:	store	 argc %2466
%2469:	store	 argv %2467
%2470:	load	 %2467
%2471:	getelementptr	 %2470 XXX
%2472:	load	 %2471
%2473:	call	 %2472 basename
%2474:	store	 %2473 progname
%2475:	load	 progname
%2476:	call	 %2475 strlen
%2477:	trunc	 %2476
%2478:	icmp	 %2477 XXX
%2479:	br	 %2478 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%2480:	load	 progname
%2481:	sext	 %2477
%2482:	getelementptr	 %2480 %2481
%2483:	getelementptr	 %2482 XXX
%2484:	call	 %2483 XXX strcmp
%2485:	icmp	 %2484 XXX
%2486:	br	 %2485 if.end if.then

BASIC BLOCK if.then
%2487:	sub	 %2477 XXX
%2488:	sext	 %2487
%2489:	load	 progname
%2490:	getelementptr	 %2489 %2488
%2491:	store	 XXX %2490
%2492:	br	 if.end

BASIC BLOCK if.end
%2493:	call	 %2466 %2467 XXX add_envopt
%2494:	store	 %2493 env
%2495:	load	 env
%2496:	icmp	 %2495 XXX
%2497:	br	 %2496 if.end12 if.then11

BASIC BLOCK if.then11
%2498:	load	 %2467
%2499:	store	 %2498 args
%2500:	br	 if.end12

BASIC BLOCK if.end12
%2501:	call	 XXX XXX signal
%2502:	icmp	 %2501 XXX
%2503:	zext	 %2502
%2504:	store	 %2503 foreground
%2505:	load	 foreground
%2506:	icmp	 %2505 XXX
%2507:	br	 %2506 if.end18 if.then16

BASIC BLOCK if.then16
%2508:	call	 XXX XXX signal
%2509:	br	 if.end18

BASIC BLOCK if.end18
%2510:	call	 XXX XXX signal
%2511:	call	 XXX XXX signal
%2512:	load	 progname
%2513:	call	 %2512 XXX XXX strncmp
%2514:	icmp	 %2513 XXX
%2515:	br	 %2514 lor.lhs.false if.then27

BASIC BLOCK lor.lhs.false
%2516:	load	 progname
%2517:	call	 %2516 XXX XXX strncmp
%2518:	icmp	 %2517 XXX
%2519:	br	 %2518 if.else if.then27

BASIC BLOCK if.then27
%2520:	store	 XXX decompress
%2521:	br	 if.end38

BASIC BLOCK if.else
%2522:	load	 progname
%2523:	getelementptr	 %2522 XXX
%2524:	call	 %2523 XXX strcmp
%2525:	icmp	 %2524 XXX
%2526:	br	 %2525 lor.lhs.false32 if.then36

BASIC BLOCK lor.lhs.false32
%2527:	load	 progname
%2528:	call	 %2527 XXX strcmp
%2529:	icmp	 %2528 XXX
%2530:	br	 %2529 if.end37 if.then36

BASIC BLOCK if.then36
%2531:	store	 XXX to_stdout
%2532:	store	 XXX decompress
%2533:	br	 if.end37

BASIC BLOCK if.end37
%2534:	br	 if.end38

BASIC BLOCK if.end38
%2535:	call	 XXX XXX XXX strncpy
%2536:	call	 XXX strlen
%2537:	trunc	 %2536
%2538:	store	 %2537 z_len
%2539:	br	 while.cond

BASIC BLOCK while.cond
%2540:	load	 %2466
%2541:	load	 %2467
%2542:	call	 %2540 %2541 XXX XXX XXX getopt_long
%2543:	icmp	 %2542 XXX
%2544:	br	 %2543 while.end while.body

BASIC BLOCK while.body
%2545:	switch	 %2542 sw.default XXX sw.bb XXX sw.bb45 XXX sw.bb47 XXX sw.bb48 XXX sw.bb49 XXX sw.bb50 XXX sw.bb50 XXX sw.bb50 XXX sw.bb51 XXX sw.bb52 XXX sw.bb53 XXX sw.bb54 XXX sw.bb66 XXX sw.bb67 XXX sw.bb69 XXX sw.bb70 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72 XXX sw.bb72

BASIC BLOCK sw.bb
%2546:	store	 XXX ascii
%2547:	br	 sw.epilog

BASIC BLOCK sw.bb45
%2548:	load	 optarg
%2549:	call	 %2548 atoi
%2550:	store	 %2549 maxbits
%2551:	br	 sw.epilog

BASIC BLOCK sw.bb47
%2552:	store	 XXX to_stdout
%2553:	br	 sw.epilog

BASIC BLOCK sw.bb48
%2554:	store	 XXX decompress
%2555:	br	 sw.epilog

BASIC BLOCK sw.bb49
%2556:	load	 force
%2557:	add	 %2556 XXX
%2558:	store	 %2557 force
%2559:	br	 sw.epilog

BASIC BLOCK sw.bb50
%2560:	call	 help
%2561:	call	 XXX do_exit
%2562:	br	 sw.epilog

BASIC BLOCK sw.bb51
%2563:	call	 license
%2564:	call	 XXX do_exit
%2565:	br	 sw.epilog

BASIC BLOCK sw.bb52
%2566:	store	 XXX quiet
%2567:	store	 XXX verbose
%2568:	br	 sw.epilog

BASIC BLOCK sw.bb53
%2569:	store	 XXX recursive
%2570:	br	 sw.epilog

BASIC BLOCK sw.bb54
%2571:	load	 optarg
%2572:	call	 %2571 strlen
%2573:	trunc	 %2572
%2574:	store	 %2573 z_len
%2575:	load	 z_len
%2576:	icmp	 %2575 XXX
%2577:	br	 %2576 lor.lhs.false59 if.then62

BASIC BLOCK lor.lhs.false59
%2578:	load	 z_len
%2579:	icmp	 %2578 XXX
%2580:	br	 %2579 if.end64 if.then62

BASIC BLOCK if.then62
%2581:	load	 stderr
%2582:	load	 progname
%2583:	load	 optarg
%2584:	call	 %2581 XXX %2582 %2583 fprintf
%2585:	call	 XXX do_exit
%2586:	br	 if.end64

BASIC BLOCK if.end64
%2587:	load	 optarg
%2588:	call	 XXX %2587 strcpy
%2589:	br	 sw.epilog

BASIC BLOCK sw.bb66
%2590:	store	 XXX to_stdout
%2591:	store	 XXX decompress
%2592:	store	 XXX test
%2593:	br	 sw.epilog

BASIC BLOCK sw.bb67
%2594:	load	 verbose
%2595:	add	 %2594 XXX
%2596:	store	 %2595 verbose
%2597:	store	 XXX quiet
%2598:	br	 sw.epilog

BASIC BLOCK sw.bb69
%2599:	call	 version
%2600:	call	 XXX do_exit
%2601:	br	 sw.epilog

BASIC BLOCK sw.bb70
%2602:	load	 stderr
%2603:	load	 progname
%2604:	call	 %2602 XXX %2603 fprintf
%2605:	call	 usage
%2606:	call	 XXX do_exit
%2607:	br	 sw.epilog

BASIC BLOCK sw.bb72
%2608:	sub	 %2542 XXX
%2609:	store	 %2608 level
%2610:	br	 sw.epilog

BASIC BLOCK sw.default
%2611:	call	 usage
%2612:	call	 XXX do_exit
%2613:	br	 sw.epilog

BASIC BLOCK sw.epilog
%2614:	br	 while.cond

BASIC BLOCK while.end
%2615:	load	 %2466
%2616:	load	 optind
%2617:	sub	 %2615 %2616
%2618:	load	 ascii
%2619:	icmp	 %2618 XXX
%2620:	br	 %2619 if.end80 land.lhs.true76

BASIC BLOCK land.lhs.true76
%2621:	load	 quiet
%2622:	icmp	 %2621 XXX
%2623:	br	 %2622 if.then78 if.end80

BASIC BLOCK if.then78
%2624:	load	 stderr
%2625:	load	 progname
%2626:	call	 %2624 XXX %2625 fprintf
%2627:	br	 if.end80

BASIC BLOCK if.end80
%2628:	load	 do_lzw
%2629:	icmp	 %2628 XXX
%2630:	br	 %2629 if.end85 land.lhs.true82

BASIC BLOCK land.lhs.true82
%2631:	load	 decompress
%2632:	icmp	 %2631 XXX
%2633:	br	 %2632 if.then84 if.end85

BASIC BLOCK if.then84
%2634:	store	 lzw work
%2635:	br	 if.end85

BASIC BLOCK if.end85
%2636:	icmp	 %2617 XXX
%2637:	br	 %2636 if.else106 if.then88

BASIC BLOCK if.then88
%2638:	load	 to_stdout
%2639:	icmp	 %2638 XXX
%2640:	br	 %2639 if.end97 land.lhs.true90

BASIC BLOCK land.lhs.true90
%2641:	load	 test
%2642:	icmp	 %2641 XXX
%2643:	br	 %2642 land.lhs.true92 if.end97

BASIC BLOCK land.lhs.true92
%2644:	load	 decompress
%2645:	icmp	 %2644 XXX
%2646:	br	 %2645 if.then96 lor.lhs.false94

BASIC BLOCK lor.lhs.false94
%2647:	load	 ascii
%2648:	icmp	 %2647 XXX
%2649:	br	 %2648 if.then96 if.end97

BASIC BLOCK if.then96
%2650:	br	 if.end97

BASIC BLOCK if.end97
%2651:	br	 while.cond98

BASIC BLOCK while.cond98
%2652:	load	 optind
%2653:	load	 %2466
%2654:	icmp	 %2652 %2653
%2655:	br	 %2654 while.end105 while.body101

BASIC BLOCK while.body101
%2656:	load	 optind
%2657:	add	 %2656 XXX
%2658:	store	 %2657 optind
%2659:	sext	 %2656
%2660:	load	 %2467
%2661:	getelementptr	 %2660 %2659
%2662:	load	 %2661
%2663:	call	 %2662 treat_file
%2664:	br	 while.cond98

BASIC BLOCK while.end105
%2665:	br	 if.end107

BASIC BLOCK if.else106
%2666:	call	 treat_stdin
%2667:	br	 if.end107

BASIC BLOCK if.end107
%2668:	load	 exit_code
%2669:	call	 %2668 do_exit
%2670:	load	 exit_code
%2671:	ret	 %2670

FUNCTION basename

BASIC BLOCK entry
%2672:	call	 fname XXX strrchr
%2673:	icmp	 %2672 XXX
%2674:	br	 %2673 if.end if.then

BASIC BLOCK if.then
%2675:	getelementptr	 %2672 XXX
%2676:	br	 if.end

BASIC BLOCK if.end
%2677:	phi	 %2675 fname
%2678:	ret	 %2677

FUNCTION add_envopt

BASIC BLOCK entry
%2679:	load	 argcp
%2680:	call	 env getenv
%2681:	icmp	 %2680 XXX
%2682:	br	 %2681 if.end if.then

BASIC BLOCK if.then
%2683:	br	 return

BASIC BLOCK if.end
%2684:	call	 %2680 strlen
%2685:	add	 %2684 XXX
%2686:	trunc	 %2685
%2687:	call	 %2686 xmalloc
%2688:	call	 %2687 %2680 strcpy
%2689:	br	 for.cond

BASIC BLOCK for.cond
%2690:	phi	 %2688 %2710
%2691:	phi	 XXX %2712
%2692:	load	 %2690
%2693:	icmp	 %2692 XXX
%2694:	br	 %2693 for.end for.body

BASIC BLOCK for.body
%2695:	call	 %2690 XXX strspn
%2696:	getelementptr	 %2690 %2695
%2697:	load	 %2696
%2698:	sext	 %2697
%2699:	icmp	 %2698 XXX
%2700:	br	 %2699 if.end9 if.then8

BASIC BLOCK if.then8
%2701:	br	 for.end

BASIC BLOCK if.end9
%2702:	call	 %2696 XXX strcspn
%2703:	getelementptr	 %2696 %2702
%2704:	load	 %2703
%2705:	icmp	 %2704 XXX
%2706:	br	 %2705 if.end14 if.then13

BASIC BLOCK if.then13
%2707:	getelementptr	 %2703 XXX
%2708:	store	 XXX %2703
%2709:	br	 if.end14

BASIC BLOCK if.end14
%2710:	phi	 %2707 %2703
%2711:	br	 for.inc

BASIC BLOCK for.inc
%2712:	add	 %2691 XXX
%2713:	br	 for.cond

BASIC BLOCK for.end
%2714:	icmp	 %2691 XXX
%2715:	br	 %2714 if.end18 if.then17

BASIC BLOCK if.then17
%2716:	call	 %2688 free
%2717:	br	 return

BASIC BLOCK if.end18
%2718:	load	 argcp
%2719:	add	 %2718 %2691
%2720:	store	 %2719 argcp
%2721:	load	 argcp
%2722:	add	 %2721 XXX
%2723:	sext	 %2722
%2724:	call	 %2723 XXX calloc
%2725:	bitcast	 %2724
%2726:	icmp	 %2725 XXX
%2727:	br	 %2726 if.end26 if.then25

BASIC BLOCK if.then25
%2728:	call	 XXX error
%2729:	br	 if.end26

BASIC BLOCK if.end26
%2730:	load	 argvp
%2731:	store	 %2725 argvp
%2732:	add	 %2679 XXX
%2733:	icmp	 %2679 XXX
%2734:	br	 %2733 if.end30 if.then29

BASIC BLOCK if.then29
%2735:	call	 XXX error
%2736:	br	 if.end30

BASIC BLOCK if.end30
%2737:	getelementptr	 %2730 XXX
%2738:	load	 %2730
%2739:	getelementptr	 %2725 XXX
%2740:	store	 %2738 %2725
%2741:	br	 for.cond33

BASIC BLOCK for.cond33
%2742:	phi	 %2739 %2749
%2743:	phi	 %2688 %2753
%2744:	phi	 %2691 %2759
%2745:	icmp	 %2744 XXX
%2746:	br	 %2745 for.end44 for.body36

BASIC BLOCK for.body36
%2747:	call	 %2743 XXX strspn
%2748:	getelementptr	 %2743 %2747
%2749:	getelementptr	 %2742 XXX
%2750:	store	 %2748 %2742
%2751:	br	 while.cond

BASIC BLOCK while.cond
%2752:	phi	 %2748 %2753
%2753:	getelementptr	 %2752 XXX
%2754:	load	 %2752
%2755:	icmp	 %2754 XXX
%2756:	br	 %2755 while.end while.body

BASIC BLOCK while.body
%2757:	br	 while.cond

BASIC BLOCK while.end
%2758:	br	 for.inc42

BASIC BLOCK for.inc42
%2759:	add	 %2744 XXX
%2760:	br	 for.cond33

BASIC BLOCK for.end44
%2761:	br	 while.cond45

BASIC BLOCK while.cond45
%2762:	phi	 %2742 %2770
%2763:	phi	 %2737 %2768
%2764:	phi	 %2732 %2765
%2765:	add	 %2764 XXX
%2766:	icmp	 %2764 XXX
%2767:	br	 %2766 while.end51 while.body48

BASIC BLOCK while.body48
%2768:	getelementptr	 %2763 XXX
%2769:	load	 %2763
%2770:	getelementptr	 %2762 XXX
%2771:	store	 %2769 %2762
%2772:	br	 while.cond45

BASIC BLOCK while.end51
%2773:	store	 XXX %2762
%2774:	br	 return

BASIC BLOCK return
%2775:	phi	 XXX XXX %2688
%2776:	ret	 %2775

FUNCTION abort_gzip

BASIC BLOCK entry
%2777:	load	 remove_ofname
%2778:	icmp	 %2777 XXX
%2779:	br	 %2778 if.end if.then

BASIC BLOCK if.then
%2780:	load	 ofd
%2781:	call	 %2780 close
%2782:	call	 XXX unlink
%2783:	br	 if.end

BASIC BLOCK if.end
%2784:	call	 XXX do_exit
%2785:	ret	

FUNCTION help

BASIC BLOCK entry
%2786:	load	 stderr
%2787:	load	 progname
%2788:	call	 %2786 XXX %2787 XXX XXX fprintf
%2789:	call	 usage
%2790:	br	 while.cond

BASIC BLOCK while.cond
%2791:	phi	 XXX %2796
%2792:	load	 %2791
%2793:	icmp	 %2792 XXX
%2794:	br	 %2793 while.end while.body

BASIC BLOCK while.body
%2795:	load	 stderr
%2796:	getelementptr	 %2791 XXX
%2797:	load	 %2791
%2798:	call	 %2795 XXX %2797 fprintf
%2799:	br	 while.cond

BASIC BLOCK while.end
%2800:	ret	

FUNCTION do_exit

BASIC BLOCK entry
%2801:	load	 env
%2802:	icmp	 %2801 XXX
%2803:	br	 %2802 if.end if.then

BASIC BLOCK if.then
%2804:	load	 env
%2805:	call	 %2804 free
%2806:	store	 XXX env
%2807:	br	 if.end

BASIC BLOCK if.end
%2808:	load	 args
%2809:	icmp	 %2808 XXX
%2810:	br	 %2809 if.end3 if.then2

BASIC BLOCK if.then2
%2811:	load	 args
%2812:	bitcast	 %2811
%2813:	call	 %2812 free
%2814:	store	 XXX args
%2815:	br	 if.end3

BASIC BLOCK if.end3
%2816:	call	 exitcode exit
%2817:	unreachable	

BASIC BLOCK return
%2818:	ret	

FUNCTION license

BASIC BLOCK entry
%2819:	load	 stderr
%2820:	load	 progname
%2821:	call	 %2819 XXX %2820 XXX XXX fprintf
%2822:	br	 while.cond

BASIC BLOCK while.cond
%2823:	phi	 XXX %2828
%2824:	load	 %2823
%2825:	icmp	 %2824 XXX
%2826:	br	 %2825 while.end while.body

BASIC BLOCK while.body
%2827:	load	 stderr
%2828:	getelementptr	 %2823 XXX
%2829:	load	 %2823
%2830:	call	 %2827 XXX %2829 fprintf
%2831:	br	 while.cond

BASIC BLOCK while.end
%2832:	ret	

FUNCTION version

BASIC BLOCK entry
%2833:	load	 stderr
%2834:	load	 progname
%2835:	call	 %2833 XXX %2834 XXX XXX fprintf
%2836:	load	 stderr
%2837:	call	 %2836 XXX XXX XXX fprintf
%2838:	load	 stderr
%2839:	call	 %2838 XXX fprintf
%2840:	load	 stderr
%2841:	call	 %2840 XXX fprintf
%2842:	load	 stderr
%2843:	call	 %2842 XXX fprintf
%2844:	ret	

FUNCTION usage

BASIC BLOCK entry
%2845:	load	 stderr
%2846:	load	 progname
%2847:	call	 %2845 XXX %2846 XXX XXX fprintf
%2848:	ret	

FUNCTION lzw

BASIC BLOCK entry
%2849:	load	 msg_done
%2850:	icmp	 %2849 XXX
%2851:	br	 %2850 if.end if.then

BASIC BLOCK if.then
%2852:	br	 return

BASIC BLOCK if.end
%2853:	load	 msg_done
%2854:	icmp	 %2853 XXX
%2855:	br	 %2854 if.then2 if.end3

BASIC BLOCK if.then2
%2856:	store	 XXX msg_done
%2857:	br	 if.end3

BASIC BLOCK if.end3
%2858:	load	 stderr
%2859:	call	 %2858 XXX fprintf
%2860:	add	 in XXX
%2861:	add	 out XXX
%2862:	store	 XXX exit_code
%2863:	br	 return

BASIC BLOCK return
%2864:	ret	 XXX

FUNCTION treat_file

BASIC BLOCK entry
%2865:	alloca	 XXX
%2866:	call	 iname istat get_istat
%2867:	icmp	 %2866 XXX
%2868:	br	 %2867 if.end if.then

BASIC BLOCK if.then
%2869:	br	 if.end157

BASIC BLOCK if.end
%2870:	load	 XXX
%2871:	and	 %2870 XXX
%2872:	icmp	 %2871 XXX
%2873:	br	 %2872 if.end12 if.then2

BASIC BLOCK if.then2
%2874:	load	 recursive
%2875:	icmp	 %2874 XXX
%2876:	br	 %2875 if.else if.then3

BASIC BLOCK if.then3
%2877:	bitcast	 %2865
%2878:	call	 %2877 XXX XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%2879:	call	 iname treat_dir
%2880:	call	 iname %2865 reset_times
%2881:	br	 if.end11

BASIC BLOCK if.else
%2882:	load	 quiet
%2883:	icmp	 %2882 XXX
%2884:	br	 %2883 if.then5 if.end7

BASIC BLOCK if.then5
%2885:	load	 stderr
%2886:	load	 progname
%2887:	call	 %2885 XXX %2886 XXX fprintf
%2888:	br	 if.end7

BASIC BLOCK if.end7
%2889:	load	 exit_code
%2890:	icmp	 %2889 XXX
%2891:	br	 %2890 if.end10 if.then9

BASIC BLOCK if.then9
%2892:	store	 XXX exit_code
%2893:	br	 if.end10

BASIC BLOCK if.end10
%2894:	br	 if.end11

BASIC BLOCK if.end11
%2895:	br	 if.end157

BASIC BLOCK if.end12
%2896:	load	 XXX
%2897:	and	 %2896 XXX
%2898:	icmp	 %2897 XXX
%2899:	br	 %2898 if.then15 if.end23

BASIC BLOCK if.then15
%2900:	load	 quiet
%2901:	icmp	 %2900 XXX
%2902:	br	 %2901 if.then17 if.end19

BASIC BLOCK if.then17
%2903:	load	 stderr
%2904:	load	 progname
%2905:	call	 %2903 XXX %2904 XXX fprintf
%2906:	br	 if.end19

BASIC BLOCK if.end19
%2907:	load	 exit_code
%2908:	icmp	 %2907 XXX
%2909:	br	 %2908 if.end22 if.then21

BASIC BLOCK if.then21
%2910:	store	 XXX exit_code
%2911:	br	 if.end22

BASIC BLOCK if.end22
%2912:	br	 if.end157

BASIC BLOCK if.end23
%2913:	load	 XXX
%2914:	icmp	 %2913 XXX
%2915:	br	 %2914 if.end39 land.lhs.true

BASIC BLOCK land.lhs.true
%2916:	load	 to_stdout
%2917:	icmp	 %2916 XXX
%2918:	br	 %2917 land.lhs.true26 if.end39

BASIC BLOCK land.lhs.true26
%2919:	load	 force
%2920:	icmp	 %2919 XXX
%2921:	br	 %2920 if.then28 if.end39

BASIC BLOCK if.then28
%2922:	load	 quiet
%2923:	icmp	 %2922 XXX
%2924:	br	 %2923 if.then30 if.end34

BASIC BLOCK if.then30
%2925:	load	 stderr
%2926:	load	 progname
%2927:	load	 XXX
%2928:	trunc	 %2927
%2929:	sub	 %2928 XXX
%2930:	load	 XXX
%2931:	icmp	 %2930 XXX
%2932:	select	 %2931 XXX XXX
%2933:	call	 %2925 XXX %2926 XXX %2929 %2932 fprintf
%2934:	br	 if.end34

BASIC BLOCK if.end34
%2935:	load	 exit_code
%2936:	icmp	 %2935 XXX
%2937:	br	 %2936 if.end38 if.then37

BASIC BLOCK if.then37
%2938:	store	 XXX exit_code
%2939:	br	 if.end38

BASIC BLOCK if.end38
%2940:	br	 if.end157

BASIC BLOCK if.end39
%2941:	load	 XXX
%2942:	store	 %2941 ifile_size
%2943:	store	 XXX time_stamp
%2944:	load	 to_stdout
%2945:	icmp	 %2944 XXX
%2946:	br	 %2945 if.else43 if.then41

BASIC BLOCK if.then41
%2947:	call	 XXX XXX strcpy
%2948:	br	 if.end49

BASIC BLOCK if.else43
%2949:	call	 make_ofname
%2950:	icmp	 %2949 XXX
%2951:	br	 %2950 if.end48 if.then47

BASIC BLOCK if.then47
%2952:	br	 if.end157

BASIC BLOCK if.end48
%2953:	br	 if.end49

BASIC BLOCK if.end49
%2954:	load	 ascii
%2955:	icmp	 %2954 XXX
%2956:	br	 %2955 land.end land.rhs

BASIC BLOCK land.rhs
%2957:	load	 decompress
%2958:	icmp	 %2957 XXX
%2959:	xor	 %2958 XXX
%2960:	br	 land.end

BASIC BLOCK land.end
%2961:	phi	 XXX %2959
%2962:	select	 %2961 XXX XXX
%2963:	call	 XXX %2962 XXX open
%2964:	store	 %2963 ifd
%2965:	load	 ifd
%2966:	icmp	 %2965 XXX
%2967:	br	 %2966 if.end58 if.then56

BASIC BLOCK if.then56
%2968:	load	 stderr
%2969:	load	 progname
%2970:	call	 %2968 XXX %2969 fprintf
%2971:	call	 XXX perror
%2972:	store	 XXX exit_code
%2973:	br	 if.end157

BASIC BLOCK if.end58
%2974:	call	 clear_bufs
%2975:	store	 XXX part_nb
%2976:	load	 decompress
%2977:	icmp	 %2976 XXX
%2978:	br	 %2977 if.end67 if.then60

BASIC BLOCK if.then60
%2979:	load	 ifd
%2980:	call	 %2979 get_method
%2981:	store	 %2980 method
%2982:	load	 method
%2983:	icmp	 %2982 XXX
%2984:	br	 %2983 if.end66 if.then64

BASIC BLOCK if.then64
%2985:	load	 ifd
%2986:	call	 %2985 close
%2987:	br	 if.end157

BASIC BLOCK if.end66
%2988:	br	 if.end67

BASIC BLOCK if.end67
%2989:	load	 to_stdout
%2990:	icmp	 %2989 XXX
%2991:	br	 %2990 if.else71 if.then69

BASIC BLOCK if.then69
%2992:	load	 stdout
%2993:	call	 %2992 fileno
%2994:	store	 %2993 ofd
%2995:	br	 if.end85

BASIC BLOCK if.else71
%2996:	call	 create_outfile
%2997:	icmp	 %2996 XXX
%2998:	br	 %2997 if.end76 if.then75

BASIC BLOCK if.then75
%2999:	br	 if.end157

BASIC BLOCK if.end76
%3000:	load	 save_orig_name
%3001:	icmp	 %3000 XXX
%3002:	br	 %3001 if.end84 land.lhs.true78

BASIC BLOCK land.lhs.true78
%3003:	load	 verbose
%3004:	icmp	 %3003 XXX
%3005:	br	 %3004 land.lhs.true80 if.end84

BASIC BLOCK land.lhs.true80
%3006:	load	 quiet
%3007:	icmp	 %3006 XXX
%3008:	br	 %3007 if.then82 if.end84

BASIC BLOCK if.then82
%3009:	load	 stderr
%3010:	load	 progname
%3011:	call	 %3009 XXX %3010 XXX XXX fprintf
%3012:	br	 if.end84

BASIC BLOCK if.end84
%3013:	br	 if.end85

BASIC BLOCK if.end85
%3014:	load	 verbose
%3015:	icmp	 %3014 XXX
%3016:	br	 %3015 if.end99 if.then87

BASIC BLOCK if.then87
%3017:	load	 stderr
%3018:	call	 XXX strlen
%3019:	trunc	 %3018
%3020:	icmp	 %3019 XXX
%3021:	br	 %3020 cond.false cond.true

BASIC BLOCK cond.true
%3022:	br	 cond.end

BASIC BLOCK cond.false
%3023:	call	 XXX strlen
%3024:	trunc	 %3023
%3025:	icmp	 %3024 XXX
%3026:	select	 %3025 XXX XXX
%3027:	br	 cond.end

BASIC BLOCK cond.end
%3028:	phi	 XXX %3026
%3029:	call	 %3017 XXX XXX %3028 fprintf
%3030:	br	 if.end99

BASIC BLOCK if.end99
%3031:	br	 for.cond

BASIC BLOCK for.cond
%3032:	load	 work
%3033:	load	 ifd
%3034:	load	 ofd
%3035:	call	 %3033 %3034 %3032
%3036:	icmp	 %3035 XXX
%3037:	br	 %3036 if.end104 if.then103

BASIC BLOCK if.then103
%3038:	store	 XXX method
%3039:	br	 for.end

BASIC BLOCK if.end104
%3040:	load	 decompress
%3041:	icmp	 %3040 XXX
%3042:	br	 %3041 if.then110 lor.lhs.false

BASIC BLOCK lor.lhs.false
%3043:	load	 last_member
%3044:	icmp	 %3043 XXX
%3045:	br	 %3044 lor.lhs.false107 if.then110

BASIC BLOCK lor.lhs.false107
%3046:	load	 inptr
%3047:	load	 insize
%3048:	icmp	 %3046 %3047
%3049:	br	 %3048 if.end111 if.then110

BASIC BLOCK if.then110
%3050:	br	 for.end

BASIC BLOCK if.end111
%3051:	load	 ifd
%3052:	call	 %3051 get_method
%3053:	store	 %3052 method
%3054:	load	 method
%3055:	icmp	 %3054 XXX
%3056:	br	 %3055 if.end116 if.then115

BASIC BLOCK if.then115
%3057:	br	 for.end

BASIC BLOCK if.end116
%3058:	store	 XXX bytes_out
%3059:	br	 for.cond

BASIC BLOCK for.end
%3060:	load	 ifd
%3061:	call	 %3060 close
%3062:	load	 to_stdout
%3063:	icmp	 %3062 XXX
%3064:	br	 %3063 land.lhs.true119 if.end123

BASIC BLOCK land.lhs.true119
%3065:	load	 ofd
%3066:	call	 %3065 close
%3067:	icmp	 %3066 XXX
%3068:	br	 %3067 if.end123 if.then122

BASIC BLOCK if.then122
%3069:	call	 write_error
%3070:	br	 if.end123

BASIC BLOCK if.end123
%3071:	load	 method
%3072:	icmp	 %3071 XXX
%3073:	br	 %3072 if.end131 if.then126

BASIC BLOCK if.then126
%3074:	load	 to_stdout
%3075:	icmp	 %3074 XXX
%3076:	br	 %3075 if.then128 if.end130

BASIC BLOCK if.then128
%3077:	call	 XXX unlink
%3078:	br	 if.end130

BASIC BLOCK if.end130
%3079:	br	 if.end157

BASIC BLOCK if.end131
%3080:	load	 verbose
%3081:	icmp	 %3080 XXX
%3082:	br	 %3081 if.end154 if.then133

BASIC BLOCK if.then133
%3083:	load	 test
%3084:	icmp	 %3083 XXX
%3085:	br	 %3084 if.else137 if.then135

BASIC BLOCK if.then135
%3086:	load	 stderr
%3087:	call	 %3086 XXX fprintf
%3088:	br	 if.end146

BASIC BLOCK if.else137
%3089:	load	 decompress
%3090:	icmp	 %3089 XXX
%3091:	br	 %3090 if.else142 if.then139

BASIC BLOCK if.then139
%3092:	load	 bytes_out
%3093:	load	 bytes_in
%3094:	load	 header_bytes
%3095:	sub	 %3093 %3094
%3096:	sub	 %3092 %3095
%3097:	load	 bytes_out
%3098:	call	 %3096 %3097 display_ratio
%3099:	br	 if.end145

BASIC BLOCK if.else142
%3100:	load	 bytes_in
%3101:	load	 bytes_out
%3102:	load	 header_bytes
%3103:	sub	 %3101 %3102
%3104:	sub	 %3100 %3103
%3105:	load	 bytes_in
%3106:	call	 %3104 %3105 display_ratio
%3107:	br	 if.end145

BASIC BLOCK if.end145
%3108:	br	 if.end146

BASIC BLOCK if.end146
%3109:	load	 test
%3110:	icmp	 %3109 XXX
%3111:	br	 %3110 land.lhs.true148 if.end152

BASIC BLOCK land.lhs.true148
%3112:	load	 to_stdout
%3113:	icmp	 %3112 XXX
%3114:	br	 %3113 if.then150 if.end152

BASIC BLOCK if.then150
%3115:	load	 stderr
%3116:	call	 %3115 XXX XXX fprintf
%3117:	br	 if.end152

BASIC BLOCK if.end152
%3118:	load	 stderr
%3119:	call	 %3118 XXX fprintf
%3120:	br	 if.end154

BASIC BLOCK if.end154
%3121:	load	 to_stdout
%3122:	icmp	 %3121 XXX
%3123:	br	 %3122 if.then156 if.end157

BASIC BLOCK if.then156
%3124:	call	 istat copy_stat
%3125:	br	 if.end157

BASIC BLOCK if.end157
%3126:	ret	

FUNCTION treat_stdin

BASIC BLOCK entry
%3127:	load	 force
%3128:	icmp	 %3127 XXX
%3129:	br	 %3128 land.lhs.true if.end

BASIC BLOCK land.lhs.true
%3130:	load	 decompress
%3131:	icmp	 %3130 XXX
%3132:	br	 %3131 cond.false cond.true

BASIC BLOCK cond.true
%3133:	load	 stdin
%3134:	br	 cond.end

BASIC BLOCK cond.false
%3135:	load	 stdout
%3136:	br	 cond.end

BASIC BLOCK cond.end
%3137:	phi	 %3133 %3135
%3138:	call	 %3137 fileno
%3139:	call	 %3138 isatty
%3140:	icmp	 %3139 XXX
%3141:	br	 %3140 if.end if.then

BASIC BLOCK if.then
%3142:	load	 stderr
%3143:	load	 progname
%3144:	load	 decompress
%3145:	icmp	 %3144 XXX
%3146:	select	 %3145 XXX XXX
%3147:	load	 decompress
%3148:	icmp	 %3147 XXX
%3149:	select	 %3148 XXX XXX
%3150:	call	 %3142 XXX %3143 %3146 %3149 fprintf
%3151:	load	 stderr
%3152:	load	 progname
%3153:	call	 %3151 XXX %3152 fprintf
%3154:	call	 XXX do_exit
%3155:	br	 if.end

BASIC BLOCK if.end
%3156:	load	 decompress
%3157:	icmp	 %3156 XXX
%3158:	br	 %3157 lor.lhs.false if.then12

BASIC BLOCK lor.lhs.false
%3159:	load	 ascii
%3160:	icmp	 %3159 XXX
%3161:	br	 %3160 if.then12 if.end13

BASIC BLOCK if.then12
%3162:	br	 if.end13

BASIC BLOCK if.end13
%3163:	load	 test
%3164:	icmp	 %3163 XXX
%3165:	br	 %3164 land.lhs.true15 if.end20

BASIC BLOCK land.lhs.true15
%3166:	load	 decompress
%3167:	icmp	 %3166 XXX
%3168:	br	 %3167 if.then19 lor.lhs.false17

BASIC BLOCK lor.lhs.false17
%3169:	load	 ascii
%3170:	icmp	 %3169 XXX
%3171:	br	 %3170 if.then19 if.end20

BASIC BLOCK if.then19
%3172:	br	 if.end20

BASIC BLOCK if.end20
%3173:	call	 XXX XXX strcpy
%3174:	call	 XXX XXX strcpy
%3175:	load	 stdin
%3176:	call	 %3175 fileno
%3177:	call	 %3176 istat fstat
%3178:	icmp	 %3177 XXX
%3179:	br	 %3178 if.end26 if.then25

BASIC BLOCK if.then25
%3180:	call	 XXX error
%3181:	br	 if.end26

BASIC BLOCK if.end26
%3182:	store	 XXX time_stamp
%3183:	store	 XXX ifile_size
%3184:	call	 clear_bufs
%3185:	store	 XXX to_stdout
%3186:	store	 XXX part_nb
%3187:	load	 decompress
%3188:	icmp	 %3187 XXX
%3189:	br	 %3188 if.end33 if.then28

BASIC BLOCK if.then28
%3190:	load	 ifd
%3191:	call	 %3190 get_method
%3192:	store	 %3191 method
%3193:	load	 method
%3194:	icmp	 %3193 XXX
%3195:	br	 %3194 if.end32 if.then31

BASIC BLOCK if.then31
%3196:	load	 exit_code
%3197:	call	 %3196 do_exit
%3198:	br	 if.end32

BASIC BLOCK if.end32
%3199:	br	 if.end33

BASIC BLOCK if.end33
%3200:	br	 for.cond

BASIC BLOCK for.cond
%3201:	load	 work
%3202:	load	 stdin
%3203:	call	 %3202 fileno
%3204:	load	 stdout
%3205:	call	 %3204 fileno
%3206:	call	 %3203 %3205 %3201
%3207:	icmp	 %3206 XXX
%3208:	br	 %3207 if.end39 if.then38

BASIC BLOCK if.then38
%3209:	br	 if.end62

BASIC BLOCK if.end39
%3210:	load	 decompress
%3211:	icmp	 %3210 XXX
%3212:	br	 %3211 if.then45 lor.lhs.false41

BASIC BLOCK lor.lhs.false41
%3213:	load	 last_member
%3214:	icmp	 %3213 XXX
%3215:	br	 %3214 lor.lhs.false43 if.then45

BASIC BLOCK lor.lhs.false43
%3216:	load	 inptr
%3217:	load	 insize
%3218:	icmp	 %3216 %3217
%3219:	br	 %3218 if.end46 if.then45

BASIC BLOCK if.then45
%3220:	br	 for.end

BASIC BLOCK if.end46
%3221:	load	 ifd
%3222:	call	 %3221 get_method
%3223:	store	 %3222 method
%3224:	load	 method
%3225:	icmp	 %3224 XXX
%3226:	br	 %3225 if.end50 if.then49

BASIC BLOCK if.then49
%3227:	br	 if.end62

BASIC BLOCK if.end50
%3228:	store	 XXX bytes_out
%3229:	br	 for.cond

BASIC BLOCK for.end
%3230:	load	 verbose
%3231:	icmp	 %3230 XXX
%3232:	br	 %3231 if.end62 if.then52

BASIC BLOCK if.then52
%3233:	load	 test
%3234:	icmp	 %3233 XXX
%3235:	br	 %3234 if.else if.then54

BASIC BLOCK if.then54
%3236:	load	 stderr
%3237:	call	 %3236 XXX fprintf
%3238:	br	 if.end60

BASIC BLOCK if.else
%3239:	load	 decompress
%3240:	icmp	 %3239 XXX
%3241:	br	 %3240 if.then57 if.end59

BASIC BLOCK if.then57
%3242:	load	 bytes_in
%3243:	load	 bytes_out
%3244:	load	 header_bytes
%3245:	sub	 %3243 %3244
%3246:	sub	 %3242 %3245
%3247:	load	 bytes_in
%3248:	call	 %3246 %3247 display_ratio
%3249:	br	 if.end59

BASIC BLOCK if.end59
%3250:	br	 if.end60

BASIC BLOCK if.end60
%3251:	load	 stderr
%3252:	call	 %3251 XXX fprintf
%3253:	br	 if.end62

BASIC BLOCK if.end62
%3254:	ret	

FUNCTION huft_build

BASIC BLOCK entry
%3255:	alloca	 XXX
%3256:	alloca	 XXX
%3257:	alloca	 XXX
%3258:	alloca	 XXX
%3259:	alloca	 XXX
%3260:	getelementptr	 %3255 XXX XXX
%3261:	bitcast	 %3260
%3262:	call	 %3261 XXX XXX XXX XXX llvm.memset.p0i8.i64
%3263:	br	 do.body

BASIC BLOCK do.body
%3264:	phi	 n %3274
%3265:	phi	 b %3266
%3266:	getelementptr	 %3265 XXX
%3267:	load	 %3265
%3268:	zext	 %3267
%3269:	getelementptr	 %3255 XXX %3268
%3270:	load	 %3269
%3271:	add	 %3270 XXX
%3272:	store	 %3271 %3269
%3273:	br	 do.cond

BASIC BLOCK do.cond
%3274:	add	 %3264 XXX
%3275:	icmp	 %3274 XXX
%3276:	br	 %3275 do.end do.body

BASIC BLOCK do.end
%3277:	getelementptr	 %3255 XXX XXX
%3278:	load	 %3277
%3279:	icmp	 %3278 n
%3280:	br	 %3279 if.end if.then

BASIC BLOCK if.then
%3281:	store	 XXX t
%3282:	store	 XXX m
%3283:	br	 return

BASIC BLOCK if.end
%3284:	load	 m
%3285:	br	 for.cond

BASIC BLOCK for.cond
%3286:	phi	 XXX %3296
%3287:	icmp	 %3286 XXX
%3288:	br	 %3287 for.end for.body

BASIC BLOCK for.body
%3289:	zext	 %3286
%3290:	getelementptr	 %3255 XXX %3289
%3291:	load	 %3290
%3292:	icmp	 %3291 XXX
%3293:	br	 %3292 if.end7 if.then6

BASIC BLOCK if.then6
%3294:	br	 for.end

BASIC BLOCK if.end7
%3295:	br	 for.inc

BASIC BLOCK for.inc
%3296:	add	 %3286 XXX
%3297:	br	 for.cond

BASIC BLOCK for.end
%3298:	icmp	 %3284 %3286
%3299:	br	 %3298 if.end11 if.then10

BASIC BLOCK if.then10
%3300:	br	 if.end11

BASIC BLOCK if.end11
%3301:	phi	 %3286 %3284
%3302:	br	 for.cond12

BASIC BLOCK for.cond12
%3303:	phi	 XXX %3313
%3304:	icmp	 %3303 XXX
%3305:	br	 %3304 for.end22 for.body14

BASIC BLOCK for.body14
%3306:	zext	 %3303
%3307:	getelementptr	 %3255 XXX %3306
%3308:	load	 %3307
%3309:	icmp	 %3308 XXX
%3310:	br	 %3309 if.end19 if.then18

BASIC BLOCK if.then18
%3311:	br	 for.end22

BASIC BLOCK if.end19
%3312:	br	 for.inc20

BASIC BLOCK for.inc20
%3313:	add	 %3303 XXX
%3314:	br	 for.cond12

BASIC BLOCK for.end22
%3315:	icmp	 %3301 %3303
%3316:	br	 %3315 if.end25 if.then24

BASIC BLOCK if.then24
%3317:	br	 if.end25

BASIC BLOCK if.end25
%3318:	phi	 %3303 %3301
%3319:	store	 %3318 m
%3320:	shl	 XXX %3286
%3321:	br	 for.cond26

BASIC BLOCK for.cond26
%3322:	phi	 %3286 %3334
%3323:	phi	 %3320 %3335
%3324:	icmp	 %3322 %3303
%3325:	br	 %3324 for.end37 for.body28

BASIC BLOCK for.body28
%3326:	zext	 %3322
%3327:	getelementptr	 %3255 XXX %3326
%3328:	load	 %3327
%3329:	sub	 %3323 %3328
%3330:	icmp	 %3329 XXX
%3331:	br	 %3330 if.end33 if.then32

BASIC BLOCK if.then32
%3332:	br	 return

BASIC BLOCK if.end33
%3333:	br	 for.inc34

BASIC BLOCK for.inc34
%3334:	add	 %3322 XXX
%3335:	shl	 %3329 XXX
%3336:	br	 for.cond26

BASIC BLOCK for.end37
%3337:	zext	 %3303
%3338:	getelementptr	 %3255 XXX %3337
%3339:	load	 %3338
%3340:	sub	 %3323 %3339
%3341:	icmp	 %3340 XXX
%3342:	br	 %3341 if.end43 if.then42

BASIC BLOCK if.then42
%3343:	br	 return

BASIC BLOCK if.end43
%3344:	zext	 %3303
%3345:	getelementptr	 %3255 XXX %3344
%3346:	load	 %3345
%3347:	add	 %3346 %3340
%3348:	store	 %3347 %3345
%3349:	getelementptr	 %3259 XXX XXX
%3350:	store	 XXX %3349
%3351:	getelementptr	 %3255 XXX XXX
%3352:	getelementptr	 %3351 XXX
%3353:	getelementptr	 %3259 XXX XXX
%3354:	getelementptr	 %3353 XXX
%3355:	br	 while.cond

BASIC BLOCK while.cond
%3356:	phi	 XXX %3365
%3357:	phi	 %3303 %3360
%3358:	phi	 %3352 %3363
%3359:	phi	 %3354 %3366
%3360:	add	 %3357 XXX
%3361:	icmp	 %3360 XXX
%3362:	br	 %3361 while.end while.body

BASIC BLOCK while.body
%3363:	getelementptr	 %3358 XXX
%3364:	load	 %3358
%3365:	add	 %3356 %3364
%3366:	getelementptr	 %3359 XXX
%3367:	store	 %3365 %3359
%3368:	br	 while.cond

BASIC BLOCK while.end
%3369:	br	 do.body55

BASIC BLOCK do.body55
%3370:	phi	 XXX %3386
%3371:	phi	 b %3372
%3372:	getelementptr	 %3371 XXX
%3373:	load	 %3371
%3374:	icmp	 %3373 XXX
%3375:	br	 %3374 if.end64 if.then58

BASIC BLOCK if.then58
%3376:	zext	 %3373
%3377:	getelementptr	 %3259 XXX %3376
%3378:	load	 %3377
%3379:	add	 %3378 XXX
%3380:	store	 %3379 %3377
%3381:	zext	 %3378
%3382:	getelementptr	 %3258 XXX %3381
%3383:	store	 %3370 %3382
%3384:	br	 if.end64

BASIC BLOCK if.end64
%3385:	br	 do.cond65

BASIC BLOCK do.cond65
%3386:	add	 %3370 XXX
%3387:	icmp	 %3386 n
%3388:	br	 %3387 do.end68 do.body55

BASIC BLOCK do.end68
%3389:	getelementptr	 %3259 XXX XXX
%3390:	store	 XXX %3389
%3391:	getelementptr	 %3258 XXX XXX
%3392:	sub	 XXX %3318
%3393:	getelementptr	 %3257 XXX XXX
%3394:	store	 XXX %3393
%3395:	br	 for.cond73

BASIC BLOCK for.cond73
%3396:	phi	 %3286 %3615
%3397:	phi	 XXX %3410
%3398:	phi	 XXX %3411
%3399:	phi	 %3391 %3413
%3400:	phi	 t %3414
%3401:	phi	 XXX %3415
%3402:	phi	 %3392 %3416
%3403:	phi	 XXX %3417
%3404:	icmp	 %3396 %3303
%3405:	br	 %3404 for.end221 for.body75

BASIC BLOCK for.body75
%3406:	sext	 %3396
%3407:	getelementptr	 %3255 XXX %3406
%3408:	load	 %3407
%3409:	br	 while.cond78

BASIC BLOCK while.cond78
%3410:	phi	 %3397 %3598
%3411:	phi	 %3398 %3600
%3412:	phi	 %3408 %3418
%3413:	phi	 %3399 %3570
%3414:	phi	 %3400 %3423
%3415:	phi	 %3401 %3424
%3416:	phi	 %3402 %3601
%3417:	phi	 %3403 %3426
%3418:	add	 %3412 XXX
%3419:	icmp	 %3412 XXX
%3420:	br	 %3419 while.end218 while.body81

BASIC BLOCK while.body81
%3421:	br	 while.cond82

BASIC BLOCK while.cond82
%3422:	phi	 %3411 %3430
%3423:	phi	 %3414 %3488
%3424:	phi	 %3415 %3490
%3425:	phi	 %3416 %3431
%3426:	phi	 %3417 %3466
%3427:	add	 %3425 %3318
%3428:	icmp	 %3396 %3427
%3429:	br	 %3428 while.end148 while.body85

BASIC BLOCK while.body85
%3430:	add	 %3422 XXX
%3431:	add	 %3425 %3318
%3432:	sub	 %3303 %3431
%3433:	icmp	 %3432 %3318
%3434:	br	 %3433 cond.false cond.true

BASIC BLOCK cond.true
%3435:	br	 cond.end

BASIC BLOCK cond.false
%3436:	br	 cond.end

BASIC BLOCK cond.end
%3437:	phi	 %3318 %3432
%3438:	sub	 %3396 %3431
%3439:	shl	 XXX %3438
%3440:	add	 %3418 XXX
%3441:	icmp	 %3439 %3440
%3442:	br	 %3441 if.end110 if.then94

BASIC BLOCK if.then94
%3443:	add	 %3418 XXX
%3444:	sub	 %3439 %3443
%3445:	getelementptr	 %3255 XXX XXX
%3446:	sext	 %3396
%3447:	getelementptr	 %3445 %3446
%3448:	br	 while.cond99

BASIC BLOCK while.cond99
%3449:	phi	 %3438 %3452
%3450:	phi	 %3444 %3462
%3451:	phi	 %3447 %3456
%3452:	add	 %3449 XXX
%3453:	icmp	 %3452 %3437
%3454:	br	 %3453 while.end109 while.body102

BASIC BLOCK while.body102
%3455:	shl	 %3450 XXX
%3456:	getelementptr	 %3451 XXX
%3457:	load	 %3456
%3458:	icmp	 %3455 %3457
%3459:	br	 %3458 if.end107 if.then106

BASIC BLOCK if.then106
%3460:	br	 while.end109

BASIC BLOCK if.end107
%3461:	load	 %3456
%3462:	sub	 %3455 %3461
%3463:	br	 while.cond99

BASIC BLOCK while.end109
%3464:	br	 if.end110

BASIC BLOCK if.end110
%3465:	phi	 %3452 %3438
%3466:	shl	 XXX %3465
%3467:	add	 %3466 XXX
%3468:	zext	 %3467
%3469:	mul	 %3468 XXX
%3470:	call	 %3469 malloc
%3471:	bitcast	 %3470
%3472:	icmp	 %3471 XXX
%3473:	br	 %3472 if.end121 if.then115

BASIC BLOCK if.then115
%3474:	icmp	 %3430 XXX
%3475:	br	 %3474 if.end120 if.then117

BASIC BLOCK if.then117
%3476:	getelementptr	 %3257 XXX XXX
%3477:	load	 %3476
%3478:	call	 %3477 huft_free
%3479:	br	 if.end120

BASIC BLOCK if.end120
%3480:	br	 return

BASIC BLOCK if.end121
%3481:	add	 %3466 XXX
%3482:	load	 hufts
%3483:	add	 %3482 %3481
%3484:	store	 %3483 hufts
%3485:	getelementptr	 %3471 XXX
%3486:	store	 %3485 %3423
%3487:	getelementptr	 %3471 XXX XXX
%3488:	bitcast	 %3487
%3489:	store	 XXX %3488
%3490:	getelementptr	 %3471 XXX
%3491:	sext	 %3430
%3492:	getelementptr	 %3257 XXX %3491
%3493:	store	 %3490 %3492
%3494:	icmp	 %3430 XXX
%3495:	br	 %3494 if.end147 if.then131

BASIC BLOCK if.then131
%3496:	sext	 %3430
%3497:	getelementptr	 %3259 XXX %3496
%3498:	store	 %3410 %3497
%3499:	trunc	 %3318
%3500:	getelementptr	 %3256 XXX XXX
%3501:	store	 %3499 %3500
%3502:	add	 XXX %3465
%3503:	trunc	 %3502
%3504:	getelementptr	 %3256 XXX XXX
%3505:	store	 %3503 %3504
%3506:	getelementptr	 %3256 XXX XXX
%3507:	bitcast	 %3506
%3508:	store	 %3490 %3507
%3509:	sub	 %3431 %3318
%3510:	lshr	 %3410 %3509
%3511:	zext	 %3510
%3512:	sub	 %3430 XXX
%3513:	sext	 %3512
%3514:	getelementptr	 %3257 XXX %3513
%3515:	load	 %3514
%3516:	getelementptr	 %3515 %3511
%3517:	bitcast	 %3516
%3518:	bitcast	 %3256
%3519:	call	 %3517 %3518 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%3520:	br	 if.end147

BASIC BLOCK if.end147
%3521:	br	 while.cond82

BASIC BLOCK while.end148
%3522:	sub	 %3396 %3425
%3523:	trunc	 %3522
%3524:	getelementptr	 %3256 XXX XXX
%3525:	store	 %3523 %3524
%3526:	getelementptr	 %3258 XXX XXX
%3527:	zext	 n
%3528:	getelementptr	 %3526 %3527
%3529:	icmp	 %3413 %3528
%3530:	br	 %3529 if.else if.then157

BASIC BLOCK if.then157
%3531:	getelementptr	 %3256 XXX XXX
%3532:	store	 XXX %3531
%3533:	br	 if.end184

BASIC BLOCK if.else
%3534:	load	 %3413
%3535:	icmp	 %3534 s
%3536:	br	 %3535 if.else171 if.then161

BASIC BLOCK if.then161
%3537:	load	 %3413
%3538:	icmp	 %3537 XXX
%3539:	select	 %3538 XXX XXX
%3540:	trunc	 %3539
%3541:	getelementptr	 %3256 XXX XXX
%3542:	store	 %3540 %3541
%3543:	load	 %3413
%3544:	trunc	 %3543
%3545:	getelementptr	 %3256 XXX XXX
%3546:	bitcast	 %3545
%3547:	store	 %3544 %3546
%3548:	getelementptr	 %3413 XXX
%3549:	br	 if.end183

BASIC BLOCK if.else171
%3550:	load	 %3413
%3551:	sub	 %3550 s
%3552:	zext	 %3551
%3553:	getelementptr	 e %3552
%3554:	load	 %3553
%3555:	trunc	 %3554
%3556:	getelementptr	 %3256 XXX XXX
%3557:	store	 %3555 %3556
%3558:	getelementptr	 %3413 XXX
%3559:	load	 %3413
%3560:	sub	 %3559 s
%3561:	zext	 %3560
%3562:	getelementptr	 d %3561
%3563:	load	 %3562
%3564:	getelementptr	 %3256 XXX XXX
%3565:	bitcast	 %3564
%3566:	store	 %3563 %3565
%3567:	br	 if.end183

BASIC BLOCK if.end183
%3568:	phi	 %3548 %3558
%3569:	br	 if.end184

BASIC BLOCK if.end184
%3570:	phi	 %3413 %3568
%3571:	sub	 %3396 %3425
%3572:	shl	 XXX %3571
%3573:	lshr	 %3410 %3425
%3574:	br	 for.cond188

BASIC BLOCK for.cond188
%3575:	phi	 %3573 %3584
%3576:	icmp	 %3575 %3426
%3577:	br	 %3576 for.end196 for.body191

BASIC BLOCK for.body191
%3578:	zext	 %3575
%3579:	getelementptr	 %3424 %3578
%3580:	bitcast	 %3579
%3581:	bitcast	 %3256
%3582:	call	 %3580 %3581 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%3583:	br	 for.inc194

BASIC BLOCK for.inc194
%3584:	add	 %3575 %3572
%3585:	br	 for.cond188

BASIC BLOCK for.end196
%3586:	sub	 %3396 XXX
%3587:	shl	 XXX %3586
%3588:	br	 for.cond199

BASIC BLOCK for.cond199
%3589:	phi	 %3587 %3596
%3590:	phi	 %3410 %3594
%3591:	and	 %3590 %3589
%3592:	icmp	 %3591 XXX
%3593:	br	 %3592 for.end204 for.body201

BASIC BLOCK for.body201
%3594:	xor	 %3590 %3589
%3595:	br	 for.inc202

BASIC BLOCK for.inc202
%3596:	lshr	 %3589 XXX
%3597:	br	 for.cond199

BASIC BLOCK for.end204
%3598:	xor	 %3590 %3589
%3599:	br	 while.cond206

BASIC BLOCK while.cond206
%3600:	phi	 %3422 %3610
%3601:	phi	 %3425 %3611
%3602:	shl	 XXX %3601
%3603:	sub	 %3602 XXX
%3604:	and	 %3598 %3603
%3605:	sext	 %3600
%3606:	getelementptr	 %3259 XXX %3605
%3607:	load	 %3606
%3608:	icmp	 %3604 %3607
%3609:	br	 %3608 while.end217 while.body214

BASIC BLOCK while.body214
%3610:	add	 %3600 XXX
%3611:	sub	 %3601 %3318
%3612:	br	 while.cond206

BASIC BLOCK while.end217
%3613:	br	 while.cond78

BASIC BLOCK while.end218
%3614:	br	 for.inc219

BASIC BLOCK for.inc219
%3615:	add	 %3396 XXX
%3616:	br	 for.cond73

BASIC BLOCK for.end221
%3617:	icmp	 %3340 XXX
%3618:	br	 %3617 land.end land.rhs

BASIC BLOCK land.rhs
%3619:	icmp	 %3303 XXX
%3620:	br	 land.end

BASIC BLOCK land.end
%3621:	phi	 XXX %3619
%3622:	zext	 %3621
%3623:	br	 return

BASIC BLOCK return
%3624:	phi	 XXX XXX XXX XXX %3622
%3625:	ret	 %3624

FUNCTION huft_free

BASIC BLOCK entry
%3626:	br	 while.cond

BASIC BLOCK while.cond
%3627:	phi	 t %3633
%3628:	icmp	 %3627 XXX
%3629:	br	 %3628 while.end while.body

BASIC BLOCK while.body
%3630:	getelementptr	 %3627 XXX
%3631:	getelementptr	 %3630 XXX XXX
%3632:	bitcast	 %3631
%3633:	load	 %3632
%3634:	bitcast	 %3630
%3635:	call	 %3634 free
%3636:	br	 while.cond

BASIC BLOCK while.end
%3637:	ret	 XXX

FUNCTION inflate_codes

BASIC BLOCK entry
%3638:	load	 bb
%3639:	load	 bk
%3640:	load	 outcnt
%3641:	sext	 bl
%3642:	getelementptr	 mask_bits XXX %3641
%3643:	load	 %3642
%3644:	zext	 %3643
%3645:	sext	 bd
%3646:	getelementptr	 mask_bits XXX %3645
%3647:	load	 %3646
%3648:	zext	 %3647
%3649:	br	 for.cond

BASIC BLOCK for.cond
%3650:	phi	 %3640 %4038
%3651:	phi	 %3638 %4039
%3652:	phi	 %3639 %4040
%3653:	br	 while.cond

BASIC BLOCK while.cond
%3654:	phi	 %3651 %3677
%3655:	phi	 %3652 %3678
%3656:	icmp	 %3655 bl
%3657:	br	 %3656 while.end while.body

BASIC BLOCK while.body
%3658:	load	 inptr
%3659:	load	 insize
%3660:	icmp	 %3658 %3659
%3661:	br	 %3660 cond.false cond.true

BASIC BLOCK cond.true
%3662:	load	 inptr
%3663:	add	 %3662 XXX
%3664:	store	 %3663 inptr
%3665:	zext	 %3662
%3666:	getelementptr	 inbuf XXX %3665
%3667:	load	 %3666
%3668:	zext	 %3667
%3669:	br	 cond.end

BASIC BLOCK cond.false
%3670:	call	 fill_inbuf
%3671:	br	 cond.end

BASIC BLOCK cond.end
%3672:	phi	 %3668 %3670
%3673:	trunc	 %3672
%3674:	zext	 %3673
%3675:	zext	 %3655
%3676:	shl	 %3674 %3675
%3677:	or	 %3654 %3676
%3678:	add	 %3655 XXX
%3679:	br	 while.cond

BASIC BLOCK while.end
%3680:	trunc	 %3654
%3681:	and	 %3680 %3644
%3682:	zext	 %3681
%3683:	getelementptr	 tl %3682
%3684:	getelementptr	 %3683 XXX XXX
%3685:	load	 %3684
%3686:	zext	 %3685
%3687:	icmp	 %3686 XXX
%3688:	br	 %3687 if.end60 if.then

BASIC BLOCK if.then
%3689:	br	 do.body

BASIC BLOCK do.body
%3690:	phi	 %3686 %3748
%3691:	phi	 %3683 %3745
%3692:	phi	 %3654 %3708
%3693:	phi	 %3655 %3709
%3694:	icmp	 %3690 XXX
%3695:	br	 %3694 if.end if.then19

BASIC BLOCK if.then19
%3696:	br	 return

BASIC BLOCK if.end
%3697:	getelementptr	 %3691 XXX XXX
%3698:	load	 %3697
%3699:	zext	 %3698
%3700:	zext	 %3699
%3701:	lshr	 %3692 %3700
%3702:	getelementptr	 %3691 XXX XXX
%3703:	load	 %3702
%3704:	zext	 %3703
%3705:	sub	 %3693 %3704
%3706:	sub	 %3690 XXX
%3707:	br	 while.cond26

BASIC BLOCK while.cond26
%3708:	phi	 %3701 %3731
%3709:	phi	 %3705 %3732
%3710:	icmp	 %3709 %3706
%3711:	br	 %3710 while.end47 while.body29

BASIC BLOCK while.body29
%3712:	load	 inptr
%3713:	load	 insize
%3714:	icmp	 %3712 %3713
%3715:	br	 %3714 cond.false37 cond.true32

BASIC BLOCK cond.true32
%3716:	load	 inptr
%3717:	add	 %3716 XXX
%3718:	store	 %3717 inptr
%3719:	zext	 %3716
%3720:	getelementptr	 inbuf XXX %3719
%3721:	load	 %3720
%3722:	zext	 %3721
%3723:	br	 cond.end39

BASIC BLOCK cond.false37
%3724:	call	 fill_inbuf
%3725:	br	 cond.end39

BASIC BLOCK cond.end39
%3726:	phi	 %3722 %3724
%3727:	trunc	 %3726
%3728:	zext	 %3727
%3729:	zext	 %3709
%3730:	shl	 %3728 %3729
%3731:	or	 %3708 %3730
%3732:	add	 %3709 XXX
%3733:	br	 while.cond26

BASIC BLOCK while.end47
%3734:	br	 do.cond

BASIC BLOCK do.cond
%3735:	getelementptr	 %3691 XXX XXX
%3736:	bitcast	 %3735
%3737:	load	 %3736
%3738:	trunc	 %3708
%3739:	zext	 %3706
%3740:	getelementptr	 mask_bits XXX %3739
%3741:	load	 %3740
%3742:	zext	 %3741
%3743:	and	 %3738 %3742
%3744:	zext	 %3743
%3745:	getelementptr	 %3737 %3744
%3746:	getelementptr	 %3745 XXX XXX
%3747:	load	 %3746
%3748:	zext	 %3747
%3749:	icmp	 %3748 XXX
%3750:	br	 %3749 do.end do.body

BASIC BLOCK do.end
%3751:	br	 if.end60

BASIC BLOCK if.end60
%3752:	phi	 %3748 %3686
%3753:	phi	 %3745 %3683
%3754:	phi	 %3708 %3654
%3755:	phi	 %3709 %3655
%3756:	getelementptr	 %3753 XXX XXX
%3757:	load	 %3756
%3758:	zext	 %3757
%3759:	zext	 %3758
%3760:	lshr	 %3754 %3759
%3761:	getelementptr	 %3753 XXX XXX
%3762:	load	 %3761
%3763:	zext	 %3762
%3764:	sub	 %3755 %3763
%3765:	icmp	 %3752 XXX
%3766:	br	 %3765 if.else if.then70

BASIC BLOCK if.then70
%3767:	getelementptr	 %3753 XXX XXX
%3768:	bitcast	 %3767
%3769:	load	 %3768
%3770:	trunc	 %3769
%3771:	add	 %3650 XXX
%3772:	zext	 %3650
%3773:	getelementptr	 window XXX %3772
%3774:	store	 %3770 %3773
%3775:	icmp	 %3771 XXX
%3776:	br	 %3775 if.end80 if.then79

BASIC BLOCK if.then79
%3777:	store	 %3771 outcnt
%3778:	call	 flush_window
%3779:	br	 if.end80

BASIC BLOCK if.end80
%3780:	phi	 XXX %3771
%3781:	br	 if.end288

BASIC BLOCK if.else
%3782:	icmp	 %3752 XXX
%3783:	br	 %3782 if.end84 if.then83

BASIC BLOCK if.then83
%3784:	br	 for.end

BASIC BLOCK if.end84
%3785:	br	 while.cond85

BASIC BLOCK while.cond85
%3786:	phi	 %3760 %3809
%3787:	phi	 %3764 %3810
%3788:	icmp	 %3787 %3752
%3789:	br	 %3788 while.end106 while.body88

BASIC BLOCK while.body88
%3790:	load	 inptr
%3791:	load	 insize
%3792:	icmp	 %3790 %3791
%3793:	br	 %3792 cond.false96 cond.true91

BASIC BLOCK cond.true91
%3794:	load	 inptr
%3795:	add	 %3794 XXX
%3796:	store	 %3795 inptr
%3797:	zext	 %3794
%3798:	getelementptr	 inbuf XXX %3797
%3799:	load	 %3798
%3800:	zext	 %3799
%3801:	br	 cond.end98

BASIC BLOCK cond.false96
%3802:	call	 fill_inbuf
%3803:	br	 cond.end98

BASIC BLOCK cond.end98
%3804:	phi	 %3800 %3802
%3805:	trunc	 %3804
%3806:	zext	 %3805
%3807:	zext	 %3787
%3808:	shl	 %3806 %3807
%3809:	or	 %3786 %3808
%3810:	add	 %3787 XXX
%3811:	br	 while.cond85

BASIC BLOCK while.end106
%3812:	getelementptr	 %3753 XXX XXX
%3813:	bitcast	 %3812
%3814:	load	 %3813
%3815:	zext	 %3814
%3816:	trunc	 %3786
%3817:	zext	 %3752
%3818:	getelementptr	 mask_bits XXX %3817
%3819:	load	 %3818
%3820:	zext	 %3819
%3821:	and	 %3816 %3820
%3822:	add	 %3815 %3821
%3823:	zext	 %3752
%3824:	lshr	 %3786 %3823
%3825:	sub	 %3787 %3752
%3826:	br	 while.cond119

BASIC BLOCK while.cond119
%3827:	phi	 %3824 %3850
%3828:	phi	 %3825 %3851
%3829:	icmp	 %3828 bd
%3830:	br	 %3829 while.end140 while.body122

BASIC BLOCK while.body122
%3831:	load	 inptr
%3832:	load	 insize
%3833:	icmp	 %3831 %3832
%3834:	br	 %3833 cond.false130 cond.true125

BASIC BLOCK cond.true125
%3835:	load	 inptr
%3836:	add	 %3835 XXX
%3837:	store	 %3836 inptr
%3838:	zext	 %3835
%3839:	getelementptr	 inbuf XXX %3838
%3840:	load	 %3839
%3841:	zext	 %3840
%3842:	br	 cond.end132

BASIC BLOCK cond.false130
%3843:	call	 fill_inbuf
%3844:	br	 cond.end132

BASIC BLOCK cond.end132
%3845:	phi	 %3841 %3843
%3846:	trunc	 %3845
%3847:	zext	 %3846
%3848:	zext	 %3828
%3849:	shl	 %3847 %3848
%3850:	or	 %3827 %3849
%3851:	add	 %3828 XXX
%3852:	br	 while.cond119

BASIC BLOCK while.end140
%3853:	trunc	 %3827
%3854:	and	 %3853 %3648
%3855:	zext	 %3854
%3856:	getelementptr	 td %3855
%3857:	getelementptr	 %3856 XXX XXX
%3858:	load	 %3857
%3859:	zext	 %3858
%3860:	icmp	 %3859 XXX
%3861:	br	 %3860 if.end200 if.then149

BASIC BLOCK if.then149
%3862:	br	 do.body150

BASIC BLOCK do.body150
%3863:	phi	 %3859 %3921
%3864:	phi	 %3856 %3918
%3865:	phi	 %3827 %3881
%3866:	phi	 %3828 %3882
%3867:	icmp	 %3863 XXX
%3868:	br	 %3867 if.end154 if.then153

BASIC BLOCK if.then153
%3869:	br	 return

BASIC BLOCK if.end154
%3870:	getelementptr	 %3864 XXX XXX
%3871:	load	 %3870
%3872:	zext	 %3871
%3873:	zext	 %3872
%3874:	lshr	 %3865 %3873
%3875:	getelementptr	 %3864 XXX XXX
%3876:	load	 %3875
%3877:	zext	 %3876
%3878:	sub	 %3866 %3877
%3879:	sub	 %3863 XXX
%3880:	br	 while.cond163

BASIC BLOCK while.cond163
%3881:	phi	 %3874 %3904
%3882:	phi	 %3878 %3905
%3883:	icmp	 %3882 %3879
%3884:	br	 %3883 while.end184 while.body166

BASIC BLOCK while.body166
%3885:	load	 inptr
%3886:	load	 insize
%3887:	icmp	 %3885 %3886
%3888:	br	 %3887 cond.false174 cond.true169

BASIC BLOCK cond.true169
%3889:	load	 inptr
%3890:	add	 %3889 XXX
%3891:	store	 %3890 inptr
%3892:	zext	 %3889
%3893:	getelementptr	 inbuf XXX %3892
%3894:	load	 %3893
%3895:	zext	 %3894
%3896:	br	 cond.end176

BASIC BLOCK cond.false174
%3897:	call	 fill_inbuf
%3898:	br	 cond.end176

BASIC BLOCK cond.end176
%3899:	phi	 %3895 %3897
%3900:	trunc	 %3899
%3901:	zext	 %3900
%3902:	zext	 %3882
%3903:	shl	 %3901 %3902
%3904:	or	 %3881 %3903
%3905:	add	 %3882 XXX
%3906:	br	 while.cond163

BASIC BLOCK while.end184
%3907:	br	 do.cond185

BASIC BLOCK do.cond185
%3908:	getelementptr	 %3864 XXX XXX
%3909:	bitcast	 %3908
%3910:	load	 %3909
%3911:	trunc	 %3881
%3912:	zext	 %3879
%3913:	getelementptr	 mask_bits XXX %3912
%3914:	load	 %3913
%3915:	zext	 %3914
%3916:	and	 %3911 %3915
%3917:	zext	 %3916
%3918:	getelementptr	 %3910 %3917
%3919:	getelementptr	 %3918 XXX XXX
%3920:	load	 %3919
%3921:	zext	 %3920
%3922:	icmp	 %3921 XXX
%3923:	br	 %3922 do.end199 do.body150

BASIC BLOCK do.end199
%3924:	br	 if.end200

BASIC BLOCK if.end200
%3925:	phi	 %3921 %3859
%3926:	phi	 %3918 %3856
%3927:	phi	 %3881 %3827
%3928:	phi	 %3882 %3828
%3929:	getelementptr	 %3926 XXX XXX
%3930:	load	 %3929
%3931:	zext	 %3930
%3932:	zext	 %3931
%3933:	lshr	 %3927 %3932
%3934:	getelementptr	 %3926 XXX XXX
%3935:	load	 %3934
%3936:	zext	 %3935
%3937:	sub	 %3928 %3936
%3938:	br	 while.cond208

BASIC BLOCK while.cond208
%3939:	phi	 %3933 %3962
%3940:	phi	 %3937 %3963
%3941:	icmp	 %3940 %3925
%3942:	br	 %3941 while.end229 while.body211

BASIC BLOCK while.body211
%3943:	load	 inptr
%3944:	load	 insize
%3945:	icmp	 %3943 %3944
%3946:	br	 %3945 cond.false219 cond.true214

BASIC BLOCK cond.true214
%3947:	load	 inptr
%3948:	add	 %3947 XXX
%3949:	store	 %3948 inptr
%3950:	zext	 %3947
%3951:	getelementptr	 inbuf XXX %3950
%3952:	load	 %3951
%3953:	zext	 %3952
%3954:	br	 cond.end221

BASIC BLOCK cond.false219
%3955:	call	 fill_inbuf
%3956:	br	 cond.end221

BASIC BLOCK cond.end221
%3957:	phi	 %3953 %3955
%3958:	trunc	 %3957
%3959:	zext	 %3958
%3960:	zext	 %3940
%3961:	shl	 %3959 %3960
%3962:	or	 %3939 %3961
%3963:	add	 %3940 XXX
%3964:	br	 while.cond208

BASIC BLOCK while.end229
%3965:	getelementptr	 %3926 XXX XXX
%3966:	bitcast	 %3965
%3967:	load	 %3966
%3968:	zext	 %3967
%3969:	sub	 %3650 %3968
%3970:	trunc	 %3939
%3971:	zext	 %3925
%3972:	getelementptr	 mask_bits XXX %3971
%3973:	load	 %3972
%3974:	zext	 %3973
%3975:	and	 %3970 %3974
%3976:	sub	 %3969 %3975
%3977:	zext	 %3925
%3978:	lshr	 %3939 %3977
%3979:	sub	 %3940 %3925
%3980:	br	 do.body243

BASIC BLOCK do.body243
%3981:	phi	 %3976 %4026
%3982:	phi	 %3822 %3996
%3983:	phi	 %3650 %4033
%3984:	and	 %3981 XXX
%3985:	icmp	 %3984 %3983
%3986:	br	 %3985 cond.false248 cond.true247

BASIC BLOCK cond.true247
%3987:	br	 cond.end249

BASIC BLOCK cond.false248
%3988:	br	 cond.end249

BASIC BLOCK cond.end249
%3989:	phi	 %3984 %3983
%3990:	sub	 XXX %3989
%3991:	icmp	 %3990 %3982
%3992:	br	 %3991 cond.false255 cond.true254

BASIC BLOCK cond.true254
%3993:	br	 cond.end256

BASIC BLOCK cond.false255
%3994:	br	 cond.end256

BASIC BLOCK cond.end256
%3995:	phi	 %3982 %3990
%3996:	sub	 %3982 %3995
%3997:	sub	 %3983 %3984
%3998:	icmp	 %3997 %3995
%3999:	br	 %3998 if.else270 if.then262

BASIC BLOCK if.then262
%4000:	zext	 %3983
%4001:	getelementptr	 XXX %4000
%4002:	zext	 %3984
%4003:	getelementptr	 XXX %4002
%4004:	zext	 %3995
%4005:	call	 %4001 %4003 %4004 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%4006:	add	 %3983 %3995
%4007:	add	 %3984 %3995
%4008:	br	 if.end280

BASIC BLOCK if.else270
%4009:	br	 do.body271

BASIC BLOCK do.body271
%4010:	phi	 %3984 %4013
%4011:	phi	 %3995 %4022
%4012:	phi	 %3983 %4017
%4013:	add	 %4010 XXX
%4014:	zext	 %4010
%4015:	getelementptr	 window XXX %4014
%4016:	load	 %4015
%4017:	add	 %4012 XXX
%4018:	zext	 %4012
%4019:	getelementptr	 window XXX %4018
%4020:	store	 %4016 %4019
%4021:	br	 do.cond278

BASIC BLOCK do.cond278
%4022:	add	 %4011 XXX
%4023:	icmp	 %4022 XXX
%4024:	br	 %4023 do.end279 do.body271

BASIC BLOCK do.end279
%4025:	br	 if.end280

BASIC BLOCK if.end280
%4026:	phi	 %4007 %4013
%4027:	phi	 %4006 %4017
%4028:	icmp	 %4027 XXX
%4029:	br	 %4028 if.end284 if.then283

BASIC BLOCK if.then283
%4030:	store	 %4027 outcnt
%4031:	call	 flush_window
%4032:	br	 if.end284

BASIC BLOCK if.end284
%4033:	phi	 XXX %4027
%4034:	br	 do.cond285

BASIC BLOCK do.cond285
%4035:	icmp	 %3996 XXX
%4036:	br	 %4035 do.end287 do.body243

BASIC BLOCK do.end287
%4037:	br	 if.end288

BASIC BLOCK if.end288
%4038:	phi	 %3780 %4033
%4039:	phi	 %3760 %3978
%4040:	phi	 %3764 %3979
%4041:	br	 for.cond

BASIC BLOCK for.end
%4042:	store	 %3650 outcnt
%4043:	store	 %3760 bb
%4044:	store	 %3764 bk
%4045:	br	 return

BASIC BLOCK return
%4046:	phi	 XXX XXX XXX
%4047:	ret	 %4046

FUNCTION fill_inbuf

BASIC BLOCK entry
%4048:	store	 XXX insize
%4049:	call	 __errno_location
%4050:	store	 XXX %4049
%4051:	br	 do.body

BASIC BLOCK do.body
%4052:	load	 ifd
%4053:	load	 insize
%4054:	zext	 %4053
%4055:	getelementptr	 XXX %4054
%4056:	load	 insize
%4057:	sub	 XXX %4056
%4058:	zext	 %4057
%4059:	call	 %4052 %4055 %4058 read
%4060:	trunc	 %4059
%4061:	icmp	 %4060 XXX
%4062:	br	 %4061 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4063:	icmp	 %4060 XXX
%4064:	br	 %4063 if.end if.then

BASIC BLOCK if.then
%4065:	br	 do.end

BASIC BLOCK if.end
%4066:	load	 insize
%4067:	add	 %4066 %4060
%4068:	store	 %4067 insize
%4069:	br	 do.cond

BASIC BLOCK do.cond
%4070:	load	 insize
%4071:	icmp	 %4070 XXX
%4072:	br	 %4071 do.end do.body

BASIC BLOCK do.end
%4073:	load	 insize
%4074:	icmp	 %4073 XXX
%4075:	br	 %4074 if.end11 if.then10

BASIC BLOCK if.then10
%4076:	call	 read_error
%4077:	br	 if.end11

BASIC BLOCK if.end11
%4078:	load	 insize
%4079:	zext	 %4078
%4080:	load	 bytes_in
%4081:	add	 %4080 %4079
%4082:	store	 %4081 bytes_in
%4083:	store	 XXX inptr
%4084:	load	 XXX
%4085:	zext	 %4084
%4086:	ret	 %4085

FUNCTION flush_window

BASIC BLOCK entry
%4087:	load	 outcnt
%4088:	icmp	 %4087 XXX
%4089:	br	 %4088 if.end if.then

BASIC BLOCK if.then
%4090:	br	 return

BASIC BLOCK if.end
%4091:	load	 outcnt
%4092:	call	 XXX %4091 updcrc
%4093:	load	 test
%4094:	icmp	 %4093 XXX
%4095:	br	 %4094 if.then1 if.end2

BASIC BLOCK if.then1
%4096:	load	 ofd
%4097:	load	 outcnt
%4098:	call	 %4096 XXX %4097 write_buf
%4099:	br	 if.end2

BASIC BLOCK if.end2
%4100:	load	 outcnt
%4101:	zext	 %4100
%4102:	load	 bytes_out
%4103:	add	 %4102 %4101
%4104:	store	 %4103 bytes_out
%4105:	store	 XXX outcnt
%4106:	br	 return

BASIC BLOCK return
%4107:	ret	

FUNCTION inflate_stored

BASIC BLOCK entry
%4108:	load	 bb
%4109:	load	 bk
%4110:	load	 outcnt
%4111:	and	 %4109 XXX
%4112:	zext	 %4111
%4113:	lshr	 %4108 %4112
%4114:	sub	 %4109 %4111
%4115:	br	 while.cond

BASIC BLOCK while.cond
%4116:	phi	 %4114 %4140
%4117:	phi	 %4113 %4139
%4118:	icmp	 %4116 XXX
%4119:	br	 %4118 while.end while.body

BASIC BLOCK while.body
%4120:	load	 inptr
%4121:	load	 insize
%4122:	icmp	 %4120 %4121
%4123:	br	 %4122 cond.false cond.true

BASIC BLOCK cond.true
%4124:	load	 inptr
%4125:	add	 %4124 XXX
%4126:	store	 %4125 inptr
%4127:	zext	 %4124
%4128:	getelementptr	 inbuf XXX %4127
%4129:	load	 %4128
%4130:	zext	 %4129
%4131:	br	 cond.end

BASIC BLOCK cond.false
%4132:	call	 fill_inbuf
%4133:	br	 cond.end

BASIC BLOCK cond.end
%4134:	phi	 %4130 %4132
%4135:	trunc	 %4134
%4136:	zext	 %4135
%4137:	zext	 %4116
%4138:	shl	 %4136 %4137
%4139:	or	 %4117 %4138
%4140:	add	 %4116 XXX
%4141:	br	 while.cond

BASIC BLOCK while.end
%4142:	trunc	 %4117
%4143:	and	 %4142 XXX
%4144:	lshr	 %4117 XXX
%4145:	sub	 %4116 XXX
%4146:	br	 while.cond9

BASIC BLOCK while.cond9
%4147:	phi	 %4145 %4171
%4148:	phi	 %4144 %4170
%4149:	icmp	 %4147 XXX
%4150:	br	 %4149 while.end30 while.body12

BASIC BLOCK while.body12
%4151:	load	 inptr
%4152:	load	 insize
%4153:	icmp	 %4151 %4152
%4154:	br	 %4153 cond.false20 cond.true15

BASIC BLOCK cond.true15
%4155:	load	 inptr
%4156:	add	 %4155 XXX
%4157:	store	 %4156 inptr
%4158:	zext	 %4155
%4159:	getelementptr	 inbuf XXX %4158
%4160:	load	 %4159
%4161:	zext	 %4160
%4162:	br	 cond.end22

BASIC BLOCK cond.false20
%4163:	call	 fill_inbuf
%4164:	br	 cond.end22

BASIC BLOCK cond.end22
%4165:	phi	 %4161 %4163
%4166:	trunc	 %4165
%4167:	zext	 %4166
%4168:	zext	 %4147
%4169:	shl	 %4167 %4168
%4170:	or	 %4148 %4169
%4171:	add	 %4147 XXX
%4172:	br	 while.cond9

BASIC BLOCK while.end30
%4173:	xor	 %4148 XXX
%4174:	and	 %4173 XXX
%4175:	trunc	 %4174
%4176:	icmp	 %4143 %4175
%4177:	br	 %4176 if.end if.then

BASIC BLOCK if.then
%4178:	br	 return

BASIC BLOCK if.end
%4179:	lshr	 %4148 XXX
%4180:	sub	 %4147 XXX
%4181:	br	 while.cond37

BASIC BLOCK while.cond37
%4182:	phi	 %4180 %4228
%4183:	phi	 %4179 %4227
%4184:	phi	 %4110 %4226
%4185:	phi	 %4143 %4186
%4186:	add	 %4185 XXX
%4187:	icmp	 %4185 XXX
%4188:	br	 %4187 while.end71 while.body38

BASIC BLOCK while.body38
%4189:	br	 while.cond39

BASIC BLOCK while.cond39
%4190:	phi	 %4182 %4214
%4191:	phi	 %4183 %4213
%4192:	icmp	 %4190 XXX
%4193:	br	 %4192 while.end60 while.body42

BASIC BLOCK while.body42
%4194:	load	 inptr
%4195:	load	 insize
%4196:	icmp	 %4194 %4195
%4197:	br	 %4196 cond.false50 cond.true45

BASIC BLOCK cond.true45
%4198:	load	 inptr
%4199:	add	 %4198 XXX
%4200:	store	 %4199 inptr
%4201:	zext	 %4198
%4202:	getelementptr	 inbuf XXX %4201
%4203:	load	 %4202
%4204:	zext	 %4203
%4205:	br	 cond.end52

BASIC BLOCK cond.false50
%4206:	call	 fill_inbuf
%4207:	br	 cond.end52

BASIC BLOCK cond.end52
%4208:	phi	 %4204 %4206
%4209:	trunc	 %4208
%4210:	zext	 %4209
%4211:	zext	 %4190
%4212:	shl	 %4210 %4211
%4213:	or	 %4191 %4212
%4214:	add	 %4190 XXX
%4215:	br	 while.cond39

BASIC BLOCK while.end60
%4216:	trunc	 %4191
%4217:	add	 %4184 XXX
%4218:	zext	 %4184
%4219:	getelementptr	 window XXX %4218
%4220:	store	 %4216 %4219
%4221:	icmp	 %4217 XXX
%4222:	br	 %4221 if.end68 if.then67

BASIC BLOCK if.then67
%4223:	store	 %4217 outcnt
%4224:	call	 flush_window
%4225:	br	 if.end68

BASIC BLOCK if.end68
%4226:	phi	 XXX %4217
%4227:	lshr	 %4191 XXX
%4228:	sub	 %4190 XXX
%4229:	br	 while.cond37

BASIC BLOCK while.end71
%4230:	store	 %4184 outcnt
%4231:	store	 %4183 bb
%4232:	store	 %4182 bk
%4233:	br	 return

BASIC BLOCK return
%4234:	phi	 XXX XXX
%4235:	ret	 %4234

FUNCTION inflate_fixed

BASIC BLOCK entry
%4236:	alloca	 XXX
%4237:	alloca	 XXX
%4238:	alloca	 XXX
%4239:	alloca	 XXX
%4240:	alloca	 XXX
%4241:	br	 for.cond

BASIC BLOCK for.cond
%4242:	phi	 XXX %4249
%4243:	icmp	 %4242 XXX
%4244:	br	 %4243 for.end for.body

BASIC BLOCK for.body
%4245:	sext	 %4242
%4246:	getelementptr	 %4240 XXX %4245
%4247:	store	 XXX %4246
%4248:	br	 for.inc

BASIC BLOCK for.inc
%4249:	add	 %4242 XXX
%4250:	br	 for.cond

BASIC BLOCK for.end
%4251:	br	 for.cond1

BASIC BLOCK for.cond1
%4252:	phi	 %4242 %4259
%4253:	icmp	 %4252 XXX
%4254:	br	 %4253 for.end8 for.body3

BASIC BLOCK for.body3
%4255:	sext	 %4252
%4256:	getelementptr	 %4240 XXX %4255
%4257:	store	 XXX %4256
%4258:	br	 for.inc6

BASIC BLOCK for.inc6
%4259:	add	 %4252 XXX
%4260:	br	 for.cond1

BASIC BLOCK for.end8
%4261:	br	 for.cond9

BASIC BLOCK for.cond9
%4262:	phi	 %4252 %4269
%4263:	icmp	 %4262 XXX
%4264:	br	 %4263 for.end16 for.body11

BASIC BLOCK for.body11
%4265:	sext	 %4262
%4266:	getelementptr	 %4240 XXX %4265
%4267:	store	 XXX %4266
%4268:	br	 for.inc14

BASIC BLOCK for.inc14
%4269:	add	 %4262 XXX
%4270:	br	 for.cond9

BASIC BLOCK for.end16
%4271:	br	 for.cond17

BASIC BLOCK for.cond17
%4272:	phi	 %4262 %4279
%4273:	icmp	 %4272 XXX
%4274:	br	 %4273 for.end24 for.body19

BASIC BLOCK for.body19
%4275:	sext	 %4272
%4276:	getelementptr	 %4240 XXX %4275
%4277:	store	 XXX %4276
%4278:	br	 for.inc22

BASIC BLOCK for.inc22
%4279:	add	 %4272 XXX
%4280:	br	 for.cond17

BASIC BLOCK for.end24
%4281:	store	 XXX %4238
%4282:	getelementptr	 %4240 XXX XXX
%4283:	call	 %4282 XXX XXX XXX XXX %4236 %4238 huft_build
%4284:	icmp	 %4283 XXX
%4285:	br	 %4284 if.end if.then

BASIC BLOCK if.then
%4286:	br	 return

BASIC BLOCK if.end
%4287:	br	 for.cond26

BASIC BLOCK for.cond26
%4288:	phi	 XXX %4295
%4289:	icmp	 %4288 XXX
%4290:	br	 %4289 for.end33 for.body28

BASIC BLOCK for.body28
%4291:	sext	 %4288
%4292:	getelementptr	 %4240 XXX %4291
%4293:	store	 XXX %4292
%4294:	br	 for.inc31

BASIC BLOCK for.inc31
%4295:	add	 %4288 XXX
%4296:	br	 for.cond26

BASIC BLOCK for.end33
%4297:	store	 XXX %4239
%4298:	getelementptr	 %4240 XXX XXX
%4299:	call	 %4298 XXX XXX XXX XXX %4237 %4239 huft_build
%4300:	icmp	 %4299 XXX
%4301:	br	 %4300 if.end39 if.then37

BASIC BLOCK if.then37
%4302:	load	 %4236
%4303:	call	 %4302 huft_free
%4304:	br	 return

BASIC BLOCK if.end39
%4305:	load	 %4236
%4306:	load	 %4237
%4307:	load	 %4238
%4308:	load	 %4239
%4309:	call	 %4305 %4306 %4307 %4308 inflate_codes
%4310:	icmp	 %4309 XXX
%4311:	br	 %4310 if.end42 if.then41

BASIC BLOCK if.then41
%4312:	br	 return

BASIC BLOCK if.end42
%4313:	load	 %4236
%4314:	call	 %4313 huft_free
%4315:	load	 %4237
%4316:	call	 %4315 huft_free
%4317:	br	 return

BASIC BLOCK return
%4318:	phi	 %4283 %4299 XXX XXX
%4319:	ret	 %4318

FUNCTION inflate_dynamic

BASIC BLOCK entry
%4320:	alloca	 XXX
%4321:	alloca	 XXX
%4322:	alloca	 XXX
%4323:	alloca	 XXX
%4324:	alloca	 XXX
%4325:	load	 bb
%4326:	load	 bk
%4327:	br	 while.cond

BASIC BLOCK while.cond
%4328:	phi	 %4325 %4351
%4329:	phi	 %4326 %4352
%4330:	icmp	 %4329 XXX
%4331:	br	 %4330 while.end while.body

BASIC BLOCK while.body
%4332:	load	 inptr
%4333:	load	 insize
%4334:	icmp	 %4332 %4333
%4335:	br	 %4334 cond.false cond.true

BASIC BLOCK cond.true
%4336:	load	 inptr
%4337:	add	 %4336 XXX
%4338:	store	 %4337 inptr
%4339:	zext	 %4336
%4340:	getelementptr	 inbuf XXX %4339
%4341:	load	 %4340
%4342:	zext	 %4341
%4343:	br	 cond.end

BASIC BLOCK cond.false
%4344:	call	 fill_inbuf
%4345:	br	 cond.end

BASIC BLOCK cond.end
%4346:	phi	 %4342 %4344
%4347:	trunc	 %4346
%4348:	zext	 %4347
%4349:	zext	 %4329
%4350:	shl	 %4348 %4349
%4351:	or	 %4328 %4350
%4352:	add	 %4329 XXX
%4353:	br	 while.cond

BASIC BLOCK while.end
%4354:	trunc	 %4328
%4355:	and	 %4354 XXX
%4356:	add	 XXX %4355
%4357:	lshr	 %4328 XXX
%4358:	sub	 %4329 XXX
%4359:	br	 while.cond6

BASIC BLOCK while.cond6
%4360:	phi	 %4357 %4383
%4361:	phi	 %4358 %4384
%4362:	icmp	 %4361 XXX
%4363:	br	 %4362 while.end27 while.body9

BASIC BLOCK while.body9
%4364:	load	 inptr
%4365:	load	 insize
%4366:	icmp	 %4364 %4365
%4367:	br	 %4366 cond.false17 cond.true12

BASIC BLOCK cond.true12
%4368:	load	 inptr
%4369:	add	 %4368 XXX
%4370:	store	 %4369 inptr
%4371:	zext	 %4368
%4372:	getelementptr	 inbuf XXX %4371
%4373:	load	 %4372
%4374:	zext	 %4373
%4375:	br	 cond.end19

BASIC BLOCK cond.false17
%4376:	call	 fill_inbuf
%4377:	br	 cond.end19

BASIC BLOCK cond.end19
%4378:	phi	 %4374 %4376
%4379:	trunc	 %4378
%4380:	zext	 %4379
%4381:	zext	 %4361
%4382:	shl	 %4380 %4381
%4383:	or	 %4360 %4382
%4384:	add	 %4361 XXX
%4385:	br	 while.cond6

BASIC BLOCK while.end27
%4386:	trunc	 %4360
%4387:	and	 %4386 XXX
%4388:	add	 XXX %4387
%4389:	lshr	 %4360 XXX
%4390:	sub	 %4361 XXX
%4391:	br	 while.cond33

BASIC BLOCK while.cond33
%4392:	phi	 %4389 %4415
%4393:	phi	 %4390 %4416
%4394:	icmp	 %4393 XXX
%4395:	br	 %4394 while.end54 while.body36

BASIC BLOCK while.body36
%4396:	load	 inptr
%4397:	load	 insize
%4398:	icmp	 %4396 %4397
%4399:	br	 %4398 cond.false44 cond.true39

BASIC BLOCK cond.true39
%4400:	load	 inptr
%4401:	add	 %4400 XXX
%4402:	store	 %4401 inptr
%4403:	zext	 %4400
%4404:	getelementptr	 inbuf XXX %4403
%4405:	load	 %4404
%4406:	zext	 %4405
%4407:	br	 cond.end46

BASIC BLOCK cond.false44
%4408:	call	 fill_inbuf
%4409:	br	 cond.end46

BASIC BLOCK cond.end46
%4410:	phi	 %4406 %4408
%4411:	trunc	 %4410
%4412:	zext	 %4411
%4413:	zext	 %4393
%4414:	shl	 %4412 %4413
%4415:	or	 %4392 %4414
%4416:	add	 %4393 XXX
%4417:	br	 while.cond33

BASIC BLOCK while.end54
%4418:	trunc	 %4392
%4419:	and	 %4418 XXX
%4420:	add	 XXX %4419
%4421:	lshr	 %4392 XXX
%4422:	sub	 %4393 XXX
%4423:	icmp	 %4356 XXX
%4424:	br	 %4423 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4425:	icmp	 %4388 XXX
%4426:	br	 %4425 if.end if.then

BASIC BLOCK if.then
%4427:	br	 return

BASIC BLOCK if.end
%4428:	br	 for.cond

BASIC BLOCK for.cond
%4429:	phi	 %4421 %4469
%4430:	phi	 %4422 %4470
%4431:	phi	 XXX %4472
%4432:	icmp	 %4431 %4420
%4433:	br	 %4432 for.end for.body

BASIC BLOCK for.body
%4434:	br	 while.cond66

BASIC BLOCK while.cond66
%4435:	phi	 %4429 %4458
%4436:	phi	 %4430 %4459
%4437:	icmp	 %4436 XXX
%4438:	br	 %4437 while.end87 while.body69

BASIC BLOCK while.body69
%4439:	load	 inptr
%4440:	load	 insize
%4441:	icmp	 %4439 %4440
%4442:	br	 %4441 cond.false77 cond.true72

BASIC BLOCK cond.true72
%4443:	load	 inptr
%4444:	add	 %4443 XXX
%4445:	store	 %4444 inptr
%4446:	zext	 %4443
%4447:	getelementptr	 inbuf XXX %4446
%4448:	load	 %4447
%4449:	zext	 %4448
%4450:	br	 cond.end79

BASIC BLOCK cond.false77
%4451:	call	 fill_inbuf
%4452:	br	 cond.end79

BASIC BLOCK cond.end79
%4453:	phi	 %4449 %4451
%4454:	trunc	 %4453
%4455:	zext	 %4454
%4456:	zext	 %4436
%4457:	shl	 %4455 %4456
%4458:	or	 %4435 %4457
%4459:	add	 %4436 XXX
%4460:	br	 while.cond66

BASIC BLOCK while.end87
%4461:	trunc	 %4435
%4462:	and	 %4461 XXX
%4463:	zext	 %4431
%4464:	getelementptr	 border XXX %4463
%4465:	load	 %4464
%4466:	zext	 %4465
%4467:	getelementptr	 %4324 XXX %4466
%4468:	store	 %4462 %4467
%4469:	lshr	 %4435 XXX
%4470:	sub	 %4436 XXX
%4471:	br	 for.inc

BASIC BLOCK for.inc
%4472:	add	 %4431 XXX
%4473:	br	 for.cond

BASIC BLOCK for.end
%4474:	br	 for.cond97

BASIC BLOCK for.cond97
%4475:	phi	 %4431 %4485
%4476:	icmp	 %4475 XXX
%4477:	br	 %4476 for.end107 for.body100

BASIC BLOCK for.body100
%4478:	zext	 %4475
%4479:	getelementptr	 border XXX %4478
%4480:	load	 %4479
%4481:	zext	 %4480
%4482:	getelementptr	 %4324 XXX %4481
%4483:	store	 XXX %4482
%4484:	br	 for.inc105

BASIC BLOCK for.inc105
%4485:	add	 %4475 XXX
%4486:	br	 for.cond97

BASIC BLOCK for.end107
%4487:	store	 XXX %4322
%4488:	getelementptr	 %4324 XXX XXX
%4489:	call	 %4488 XXX XXX XXX XXX %4320 %4322 huft_build
%4490:	icmp	 %4489 XXX
%4491:	br	 %4490 if.end117 if.then111

BASIC BLOCK if.then111
%4492:	icmp	 %4489 XXX
%4493:	br	 %4492 if.end116 if.then114

BASIC BLOCK if.then114
%4494:	load	 %4320
%4495:	call	 %4494 huft_free
%4496:	br	 if.end116

BASIC BLOCK if.end116
%4497:	br	 return

BASIC BLOCK if.end117
%4498:	add	 %4356 %4388
%4499:	load	 %4322
%4500:	sext	 %4499
%4501:	getelementptr	 mask_bits XXX %4500
%4502:	load	 %4501
%4503:	zext	 %4502
%4504:	br	 while.cond122

BASIC BLOCK while.cond122
%4505:	phi	 %4429 %4720
%4506:	phi	 %4430 %4721
%4507:	phi	 XXX %4722
%4508:	phi	 XXX %4723
%4509:	icmp	 %4508 %4498
%4510:	br	 %4509 while.end292 while.body125

BASIC BLOCK while.body125
%4511:	br	 while.cond126

BASIC BLOCK while.cond126
%4512:	phi	 %4505 %4536
%4513:	phi	 %4506 %4537
%4514:	load	 %4322
%4515:	icmp	 %4513 %4514
%4516:	br	 %4515 while.end147 while.body129

BASIC BLOCK while.body129
%4517:	load	 inptr
%4518:	load	 insize
%4519:	icmp	 %4517 %4518
%4520:	br	 %4519 cond.false137 cond.true132

BASIC BLOCK cond.true132
%4521:	load	 inptr
%4522:	add	 %4521 XXX
%4523:	store	 %4522 inptr
%4524:	zext	 %4521
%4525:	getelementptr	 inbuf XXX %4524
%4526:	load	 %4525
%4527:	zext	 %4526
%4528:	br	 cond.end139

BASIC BLOCK cond.false137
%4529:	call	 fill_inbuf
%4530:	br	 cond.end139

BASIC BLOCK cond.end139
%4531:	phi	 %4527 %4529
%4532:	trunc	 %4531
%4533:	zext	 %4532
%4534:	zext	 %4513
%4535:	shl	 %4533 %4534
%4536:	or	 %4512 %4535
%4537:	add	 %4513 XXX
%4538:	br	 while.cond126

BASIC BLOCK while.end147
%4539:	load	 %4320
%4540:	trunc	 %4512
%4541:	and	 %4540 %4503
%4542:	zext	 %4541
%4543:	getelementptr	 %4539 %4542
%4544:	store	 %4543 %4321
%4545:	getelementptr	 %4543 XXX XXX
%4546:	load	 %4545
%4547:	zext	 %4546
%4548:	zext	 %4547
%4549:	lshr	 %4512 %4548
%4550:	sub	 %4513 %4547
%4551:	load	 %4321
%4552:	getelementptr	 %4551 XXX XXX
%4553:	bitcast	 %4552
%4554:	load	 %4553
%4555:	zext	 %4554
%4556:	icmp	 %4555 XXX
%4557:	br	 %4556 if.else if.then159

BASIC BLOCK if.then159
%4558:	add	 %4508 XXX
%4559:	sext	 %4508
%4560:	getelementptr	 %4324 XXX %4559
%4561:	store	 %4555 %4560
%4562:	br	 if.end291

BASIC BLOCK if.else
%4563:	icmp	 %4555 XXX
%4564:	br	 %4563 if.else204 if.then165

BASIC BLOCK if.then165
%4565:	br	 while.cond166

BASIC BLOCK while.cond166
%4566:	phi	 %4549 %4589
%4567:	phi	 %4550 %4590
%4568:	icmp	 %4567 XXX
%4569:	br	 %4568 while.end187 while.body169

BASIC BLOCK while.body169
%4570:	load	 inptr
%4571:	load	 insize
%4572:	icmp	 %4570 %4571
%4573:	br	 %4572 cond.false177 cond.true172

BASIC BLOCK cond.true172
%4574:	load	 inptr
%4575:	add	 %4574 XXX
%4576:	store	 %4575 inptr
%4577:	zext	 %4574
%4578:	getelementptr	 inbuf XXX %4577
%4579:	load	 %4578
%4580:	zext	 %4579
%4581:	br	 cond.end179

BASIC BLOCK cond.false177
%4582:	call	 fill_inbuf
%4583:	br	 cond.end179

BASIC BLOCK cond.end179
%4584:	phi	 %4580 %4582
%4585:	trunc	 %4584
%4586:	zext	 %4585
%4587:	zext	 %4567
%4588:	shl	 %4586 %4587
%4589:	or	 %4566 %4588
%4590:	add	 %4567 XXX
%4591:	br	 while.cond166

BASIC BLOCK while.end187
%4592:	trunc	 %4566
%4593:	and	 %4592 XXX
%4594:	add	 XXX %4593
%4595:	lshr	 %4566 XXX
%4596:	sub	 %4567 XXX
%4597:	add	 %4508 %4594
%4598:	icmp	 %4597 %4498
%4599:	br	 %4598 if.end197 if.then196

BASIC BLOCK if.then196
%4600:	br	 return

BASIC BLOCK if.end197
%4601:	br	 while.cond198

BASIC BLOCK while.cond198
%4602:	phi	 %4594 %4604
%4603:	phi	 %4508 %4607
%4604:	add	 %4602 XXX
%4605:	icmp	 %4602 XXX
%4606:	br	 %4605 while.end203 while.body199

BASIC BLOCK while.body199
%4607:	add	 %4603 XXX
%4608:	sext	 %4603
%4609:	getelementptr	 %4324 XXX %4608
%4610:	store	 %4507 %4609
%4611:	br	 while.cond198

BASIC BLOCK while.end203
%4612:	br	 if.end290

BASIC BLOCK if.else204
%4613:	icmp	 %4555 XXX
%4614:	br	 %4613 if.else248 if.then207

BASIC BLOCK if.then207
%4615:	br	 while.cond208

BASIC BLOCK while.cond208
%4616:	phi	 %4549 %4639
%4617:	phi	 %4550 %4640
%4618:	icmp	 %4617 XXX
%4619:	br	 %4618 while.end229 while.body211

BASIC BLOCK while.body211
%4620:	load	 inptr
%4621:	load	 insize
%4622:	icmp	 %4620 %4621
%4623:	br	 %4622 cond.false219 cond.true214

BASIC BLOCK cond.true214
%4624:	load	 inptr
%4625:	add	 %4624 XXX
%4626:	store	 %4625 inptr
%4627:	zext	 %4624
%4628:	getelementptr	 inbuf XXX %4627
%4629:	load	 %4628
%4630:	zext	 %4629
%4631:	br	 cond.end221

BASIC BLOCK cond.false219
%4632:	call	 fill_inbuf
%4633:	br	 cond.end221

BASIC BLOCK cond.end221
%4634:	phi	 %4630 %4632
%4635:	trunc	 %4634
%4636:	zext	 %4635
%4637:	zext	 %4617
%4638:	shl	 %4636 %4637
%4639:	or	 %4616 %4638
%4640:	add	 %4617 XXX
%4641:	br	 while.cond208

BASIC BLOCK while.end229
%4642:	trunc	 %4616
%4643:	and	 %4642 XXX
%4644:	add	 XXX %4643
%4645:	lshr	 %4616 XXX
%4646:	sub	 %4617 XXX
%4647:	add	 %4508 %4644
%4648:	icmp	 %4647 %4498
%4649:	br	 %4648 if.end239 if.then238

BASIC BLOCK if.then238
%4650:	br	 return

BASIC BLOCK if.end239
%4651:	br	 while.cond240

BASIC BLOCK while.cond240
%4652:	phi	 %4644 %4654
%4653:	phi	 %4508 %4657
%4654:	add	 %4652 XXX
%4655:	icmp	 %4652 XXX
%4656:	br	 %4655 while.end247 while.body243

BASIC BLOCK while.body243
%4657:	add	 %4653 XXX
%4658:	sext	 %4653
%4659:	getelementptr	 %4324 XXX %4658
%4660:	store	 XXX %4659
%4661:	br	 while.cond240

BASIC BLOCK while.end247
%4662:	br	 if.end289

BASIC BLOCK if.else248
%4663:	br	 while.cond249

BASIC BLOCK while.cond249
%4664:	phi	 %4549 %4687
%4665:	phi	 %4550 %4688
%4666:	icmp	 %4665 XXX
%4667:	br	 %4666 while.end270 while.body252

BASIC BLOCK while.body252
%4668:	load	 inptr
%4669:	load	 insize
%4670:	icmp	 %4668 %4669
%4671:	br	 %4670 cond.false260 cond.true255

BASIC BLOCK cond.true255
%4672:	load	 inptr
%4673:	add	 %4672 XXX
%4674:	store	 %4673 inptr
%4675:	zext	 %4672
%4676:	getelementptr	 inbuf XXX %4675
%4677:	load	 %4676
%4678:	zext	 %4677
%4679:	br	 cond.end262

BASIC BLOCK cond.false260
%4680:	call	 fill_inbuf
%4681:	br	 cond.end262

BASIC BLOCK cond.end262
%4682:	phi	 %4678 %4680
%4683:	trunc	 %4682
%4684:	zext	 %4683
%4685:	zext	 %4665
%4686:	shl	 %4684 %4685
%4687:	or	 %4664 %4686
%4688:	add	 %4665 XXX
%4689:	br	 while.cond249

BASIC BLOCK while.end270
%4690:	trunc	 %4664
%4691:	and	 %4690 XXX
%4692:	add	 XXX %4691
%4693:	lshr	 %4664 XXX
%4694:	sub	 %4665 XXX
%4695:	add	 %4508 %4692
%4696:	icmp	 %4695 %4498
%4697:	br	 %4696 if.end280 if.then279

BASIC BLOCK if.then279
%4698:	br	 return

BASIC BLOCK if.end280
%4699:	br	 while.cond281

BASIC BLOCK while.cond281
%4700:	phi	 %4692 %4702
%4701:	phi	 %4508 %4705
%4702:	add	 %4700 XXX
%4703:	icmp	 %4700 XXX
%4704:	br	 %4703 while.end288 while.body284

BASIC BLOCK while.body284
%4705:	add	 %4701 XXX
%4706:	sext	 %4701
%4707:	getelementptr	 %4324 XXX %4706
%4708:	store	 XXX %4707
%4709:	br	 while.cond281

BASIC BLOCK while.end288
%4710:	br	 if.end289

BASIC BLOCK if.end289
%4711:	phi	 %4645 %4693
%4712:	phi	 %4646 %4694
%4713:	phi	 %4653 %4701
%4714:	br	 if.end290

BASIC BLOCK if.end290
%4715:	phi	 %4595 %4711
%4716:	phi	 %4596 %4712
%4717:	phi	 %4507 XXX
%4718:	phi	 %4603 %4713
%4719:	br	 if.end291

BASIC BLOCK if.end291
%4720:	phi	 %4549 %4715
%4721:	phi	 %4550 %4716
%4722:	phi	 %4555 %4717
%4723:	phi	 %4558 %4718
%4724:	br	 while.cond122

BASIC BLOCK while.end292
%4725:	load	 %4320
%4726:	call	 %4725 huft_free
%4727:	store	 %4505 bb
%4728:	store	 %4506 bk
%4729:	load	 lbits
%4730:	store	 %4729 %4322
%4731:	getelementptr	 %4324 XXX XXX
%4732:	call	 %4731 %4356 XXX XXX XXX %4320 %4322 huft_build
%4733:	icmp	 %4732 XXX
%4734:	br	 %4733 if.end305 if.then298

BASIC BLOCK if.then298
%4735:	icmp	 %4732 XXX
%4736:	br	 %4735 if.end304 if.then301

BASIC BLOCK if.then301
%4737:	load	 stderr
%4738:	call	 %4737 XXX fprintf
%4739:	load	 %4320
%4740:	call	 %4739 huft_free
%4741:	br	 if.end304

BASIC BLOCK if.end304
%4742:	br	 return

BASIC BLOCK if.end305
%4743:	load	 dbits
%4744:	store	 %4743 %4323
%4745:	getelementptr	 %4324 XXX XXX
%4746:	zext	 %4356
%4747:	getelementptr	 %4745 %4746
%4748:	call	 %4747 %4388 XXX XXX XXX %4321 %4323 huft_build
%4749:	icmp	 %4748 XXX
%4750:	br	 %4749 if.end320 if.then312

BASIC BLOCK if.then312
%4751:	icmp	 %4748 XXX
%4752:	br	 %4751 if.end318 if.then315

BASIC BLOCK if.then315
%4753:	load	 stderr
%4754:	call	 %4753 XXX fprintf
%4755:	load	 %4321
%4756:	call	 %4755 huft_free
%4757:	br	 if.end318

BASIC BLOCK if.end318
%4758:	load	 %4320
%4759:	call	 %4758 huft_free
%4760:	br	 return

BASIC BLOCK if.end320
%4761:	load	 %4320
%4762:	load	 %4321
%4763:	load	 %4322
%4764:	load	 %4323
%4765:	call	 %4761 %4762 %4763 %4764 inflate_codes
%4766:	icmp	 %4765 XXX
%4767:	br	 %4766 if.end324 if.then323

BASIC BLOCK if.then323
%4768:	br	 return

BASIC BLOCK if.end324
%4769:	load	 %4320
%4770:	call	 %4769 huft_free
%4771:	load	 %4321
%4772:	call	 %4771 huft_free
%4773:	br	 return

BASIC BLOCK return
%4774:	phi	 XXX %4489 XXX XXX XXX %4732 %4748 XXX XXX
%4775:	ret	 %4774

FUNCTION inflate_block

BASIC BLOCK entry
%4776:	load	 bb
%4777:	load	 bk
%4778:	br	 while.cond

BASIC BLOCK while.cond
%4779:	phi	 %4776 %4802
%4780:	phi	 %4777 %4803
%4781:	icmp	 %4780 XXX
%4782:	br	 %4781 while.end while.body

BASIC BLOCK while.body
%4783:	load	 inptr
%4784:	load	 insize
%4785:	icmp	 %4783 %4784
%4786:	br	 %4785 cond.false cond.true

BASIC BLOCK cond.true
%4787:	load	 inptr
%4788:	add	 %4787 XXX
%4789:	store	 %4788 inptr
%4790:	zext	 %4787
%4791:	getelementptr	 inbuf XXX %4790
%4792:	load	 %4791
%4793:	zext	 %4792
%4794:	br	 cond.end

BASIC BLOCK cond.false
%4795:	call	 fill_inbuf
%4796:	br	 cond.end

BASIC BLOCK cond.end
%4797:	phi	 %4793 %4795
%4798:	trunc	 %4797
%4799:	zext	 %4798
%4800:	zext	 %4780
%4801:	shl	 %4799 %4800
%4802:	or	 %4779 %4801
%4803:	add	 %4780 XXX
%4804:	br	 while.cond

BASIC BLOCK while.end
%4805:	trunc	 %4779
%4806:	and	 %4805 XXX
%4807:	store	 %4806 e
%4808:	lshr	 %4779 XXX
%4809:	sub	 %4780 XXX
%4810:	br	 while.cond5

BASIC BLOCK while.cond5
%4811:	phi	 %4808 %4834
%4812:	phi	 %4809 %4835
%4813:	icmp	 %4812 XXX
%4814:	br	 %4813 while.end26 while.body8

BASIC BLOCK while.body8
%4815:	load	 inptr
%4816:	load	 insize
%4817:	icmp	 %4815 %4816
%4818:	br	 %4817 cond.false16 cond.true11

BASIC BLOCK cond.true11
%4819:	load	 inptr
%4820:	add	 %4819 XXX
%4821:	store	 %4820 inptr
%4822:	zext	 %4819
%4823:	getelementptr	 inbuf XXX %4822
%4824:	load	 %4823
%4825:	zext	 %4824
%4826:	br	 cond.end18

BASIC BLOCK cond.false16
%4827:	call	 fill_inbuf
%4828:	br	 cond.end18

BASIC BLOCK cond.end18
%4829:	phi	 %4825 %4827
%4830:	trunc	 %4829
%4831:	zext	 %4830
%4832:	zext	 %4812
%4833:	shl	 %4831 %4832
%4834:	or	 %4811 %4833
%4835:	add	 %4812 XXX
%4836:	br	 while.cond5

BASIC BLOCK while.end26
%4837:	trunc	 %4811
%4838:	and	 %4837 XXX
%4839:	lshr	 %4811 XXX
%4840:	sub	 %4812 XXX
%4841:	store	 %4839 bb
%4842:	store	 %4840 bk
%4843:	icmp	 %4838 XXX
%4844:	br	 %4843 if.end if.then

BASIC BLOCK if.then
%4845:	call	 inflate_dynamic
%4846:	br	 return

BASIC BLOCK if.end
%4847:	icmp	 %4838 XXX
%4848:	br	 %4847 if.end38 if.then36

BASIC BLOCK if.then36
%4849:	call	 inflate_stored
%4850:	br	 return

BASIC BLOCK if.end38
%4851:	icmp	 %4838 XXX
%4852:	br	 %4851 if.end43 if.then41

BASIC BLOCK if.then41
%4853:	call	 inflate_fixed
%4854:	br	 return

BASIC BLOCK if.end43
%4855:	br	 return

BASIC BLOCK return
%4856:	phi	 %4845 %4849 %4853 XXX
%4857:	ret	 %4856

FUNCTION inflate

BASIC BLOCK entry
%4858:	alloca	 XXX
%4859:	store	 XXX outcnt
%4860:	store	 XXX bk
%4861:	store	 XXX bb
%4862:	br	 do.body

BASIC BLOCK do.body
%4863:	phi	 XXX %4874
%4864:	store	 XXX hufts
%4865:	call	 %4858 inflate_block
%4866:	icmp	 %4865 XXX
%4867:	br	 %4866 if.end if.then

BASIC BLOCK if.then
%4868:	br	 return

BASIC BLOCK if.end
%4869:	load	 hufts
%4870:	icmp	 %4869 %4863
%4871:	br	 %4870 if.end3 if.then2

BASIC BLOCK if.then2
%4872:	load	 hufts
%4873:	br	 if.end3

BASIC BLOCK if.end3
%4874:	phi	 %4872 %4863
%4875:	br	 do.cond

BASIC BLOCK do.cond
%4876:	load	 %4858
%4877:	icmp	 %4876 XXX
%4878:	xor	 %4877 XXX
%4879:	br	 %4878 do.end do.body

BASIC BLOCK do.end
%4880:	br	 while.cond

BASIC BLOCK while.cond
%4881:	load	 bk
%4882:	icmp	 %4881 XXX
%4883:	br	 %4882 while.end while.body

BASIC BLOCK while.body
%4884:	load	 bk
%4885:	sub	 %4884 XXX
%4886:	store	 %4885 bk
%4887:	load	 inptr
%4888:	add	 %4887 XXX
%4889:	store	 %4888 inptr
%4890:	br	 while.cond

BASIC BLOCK while.end
%4891:	load	 outcnt
%4892:	store	 %4891 outcnt
%4893:	call	 flush_window
%4894:	br	 return

BASIC BLOCK return
%4895:	phi	 %4865 XXX
%4896:	ret	 %4895

FUNCTION ct_init

BASIC BLOCK entry
%4897:	store	 attr file_type
%4898:	store	 methodp file_method
%4899:	store	 XXX input_len
%4900:	store	 XXX compressed_len
%4901:	load	 XXX
%4902:	zext	 %4901
%4903:	icmp	 %4902 XXX
%4904:	br	 %4903 if.end if.then

BASIC BLOCK if.then
%4905:	br	 return

BASIC BLOCK if.end
%4906:	br	 for.cond

BASIC BLOCK for.cond
%4907:	phi	 XXX %4915
%4908:	phi	 XXX %4932
%4909:	icmp	 %4908 XXX
%4910:	br	 %4909 for.end16 for.body

BASIC BLOCK for.body
%4911:	sext	 %4908
%4912:	getelementptr	 base_length XXX %4911
%4913:	store	 %4907 %4912
%4914:	br	 for.cond4

BASIC BLOCK for.cond4
%4915:	phi	 %4907 %4924
%4916:	phi	 XXX %4929
%4917:	sext	 %4908
%4918:	getelementptr	 extra_lbits XXX %4917
%4919:	load	 %4918
%4920:	shl	 XXX %4919
%4921:	icmp	 %4916 %4920
%4922:	br	 %4921 for.end for.body9

BASIC BLOCK for.body9
%4923:	trunc	 %4908
%4924:	add	 %4915 XXX
%4925:	sext	 %4915
%4926:	getelementptr	 length_code XXX %4925
%4927:	store	 %4923 %4926
%4928:	br	 for.inc

BASIC BLOCK for.inc
%4929:	add	 %4916 XXX
%4930:	br	 for.cond4

BASIC BLOCK for.end
%4931:	br	 for.inc14

BASIC BLOCK for.inc14
%4932:	add	 %4908 XXX
%4933:	br	 for.cond

BASIC BLOCK for.end16
%4934:	trunc	 %4908
%4935:	sub	 %4907 XXX
%4936:	sext	 %4935
%4937:	getelementptr	 length_code XXX %4936
%4938:	store	 %4934 %4937
%4939:	br	 for.cond20

BASIC BLOCK for.cond20
%4940:	phi	 XXX %4965
%4941:	phi	 XXX %4949
%4942:	icmp	 %4940 XXX
%4943:	br	 %4942 for.end42 for.body23

BASIC BLOCK for.body23
%4944:	sext	 %4940
%4945:	getelementptr	 base_dist XXX %4944
%4946:	store	 %4941 %4945
%4947:	br	 for.cond26

BASIC BLOCK for.cond26
%4948:	phi	 XXX %4962
%4949:	phi	 %4941 %4957
%4950:	sext	 %4940
%4951:	getelementptr	 extra_dbits XXX %4950
%4952:	load	 %4951
%4953:	shl	 XXX %4952
%4954:	icmp	 %4948 %4953
%4955:	br	 %4954 for.end39 for.body32

BASIC BLOCK for.body32
%4956:	trunc	 %4940
%4957:	add	 %4949 XXX
%4958:	sext	 %4949
%4959:	getelementptr	 dist_code XXX %4958
%4960:	store	 %4956 %4959
%4961:	br	 for.inc37

BASIC BLOCK for.inc37
%4962:	add	 %4948 XXX
%4963:	br	 for.cond26

BASIC BLOCK for.end39
%4964:	br	 for.inc40

BASIC BLOCK for.inc40
%4965:	add	 %4940 XXX
%4966:	br	 for.cond20

BASIC BLOCK for.end42
%4967:	ashr	 %4941 XXX
%4968:	br	 for.cond43

BASIC BLOCK for.cond43
%4969:	phi	 %4940 %4997
%4970:	phi	 %4967 %4979
%4971:	icmp	 %4969 XXX
%4972:	br	 %4971 for.end67 for.body46

BASIC BLOCK for.body46
%4973:	shl	 %4970 XXX
%4974:	sext	 %4969
%4975:	getelementptr	 base_dist XXX %4974
%4976:	store	 %4973 %4975
%4977:	br	 for.cond50

BASIC BLOCK for.cond50
%4978:	phi	 XXX %4994
%4979:	phi	 %4970 %4988
%4980:	sext	 %4969
%4981:	getelementptr	 extra_dbits XXX %4980
%4982:	load	 %4981
%4983:	sub	 %4982 XXX
%4984:	shl	 XXX %4983
%4985:	icmp	 %4978 %4984
%4986:	br	 %4985 for.end64 for.body57

BASIC BLOCK for.body57
%4987:	trunc	 %4969
%4988:	add	 %4979 XXX
%4989:	add	 XXX %4979
%4990:	sext	 %4989
%4991:	getelementptr	 dist_code XXX %4990
%4992:	store	 %4987 %4991
%4993:	br	 for.inc62

BASIC BLOCK for.inc62
%4994:	add	 %4978 XXX
%4995:	br	 for.cond50

BASIC BLOCK for.end64
%4996:	br	 for.inc65

BASIC BLOCK for.inc65
%4997:	add	 %4969 XXX
%4998:	br	 for.cond43

BASIC BLOCK for.end67
%4999:	br	 for.cond68

BASIC BLOCK for.cond68
%5000:	phi	 XXX %5007
%5001:	icmp	 %5000 XXX
%5002:	br	 %5001 for.end76 for.body71

BASIC BLOCK for.body71
%5003:	sext	 %5000
%5004:	getelementptr	 bl_count XXX %5003
%5005:	store	 XXX %5004
%5006:	br	 for.inc74

BASIC BLOCK for.inc74
%5007:	add	 %5000 XXX
%5008:	br	 for.cond68

BASIC BLOCK for.end76
%5009:	br	 while.cond

BASIC BLOCK while.cond
%5010:	phi	 XXX %5013
%5011:	icmp	 %5010 XXX
%5012:	br	 %5011 while.end while.body

BASIC BLOCK while.body
%5013:	add	 %5010 XXX
%5014:	sext	 %5010
%5015:	getelementptr	 static_ltree XXX %5014
%5016:	getelementptr	 %5015 XXX XXX
%5017:	bitcast	 %5016
%5018:	store	 XXX %5017
%5019:	load	 XXX
%5020:	add	 %5019 XXX
%5021:	store	 %5020 XXX
%5022:	br	 while.cond

BASIC BLOCK while.end
%5023:	br	 while.cond83

BASIC BLOCK while.cond83
%5024:	phi	 %5010 %5027
%5025:	icmp	 %5024 XXX
%5026:	br	 %5025 while.end93 while.body86

BASIC BLOCK while.body86
%5027:	add	 %5024 XXX
%5028:	sext	 %5024
%5029:	getelementptr	 static_ltree XXX %5028
%5030:	getelementptr	 %5029 XXX XXX
%5031:	bitcast	 %5030
%5032:	store	 XXX %5031
%5033:	load	 XXX
%5034:	add	 %5033 XXX
%5035:	store	 %5034 XXX
%5036:	br	 while.cond83

BASIC BLOCK while.end93
%5037:	br	 while.cond94

BASIC BLOCK while.cond94
%5038:	phi	 %5024 %5041
%5039:	icmp	 %5038 XXX
%5040:	br	 %5039 while.end104 while.body97

BASIC BLOCK while.body97
%5041:	add	 %5038 XXX
%5042:	sext	 %5038
%5043:	getelementptr	 static_ltree XXX %5042
%5044:	getelementptr	 %5043 XXX XXX
%5045:	bitcast	 %5044
%5046:	store	 XXX %5045
%5047:	load	 XXX
%5048:	add	 %5047 XXX
%5049:	store	 %5048 XXX
%5050:	br	 while.cond94

BASIC BLOCK while.end104
%5051:	br	 while.cond105

BASIC BLOCK while.cond105
%5052:	phi	 %5038 %5055
%5053:	icmp	 %5052 XXX
%5054:	br	 %5053 while.end115 while.body108

BASIC BLOCK while.body108
%5055:	add	 %5052 XXX
%5056:	sext	 %5052
%5057:	getelementptr	 static_ltree XXX %5056
%5058:	getelementptr	 %5057 XXX XXX
%5059:	bitcast	 %5058
%5060:	store	 XXX %5059
%5061:	load	 XXX
%5062:	add	 %5061 XXX
%5063:	store	 %5062 XXX
%5064:	br	 while.cond105

BASIC BLOCK while.end115
%5065:	call	 XXX XXX gen_codes
%5066:	br	 for.cond116

BASIC BLOCK for.cond116
%5067:	phi	 XXX %5083
%5068:	icmp	 %5067 XXX
%5069:	br	 %5068 for.end130 for.body119

BASIC BLOCK for.body119
%5070:	sext	 %5067
%5071:	getelementptr	 static_dtree XXX %5070
%5072:	getelementptr	 %5071 XXX XXX
%5073:	bitcast	 %5072
%5074:	store	 XXX %5073
%5075:	call	 %5067 XXX bi_reverse
%5076:	trunc	 %5075
%5077:	sext	 %5067
%5078:	getelementptr	 static_dtree XXX %5077
%5079:	getelementptr	 %5078 XXX XXX
%5080:	bitcast	 %5079
%5081:	store	 %5076 %5080
%5082:	br	 for.inc128

BASIC BLOCK for.inc128
%5083:	add	 %5067 XXX
%5084:	br	 for.cond116

BASIC BLOCK for.end130
%5085:	call	 init_block
%5086:	br	 return

BASIC BLOCK return
%5087:	ret	

FUNCTION gen_codes

BASIC BLOCK entry
%5088:	alloca	 XXX
%5089:	br	 for.cond

BASIC BLOCK for.cond
%5090:	phi	 XXX %5102
%5091:	phi	 XXX %5107
%5092:	icmp	 %5091 XXX
%5093:	br	 %5092 for.end for.body

BASIC BLOCK for.body
%5094:	zext	 %5090
%5095:	sub	 %5091 XXX
%5096:	sext	 %5095
%5097:	getelementptr	 bl_count XXX %5096
%5098:	load	 %5097
%5099:	zext	 %5098
%5100:	add	 %5094 %5099
%5101:	shl	 %5100 XXX
%5102:	trunc	 %5101
%5103:	sext	 %5091
%5104:	getelementptr	 %5088 XXX %5103
%5105:	store	 %5102 %5104
%5106:	br	 for.inc

BASIC BLOCK for.inc
%5107:	add	 %5091 XXX
%5108:	br	 for.cond

BASIC BLOCK for.end
%5109:	br	 for.cond5

BASIC BLOCK for.cond5
%5110:	phi	 XXX %5136
%5111:	icmp	 %5110 max_code
%5112:	br	 %5111 for.end25 for.body8

BASIC BLOCK for.body8
%5113:	sext	 %5110
%5114:	getelementptr	 tree %5113
%5115:	getelementptr	 %5114 XXX XXX
%5116:	bitcast	 %5115
%5117:	load	 %5116
%5118:	zext	 %5117
%5119:	icmp	 %5118 XXX
%5120:	br	 %5119 if.end if.then

BASIC BLOCK if.then
%5121:	br	 for.inc23

BASIC BLOCK if.end
%5122:	sext	 %5118
%5123:	getelementptr	 %5088 XXX %5122
%5124:	load	 %5123
%5125:	add	 %5124 XXX
%5126:	store	 %5125 %5123
%5127:	zext	 %5124
%5128:	call	 %5127 %5118 bi_reverse
%5129:	trunc	 %5128
%5130:	sext	 %5110
%5131:	getelementptr	 tree %5130
%5132:	getelementptr	 %5131 XXX XXX
%5133:	bitcast	 %5132
%5134:	store	 %5129 %5133
%5135:	br	 for.inc23

BASIC BLOCK for.inc23
%5136:	add	 %5110 XXX
%5137:	br	 for.cond5

BASIC BLOCK for.end25
%5138:	ret	

FUNCTION init_block

BASIC BLOCK entry
%5139:	br	 for.cond

BASIC BLOCK for.cond
%5140:	phi	 XXX %5149
%5141:	icmp	 %5140 XXX
%5142:	br	 %5141 for.end for.body

BASIC BLOCK for.body
%5143:	sext	 %5140
%5144:	getelementptr	 dyn_ltree XXX %5143
%5145:	getelementptr	 %5144 XXX XXX
%5146:	bitcast	 %5145
%5147:	store	 XXX %5146
%5148:	br	 for.inc

BASIC BLOCK for.inc
%5149:	add	 %5140 XXX
%5150:	br	 for.cond

BASIC BLOCK for.end
%5151:	br	 for.cond1

BASIC BLOCK for.cond1
%5152:	phi	 XXX %5161
%5153:	icmp	 %5152 XXX
%5154:	br	 %5153 for.end10 for.body3

BASIC BLOCK for.body3
%5155:	sext	 %5152
%5156:	getelementptr	 dyn_dtree XXX %5155
%5157:	getelementptr	 %5156 XXX XXX
%5158:	bitcast	 %5157
%5159:	store	 XXX %5158
%5160:	br	 for.inc8

BASIC BLOCK for.inc8
%5161:	add	 %5152 XXX
%5162:	br	 for.cond1

BASIC BLOCK for.end10
%5163:	br	 for.cond11

BASIC BLOCK for.cond11
%5164:	phi	 XXX %5173
%5165:	icmp	 %5164 XXX
%5166:	br	 %5165 for.end20 for.body13

BASIC BLOCK for.body13
%5167:	sext	 %5164
%5168:	getelementptr	 bl_tree XXX %5167
%5169:	getelementptr	 %5168 XXX XXX
%5170:	bitcast	 %5169
%5171:	store	 XXX %5170
%5172:	br	 for.inc18

BASIC BLOCK for.inc18
%5173:	add	 %5164 XXX
%5174:	br	 for.cond11

BASIC BLOCK for.end20
%5175:	store	 XXX XXX
%5176:	store	 XXX static_len
%5177:	store	 XXX opt_len
%5178:	store	 XXX last_flags
%5179:	store	 XXX last_dist
%5180:	store	 XXX last_lit
%5181:	store	 XXX flags
%5182:	store	 XXX flag_bit
%5183:	ret	

FUNCTION set_file_type

BASIC BLOCK entry
%5184:	br	 while.cond

BASIC BLOCK while.cond
%5185:	phi	 XXX %5196
%5186:	phi	 XXX %5189
%5187:	icmp	 %5186 XXX
%5188:	br	 %5187 while.end while.body

BASIC BLOCK while.body
%5189:	add	 %5186 XXX
%5190:	sext	 %5186
%5191:	getelementptr	 dyn_ltree XXX %5190
%5192:	getelementptr	 %5191 XXX XXX
%5193:	bitcast	 %5192
%5194:	load	 %5193
%5195:	zext	 %5194
%5196:	add	 %5185 %5195
%5197:	br	 while.cond

BASIC BLOCK while.end
%5198:	br	 while.cond1

BASIC BLOCK while.cond1
%5199:	phi	 XXX %5210
%5200:	phi	 %5186 %5203
%5201:	icmp	 %5200 XXX
%5202:	br	 %5201 while.end12 while.body4

BASIC BLOCK while.body4
%5203:	add	 %5200 XXX
%5204:	sext	 %5200
%5205:	getelementptr	 dyn_ltree XXX %5204
%5206:	getelementptr	 %5205 XXX XXX
%5207:	bitcast	 %5206
%5208:	load	 %5207
%5209:	zext	 %5208
%5210:	add	 %5199 %5209
%5211:	br	 while.cond1

BASIC BLOCK while.end12
%5212:	br	 while.cond13

BASIC BLOCK while.cond13
%5213:	phi	 %5185 %5224
%5214:	phi	 %5200 %5217
%5215:	icmp	 %5214 XXX
%5216:	br	 %5215 while.end24 while.body16

BASIC BLOCK while.body16
%5217:	add	 %5214 XXX
%5218:	sext	 %5214
%5219:	getelementptr	 dyn_ltree XXX %5218
%5220:	getelementptr	 %5219 XXX XXX
%5221:	bitcast	 %5220
%5222:	load	 %5221
%5223:	zext	 %5222
%5224:	add	 %5213 %5223
%5225:	br	 while.cond13

BASIC BLOCK while.end24
%5226:	lshr	 %5199 XXX
%5227:	icmp	 %5213 %5226
%5228:	select	 %5227 XXX XXX
%5229:	trunc	 %5228
%5230:	load	 file_type
%5231:	store	 %5229 %5230
%5232:	load	 file_type
%5233:	load	 %5232
%5234:	zext	 %5233
%5235:	icmp	 %5234 XXX
%5236:	br	 %5235 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%5237:	br	 XXX if.end if.then

BASIC BLOCK if.then
%5238:	call	 XXX XXX warn
%5239:	br	 if.end

BASIC BLOCK if.end
%5240:	ret	

FUNCTION build_tree

BASIC BLOCK entry
%5241:	getelementptr	 desc XXX XXX
%5242:	load	 %5241
%5243:	getelementptr	 desc XXX XXX
%5244:	load	 %5243
%5245:	getelementptr	 desc XXX XXX
%5246:	load	 %5245
%5247:	store	 XXX heap_len
%5248:	store	 XXX heap_max
%5249:	br	 for.cond

BASIC BLOCK for.cond
%5250:	phi	 XXX %5280
%5251:	phi	 XXX %5278
%5252:	icmp	 %5250 %5246
%5253:	br	 %5252 for.end for.body

BASIC BLOCK for.body
%5254:	sext	 %5250
%5255:	getelementptr	 %5242 %5254
%5256:	getelementptr	 %5255 XXX XXX
%5257:	bitcast	 %5256
%5258:	load	 %5257
%5259:	zext	 %5258
%5260:	icmp	 %5259 XXX
%5261:	br	 %5260 if.else if.then

BASIC BLOCK if.then
%5262:	load	 heap_len
%5263:	add	 %5262 XXX
%5264:	store	 %5263 heap_len
%5265:	sext	 %5263
%5266:	getelementptr	 heap XXX %5265
%5267:	store	 %5250 %5266
%5268:	sext	 %5250
%5269:	getelementptr	 depth XXX %5268
%5270:	store	 XXX %5269
%5271:	br	 if.end

BASIC BLOCK if.else
%5272:	sext	 %5250
%5273:	getelementptr	 %5242 %5272
%5274:	getelementptr	 %5273 XXX XXX
%5275:	bitcast	 %5274
%5276:	store	 XXX %5275
%5277:	br	 if.end

BASIC BLOCK if.end
%5278:	phi	 %5250 %5251
%5279:	br	 for.inc

BASIC BLOCK for.inc
%5280:	add	 %5250 XXX
%5281:	br	 for.cond

BASIC BLOCK for.end
%5282:	br	 while.cond

BASIC BLOCK while.cond
%5283:	phi	 %5251 %5292
%5284:	load	 heap_len
%5285:	icmp	 %5284 XXX
%5286:	br	 %5285 while.end while.body

BASIC BLOCK while.body
%5287:	icmp	 %5283 XXX
%5288:	br	 %5287 cond.false cond.true

BASIC BLOCK cond.true
%5289:	add	 %5283 XXX
%5290:	br	 cond.end

BASIC BLOCK cond.false
%5291:	br	 cond.end

BASIC BLOCK cond.end
%5292:	phi	 %5289 %5283
%5293:	phi	 %5289 XXX
%5294:	load	 heap_len
%5295:	add	 %5294 XXX
%5296:	store	 %5295 heap_len
%5297:	sext	 %5295
%5298:	getelementptr	 heap XXX %5297
%5299:	store	 %5293 %5298
%5300:	sext	 %5293
%5301:	getelementptr	 %5242 %5300
%5302:	getelementptr	 %5301 XXX XXX
%5303:	bitcast	 %5302
%5304:	store	 XXX %5303
%5305:	sext	 %5293
%5306:	getelementptr	 depth XXX %5305
%5307:	store	 XXX %5306
%5308:	load	 opt_len
%5309:	add	 %5308 XXX
%5310:	store	 %5309 opt_len
%5311:	icmp	 %5244 XXX
%5312:	br	 %5311 if.end31 if.then25

BASIC BLOCK if.then25
%5313:	sext	 %5293
%5314:	getelementptr	 %5244 %5313
%5315:	getelementptr	 %5314 XXX XXX
%5316:	bitcast	 %5315
%5317:	load	 %5316
%5318:	zext	 %5317
%5319:	load	 static_len
%5320:	sub	 %5319 %5318
%5321:	store	 %5320 static_len
%5322:	br	 if.end31

BASIC BLOCK if.end31
%5323:	br	 while.cond

BASIC BLOCK while.end
%5324:	getelementptr	 desc XXX XXX
%5325:	store	 %5283 %5324
%5326:	load	 heap_len
%5327:	sdiv	 %5326 XXX
%5328:	br	 for.cond33

BASIC BLOCK for.cond33
%5329:	phi	 %5327 %5334
%5330:	icmp	 %5329 XXX
%5331:	br	 %5330 for.end39 for.body36

BASIC BLOCK for.body36
%5332:	call	 %5242 %5329 pqdownheap
%5333:	br	 for.inc37

BASIC BLOCK for.inc37
%5334:	add	 %5329 XXX
%5335:	br	 for.cond33

BASIC BLOCK for.end39
%5336:	br	 do.body

BASIC BLOCK do.body
%5337:	phi	 %5246 %5416
%5338:	load	 XXX
%5339:	load	 heap_len
%5340:	add	 %5339 XXX
%5341:	store	 %5340 heap_len
%5342:	sext	 %5339
%5343:	getelementptr	 heap XXX %5342
%5344:	load	 %5343
%5345:	store	 %5344 XXX
%5346:	call	 %5242 XXX pqdownheap
%5347:	load	 XXX
%5348:	load	 heap_max
%5349:	add	 %5348 XXX
%5350:	store	 %5349 heap_max
%5351:	sext	 %5349
%5352:	getelementptr	 heap XXX %5351
%5353:	store	 %5338 %5352
%5354:	load	 heap_max
%5355:	add	 %5354 XXX
%5356:	store	 %5355 heap_max
%5357:	sext	 %5355
%5358:	getelementptr	 heap XXX %5357
%5359:	store	 %5347 %5358
%5360:	sext	 %5338
%5361:	getelementptr	 %5242 %5360
%5362:	getelementptr	 %5361 XXX XXX
%5363:	bitcast	 %5362
%5364:	load	 %5363
%5365:	zext	 %5364
%5366:	sext	 %5347
%5367:	getelementptr	 %5242 %5366
%5368:	getelementptr	 %5367 XXX XXX
%5369:	bitcast	 %5368
%5370:	load	 %5369
%5371:	zext	 %5370
%5372:	add	 %5365 %5371
%5373:	trunc	 %5372
%5374:	sext	 %5337
%5375:	getelementptr	 %5242 %5374
%5376:	getelementptr	 %5375 XXX XXX
%5377:	bitcast	 %5376
%5378:	store	 %5373 %5377
%5379:	sext	 %5338
%5380:	getelementptr	 depth XXX %5379
%5381:	load	 %5380
%5382:	zext	 %5381
%5383:	sext	 %5347
%5384:	getelementptr	 depth XXX %5383
%5385:	load	 %5384
%5386:	zext	 %5385
%5387:	icmp	 %5382 %5386
%5388:	br	 %5387 cond.false76 cond.true72

BASIC BLOCK cond.true72
%5389:	sext	 %5338
%5390:	getelementptr	 depth XXX %5389
%5391:	load	 %5390
%5392:	zext	 %5391
%5393:	br	 cond.end80

BASIC BLOCK cond.false76
%5394:	sext	 %5347
%5395:	getelementptr	 depth XXX %5394
%5396:	load	 %5395
%5397:	zext	 %5396
%5398:	br	 cond.end80

BASIC BLOCK cond.end80
%5399:	phi	 %5392 %5397
%5400:	add	 %5399 XXX
%5401:	trunc	 %5400
%5402:	sext	 %5337
%5403:	getelementptr	 depth XXX %5402
%5404:	store	 %5401 %5403
%5405:	trunc	 %5337
%5406:	sext	 %5347
%5407:	getelementptr	 %5242 %5406
%5408:	getelementptr	 %5407 XXX XXX
%5409:	bitcast	 %5408
%5410:	store	 %5405 %5409
%5411:	sext	 %5338
%5412:	getelementptr	 %5242 %5411
%5413:	getelementptr	 %5412 XXX XXX
%5414:	bitcast	 %5413
%5415:	store	 %5405 %5414
%5416:	add	 %5337 XXX
%5417:	store	 %5337 XXX
%5418:	call	 %5242 XXX pqdownheap
%5419:	br	 do.cond

BASIC BLOCK do.cond
%5420:	load	 heap_len
%5421:	icmp	 %5420 XXX
%5422:	br	 %5421 do.end do.body

BASIC BLOCK do.end
%5423:	load	 XXX
%5424:	load	 heap_max
%5425:	add	 %5424 XXX
%5426:	store	 %5425 heap_max
%5427:	sext	 %5425
%5428:	getelementptr	 heap XXX %5427
%5429:	store	 %5423 %5428
%5430:	call	 desc gen_bitlen
%5431:	call	 %5242 %5283 gen_codes
%5432:	ret	

FUNCTION build_bl_tree

BASIC BLOCK entry
%5433:	load	 XXX
%5434:	call	 XXX %5433 scan_tree
%5435:	load	 XXX
%5436:	call	 XXX %5435 scan_tree
%5437:	call	 bl_desc build_tree
%5438:	br	 for.cond

BASIC BLOCK for.cond
%5439:	phi	 XXX %5455
%5440:	icmp	 %5439 XXX
%5441:	br	 %5440 for.end for.body

BASIC BLOCK for.body
%5442:	sext	 %5439
%5443:	getelementptr	 bl_order XXX %5442
%5444:	load	 %5443
%5445:	zext	 %5444
%5446:	getelementptr	 bl_tree XXX %5445
%5447:	getelementptr	 %5446 XXX XXX
%5448:	bitcast	 %5447
%5449:	load	 %5448
%5450:	zext	 %5449
%5451:	icmp	 %5450 XXX
%5452:	br	 %5451 if.end if.then

BASIC BLOCK if.then
%5453:	br	 for.end

BASIC BLOCK if.end
%5454:	br	 for.inc

BASIC BLOCK for.inc
%5455:	add	 %5439 XXX
%5456:	br	 for.cond

BASIC BLOCK for.end
%5457:	add	 %5439 XXX
%5458:	mul	 XXX %5457
%5459:	add	 %5458 XXX
%5460:	add	 %5459 XXX
%5461:	add	 %5460 XXX
%5462:	sext	 %5461
%5463:	load	 opt_len
%5464:	add	 %5463 %5462
%5465:	store	 %5464 opt_len
%5466:	ret	 %5439

FUNCTION compress_block

BASIC BLOCK entry
%5467:	load	 last_lit
%5468:	icmp	 %5467 XXX
%5469:	br	 %5468 if.end80 if.then

BASIC BLOCK if.then
%5470:	br	 do.body

BASIC BLOCK do.body
%5471:	phi	 XXX %5588
%5472:	phi	 XXX %5484
%5473:	phi	 XXX %5585
%5474:	phi	 XXX %5485
%5475:	and	 %5474 XXX
%5476:	icmp	 %5475 XXX
%5477:	br	 %5476 if.end if.then2

BASIC BLOCK if.then2
%5478:	add	 %5472 XXX
%5479:	zext	 %5472
%5480:	getelementptr	 flag_buf XXX %5479
%5481:	load	 %5480
%5482:	br	 if.end

BASIC BLOCK if.end
%5483:	phi	 %5481 %5471
%5484:	phi	 %5478 %5472
%5485:	add	 %5474 XXX
%5486:	zext	 %5474
%5487:	getelementptr	 inbuf XXX %5486
%5488:	load	 %5487
%5489:	zext	 %5488
%5490:	zext	 %5483
%5491:	and	 %5490 XXX
%5492:	icmp	 %5491 XXX
%5493:	br	 %5492 if.else if.then10

BASIC BLOCK if.then10
%5494:	sext	 %5489
%5495:	getelementptr	 ltree %5494
%5496:	getelementptr	 %5495 XXX XXX
%5497:	bitcast	 %5496
%5498:	load	 %5497
%5499:	zext	 %5498
%5500:	sext	 %5489
%5501:	getelementptr	 ltree %5500
%5502:	getelementptr	 %5501 XXX XXX
%5503:	bitcast	 %5502
%5504:	load	 %5503
%5505:	zext	 %5504
%5506:	call	 %5499 %5505 send_bits
%5507:	br	 if.end74

BASIC BLOCK if.else
%5508:	sext	 %5489
%5509:	getelementptr	 length_code XXX %5508
%5510:	load	 %5509
%5511:	zext	 %5510
%5512:	add	 %5511 XXX
%5513:	add	 %5512 XXX
%5514:	zext	 %5513
%5515:	getelementptr	 ltree %5514
%5516:	getelementptr	 %5515 XXX XXX
%5517:	bitcast	 %5516
%5518:	load	 %5517
%5519:	zext	 %5518
%5520:	add	 %5511 XXX
%5521:	add	 %5520 XXX
%5522:	zext	 %5521
%5523:	getelementptr	 ltree %5522
%5524:	getelementptr	 %5523 XXX XXX
%5525:	bitcast	 %5524
%5526:	load	 %5525
%5527:	zext	 %5526
%5528:	call	 %5519 %5527 send_bits
%5529:	zext	 %5511
%5530:	getelementptr	 extra_lbits XXX %5529
%5531:	load	 %5530
%5532:	icmp	 %5531 XXX
%5533:	br	 %5532 if.end41 if.then38

BASIC BLOCK if.then38
%5534:	zext	 %5511
%5535:	getelementptr	 base_length XXX %5534
%5536:	load	 %5535
%5537:	sub	 %5489 %5536
%5538:	call	 %5537 %5531 send_bits
%5539:	br	 if.end41

BASIC BLOCK if.end41
%5540:	add	 %5473 XXX
%5541:	zext	 %5473
%5542:	getelementptr	 d_buf XXX %5541
%5543:	load	 %5542
%5544:	zext	 %5543
%5545:	icmp	 %5544 XXX
%5546:	br	 %5545 cond.false cond.true

BASIC BLOCK cond.true
%5547:	zext	 %5544
%5548:	getelementptr	 dist_code XXX %5547
%5549:	load	 %5548
%5550:	zext	 %5549
%5551:	br	 cond.end

BASIC BLOCK cond.false
%5552:	lshr	 %5544 XXX
%5553:	add	 XXX %5552
%5554:	zext	 %5553
%5555:	getelementptr	 dist_code XXX %5554
%5556:	load	 %5555
%5557:	zext	 %5556
%5558:	br	 cond.end

BASIC BLOCK cond.end
%5559:	phi	 %5550 %5557
%5560:	zext	 %5559
%5561:	getelementptr	 dtree %5560
%5562:	getelementptr	 %5561 XXX XXX
%5563:	bitcast	 %5562
%5564:	load	 %5563
%5565:	zext	 %5564
%5566:	zext	 %5559
%5567:	getelementptr	 dtree %5566
%5568:	getelementptr	 %5567 XXX XXX
%5569:	bitcast	 %5568
%5570:	load	 %5569
%5571:	zext	 %5570
%5572:	call	 %5565 %5571 send_bits
%5573:	zext	 %5559
%5574:	getelementptr	 extra_dbits XXX %5573
%5575:	load	 %5574
%5576:	icmp	 %5575 XXX
%5577:	br	 %5576 if.end73 if.then69

BASIC BLOCK if.then69
%5578:	zext	 %5559
%5579:	getelementptr	 base_dist XXX %5578
%5580:	load	 %5579
%5581:	sub	 %5544 %5580
%5582:	call	 %5581 %5575 send_bits
%5583:	br	 if.end73

BASIC BLOCK if.end73
%5584:	br	 if.end74

BASIC BLOCK if.end74
%5585:	phi	 %5473 %5540
%5586:	zext	 %5483
%5587:	ashr	 %5586 XXX
%5588:	trunc	 %5587
%5589:	br	 do.cond

BASIC BLOCK do.cond
%5590:	load	 last_lit
%5591:	icmp	 %5485 %5590
%5592:	br	 %5591 do.end do.body

BASIC BLOCK do.end
%5593:	br	 if.end80

BASIC BLOCK if.end80
%5594:	getelementptr	 ltree XXX
%5595:	getelementptr	 %5594 XXX XXX
%5596:	bitcast	 %5595
%5597:	load	 %5596
%5598:	zext	 %5597
%5599:	getelementptr	 ltree XXX
%5600:	getelementptr	 %5599 XXX XXX
%5601:	bitcast	 %5600
%5602:	load	 %5601
%5603:	zext	 %5602
%5604:	call	 %5598 %5603 send_bits
%5605:	ret	

FUNCTION send_all_trees

BASIC BLOCK entry
%5606:	sub	 lcodes XXX
%5607:	call	 %5606 XXX send_bits
%5608:	sub	 dcodes XXX
%5609:	call	 %5608 XXX send_bits
%5610:	sub	 blcodes XXX
%5611:	call	 %5610 XXX send_bits
%5612:	br	 for.cond

BASIC BLOCK for.cond
%5613:	phi	 XXX %5627
%5614:	icmp	 %5613 blcodes
%5615:	br	 %5614 for.end for.body

BASIC BLOCK for.body
%5616:	sext	 %5613
%5617:	getelementptr	 bl_order XXX %5616
%5618:	load	 %5617
%5619:	zext	 %5618
%5620:	getelementptr	 bl_tree XXX %5619
%5621:	getelementptr	 %5620 XXX XXX
%5622:	bitcast	 %5621
%5623:	load	 %5622
%5624:	zext	 %5623
%5625:	call	 %5624 XXX send_bits
%5626:	br	 for.inc

BASIC BLOCK for.inc
%5627:	add	 %5613 XXX
%5628:	br	 for.cond

BASIC BLOCK for.end
%5629:	sub	 lcodes XXX
%5630:	call	 XXX %5629 send_tree
%5631:	sub	 dcodes XXX
%5632:	call	 XXX %5631 send_tree
%5633:	ret	

FUNCTION unlzw

BASIC BLOCK entry
%5634:	load	 inptr
%5635:	load	 insize
%5636:	icmp	 %5634 %5635
%5637:	br	 %5636 cond.false cond.true

BASIC BLOCK cond.true
%5638:	load	 inptr
%5639:	add	 %5638 XXX
%5640:	store	 %5639 inptr
%5641:	zext	 %5638
%5642:	getelementptr	 inbuf XXX %5641
%5643:	load	 %5642
%5644:	zext	 %5643
%5645:	br	 cond.end

BASIC BLOCK cond.false
%5646:	call	 fill_inbuf
%5647:	br	 cond.end

BASIC BLOCK cond.end
%5648:	phi	 %5644 %5646
%5649:	store	 %5648 maxbits
%5650:	load	 maxbits
%5651:	and	 %5650 XXX
%5652:	store	 %5651 block_mode
%5653:	load	 maxbits
%5654:	and	 %5653 XXX
%5655:	icmp	 %5654 XXX
%5656:	br	 %5655 if.end11 if.then

BASIC BLOCK if.then
%5657:	load	 quiet
%5658:	icmp	 %5657 XXX
%5659:	br	 %5658 if.then4 if.end

BASIC BLOCK if.then4
%5660:	load	 stderr
%5661:	load	 progname
%5662:	load	 maxbits
%5663:	and	 %5662 XXX
%5664:	call	 %5660 XXX %5661 XXX %5663 fprintf
%5665:	br	 if.end

BASIC BLOCK if.end
%5666:	load	 exit_code
%5667:	icmp	 %5666 XXX
%5668:	br	 %5667 if.end10 if.then9

BASIC BLOCK if.then9
%5669:	store	 XXX exit_code
%5670:	br	 if.end10

BASIC BLOCK if.end10
%5671:	br	 if.end11

BASIC BLOCK if.end11
%5672:	load	 maxbits
%5673:	and	 %5672 XXX
%5674:	store	 %5673 maxbits
%5675:	load	 maxbits
%5676:	zext	 %5675
%5677:	shl	 XXX %5676
%5678:	load	 maxbits
%5679:	icmp	 %5678 XXX
%5680:	br	 %5679 if.end17 if.then15

BASIC BLOCK if.then15
%5681:	load	 stderr
%5682:	load	 progname
%5683:	load	 maxbits
%5684:	call	 %5681 XXX %5682 XXX %5683 XXX fprintf
%5685:	store	 XXX exit_code
%5686:	br	 return

BASIC BLOCK if.end17
%5687:	load	 insize
%5688:	shl	 XXX XXX
%5689:	sub	 %5688 XXX
%5690:	load	 inptr
%5691:	shl	 %5690 XXX
%5692:	zext	 %5691
%5693:	load	 block_mode
%5694:	icmp	 %5693 XXX
%5695:	select	 %5694 XXX XXX
%5696:	sext	 %5695
%5697:	call	 XXX XXX XXX XXX XXX llvm.memset.p0i8.i64
%5698:	br	 for.cond

BASIC BLOCK for.cond
%5699:	phi	 XXX %5706
%5700:	icmp	 %5699 XXX
%5701:	br	 %5700 for.end for.body

BASIC BLOCK for.body
%5702:	trunc	 %5699
%5703:	getelementptr	 window XXX %5699
%5704:	store	 %5702 %5703
%5705:	br	 for.inc

BASIC BLOCK for.inc
%5706:	add	 %5699 XXX
%5707:	br	 for.cond

BASIC BLOCK for.end
%5708:	br	 do.body

BASIC BLOCK do.body
%5709:	phi	 XXX %5719
%5710:	phi	 %5696 %5787
%5711:	phi	 %5689 %5721
%5712:	phi	 XXX %5788
%5713:	phi	 %5692 %5789
%5714:	phi	 XXX %5724
%5715:	phi	 %5687 %5767
%5716:	phi	 XXX %5790
%5717:	phi	 XXX %5791
%5718:	br	 resetbuf

BASIC BLOCK resetbuf
%5719:	phi	 %5709 %5817 XXX
%5720:	phi	 %5710 %5787 XXX
%5721:	phi	 %5711 %5819 %5870
%5722:	phi	 %5712 %5788 %5788
%5723:	phi	 %5713 %5807 %5868
%5724:	phi	 %5714 %5808 XXX
%5725:	phi	 %5715 %5767 %5767
%5726:	phi	 %5716 %5790 %5790
%5727:	phi	 %5717 %5791 %5791
%5728:	load	 insize
%5729:	ashr	 %5723 XXX
%5730:	trunc	 %5729
%5731:	sub	 %5728 %5730
%5732:	br	 for.cond30

BASIC BLOCK for.cond30
%5733:	phi	 XXX %5744
%5734:	icmp	 %5733 %5731
%5735:	br	 %5734 for.end40 for.body33

BASIC BLOCK for.body33
%5736:	add	 %5733 %5730
%5737:	sext	 %5736
%5738:	getelementptr	 inbuf XXX %5737
%5739:	load	 %5738
%5740:	sext	 %5733
%5741:	getelementptr	 inbuf XXX %5740
%5742:	store	 %5739 %5741
%5743:	br	 for.inc38

BASIC BLOCK for.inc38
%5744:	add	 %5733 XXX
%5745:	br	 for.cond30

BASIC BLOCK for.end40
%5746:	store	 %5731 insize
%5747:	load	 insize
%5748:	icmp	 %5747 XXX
%5749:	br	 %5748 if.end53 if.then43

BASIC BLOCK if.then43
%5750:	load	 insize
%5751:	zext	 %5750
%5752:	getelementptr	 XXX %5751
%5753:	call	 in %5752 XXX read
%5754:	trunc	 %5753
%5755:	icmp	 %5754 XXX
%5756:	br	 %5755 if.end49 if.then48

BASIC BLOCK if.then48
%5757:	call	 read_error
%5758:	br	 if.end49

BASIC BLOCK if.end49
%5759:	load	 insize
%5760:	add	 %5759 %5754
%5761:	store	 %5760 insize
%5762:	sext	 %5754
%5763:	load	 bytes_in
%5764:	add	 %5763 %5762
%5765:	store	 %5764 bytes_in
%5766:	br	 if.end53

BASIC BLOCK if.end53
%5767:	phi	 %5754 %5725
%5768:	icmp	 %5767 XXX
%5769:	br	 %5768 cond.false61 cond.true56

BASIC BLOCK cond.true56
%5770:	load	 insize
%5771:	zext	 %5770
%5772:	load	 insize
%5773:	urem	 %5772 %5724
%5774:	zext	 %5773
%5775:	sub	 %5771 %5774
%5776:	shl	 %5775 XXX
%5777:	br	 cond.end67

BASIC BLOCK cond.false61
%5778:	load	 insize
%5779:	zext	 %5778
%5780:	shl	 %5779 XXX
%5781:	sub	 %5724 XXX
%5782:	sext	 %5781
%5783:	sub	 %5780 %5782
%5784:	br	 cond.end67

BASIC BLOCK cond.end67
%5785:	phi	 %5776 %5783
%5786:	br	 while.cond

BASIC BLOCK while.cond
%5787:	phi	 %5720 %5787 %5978
%5788:	phi	 %5722 %5846 %5967
%5789:	phi	 XXX %5841 %5841
%5790:	phi	 %5726 %5839 %5839
%5791:	phi	 %5727 %5844 %5910
%5792:	icmp	 %5785 %5789
%5793:	br	 %5792 while.end223 while.body

BASIC BLOCK while.body
%5794:	icmp	 %5787 %5719
%5795:	br	 %5794 if.end96 if.then73

BASIC BLOCK if.then73
%5796:	sub	 %5789 XXX
%5797:	shl	 %5724 XXX
%5798:	sext	 %5797
%5799:	sub	 %5789 XXX
%5800:	shl	 %5724 XXX
%5801:	sext	 %5800
%5802:	add	 %5799 %5801
%5803:	shl	 %5724 XXX
%5804:	sext	 %5803
%5805:	srem	 %5802 %5804
%5806:	sub	 %5798 %5805
%5807:	add	 %5796 %5806
%5808:	add	 %5724 XXX
%5809:	load	 maxbits
%5810:	icmp	 %5808 %5809
%5811:	br	 %5810 if.else if.then89

BASIC BLOCK if.then89
%5812:	br	 if.end93

BASIC BLOCK if.else
%5813:	zext	 %5808
%5814:	shl	 XXX %5813
%5815:	sub	 %5814 XXX
%5816:	br	 if.end93

BASIC BLOCK if.end93
%5817:	phi	 %5677 %5815
%5818:	shl	 XXX %5808
%5819:	sub	 %5818 XXX
%5820:	br	 resetbuf

BASIC BLOCK if.end96
%5821:	ashr	 %5789 XXX
%5822:	getelementptr	 inbuf XXX %5821
%5823:	getelementptr	 %5822 XXX
%5824:	load	 %5823
%5825:	zext	 %5824
%5826:	getelementptr	 %5822 XXX
%5827:	load	 %5826
%5828:	zext	 %5827
%5829:	shl	 %5828 XXX
%5830:	or	 %5825 %5829
%5831:	getelementptr	 %5822 XXX
%5832:	load	 %5831
%5833:	zext	 %5832
%5834:	shl	 %5833 XXX
%5835:	or	 %5830 %5834
%5836:	and	 %5789 XXX
%5837:	ashr	 %5835 %5836
%5838:	zext	 %5721
%5839:	and	 %5837 %5838
%5840:	sext	 %5724
%5841:	add	 %5789 %5840
%5842:	icmp	 %5790 XXX
%5843:	br	 %5842 if.end122 if.then116

BASIC BLOCK if.then116
%5844:	trunc	 %5839
%5845:	trunc	 %5844
%5846:	add	 %5788 XXX
%5847:	sext	 %5788
%5848:	getelementptr	 outbuf XXX %5847
%5849:	store	 %5845 %5848
%5850:	br	 while.cond

BASIC BLOCK if.end122
%5851:	icmp	 %5839 XXX
%5852:	br	 %5851 if.end141 land.lhs.true

BASIC BLOCK land.lhs.true
%5853:	load	 block_mode
%5854:	icmp	 %5853 XXX
%5855:	br	 %5854 if.end141 if.then126

BASIC BLOCK if.then126
%5856:	call	 XXX XXX XXX XXX XXX llvm.memset.p0i8.i64
%5857:	sub	 %5841 XXX
%5858:	shl	 %5724 XXX
%5859:	sext	 %5858
%5860:	sub	 %5841 XXX
%5861:	shl	 %5724 XXX
%5862:	sext	 %5861
%5863:	add	 %5860 %5862
%5864:	shl	 %5724 XXX
%5865:	sext	 %5864
%5866:	srem	 %5863 %5865
%5867:	sub	 %5859 %5866
%5868:	add	 %5857 %5867
%5869:	shl	 XXX XXX
%5870:	sub	 %5869 XXX
%5871:	br	 resetbuf

BASIC BLOCK if.end141
%5872:	icmp	 %5839 %5787
%5873:	br	 %5872 if.end158 if.then144

BASIC BLOCK if.then144
%5874:	icmp	 %5839 %5787
%5875:	br	 %5874 if.end156 if.then147

BASIC BLOCK if.then147
%5876:	load	 test
%5877:	icmp	 %5876 XXX
%5878:	br	 %5877 land.lhs.true149 if.end155

BASIC BLOCK land.lhs.true149
%5879:	icmp	 %5788 XXX
%5880:	br	 %5879 if.end155 if.then152

BASIC BLOCK if.then152
%5881:	call	 out XXX %5788 write_buf
%5882:	sext	 %5788
%5883:	load	 bytes_out
%5884:	add	 %5883 %5882
%5885:	store	 %5884 bytes_out
%5886:	br	 if.end155

BASIC BLOCK if.end155
%5887:	call	 XXX error
%5888:	br	 if.end156

BASIC BLOCK if.end156
%5889:	trunc	 %5791
%5890:	getelementptr	 XXX XXX
%5891:	store	 %5889 %5890
%5892:	br	 if.end158

BASIC BLOCK if.end158
%5893:	phi	 %5790 %5839
%5894:	phi	 %5890 XXX
%5895:	br	 while.cond159

BASIC BLOCK while.cond159
%5896:	phi	 %5893 %5906
%5897:	phi	 %5894 %5902
%5898:	icmp	 %5896 XXX
%5899:	br	 %5898 while.end while.body162

BASIC BLOCK while.body162
%5900:	getelementptr	 window XXX %5896
%5901:	load	 %5900
%5902:	getelementptr	 %5897 XXX
%5903:	store	 %5901 %5902
%5904:	getelementptr	 prev XXX %5896
%5905:	load	 %5904
%5906:	zext	 %5905
%5907:	br	 while.cond159

BASIC BLOCK while.end
%5908:	getelementptr	 window XXX %5896
%5909:	load	 %5908
%5910:	zext	 %5909
%5911:	trunc	 %5910
%5912:	getelementptr	 %5897 XXX
%5913:	store	 %5911 %5912
%5914:	ptrtoint	 %5912
%5915:	sub	 XXX %5914
%5916:	trunc	 %5915
%5917:	add	 %5788 %5916
%5918:	icmp	 %5917 XXX
%5919:	br	 %5918 if.else208 if.then176

BASIC BLOCK if.then176
%5920:	br	 do.body177

BASIC BLOCK do.body177
%5921:	phi	 %5788 %5951
%5922:	phi	 %5912 %5953
%5923:	phi	 %5916 %5957
%5924:	sub	 XXX %5921
%5925:	icmp	 %5923 %5924
%5926:	br	 %5925 if.end183 if.then181

BASIC BLOCK if.then181
%5927:	sub	 XXX %5921
%5928:	br	 if.end183

BASIC BLOCK if.end183
%5929:	phi	 %5927 %5923
%5930:	icmp	 %5929 XXX
%5931:	br	 %5930 if.end191 if.then186

BASIC BLOCK if.then186
%5932:	sext	 %5921
%5933:	getelementptr	 XXX %5932
%5934:	sext	 %5929
%5935:	call	 %5933 %5922 %5934 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%5936:	add	 %5921 %5929
%5937:	br	 if.end191

BASIC BLOCK if.end191
%5938:	phi	 %5936 %5921
%5939:	icmp	 %5938 XXX
%5940:	br	 %5939 if.end200 if.then194

BASIC BLOCK if.then194
%5941:	load	 test
%5942:	icmp	 %5941 XXX
%5943:	br	 %5942 if.then196 if.end199

BASIC BLOCK if.then196
%5944:	call	 out XXX %5938 write_buf
%5945:	sext	 %5938
%5946:	load	 bytes_out
%5947:	add	 %5946 %5945
%5948:	store	 %5947 bytes_out
%5949:	br	 if.end199

BASIC BLOCK if.end199
%5950:	br	 if.end200

BASIC BLOCK if.end200
%5951:	phi	 XXX %5938
%5952:	sext	 %5929
%5953:	getelementptr	 %5922 %5952
%5954:	br	 do.cond

BASIC BLOCK do.cond
%5955:	ptrtoint	 %5953
%5956:	sub	 XXX %5955
%5957:	trunc	 %5956
%5958:	icmp	 %5957 XXX
%5959:	br	 %5958 do.end do.body177

BASIC BLOCK do.end
%5960:	br	 if.end213

BASIC BLOCK if.else208
%5961:	sext	 %5788
%5962:	getelementptr	 XXX %5961
%5963:	sext	 %5916
%5964:	call	 %5962 %5912 %5963 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%5965:	add	 %5788 %5916
%5966:	br	 if.end213

BASIC BLOCK if.end213
%5967:	phi	 %5951 %5965
%5968:	icmp	 %5787 %5677
%5969:	br	 %5968 if.end222 if.then216

BASIC BLOCK if.then216
%5970:	trunc	 %5790
%5971:	getelementptr	 prev XXX %5787
%5972:	store	 %5970 %5971
%5973:	trunc	 %5910
%5974:	getelementptr	 window XXX %5787
%5975:	store	 %5973 %5974
%5976:	add	 %5787 XXX
%5977:	br	 if.end222

BASIC BLOCK if.end222
%5978:	phi	 %5976 %5787
%5979:	br	 while.cond

BASIC BLOCK while.end223
%5980:	br	 do.cond224

BASIC BLOCK do.cond224
%5981:	icmp	 %5767 XXX
%5982:	br	 %5981 do.end227 do.body

BASIC BLOCK do.end227
%5983:	load	 test
%5984:	icmp	 %5983 XXX
%5985:	br	 %5984 land.lhs.true229 if.end235

BASIC BLOCK land.lhs.true229
%5986:	icmp	 %5788 XXX
%5987:	br	 %5986 if.end235 if.then232

BASIC BLOCK if.then232
%5988:	call	 out XXX %5788 write_buf
%5989:	sext	 %5788
%5990:	load	 bytes_out
%5991:	add	 %5990 %5989
%5992:	store	 %5991 bytes_out
%5993:	br	 if.end235

BASIC BLOCK if.end235
%5994:	br	 return

BASIC BLOCK return
%5995:	phi	 XXX XXX
%5996:	ret	 %5995

FUNCTION read_error

BASIC BLOCK entry
%5997:	load	 stderr
%5998:	load	 progname
%5999:	call	 %5997 XXX %5998 fprintf
%6000:	call	 __errno_location
%6001:	load	 %6000
%6002:	icmp	 %6001 XXX
%6003:	br	 %6002 if.else if.then

BASIC BLOCK if.then
%6004:	call	 XXX perror
%6005:	br	 if.end

BASIC BLOCK if.else
%6006:	load	 stderr
%6007:	call	 %6006 XXX XXX fprintf
%6008:	br	 if.end

BASIC BLOCK if.end
%6009:	call	 abort_gzip
%6010:	ret	

FUNCTION write_buf

BASIC BLOCK entry
%6011:	br	 while.cond

BASIC BLOCK while.cond
%6012:	phi	 buf %6025
%6013:	phi	 cnt %6023
%6014:	zext	 %6013
%6015:	call	 fd %6012 %6014 write
%6016:	trunc	 %6015
%6017:	icmp	 %6016 %6013
%6018:	br	 %6017 while.end while.body

BASIC BLOCK while.body
%6019:	icmp	 %6016 XXX
%6020:	br	 %6019 if.end if.then

BASIC BLOCK if.then
%6021:	call	 write_error
%6022:	br	 if.end

BASIC BLOCK if.end
%6023:	sub	 %6013 %6016
%6024:	zext	 %6016
%6025:	getelementptr	 %6012 %6024
%6026:	br	 while.cond

BASIC BLOCK while.end
%6027:	ret	

FUNCTION unpack

BASIC BLOCK entry
%6028:	store	 in ifd
%6029:	store	 out ofd
%6030:	call	 read_tree
%6031:	call	 un_build_tree
%6032:	store	 XXX valid
%6033:	store	 XXX bitbuf
%6034:	load	 peek_bits
%6035:	shl	 XXX %6034
%6036:	sub	 %6035 XXX
%6037:	load	 max_len
%6038:	sext	 %6037
%6039:	getelementptr	 leaves XXX %6038
%6040:	load	 %6039
%6041:	sub	 %6040 XXX
%6042:	br	 for.cond

BASIC BLOCK for.cond
%6043:	br	 while.cond

BASIC BLOCK while.cond
%6044:	load	 valid
%6045:	load	 peek_bits
%6046:	icmp	 %6044 %6045
%6047:	br	 %6046 while.end while.body

BASIC BLOCK while.body
%6048:	load	 bitbuf
%6049:	shl	 %6048 XXX
%6050:	load	 inptr
%6051:	load	 insize
%6052:	icmp	 %6050 %6051
%6053:	br	 %6052 cond.false cond.true

BASIC BLOCK cond.true
%6054:	load	 inptr
%6055:	add	 %6054 XXX
%6056:	store	 %6055 inptr
%6057:	zext	 %6054
%6058:	getelementptr	 inbuf XXX %6057
%6059:	load	 %6058
%6060:	zext	 %6059
%6061:	br	 cond.end

BASIC BLOCK cond.false
%6062:	call	 fill_inbuf
%6063:	br	 cond.end

BASIC BLOCK cond.end
%6064:	phi	 %6060 %6062
%6065:	sext	 %6064
%6066:	or	 %6049 %6065
%6067:	store	 %6066 bitbuf
%6068:	load	 valid
%6069:	add	 %6068 XXX
%6070:	store	 %6069 valid
%6071:	br	 while.cond

BASIC BLOCK while.end
%6072:	load	 bitbuf
%6073:	load	 valid
%6074:	load	 peek_bits
%6075:	sub	 %6073 %6074
%6076:	zext	 %6075
%6077:	lshr	 %6072 %6076
%6078:	zext	 %6036
%6079:	and	 %6077 %6078
%6080:	trunc	 %6079
%6081:	zext	 %6080
%6082:	getelementptr	 prefix_len XXX %6081
%6083:	load	 %6082
%6084:	zext	 %6083
%6085:	icmp	 %6084 XXX
%6086:	br	 %6085 if.else if.then

BASIC BLOCK if.then
%6087:	load	 peek_bits
%6088:	sub	 %6087 %6084
%6089:	lshr	 %6080 %6088
%6090:	br	 if.end

BASIC BLOCK if.else
%6091:	zext	 %6036
%6092:	load	 peek_bits
%6093:	br	 do.body

BASIC BLOCK do.body
%6094:	phi	 %6092 %6096
%6095:	phi	 %6091 %6098
%6096:	add	 %6094 XXX
%6097:	shl	 %6095 XXX
%6098:	add	 %6097 XXX
%6099:	br	 while.cond21

BASIC BLOCK while.cond21
%6100:	load	 valid
%6101:	icmp	 %6100 %6096
%6102:	br	 %6101 while.end40 while.body24

BASIC BLOCK while.body24
%6103:	load	 bitbuf
%6104:	shl	 %6103 XXX
%6105:	load	 inptr
%6106:	load	 insize
%6107:	icmp	 %6105 %6106
%6108:	br	 %6107 cond.false33 cond.true28

BASIC BLOCK cond.true28
%6109:	load	 inptr
%6110:	add	 %6109 XXX
%6111:	store	 %6110 inptr
%6112:	zext	 %6109
%6113:	getelementptr	 inbuf XXX %6112
%6114:	load	 %6113
%6115:	zext	 %6114
%6116:	br	 cond.end35

BASIC BLOCK cond.false33
%6117:	call	 fill_inbuf
%6118:	br	 cond.end35

BASIC BLOCK cond.end35
%6119:	phi	 %6115 %6117
%6120:	sext	 %6119
%6121:	or	 %6104 %6120
%6122:	store	 %6121 bitbuf
%6123:	load	 valid
%6124:	add	 %6123 XXX
%6125:	store	 %6124 valid
%6126:	br	 while.cond21

BASIC BLOCK while.end40
%6127:	load	 bitbuf
%6128:	load	 valid
%6129:	sub	 %6128 %6096
%6130:	zext	 %6129
%6131:	lshr	 %6127 %6130
%6132:	and	 %6131 %6098
%6133:	trunc	 %6132
%6134:	br	 do.cond

BASIC BLOCK do.cond
%6135:	sext	 %6096
%6136:	getelementptr	 parents XXX %6135
%6137:	load	 %6136
%6138:	icmp	 %6133 %6137
%6139:	br	 %6138 do.end do.body

BASIC BLOCK do.end
%6140:	br	 if.end

BASIC BLOCK if.end
%6141:	phi	 %6084 %6096
%6142:	phi	 %6089 %6133
%6143:	icmp	 %6142 %6041
%6144:	br	 %6143 if.end55 land.lhs.true

BASIC BLOCK land.lhs.true
%6145:	load	 max_len
%6146:	icmp	 %6141 %6145
%6147:	br	 %6146 if.end55 if.then54

BASIC BLOCK if.then54
%6148:	br	 for.end

BASIC BLOCK if.end55
%6149:	sext	 %6141
%6150:	getelementptr	 lit_base XXX %6149
%6151:	load	 %6150
%6152:	add	 %6142 %6151
%6153:	zext	 %6152
%6154:	getelementptr	 literal XXX %6153
%6155:	load	 %6154
%6156:	load	 outcnt
%6157:	add	 %6156 XXX
%6158:	store	 %6157 outcnt
%6159:	zext	 %6156
%6160:	getelementptr	 window XXX %6159
%6161:	store	 %6155 %6160
%6162:	load	 outcnt
%6163:	icmp	 %6162 XXX
%6164:	br	 %6163 if.end67 if.then66

BASIC BLOCK if.then66
%6165:	call	 flush_window
%6166:	br	 if.end67

BASIC BLOCK if.end67
%6167:	load	 valid
%6168:	sub	 %6167 %6141
%6169:	store	 %6168 valid
%6170:	br	 for.cond

BASIC BLOCK for.end
%6171:	call	 flush_window
%6172:	load	 orig_len
%6173:	load	 bytes_out
%6174:	icmp	 %6172 %6173
%6175:	br	 %6174 if.end72 if.then71

BASIC BLOCK if.then71
%6176:	call	 XXX error
%6177:	br	 if.end72

BASIC BLOCK if.end72
%6178:	ret	 XXX

FUNCTION read_tree

BASIC BLOCK entry
%6179:	store	 XXX orig_len
%6180:	br	 for.cond

BASIC BLOCK for.cond
%6181:	phi	 XXX %6205
%6182:	icmp	 %6181 XXX
%6183:	br	 %6182 for.end for.body

BASIC BLOCK for.body
%6184:	load	 orig_len
%6185:	shl	 %6184 XXX
%6186:	load	 inptr
%6187:	load	 insize
%6188:	icmp	 %6186 %6187
%6189:	br	 %6188 cond.false cond.true

BASIC BLOCK cond.true
%6190:	load	 inptr
%6191:	add	 %6190 XXX
%6192:	store	 %6191 inptr
%6193:	zext	 %6190
%6194:	getelementptr	 inbuf XXX %6193
%6195:	load	 %6194
%6196:	zext	 %6195
%6197:	br	 cond.end

BASIC BLOCK cond.false
%6198:	call	 fill_inbuf
%6199:	br	 cond.end

BASIC BLOCK cond.end
%6200:	phi	 %6196 %6198
%6201:	sext	 %6200
%6202:	or	 %6185 %6201
%6203:	store	 %6202 orig_len
%6204:	br	 for.inc

BASIC BLOCK for.inc
%6205:	add	 %6181 XXX
%6206:	br	 for.cond

BASIC BLOCK for.end
%6207:	load	 inptr
%6208:	load	 insize
%6209:	icmp	 %6207 %6208
%6210:	br	 %6209 cond.false11 cond.true6

BASIC BLOCK cond.true6
%6211:	load	 inptr
%6212:	add	 %6211 XXX
%6213:	store	 %6212 inptr
%6214:	zext	 %6211
%6215:	getelementptr	 inbuf XXX %6214
%6216:	load	 %6215
%6217:	zext	 %6216
%6218:	br	 cond.end13

BASIC BLOCK cond.false11
%6219:	call	 fill_inbuf
%6220:	br	 cond.end13

BASIC BLOCK cond.end13
%6221:	phi	 %6217 %6219
%6222:	store	 %6221 max_len
%6223:	load	 max_len
%6224:	icmp	 %6223 XXX
%6225:	br	 %6224 if.end if.then

BASIC BLOCK if.then
%6226:	call	 XXX error
%6227:	br	 if.end

BASIC BLOCK if.end
%6228:	br	 for.cond17

BASIC BLOCK for.cond17
%6229:	phi	 XXX %6255
%6230:	phi	 XXX %6257
%6231:	load	 max_len
%6232:	icmp	 %6230 %6231
%6233:	br	 %6232 for.end38 for.body20

BASIC BLOCK for.body20
%6234:	load	 inptr
%6235:	load	 insize
%6236:	icmp	 %6234 %6235
%6237:	br	 %6236 cond.false28 cond.true23

BASIC BLOCK cond.true23
%6238:	load	 inptr
%6239:	add	 %6238 XXX
%6240:	store	 %6239 inptr
%6241:	zext	 %6238
%6242:	getelementptr	 inbuf XXX %6241
%6243:	load	 %6242
%6244:	zext	 %6243
%6245:	br	 cond.end30

BASIC BLOCK cond.false28
%6246:	call	 fill_inbuf
%6247:	br	 cond.end30

BASIC BLOCK cond.end30
%6248:	phi	 %6244 %6246
%6249:	sext	 %6230
%6250:	getelementptr	 leaves XXX %6249
%6251:	store	 %6248 %6250
%6252:	sext	 %6230
%6253:	getelementptr	 leaves XXX %6252
%6254:	load	 %6253
%6255:	add	 %6229 %6254
%6256:	br	 for.inc36

BASIC BLOCK for.inc36
%6257:	add	 %6230 XXX
%6258:	br	 for.cond17

BASIC BLOCK for.end38
%6259:	icmp	 %6229 XXX
%6260:	br	 %6259 if.end42 if.then41

BASIC BLOCK if.then41
%6261:	call	 XXX error
%6262:	br	 if.end42

BASIC BLOCK if.end42
%6263:	load	 max_len
%6264:	sext	 %6263
%6265:	getelementptr	 leaves XXX %6264
%6266:	load	 %6265
%6267:	add	 %6266 XXX
%6268:	store	 %6267 %6265
%6269:	br	 for.cond46

BASIC BLOCK for.cond46
%6270:	phi	 XXX %6283
%6271:	phi	 XXX %6310
%6272:	load	 max_len
%6273:	icmp	 %6271 %6272
%6274:	br	 %6273 for.end77 for.body49

BASIC BLOCK for.body49
%6275:	sext	 %6271
%6276:	getelementptr	 lit_base XXX %6275
%6277:	store	 %6270 %6276
%6278:	sext	 %6271
%6279:	getelementptr	 leaves XXX %6278
%6280:	load	 %6279
%6281:	br	 for.cond54

BASIC BLOCK for.cond54
%6282:	phi	 %6280 %6307
%6283:	phi	 %6270 %6302
%6284:	icmp	 %6282 XXX
%6285:	br	 %6284 for.end74 for.body57

BASIC BLOCK for.body57
%6286:	load	 inptr
%6287:	load	 insize
%6288:	icmp	 %6286 %6287
%6289:	br	 %6288 cond.false65 cond.true60

BASIC BLOCK cond.true60
%6290:	load	 inptr
%6291:	add	 %6290 XXX
%6292:	store	 %6291 inptr
%6293:	zext	 %6290
%6294:	getelementptr	 inbuf XXX %6293
%6295:	load	 %6294
%6296:	zext	 %6295
%6297:	br	 cond.end67

BASIC BLOCK cond.false65
%6298:	call	 fill_inbuf
%6299:	br	 cond.end67

BASIC BLOCK cond.end67
%6300:	phi	 %6296 %6298
%6301:	trunc	 %6300
%6302:	add	 %6283 XXX
%6303:	sext	 %6283
%6304:	getelementptr	 literal XXX %6303
%6305:	store	 %6301 %6304
%6306:	br	 for.inc73

BASIC BLOCK for.inc73
%6307:	add	 %6282 XXX
%6308:	br	 for.cond54

BASIC BLOCK for.end74
%6309:	br	 for.inc75

BASIC BLOCK for.inc75
%6310:	add	 %6271 XXX
%6311:	br	 for.cond46

BASIC BLOCK for.end77
%6312:	load	 max_len
%6313:	sext	 %6312
%6314:	getelementptr	 leaves XXX %6313
%6315:	load	 %6314
%6316:	add	 %6315 XXX
%6317:	store	 %6316 %6314
%6318:	ret	

FUNCTION un_build_tree

BASIC BLOCK entry
%6319:	load	 max_len
%6320:	br	 for.cond

BASIC BLOCK for.cond
%6321:	phi	 %6319 %6339
%6322:	phi	 XXX %6337
%6323:	icmp	 %6321 XXX
%6324:	br	 %6323 for.end for.body

BASIC BLOCK for.body
%6325:	ashr	 %6322 XXX
%6326:	sext	 %6321
%6327:	getelementptr	 parents XXX %6326
%6328:	store	 %6325 %6327
%6329:	sext	 %6321
%6330:	getelementptr	 lit_base XXX %6329
%6331:	load	 %6330
%6332:	sub	 %6331 %6325
%6333:	store	 %6332 %6330
%6334:	sext	 %6321
%6335:	getelementptr	 leaves XXX %6334
%6336:	load	 %6335
%6337:	add	 %6325 %6336
%6338:	br	 for.inc

BASIC BLOCK for.inc
%6339:	add	 %6321 XXX
%6340:	br	 for.cond

BASIC BLOCK for.end
%6341:	load	 max_len
%6342:	icmp	 %6341 XXX
%6343:	br	 %6342 cond.false cond.true

BASIC BLOCK cond.true
%6344:	load	 max_len
%6345:	br	 cond.end

BASIC BLOCK cond.false
%6346:	br	 cond.end

BASIC BLOCK cond.end
%6347:	phi	 %6344 XXX
%6348:	store	 %6347 peek_bits
%6349:	load	 peek_bits
%6350:	shl	 XXX %6349
%6351:	sext	 %6350
%6352:	getelementptr	 prefix_len XXX %6351
%6353:	br	 for.cond8

BASIC BLOCK for.cond8
%6354:	phi	 %6352 %6367
%6355:	phi	 XXX %6376
%6356:	load	 peek_bits
%6357:	icmp	 %6355 %6356
%6358:	br	 %6357 for.end17 for.body10

BASIC BLOCK for.body10
%6359:	sext	 %6355
%6360:	getelementptr	 leaves XXX %6359
%6361:	load	 %6360
%6362:	load	 peek_bits
%6363:	sub	 %6362 %6355
%6364:	shl	 %6361 %6363
%6365:	br	 while.cond

BASIC BLOCK while.cond
%6366:	phi	 %6364 %6368
%6367:	phi	 %6354 %6372
%6368:	add	 %6366 XXX
%6369:	icmp	 %6366 XXX
%6370:	br	 %6369 while.end while.body

BASIC BLOCK while.body
%6371:	trunc	 %6355
%6372:	getelementptr	 %6367 XXX
%6373:	store	 %6371 %6372
%6374:	br	 while.cond

BASIC BLOCK while.end
%6375:	br	 for.inc16

BASIC BLOCK for.inc16
%6376:	add	 %6355 XXX
%6377:	br	 for.cond8

BASIC BLOCK for.end17
%6378:	br	 while.cond18

BASIC BLOCK while.cond18
%6379:	phi	 %6354 %6382
%6380:	icmp	 %6379 XXX
%6381:	br	 %6380 while.end23 while.body21

BASIC BLOCK while.body21
%6382:	getelementptr	 %6379 XXX
%6383:	store	 XXX %6382
%6384:	br	 while.cond18

BASIC BLOCK while.end23
%6385:	ret	

FUNCTION check_zipfile

BASIC BLOCK entry
%6386:	load	 inptr
%6387:	zext	 %6386
%6388:	getelementptr	 XXX %6387
%6389:	store	 in ifd
%6390:	getelementptr	 %6388 XXX
%6391:	getelementptr	 %6390 XXX
%6392:	load	 %6391
%6393:	zext	 %6392
%6394:	zext	 %6393
%6395:	getelementptr	 %6388 XXX
%6396:	getelementptr	 %6395 XXX
%6397:	load	 %6396
%6398:	zext	 %6397
%6399:	zext	 %6398
%6400:	shl	 %6399 XXX
%6401:	or	 %6394 %6400
%6402:	add	 XXX %6401
%6403:	getelementptr	 %6388 XXX
%6404:	getelementptr	 %6403 XXX
%6405:	load	 %6404
%6406:	zext	 %6405
%6407:	zext	 %6406
%6408:	getelementptr	 %6388 XXX
%6409:	getelementptr	 %6408 XXX
%6410:	load	 %6409
%6411:	zext	 %6410
%6412:	zext	 %6411
%6413:	shl	 %6412 XXX
%6414:	or	 %6407 %6413
%6415:	add	 %6402 %6414
%6416:	load	 inptr
%6417:	add	 %6416 %6415
%6418:	store	 %6417 inptr
%6419:	load	 inptr
%6420:	load	 insize
%6421:	icmp	 %6419 %6420
%6422:	br	 %6421 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%6423:	getelementptr	 %6388 XXX
%6424:	load	 %6423
%6425:	zext	 %6424
%6426:	zext	 %6425
%6427:	getelementptr	 %6388 XXX
%6428:	load	 %6427
%6429:	zext	 %6428
%6430:	zext	 %6429
%6431:	shl	 %6430 XXX
%6432:	or	 %6426 %6431
%6433:	sext	 %6432
%6434:	getelementptr	 %6388 XXX
%6435:	getelementptr	 %6434 XXX
%6436:	load	 %6435
%6437:	zext	 %6436
%6438:	zext	 %6437
%6439:	getelementptr	 %6388 XXX
%6440:	getelementptr	 %6439 XXX
%6441:	load	 %6440
%6442:	zext	 %6441
%6443:	zext	 %6442
%6444:	shl	 %6443 XXX
%6445:	or	 %6438 %6444
%6446:	sext	 %6445
%6447:	shl	 %6446 XXX
%6448:	or	 %6433 %6447
%6449:	icmp	 %6448 XXX
%6450:	br	 %6449 if.end if.then

BASIC BLOCK if.then
%6451:	load	 stderr
%6452:	load	 progname
%6453:	call	 %6451 XXX %6452 XXX fprintf
%6454:	store	 XXX exit_code
%6455:	br	 return

BASIC BLOCK if.end
%6456:	getelementptr	 %6388 XXX
%6457:	load	 %6456
%6458:	zext	 %6457
%6459:	store	 %6458 method
%6460:	load	 method
%6461:	icmp	 %6460 XXX
%6462:	br	 %6461 if.end52 land.lhs.true

BASIC BLOCK land.lhs.true
%6463:	load	 method
%6464:	icmp	 %6463 XXX
%6465:	br	 %6464 if.end52 if.then50

BASIC BLOCK if.then50
%6466:	load	 stderr
%6467:	load	 progname
%6468:	call	 %6466 XXX %6467 XXX fprintf
%6469:	store	 XXX exit_code
%6470:	br	 return

BASIC BLOCK if.end52
%6471:	getelementptr	 %6388 XXX
%6472:	load	 %6471
%6473:	zext	 %6472
%6474:	and	 %6473 XXX
%6475:	store	 %6474 decrypt
%6476:	icmp	 %6474 XXX
%6477:	br	 %6476 if.end59 if.then57

BASIC BLOCK if.then57
%6478:	load	 stderr
%6479:	load	 progname
%6480:	call	 %6478 XXX %6479 XXX fprintf
%6481:	store	 XXX exit_code
%6482:	br	 return

BASIC BLOCK if.end59
%6483:	getelementptr	 %6388 XXX
%6484:	load	 %6483
%6485:	zext	 %6484
%6486:	and	 %6485 XXX
%6487:	icmp	 %6486 XXX
%6488:	zext	 %6487
%6489:	store	 %6488 ext_header
%6490:	store	 XXX pkzip
%6491:	br	 return

BASIC BLOCK return
%6492:	phi	 XXX XXX XXX XXX
%6493:	ret	 %6492

FUNCTION unzip

BASIC BLOCK entry
%6494:	alloca	 XXX
%6495:	store	 in ifd
%6496:	store	 out ofd
%6497:	call	 XXX XXX updcrc
%6498:	load	 pkzip
%6499:	icmp	 %6498 XXX
%6500:	br	 %6499 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%6501:	load	 ext_header
%6502:	icmp	 %6501 XXX
%6503:	br	 %6502 if.then if.end

BASIC BLOCK if.then
%6504:	load	 XXX
%6505:	zext	 %6504
%6506:	zext	 %6505
%6507:	load	 XXX
%6508:	zext	 %6507
%6509:	zext	 %6508
%6510:	shl	 %6509 XXX
%6511:	or	 %6506 %6510
%6512:	sext	 %6511
%6513:	load	 XXX
%6514:	zext	 %6513
%6515:	zext	 %6514
%6516:	load	 XXX
%6517:	zext	 %6516
%6518:	zext	 %6517
%6519:	shl	 %6518 XXX
%6520:	or	 %6515 %6519
%6521:	sext	 %6520
%6522:	shl	 %6521 XXX
%6523:	or	 %6512 %6522
%6524:	load	 XXX
%6525:	zext	 %6524
%6526:	zext	 %6525
%6527:	load	 XXX
%6528:	zext	 %6527
%6529:	zext	 %6528
%6530:	shl	 %6529 XXX
%6531:	or	 %6526 %6530
%6532:	sext	 %6531
%6533:	load	 XXX
%6534:	zext	 %6533
%6535:	zext	 %6534
%6536:	load	 XXX
%6537:	zext	 %6536
%6538:	zext	 %6537
%6539:	shl	 %6538 XXX
%6540:	or	 %6535 %6539
%6541:	sext	 %6540
%6542:	shl	 %6541 XXX
%6543:	or	 %6532 %6542
%6544:	br	 if.end

BASIC BLOCK if.end
%6545:	phi	 XXX %6543 XXX
%6546:	phi	 XXX %6523 XXX
%6547:	load	 method
%6548:	icmp	 %6547 XXX
%6549:	br	 %6548 if.else42 if.then32

BASIC BLOCK if.then32
%6550:	call	 inflate
%6551:	icmp	 %6550 XXX
%6552:	br	 %6551 if.else if.then36

BASIC BLOCK if.then36
%6553:	call	 XXX error
%6554:	br	 if.end41

BASIC BLOCK if.else
%6555:	icmp	 %6550 XXX
%6556:	br	 %6555 if.end40 if.then39

BASIC BLOCK if.then39
%6557:	call	 XXX error
%6558:	br	 if.end40

BASIC BLOCK if.end40
%6559:	br	 if.end41

BASIC BLOCK if.end41
%6560:	br	 if.end120

BASIC BLOCK if.else42
%6561:	load	 pkzip
%6562:	icmp	 %6561 XXX
%6563:	br	 %6562 if.else118 land.lhs.true44

BASIC BLOCK land.lhs.true44
%6564:	load	 method
%6565:	icmp	 %6564 XXX
%6566:	br	 %6565 if.else118 if.then47

BASIC BLOCK if.then47
%6567:	load	 XXX
%6568:	zext	 %6567
%6569:	zext	 %6568
%6570:	load	 XXX
%6571:	zext	 %6570
%6572:	zext	 %6571
%6573:	shl	 %6572 XXX
%6574:	or	 %6569 %6573
%6575:	sext	 %6574
%6576:	load	 XXX
%6577:	zext	 %6576
%6578:	zext	 %6577
%6579:	load	 XXX
%6580:	zext	 %6579
%6581:	zext	 %6580
%6582:	shl	 %6581 XXX
%6583:	or	 %6578 %6582
%6584:	sext	 %6583
%6585:	shl	 %6584 XXX
%6586:	or	 %6575 %6585
%6587:	load	 XXX
%6588:	zext	 %6587
%6589:	zext	 %6588
%6590:	load	 XXX
%6591:	zext	 %6590
%6592:	zext	 %6591
%6593:	shl	 %6592 XXX
%6594:	or	 %6589 %6593
%6595:	sext	 %6594
%6596:	load	 XXX
%6597:	zext	 %6596
%6598:	zext	 %6597
%6599:	load	 XXX
%6600:	zext	 %6599
%6601:	zext	 %6600
%6602:	shl	 %6601 XXX
%6603:	or	 %6598 %6602
%6604:	sext	 %6603
%6605:	shl	 %6604 XXX
%6606:	or	 %6595 %6605
%6607:	load	 decrypt
%6608:	icmp	 %6607 XXX
%6609:	select	 %6608 XXX XXX
%6610:	sext	 %6609
%6611:	sub	 %6606 %6610
%6612:	icmp	 %6586 %6611
%6613:	br	 %6612 if.end103 if.then85

BASIC BLOCK if.then85
%6614:	load	 stderr
%6615:	load	 XXX
%6616:	zext	 %6615
%6617:	zext	 %6616
%6618:	load	 XXX
%6619:	zext	 %6618
%6620:	zext	 %6619
%6621:	shl	 %6620 XXX
%6622:	or	 %6617 %6621
%6623:	sext	 %6622
%6624:	load	 XXX
%6625:	zext	 %6624
%6626:	zext	 %6625
%6627:	load	 XXX
%6628:	zext	 %6627
%6629:	zext	 %6628
%6630:	shl	 %6629 XXX
%6631:	or	 %6626 %6630
%6632:	sext	 %6631
%6633:	shl	 %6632 XXX
%6634:	or	 %6623 %6633
%6635:	call	 %6614 XXX %6586 %6634 fprintf
%6636:	call	 XXX error
%6637:	br	 if.end103

BASIC BLOCK if.end103
%6638:	br	 while.cond

BASIC BLOCK while.cond
%6639:	phi	 %6586 %6640
%6640:	add	 %6639 XXX
%6641:	icmp	 %6639 XXX
%6642:	br	 %6641 while.end while.body

BASIC BLOCK while.body
%6643:	load	 inptr
%6644:	load	 insize
%6645:	icmp	 %6643 %6644
%6646:	br	 %6645 cond.false cond.true

BASIC BLOCK cond.true
%6647:	load	 inptr
%6648:	add	 %6647 XXX
%6649:	store	 %6648 inptr
%6650:	zext	 %6647
%6651:	getelementptr	 inbuf XXX %6650
%6652:	load	 %6651
%6653:	zext	 %6652
%6654:	br	 cond.end

BASIC BLOCK cond.false
%6655:	call	 fill_inbuf
%6656:	br	 cond.end

BASIC BLOCK cond.end
%6657:	phi	 %6653 %6655
%6658:	trunc	 %6657
%6659:	load	 outcnt
%6660:	add	 %6659 XXX
%6661:	store	 %6660 outcnt
%6662:	zext	 %6659
%6663:	getelementptr	 window XXX %6662
%6664:	store	 %6658 %6663
%6665:	load	 outcnt
%6666:	icmp	 %6665 XXX
%6667:	br	 %6666 if.end117 if.then116

BASIC BLOCK if.then116
%6668:	call	 flush_window
%6669:	br	 if.end117

BASIC BLOCK if.end117
%6670:	br	 while.cond

BASIC BLOCK while.end
%6671:	call	 flush_window
%6672:	br	 if.end119

BASIC BLOCK if.else118
%6673:	call	 XXX error
%6674:	br	 if.end119

BASIC BLOCK if.end119
%6675:	br	 if.end120

BASIC BLOCK if.end120
%6676:	load	 pkzip
%6677:	icmp	 %6676 XXX
%6678:	br	 %6677 if.then122 if.else192

BASIC BLOCK if.then122
%6679:	br	 for.cond

BASIC BLOCK for.cond
%6680:	phi	 XXX %6703
%6681:	icmp	 %6680 XXX
%6682:	br	 %6681 for.end for.body

BASIC BLOCK for.body
%6683:	load	 inptr
%6684:	load	 insize
%6685:	icmp	 %6683 %6684
%6686:	br	 %6685 cond.false132 cond.true127

BASIC BLOCK cond.true127
%6687:	load	 inptr
%6688:	add	 %6687 XXX
%6689:	store	 %6688 inptr
%6690:	zext	 %6687
%6691:	getelementptr	 inbuf XXX %6690
%6692:	load	 %6691
%6693:	zext	 %6692
%6694:	br	 cond.end134

BASIC BLOCK cond.false132
%6695:	call	 fill_inbuf
%6696:	br	 cond.end134

BASIC BLOCK cond.end134
%6697:	phi	 %6693 %6695
%6698:	trunc	 %6697
%6699:	sext	 %6680
%6700:	getelementptr	 %6494 XXX %6699
%6701:	store	 %6698 %6700
%6702:	br	 for.inc

BASIC BLOCK for.inc
%6703:	add	 %6680 XXX
%6704:	br	 for.cond

BASIC BLOCK for.end
%6705:	getelementptr	 %6494 XXX XXX
%6706:	load	 %6705
%6707:	zext	 %6706
%6708:	zext	 %6707
%6709:	getelementptr	 %6494 XXX XXX
%6710:	load	 %6709
%6711:	zext	 %6710
%6712:	zext	 %6711
%6713:	shl	 %6712 XXX
%6714:	or	 %6708 %6713
%6715:	sext	 %6714
%6716:	getelementptr	 %6494 XXX XXX
%6717:	getelementptr	 %6716 XXX
%6718:	getelementptr	 %6717 XXX
%6719:	load	 %6718
%6720:	zext	 %6719
%6721:	zext	 %6720
%6722:	getelementptr	 %6494 XXX XXX
%6723:	getelementptr	 %6722 XXX
%6724:	getelementptr	 %6723 XXX
%6725:	load	 %6724
%6726:	zext	 %6725
%6727:	zext	 %6726
%6728:	shl	 %6727 XXX
%6729:	or	 %6721 %6728
%6730:	sext	 %6729
%6731:	shl	 %6730 XXX
%6732:	or	 %6715 %6731
%6733:	getelementptr	 %6494 XXX XXX
%6734:	getelementptr	 %6733 XXX
%6735:	getelementptr	 %6734 XXX
%6736:	load	 %6735
%6737:	zext	 %6736
%6738:	zext	 %6737
%6739:	getelementptr	 %6494 XXX XXX
%6740:	getelementptr	 %6739 XXX
%6741:	getelementptr	 %6740 XXX
%6742:	load	 %6741
%6743:	zext	 %6742
%6744:	zext	 %6743
%6745:	shl	 %6744 XXX
%6746:	or	 %6738 %6745
%6747:	sext	 %6746
%6748:	getelementptr	 %6494 XXX XXX
%6749:	getelementptr	 %6748 XXX
%6750:	getelementptr	 %6749 XXX
%6751:	getelementptr	 %6750 XXX
%6752:	load	 %6751
%6753:	zext	 %6752
%6754:	zext	 %6753
%6755:	getelementptr	 %6494 XXX XXX
%6756:	getelementptr	 %6755 XXX
%6757:	getelementptr	 %6756 XXX
%6758:	getelementptr	 %6757 XXX
%6759:	load	 %6758
%6760:	zext	 %6759
%6761:	zext	 %6760
%6762:	shl	 %6761 XXX
%6763:	or	 %6754 %6762
%6764:	sext	 %6763
%6765:	shl	 %6764 XXX
%6766:	or	 %6747 %6765
%6767:	br	 if.end277

BASIC BLOCK if.else192
%6768:	load	 ext_header
%6769:	icmp	 %6768 XXX
%6770:	br	 %6769 if.end276 if.then194

BASIC BLOCK if.then194
%6771:	br	 for.cond195

BASIC BLOCK for.cond195
%6772:	phi	 XXX %6795
%6773:	icmp	 %6772 XXX
%6774:	br	 %6773 for.end215 for.body198

BASIC BLOCK for.body198
%6775:	load	 inptr
%6776:	load	 insize
%6777:	icmp	 %6775 %6776
%6778:	br	 %6777 cond.false206 cond.true201

BASIC BLOCK cond.true201
%6779:	load	 inptr
%6780:	add	 %6779 XXX
%6781:	store	 %6780 inptr
%6782:	zext	 %6779
%6783:	getelementptr	 inbuf XXX %6782
%6784:	load	 %6783
%6785:	zext	 %6784
%6786:	br	 cond.end208

BASIC BLOCK cond.false206
%6787:	call	 fill_inbuf
%6788:	br	 cond.end208

BASIC BLOCK cond.end208
%6789:	phi	 %6785 %6787
%6790:	trunc	 %6789
%6791:	sext	 %6772
%6792:	getelementptr	 %6494 XXX %6791
%6793:	store	 %6790 %6792
%6794:	br	 for.inc213

BASIC BLOCK for.inc213
%6795:	add	 %6772 XXX
%6796:	br	 for.cond195

BASIC BLOCK for.end215
%6797:	getelementptr	 %6494 XXX XXX
%6798:	getelementptr	 %6797 XXX
%6799:	getelementptr	 %6798 XXX
%6800:	load	 %6799
%6801:	zext	 %6800
%6802:	zext	 %6801
%6803:	getelementptr	 %6494 XXX XXX
%6804:	getelementptr	 %6803 XXX
%6805:	getelementptr	 %6804 XXX
%6806:	load	 %6805
%6807:	zext	 %6806
%6808:	zext	 %6807
%6809:	shl	 %6808 XXX
%6810:	or	 %6802 %6809
%6811:	sext	 %6810
%6812:	getelementptr	 %6494 XXX XXX
%6813:	getelementptr	 %6812 XXX
%6814:	getelementptr	 %6813 XXX
%6815:	getelementptr	 %6814 XXX
%6816:	load	 %6815
%6817:	zext	 %6816
%6818:	zext	 %6817
%6819:	getelementptr	 %6494 XXX XXX
%6820:	getelementptr	 %6819 XXX
%6821:	getelementptr	 %6820 XXX
%6822:	getelementptr	 %6821 XXX
%6823:	load	 %6822
%6824:	zext	 %6823
%6825:	zext	 %6824
%6826:	shl	 %6825 XXX
%6827:	or	 %6818 %6826
%6828:	sext	 %6827
%6829:	shl	 %6828 XXX
%6830:	or	 %6811 %6829
%6831:	getelementptr	 %6494 XXX XXX
%6832:	getelementptr	 %6831 XXX
%6833:	getelementptr	 %6832 XXX
%6834:	load	 %6833
%6835:	zext	 %6834
%6836:	zext	 %6835
%6837:	getelementptr	 %6494 XXX XXX
%6838:	getelementptr	 %6837 XXX
%6839:	getelementptr	 %6838 XXX
%6840:	load	 %6839
%6841:	zext	 %6840
%6842:	zext	 %6841
%6843:	shl	 %6842 XXX
%6844:	or	 %6836 %6843
%6845:	sext	 %6844
%6846:	getelementptr	 %6494 XXX XXX
%6847:	getelementptr	 %6846 XXX
%6848:	getelementptr	 %6847 XXX
%6849:	getelementptr	 %6848 XXX
%6850:	load	 %6849
%6851:	zext	 %6850
%6852:	zext	 %6851
%6853:	getelementptr	 %6494 XXX XXX
%6854:	getelementptr	 %6853 XXX
%6855:	getelementptr	 %6854 XXX
%6856:	getelementptr	 %6855 XXX
%6857:	load	 %6856
%6858:	zext	 %6857
%6859:	zext	 %6858
%6860:	shl	 %6859 XXX
%6861:	or	 %6852 %6860
%6862:	sext	 %6861
%6863:	shl	 %6862 XXX
%6864:	or	 %6845 %6863
%6865:	br	 if.end276

BASIC BLOCK if.end276
%6866:	phi	 %6864 %6545
%6867:	phi	 %6830 %6546
%6868:	br	 if.end277

BASIC BLOCK if.end277
%6869:	phi	 %6866 %6766
%6870:	phi	 %6867 %6732
%6871:	call	 XXX XXX updcrc
%6872:	icmp	 %6870 %6871
%6873:	br	 %6872 if.end282 if.then281

BASIC BLOCK if.then281
%6874:	call	 XXX error
%6875:	br	 if.end282

BASIC BLOCK if.end282
%6876:	load	 bytes_out
%6877:	icmp	 %6869 %6876
%6878:	br	 %6877 if.end286 if.then285

BASIC BLOCK if.then285
%6879:	call	 XXX error
%6880:	br	 if.end286

BASIC BLOCK if.end286
%6881:	load	 pkzip
%6882:	icmp	 %6881 XXX
%6883:	br	 %6882 if.end337 land.lhs.true288

BASIC BLOCK land.lhs.true288
%6884:	load	 inptr
%6885:	add	 %6884 XXX
%6886:	load	 insize
%6887:	icmp	 %6885 %6886
%6888:	br	 %6887 if.end337 land.lhs.true291

BASIC BLOCK land.lhs.true291
%6889:	load	 inptr
%6890:	zext	 %6889
%6891:	getelementptr	 XXX %6890
%6892:	getelementptr	 %6891 XXX
%6893:	load	 %6892
%6894:	zext	 %6893
%6895:	zext	 %6894
%6896:	load	 inptr
%6897:	zext	 %6896
%6898:	getelementptr	 XXX %6897
%6899:	getelementptr	 %6898 XXX
%6900:	load	 %6899
%6901:	zext	 %6900
%6902:	zext	 %6901
%6903:	shl	 %6902 XXX
%6904:	or	 %6895 %6903
%6905:	sext	 %6904
%6906:	load	 inptr
%6907:	zext	 %6906
%6908:	getelementptr	 XXX %6907
%6909:	getelementptr	 %6908 XXX
%6910:	getelementptr	 %6909 XXX
%6911:	load	 %6910
%6912:	zext	 %6911
%6913:	zext	 %6912
%6914:	load	 inptr
%6915:	zext	 %6914
%6916:	getelementptr	 XXX %6915
%6917:	getelementptr	 %6916 XXX
%6918:	getelementptr	 %6917 XXX
%6919:	load	 %6918
%6920:	zext	 %6919
%6921:	zext	 %6920
%6922:	shl	 %6921 XXX
%6923:	or	 %6913 %6922
%6924:	sext	 %6923
%6925:	shl	 %6924 XXX
%6926:	or	 %6905 %6925
%6927:	icmp	 %6926 XXX
%6928:	br	 %6927 if.end337 if.then323

BASIC BLOCK if.then323
%6929:	load	 to_stdout
%6930:	icmp	 %6929 XXX
%6931:	br	 %6930 if.else334 if.then325

BASIC BLOCK if.then325
%6932:	load	 quiet
%6933:	icmp	 %6932 XXX
%6934:	br	 %6933 if.then327 if.end329

BASIC BLOCK if.then327
%6935:	load	 stderr
%6936:	load	 progname
%6937:	call	 %6935 XXX %6936 XXX fprintf
%6938:	br	 if.end329

BASIC BLOCK if.end329
%6939:	load	 exit_code
%6940:	icmp	 %6939 XXX
%6941:	br	 %6940 if.end333 if.then332

BASIC BLOCK if.then332
%6942:	store	 XXX exit_code
%6943:	br	 if.end333

BASIC BLOCK if.end333
%6944:	br	 if.end336

BASIC BLOCK if.else334
%6945:	load	 stderr
%6946:	load	 progname
%6947:	call	 %6945 XXX %6946 XXX fprintf
%6948:	store	 XXX exit_code
%6949:	store	 XXX pkzip
%6950:	store	 XXX ext_header
%6951:	br	 return

BASIC BLOCK if.end336
%6952:	br	 if.end337

BASIC BLOCK if.end337
%6953:	store	 XXX pkzip
%6954:	store	 XXX ext_header
%6955:	br	 return

BASIC BLOCK return
%6956:	phi	 XXX XXX
%6957:	ret	 %6956

FUNCTION updcrc

BASIC BLOCK entry
%6958:	icmp	 s XXX
%6959:	br	 %6958 if.else if.then

BASIC BLOCK if.then
%6960:	br	 if.end5

BASIC BLOCK if.else
%6961:	load	 updcrc.crc
%6962:	icmp	 n XXX
%6963:	br	 %6962 if.end if.then1

BASIC BLOCK if.then1
%6964:	br	 do.body

BASIC BLOCK do.body
%6965:	phi	 %6961 %6978
%6966:	phi	 n %6980
%6967:	phi	 s %6969
%6968:	trunc	 %6965
%6969:	getelementptr	 %6967 XXX
%6970:	load	 %6967
%6971:	zext	 %6970
%6972:	xor	 %6968 %6971
%6973:	and	 %6972 XXX
%6974:	sext	 %6973
%6975:	getelementptr	 XXX XXX %6974
%6976:	load	 %6975
%6977:	lshr	 %6965 XXX
%6978:	xor	 %6976 %6977
%6979:	br	 do.cond

BASIC BLOCK do.cond
%6980:	add	 %6966 XXX
%6981:	icmp	 %6980 XXX
%6982:	br	 %6981 do.end do.body

BASIC BLOCK do.end
%6983:	br	 if.end

BASIC BLOCK if.end
%6984:	phi	 %6978 %6961
%6985:	br	 if.end5

BASIC BLOCK if.end5
%6986:	phi	 XXX %6984
%6987:	store	 %6986 updcrc.crc
%6988:	xor	 %6986 XXX
%6989:	ret	 %6988

FUNCTION clear_bufs

BASIC BLOCK entry
%6990:	store	 XXX outcnt
%6991:	store	 XXX inptr
%6992:	store	 XXX insize
%6993:	store	 XXX bytes_out
%6994:	store	 XXX bytes_in
%6995:	ret	

FUNCTION write_error

BASIC BLOCK entry
%6996:	load	 stderr
%6997:	load	 progname
%6998:	call	 %6996 XXX %6997 fprintf
%6999:	call	 XXX perror
%7000:	call	 abort_gzip
%7001:	ret	

FUNCTION strlwr

BASIC BLOCK entry
%7002:	br	 for.cond

BASIC BLOCK for.cond
%7003:	phi	 s %7030
%7004:	load	 %7003
%7005:	icmp	 %7004 XXX
%7006:	br	 %7005 for.end for.body

BASIC BLOCK for.body
%7007:	load	 %7003
%7008:	sext	 %7007
%7009:	sext	 %7008
%7010:	call	 __ctype_b_loc
%7011:	load	 %7010
%7012:	getelementptr	 %7011 %7009
%7013:	load	 %7012
%7014:	zext	 %7013
%7015:	and	 %7014 XXX
%7016:	icmp	 %7015 XXX
%7017:	br	 %7016 cond.false cond.true

BASIC BLOCK cond.true
%7018:	load	 %7003
%7019:	sext	 %7018
%7020:	sub	 %7019 XXX
%7021:	add	 %7020 XXX
%7022:	br	 cond.end

BASIC BLOCK cond.false
%7023:	load	 %7003
%7024:	sext	 %7023
%7025:	br	 cond.end

BASIC BLOCK cond.end
%7026:	phi	 %7021 %7024
%7027:	trunc	 %7026
%7028:	store	 %7027 %7003
%7029:	br	 for.inc

BASIC BLOCK for.inc
%7030:	getelementptr	 %7003 XXX
%7031:	br	 for.cond

BASIC BLOCK for.end
%7032:	ret	 s

FUNCTION xmalloc

BASIC BLOCK entry
%7033:	zext	 size
%7034:	call	 %7033 malloc
%7035:	icmp	 %7034 XXX
%7036:	br	 %7035 if.end if.then

BASIC BLOCK if.then
%7037:	call	 XXX error
%7038:	br	 if.end

BASIC BLOCK if.end
%7039:	ret	 %7034

FUNCTION warn

BASIC BLOCK entry
%7040:	load	 quiet
%7041:	icmp	 %7040 XXX
%7042:	br	 %7041 if.then if.end

BASIC BLOCK if.then
%7043:	load	 stderr
%7044:	load	 progname
%7045:	call	 %7043 XXX %7044 XXX a b fprintf
%7046:	br	 if.end

BASIC BLOCK if.end
%7047:	load	 exit_code
%7048:	icmp	 %7047 XXX
%7049:	br	 %7048 if.end2 if.then1

BASIC BLOCK if.then1
%7050:	store	 XXX exit_code
%7051:	br	 if.end2

BASIC BLOCK if.end2
%7052:	ret	

FUNCTION display_ratio

BASIC BLOCK entry
%7053:	icmp	 den XXX
%7054:	br	 %7053 if.else if.then

BASIC BLOCK if.then
%7055:	br	 if.end6

BASIC BLOCK if.else
%7056:	icmp	 den XXX
%7057:	br	 %7056 if.else3 if.then2

BASIC BLOCK if.then2
%7058:	mul	 XXX num
%7059:	sdiv	 %7058 den
%7060:	br	 if.end

BASIC BLOCK if.else3
%7061:	sdiv	 den XXX
%7062:	sdiv	 num %7061
%7063:	br	 if.end

BASIC BLOCK if.end
%7064:	phi	 %7059 %7062
%7065:	br	 if.end6

BASIC BLOCK if.end6
%7066:	phi	 XXX %7064
%7067:	icmp	 %7066 XXX
%7068:	br	 %7067 if.end9 if.then8

BASIC BLOCK if.then8
%7069:	load	 stderr
%7070:	call	 XXX %7069 _IO_putc
%7071:	sub	 XXX %7066
%7072:	br	 if.end9

BASIC BLOCK if.end9
%7073:	phi	 %7071 %7066
%7074:	load	 stderr
%7075:	sdiv	 %7073 XXX
%7076:	srem	 %7073 XXX
%7077:	call	 %7074 XXX %7075 %7076 fprintf
%7078:	ret	

FUNCTION send_tree

BASIC BLOCK entry
%7079:	getelementptr	 tree XXX
%7080:	getelementptr	 %7079 XXX XXX
%7081:	bitcast	 %7080
%7082:	load	 %7081
%7083:	zext	 %7082
%7084:	icmp	 %7083 XXX
%7085:	br	 %7084 if.end if.then

BASIC BLOCK if.then
%7086:	br	 if.end

BASIC BLOCK if.end
%7087:	phi	 XXX XXX
%7088:	phi	 XXX XXX
%7089:	br	 for.cond

BASIC BLOCK for.cond
%7090:	phi	 %7083 %7104
%7091:	phi	 XXX %7195
%7092:	phi	 XXX %7196
%7093:	phi	 XXX %7199
%7094:	phi	 %7087 %7197
%7095:	phi	 %7088 %7198
%7096:	icmp	 %7093 max_code
%7097:	br	 %7096 for.end for.body

BASIC BLOCK for.body
%7098:	add	 %7093 XXX
%7099:	sext	 %7098
%7100:	getelementptr	 tree %7099
%7101:	getelementptr	 %7100 XXX XXX
%7102:	bitcast	 %7101
%7103:	load	 %7102
%7104:	zext	 %7103
%7105:	add	 %7091 XXX
%7106:	icmp	 %7105 %7094
%7107:	br	 %7106 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%7108:	icmp	 %7090 %7104
%7109:	br	 %7108 if.else if.then12

BASIC BLOCK if.then12
%7110:	br	 for.inc

BASIC BLOCK if.else
%7111:	icmp	 %7105 %7095
%7112:	br	 %7111 if.else26 if.then15

BASIC BLOCK if.then15
%7113:	br	 do.body

BASIC BLOCK do.body
%7114:	phi	 %7105 %7129
%7115:	sext	 %7090
%7116:	getelementptr	 bl_tree XXX %7115
%7117:	getelementptr	 %7116 XXX XXX
%7118:	bitcast	 %7117
%7119:	load	 %7118
%7120:	zext	 %7119
%7121:	sext	 %7090
%7122:	getelementptr	 bl_tree XXX %7121
%7123:	getelementptr	 %7122 XXX XXX
%7124:	bitcast	 %7123
%7125:	load	 %7124
%7126:	zext	 %7125
%7127:	call	 %7120 %7126 send_bits
%7128:	br	 do.cond

BASIC BLOCK do.cond
%7129:	add	 %7114 XXX
%7130:	icmp	 %7129 XXX
%7131:	br	 %7130 do.end do.body

BASIC BLOCK do.end
%7132:	br	 if.end60

BASIC BLOCK if.else26
%7133:	icmp	 %7090 XXX
%7134:	br	 %7133 if.else47 if.then29

BASIC BLOCK if.then29
%7135:	icmp	 %7090 %7092
%7136:	br	 %7135 if.end44 if.then32

BASIC BLOCK if.then32
%7137:	sext	 %7090
%7138:	getelementptr	 bl_tree XXX %7137
%7139:	getelementptr	 %7138 XXX XXX
%7140:	bitcast	 %7139
%7141:	load	 %7140
%7142:	zext	 %7141
%7143:	sext	 %7090
%7144:	getelementptr	 bl_tree XXX %7143
%7145:	getelementptr	 %7144 XXX XXX
%7146:	bitcast	 %7145
%7147:	load	 %7146
%7148:	zext	 %7147
%7149:	call	 %7142 %7148 send_bits
%7150:	add	 %7105 XXX
%7151:	br	 if.end44

BASIC BLOCK if.end44
%7152:	phi	 %7150 %7105
%7153:	load	 XXX
%7154:	zext	 %7153
%7155:	load	 XXX
%7156:	zext	 %7155
%7157:	call	 %7154 %7156 send_bits
%7158:	sub	 %7152 XXX
%7159:	call	 %7158 XXX send_bits
%7160:	br	 if.end59

BASIC BLOCK if.else47
%7161:	icmp	 %7105 XXX
%7162:	br	 %7161 if.else54 if.then50

BASIC BLOCK if.then50
%7163:	load	 XXX
%7164:	zext	 %7163
%7165:	load	 XXX
%7166:	zext	 %7165
%7167:	call	 %7164 %7166 send_bits
%7168:	sub	 %7105 XXX
%7169:	call	 %7168 XXX send_bits
%7170:	br	 if.end58

BASIC BLOCK if.else54
%7171:	load	 XXX
%7172:	zext	 %7171
%7173:	load	 XXX
%7174:	zext	 %7173
%7175:	call	 %7172 %7174 send_bits
%7176:	sub	 %7105 XXX
%7177:	call	 %7176 XXX send_bits
%7178:	br	 if.end58

BASIC BLOCK if.end58
%7179:	br	 if.end59

BASIC BLOCK if.end59
%7180:	br	 if.end60

BASIC BLOCK if.end60
%7181:	br	 if.end61

BASIC BLOCK if.end61
%7182:	icmp	 %7104 XXX
%7183:	br	 %7182 if.else65 if.then64

BASIC BLOCK if.then64
%7184:	br	 if.end71

BASIC BLOCK if.else65
%7185:	icmp	 %7090 %7104
%7186:	br	 %7185 if.else69 if.then68

BASIC BLOCK if.then68
%7187:	br	 if.end70

BASIC BLOCK if.else69
%7188:	br	 if.end70

BASIC BLOCK if.end70
%7189:	phi	 XXX XXX
%7190:	phi	 XXX XXX
%7191:	br	 if.end71

BASIC BLOCK if.end71
%7192:	phi	 XXX %7189
%7193:	phi	 XXX %7190
%7194:	br	 for.inc

BASIC BLOCK for.inc
%7195:	phi	 %7105 XXX
%7196:	phi	 %7092 %7090
%7197:	phi	 %7094 %7192
%7198:	phi	 %7095 %7193
%7199:	add	 %7093 XXX
%7200:	br	 for.cond

BASIC BLOCK for.end
%7201:	ret	

FUNCTION scan_tree

BASIC BLOCK entry
%7202:	getelementptr	 tree XXX
%7203:	getelementptr	 %7202 XXX XXX
%7204:	bitcast	 %7203
%7205:	load	 %7204
%7206:	zext	 %7205
%7207:	icmp	 %7206 XXX
%7208:	br	 %7207 if.end if.then

BASIC BLOCK if.then
%7209:	br	 if.end

BASIC BLOCK if.end
%7210:	phi	 XXX XXX
%7211:	phi	 XXX XXX
%7212:	add	 max_code XXX
%7213:	sext	 %7212
%7214:	getelementptr	 tree %7213
%7215:	getelementptr	 %7214 XXX XXX
%7216:	bitcast	 %7215
%7217:	store	 XXX %7216
%7218:	br	 for.cond

BASIC BLOCK for.cond
%7219:	phi	 %7206 %7233
%7220:	phi	 XXX %7294
%7221:	phi	 XXX %7295
%7222:	phi	 XXX %7298
%7223:	phi	 %7210 %7296
%7224:	phi	 %7211 %7297
%7225:	icmp	 %7222 max_code
%7226:	br	 %7225 for.end for.body

BASIC BLOCK for.body
%7227:	add	 %7222 XXX
%7228:	sext	 %7227
%7229:	getelementptr	 tree %7228
%7230:	getelementptr	 %7229 XXX XXX
%7231:	bitcast	 %7230
%7232:	load	 %7231
%7233:	zext	 %7232
%7234:	add	 %7220 XXX
%7235:	icmp	 %7234 %7223
%7236:	br	 %7235 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%7237:	icmp	 %7219 %7233
%7238:	br	 %7237 if.else if.then17

BASIC BLOCK if.then17
%7239:	br	 for.inc

BASIC BLOCK if.else
%7240:	icmp	 %7234 %7224
%7241:	br	 %7240 if.else26 if.then20

BASIC BLOCK if.then20
%7242:	sext	 %7219
%7243:	getelementptr	 bl_tree XXX %7242
%7244:	getelementptr	 %7243 XXX XXX
%7245:	bitcast	 %7244
%7246:	load	 %7245
%7247:	zext	 %7246
%7248:	add	 %7247 %7234
%7249:	trunc	 %7248
%7250:	store	 %7249 %7245
%7251:	br	 if.end49

BASIC BLOCK if.else26
%7252:	icmp	 %7219 XXX
%7253:	br	 %7252 if.else40 if.then29

BASIC BLOCK if.then29
%7254:	icmp	 %7219 %7221
%7255:	br	 %7254 if.end38 if.then32

BASIC BLOCK if.then32
%7256:	sext	 %7219
%7257:	getelementptr	 bl_tree XXX %7256
%7258:	getelementptr	 %7257 XXX XXX
%7259:	bitcast	 %7258
%7260:	load	 %7259
%7261:	add	 %7260 XXX
%7262:	store	 %7261 %7259
%7263:	br	 if.end38

BASIC BLOCK if.end38
%7264:	load	 XXX
%7265:	add	 %7264 XXX
%7266:	store	 %7265 XXX
%7267:	br	 if.end48

BASIC BLOCK if.else40
%7268:	icmp	 %7234 XXX
%7269:	br	 %7268 if.else45 if.then43

BASIC BLOCK if.then43
%7270:	load	 XXX
%7271:	add	 %7270 XXX
%7272:	store	 %7271 XXX
%7273:	br	 if.end47

BASIC BLOCK if.else45
%7274:	load	 XXX
%7275:	add	 %7274 XXX
%7276:	store	 %7275 XXX
%7277:	br	 if.end47

BASIC BLOCK if.end47
%7278:	br	 if.end48

BASIC BLOCK if.end48
%7279:	br	 if.end49

BASIC BLOCK if.end49
%7280:	br	 if.end50

BASIC BLOCK if.end50
%7281:	icmp	 %7233 XXX
%7282:	br	 %7281 if.else54 if.then53

BASIC BLOCK if.then53
%7283:	br	 if.end60

BASIC BLOCK if.else54
%7284:	icmp	 %7219 %7233
%7285:	br	 %7284 if.else58 if.then57

BASIC BLOCK if.then57
%7286:	br	 if.end59

BASIC BLOCK if.else58
%7287:	br	 if.end59

BASIC BLOCK if.end59
%7288:	phi	 XXX XXX
%7289:	phi	 XXX XXX
%7290:	br	 if.end60

BASIC BLOCK if.end60
%7291:	phi	 XXX %7288
%7292:	phi	 XXX %7289
%7293:	br	 for.inc

BASIC BLOCK for.inc
%7294:	phi	 %7234 XXX
%7295:	phi	 %7221 %7219
%7296:	phi	 %7223 %7291
%7297:	phi	 %7224 %7292
%7298:	add	 %7222 XXX
%7299:	br	 for.cond

BASIC BLOCK for.end
%7300:	ret	

FUNCTION pqdownheap

BASIC BLOCK entry
%7301:	sext	 k
%7302:	getelementptr	 heap XXX %7301
%7303:	load	 %7302
%7304:	shl	 k XXX
%7305:	br	 while.cond

BASIC BLOCK while.cond
%7306:	phi	 k %7375
%7307:	phi	 %7304 %7430
%7308:	load	 heap_len
%7309:	icmp	 %7307 %7308
%7310:	br	 %7309 while.end while.body

BASIC BLOCK while.body
%7311:	load	 heap_len
%7312:	icmp	 %7307 %7311
%7313:	br	 %7312 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%7314:	add	 %7307 XXX
%7315:	sext	 %7314
%7316:	getelementptr	 heap XXX %7315
%7317:	load	 %7316
%7318:	sext	 %7317
%7319:	getelementptr	 tree %7318
%7320:	getelementptr	 %7319 XXX XXX
%7321:	bitcast	 %7320
%7322:	load	 %7321
%7323:	zext	 %7322
%7324:	sext	 %7307
%7325:	getelementptr	 heap XXX %7324
%7326:	load	 %7325
%7327:	sext	 %7326
%7328:	getelementptr	 tree %7327
%7329:	getelementptr	 %7328 XXX XXX
%7330:	bitcast	 %7329
%7331:	load	 %7330
%7332:	zext	 %7331
%7333:	icmp	 %7323 %7332
%7334:	br	 %7333 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%7335:	add	 %7307 XXX
%7336:	sext	 %7335
%7337:	getelementptr	 heap XXX %7336
%7338:	load	 %7337
%7339:	sext	 %7338
%7340:	getelementptr	 tree %7339
%7341:	getelementptr	 %7340 XXX XXX
%7342:	bitcast	 %7341
%7343:	load	 %7342
%7344:	zext	 %7343
%7345:	sext	 %7307
%7346:	getelementptr	 heap XXX %7345
%7347:	load	 %7346
%7348:	sext	 %7347
%7349:	getelementptr	 tree %7348
%7350:	getelementptr	 %7349 XXX XXX
%7351:	bitcast	 %7350
%7352:	load	 %7351
%7353:	zext	 %7352
%7354:	icmp	 %7344 %7353
%7355:	br	 %7354 if.end land.lhs.true32

BASIC BLOCK land.lhs.true32
%7356:	add	 %7307 XXX
%7357:	sext	 %7356
%7358:	getelementptr	 heap XXX %7357
%7359:	load	 %7358
%7360:	sext	 %7359
%7361:	getelementptr	 depth XXX %7360
%7362:	load	 %7361
%7363:	zext	 %7362
%7364:	sext	 %7307
%7365:	getelementptr	 heap XXX %7364
%7366:	load	 %7365
%7367:	sext	 %7366
%7368:	getelementptr	 depth XXX %7367
%7369:	load	 %7368
%7370:	zext	 %7369
%7371:	icmp	 %7363 %7370
%7372:	br	 %7371 if.end if.then

BASIC BLOCK if.then
%7373:	add	 %7307 XXX
%7374:	br	 if.end

BASIC BLOCK if.end
%7375:	phi	 %7373 %7307 %7307 %7307
%7376:	sext	 %7303
%7377:	getelementptr	 tree %7376
%7378:	getelementptr	 %7377 XXX XXX
%7379:	bitcast	 %7378
%7380:	load	 %7379
%7381:	zext	 %7380
%7382:	sext	 %7375
%7383:	getelementptr	 heap XXX %7382
%7384:	load	 %7383
%7385:	sext	 %7384
%7386:	getelementptr	 tree %7385
%7387:	getelementptr	 %7386 XXX XXX
%7388:	bitcast	 %7387
%7389:	load	 %7388
%7390:	zext	 %7389
%7391:	icmp	 %7381 %7390
%7392:	br	 %7391 lor.lhs.false60 if.then86

BASIC BLOCK lor.lhs.false60
%7393:	sext	 %7303
%7394:	getelementptr	 tree %7393
%7395:	getelementptr	 %7394 XXX XXX
%7396:	bitcast	 %7395
%7397:	load	 %7396
%7398:	zext	 %7397
%7399:	sext	 %7375
%7400:	getelementptr	 heap XXX %7399
%7401:	load	 %7400
%7402:	sext	 %7401
%7403:	getelementptr	 tree %7402
%7404:	getelementptr	 %7403 XXX XXX
%7405:	bitcast	 %7404
%7406:	load	 %7405
%7407:	zext	 %7406
%7408:	icmp	 %7398 %7407
%7409:	br	 %7408 if.end87 land.lhs.true75

BASIC BLOCK land.lhs.true75
%7410:	sext	 %7303
%7411:	getelementptr	 depth XXX %7410
%7412:	load	 %7411
%7413:	zext	 %7412
%7414:	sext	 %7375
%7415:	getelementptr	 heap XXX %7414
%7416:	load	 %7415
%7417:	sext	 %7416
%7418:	getelementptr	 depth XXX %7417
%7419:	load	 %7418
%7420:	zext	 %7419
%7421:	icmp	 %7413 %7420
%7422:	br	 %7421 if.end87 if.then86

BASIC BLOCK if.then86
%7423:	br	 while.end

BASIC BLOCK if.end87
%7424:	sext	 %7375
%7425:	getelementptr	 heap XXX %7424
%7426:	load	 %7425
%7427:	sext	 %7306
%7428:	getelementptr	 heap XXX %7427
%7429:	store	 %7426 %7428
%7430:	shl	 %7375 XXX
%7431:	br	 while.cond

BASIC BLOCK while.end
%7432:	sext	 %7306
%7433:	getelementptr	 heap XXX %7432
%7434:	store	 %7303 %7433
%7435:	ret	

FUNCTION gen_bitlen

BASIC BLOCK entry
%7436:	getelementptr	 desc XXX XXX
%7437:	load	 %7436
%7438:	getelementptr	 desc XXX XXX
%7439:	load	 %7438
%7440:	getelementptr	 desc XXX XXX
%7441:	load	 %7440
%7442:	getelementptr	 desc XXX XXX
%7443:	load	 %7442
%7444:	getelementptr	 desc XXX XXX
%7445:	load	 %7444
%7446:	getelementptr	 desc XXX XXX
%7447:	load	 %7446
%7448:	br	 for.cond

BASIC BLOCK for.cond
%7449:	phi	 XXX %7456
%7450:	icmp	 %7449 XXX
%7451:	br	 %7450 for.end for.body

BASIC BLOCK for.body
%7452:	sext	 %7449
%7453:	getelementptr	 bl_count XXX %7452
%7454:	store	 XXX %7453
%7455:	br	 for.inc

BASIC BLOCK for.inc
%7456:	add	 %7449 XXX
%7457:	br	 for.cond

BASIC BLOCK for.end
%7458:	load	 heap_max
%7459:	sext	 %7458
%7460:	getelementptr	 heap XXX %7459
%7461:	load	 %7460
%7462:	sext	 %7461
%7463:	getelementptr	 %7437 %7462
%7464:	getelementptr	 %7463 XXX XXX
%7465:	bitcast	 %7464
%7466:	store	 XXX %7465
%7467:	load	 heap_max
%7468:	add	 %7467 XXX
%7469:	br	 for.cond7

BASIC BLOCK for.cond7
%7470:	phi	 %7468 %7546
%7471:	phi	 XXX %7494
%7472:	icmp	 %7470 XXX
%7473:	br	 %7472 for.end61 for.body9

BASIC BLOCK for.body9
%7474:	sext	 %7470
%7475:	getelementptr	 heap XXX %7474
%7476:	load	 %7475
%7477:	sext	 %7476
%7478:	getelementptr	 %7437 %7477
%7479:	getelementptr	 %7478 XXX XXX
%7480:	bitcast	 %7479
%7481:	load	 %7480
%7482:	zext	 %7481
%7483:	getelementptr	 %7437 %7482
%7484:	getelementptr	 %7483 XXX XXX
%7485:	bitcast	 %7484
%7486:	load	 %7485
%7487:	zext	 %7486
%7488:	add	 %7487 XXX
%7489:	icmp	 %7488 %7445
%7490:	br	 %7489 if.end if.then

BASIC BLOCK if.then
%7491:	add	 %7471 XXX
%7492:	br	 if.end

BASIC BLOCK if.end
%7493:	phi	 %7445 %7488
%7494:	phi	 %7491 %7471
%7495:	trunc	 %7493
%7496:	sext	 %7476
%7497:	getelementptr	 %7437 %7496
%7498:	getelementptr	 %7497 XXX XXX
%7499:	bitcast	 %7498
%7500:	store	 %7495 %7499
%7501:	icmp	 %7476 %7443
%7502:	br	 %7501 if.end31 if.then30

BASIC BLOCK if.then30
%7503:	br	 for.inc59

BASIC BLOCK if.end31
%7504:	sext	 %7493
%7505:	getelementptr	 bl_count XXX %7504
%7506:	load	 %7505
%7507:	add	 %7506 XXX
%7508:	store	 %7507 %7505
%7509:	icmp	 %7476 %7441
%7510:	br	 %7509 if.end40 if.then37

BASIC BLOCK if.then37
%7511:	sub	 %7476 %7441
%7512:	sext	 %7511
%7513:	getelementptr	 %7439 %7512
%7514:	load	 %7513
%7515:	br	 if.end40

BASIC BLOCK if.end40
%7516:	phi	 %7514 XXX
%7517:	sext	 %7476
%7518:	getelementptr	 %7437 %7517
%7519:	getelementptr	 %7518 XXX XXX
%7520:	bitcast	 %7519
%7521:	load	 %7520
%7522:	zext	 %7521
%7523:	add	 %7493 %7516
%7524:	sext	 %7523
%7525:	mul	 %7522 %7524
%7526:	load	 opt_len
%7527:	add	 %7526 %7525
%7528:	store	 %7527 opt_len
%7529:	icmp	 %7447 XXX
%7530:	br	 %7529 if.end58 if.then47

BASIC BLOCK if.then47
%7531:	zext	 %7521
%7532:	sext	 %7476
%7533:	getelementptr	 %7447 %7532
%7534:	getelementptr	 %7533 XXX XXX
%7535:	bitcast	 %7534
%7536:	load	 %7535
%7537:	zext	 %7536
%7538:	add	 %7537 %7516
%7539:	sext	 %7538
%7540:	mul	 %7531 %7539
%7541:	load	 static_len
%7542:	add	 %7541 %7540
%7543:	store	 %7542 static_len
%7544:	br	 if.end58

BASIC BLOCK if.end58
%7545:	br	 for.inc59

BASIC BLOCK for.inc59
%7546:	add	 %7470 XXX
%7547:	br	 for.cond7

BASIC BLOCK for.end61
%7548:	icmp	 %7471 XXX
%7549:	br	 %7548 if.end65 if.then64

BASIC BLOCK if.then64
%7550:	br	 for.end137

BASIC BLOCK if.end65
%7551:	br	 do.body

BASIC BLOCK do.body
%7552:	phi	 %7471 %7582
%7553:	sub	 %7445 XXX
%7554:	br	 while.cond

BASIC BLOCK while.cond
%7555:	phi	 %7553 %7562
%7556:	sext	 %7555
%7557:	getelementptr	 bl_count XXX %7556
%7558:	load	 %7557
%7559:	zext	 %7558
%7560:	icmp	 %7559 XXX
%7561:	br	 %7560 while.end while.body

BASIC BLOCK while.body
%7562:	add	 %7555 XXX
%7563:	br	 while.cond

BASIC BLOCK while.end
%7564:	sext	 %7555
%7565:	getelementptr	 bl_count XXX %7564
%7566:	load	 %7565
%7567:	add	 %7566 XXX
%7568:	store	 %7567 %7565
%7569:	add	 %7555 XXX
%7570:	sext	 %7569
%7571:	getelementptr	 bl_count XXX %7570
%7572:	load	 %7571
%7573:	zext	 %7572
%7574:	add	 %7573 XXX
%7575:	trunc	 %7574
%7576:	store	 %7575 %7571
%7577:	sext	 %7445
%7578:	getelementptr	 bl_count XXX %7577
%7579:	load	 %7578
%7580:	add	 %7579 XXX
%7581:	store	 %7580 %7578
%7582:	sub	 %7552 XXX
%7583:	br	 do.cond

BASIC BLOCK do.cond
%7584:	icmp	 %7582 XXX
%7585:	br	 %7584 do.end do.body

BASIC BLOCK do.end
%7586:	br	 for.cond87

BASIC BLOCK for.cond87
%7587:	phi	 %7470 %7596
%7588:	phi	 %7445 %7643
%7589:	icmp	 %7588 XXX
%7590:	br	 %7589 for.end137 for.body90

BASIC BLOCK for.body90
%7591:	sext	 %7588
%7592:	getelementptr	 bl_count XXX %7591
%7593:	load	 %7592
%7594:	zext	 %7593
%7595:	br	 while.cond94

BASIC BLOCK while.cond94
%7596:	phi	 %7587 %7600 %7600
%7597:	phi	 %7594 %7597 %7640
%7598:	icmp	 %7597 XXX
%7599:	br	 %7598 while.end134 while.body97

BASIC BLOCK while.body97
%7600:	add	 %7596 XXX
%7601:	sext	 %7600
%7602:	getelementptr	 heap XXX %7601
%7603:	load	 %7602
%7604:	icmp	 %7603 %7443
%7605:	br	 %7604 if.end104 if.then103

BASIC BLOCK if.then103
%7606:	br	 while.cond94

BASIC BLOCK if.end104
%7607:	sext	 %7603
%7608:	getelementptr	 %7437 %7607
%7609:	getelementptr	 %7608 XXX XXX
%7610:	bitcast	 %7609
%7611:	load	 %7610
%7612:	zext	 %7611
%7613:	icmp	 %7612 %7588
%7614:	br	 %7613 if.end132 if.then112

BASIC BLOCK if.then112
%7615:	sext	 %7588
%7616:	sext	 %7603
%7617:	getelementptr	 %7437 %7616
%7618:	getelementptr	 %7617 XXX XXX
%7619:	bitcast	 %7618
%7620:	load	 %7619
%7621:	zext	 %7620
%7622:	sub	 %7615 %7621
%7623:	sext	 %7603
%7624:	getelementptr	 %7437 %7623
%7625:	getelementptr	 %7624 XXX XXX
%7626:	bitcast	 %7625
%7627:	load	 %7626
%7628:	zext	 %7627
%7629:	mul	 %7622 %7628
%7630:	load	 opt_len
%7631:	add	 %7630 %7629
%7632:	store	 %7631 opt_len
%7633:	trunc	 %7588
%7634:	sext	 %7603
%7635:	getelementptr	 %7437 %7634
%7636:	getelementptr	 %7635 XXX XXX
%7637:	bitcast	 %7636
%7638:	store	 %7633 %7637
%7639:	br	 if.end132

BASIC BLOCK if.end132
%7640:	add	 %7597 XXX
%7641:	br	 while.cond94

BASIC BLOCK while.end134
%7642:	br	 for.inc135

BASIC BLOCK for.inc135
%7643:	add	 %7588 XXX
%7644:	br	 for.cond87

BASIC BLOCK for.end137
%7645:	ret	

FUNCTION get_istat

BASIC BLOCK entry
%7646:	call	 XXX iname strcpy
%7647:	call	 XXX sbuf do_stat
%7648:	icmp	 %7647 XXX
%7649:	br	 %7648 if.end if.then

BASIC BLOCK if.then
%7650:	br	 return

BASIC BLOCK if.end
%7651:	load	 decompress
%7652:	icmp	 %7651 XXX
%7653:	br	 %7652 if.then4 lor.lhs.false

BASIC BLOCK lor.lhs.false
%7654:	call	 __errno_location
%7655:	load	 %7654
%7656:	icmp	 %7655 XXX
%7657:	br	 %7656 if.end5 if.then4

BASIC BLOCK if.then4
%7658:	call	 XXX perror
%7659:	store	 XXX exit_code
%7660:	br	 return

BASIC BLOCK if.end5
%7661:	call	 XXX get_suffix
%7662:	icmp	 %7661 XXX
%7663:	br	 %7662 if.end9 if.then8

BASIC BLOCK if.then8
%7664:	call	 XXX perror
%7665:	store	 XXX exit_code
%7666:	br	 return

BASIC BLOCK if.end9
%7667:	call	 XXX strlen
%7668:	trunc	 %7667
%7669:	call	 XXX XXX strcmp
%7670:	icmp	 %7669 XXX
%7671:	br	 %7670 if.end15 if.then14

BASIC BLOCK if.then14
%7672:	getelementptr	 XXX XXX
%7673:	br	 if.end15

BASIC BLOCK if.end15
%7674:	phi	 %7672 XXX
%7675:	br	 do.body

BASIC BLOCK do.body
%7676:	phi	 %7674 %7687
%7677:	load	 %7676
%7678:	call	 XXX %7677 strcat
%7679:	call	 XXX sbuf do_stat
%7680:	icmp	 %7679 XXX
%7681:	br	 %7680 if.end21 if.then20

BASIC BLOCK if.then20
%7682:	br	 return

BASIC BLOCK if.end21
%7683:	sext	 %7668
%7684:	getelementptr	 ifname XXX %7683
%7685:	store	 XXX %7684
%7686:	br	 do.cond

BASIC BLOCK do.cond
%7687:	getelementptr	 %7676 XXX
%7688:	load	 %7687
%7689:	icmp	 %7688 XXX
%7690:	br	 %7689 do.end do.body

BASIC BLOCK do.end
%7691:	call	 XXX XXX strcat
%7692:	call	 XXX perror
%7693:	store	 XXX exit_code
%7694:	br	 return

BASIC BLOCK return
%7695:	phi	 XXX XXX XXX XXX XXX
%7696:	ret	 %7695

FUNCTION treat_dir

BASIC BLOCK entry
%7697:	alloca	 XXX
%7698:	call	 dir opendir
%7699:	icmp	 %7698 XXX
%7700:	br	 %7699 if.end if.then

BASIC BLOCK if.then
%7701:	load	 stderr
%7702:	load	 progname
%7703:	call	 %7701 XXX %7702 dir fprintf
%7704:	store	 XXX exit_code
%7705:	br	 return

BASIC BLOCK if.end
%7706:	br	 while.cond

BASIC BLOCK while.cond
%7707:	call	 %7698 readdir
%7708:	icmp	 %7707 XXX
%7709:	br	 %7708 while.end while.body

BASIC BLOCK while.body
%7710:	getelementptr	 %7707 XXX XXX
%7711:	getelementptr	 %7710 XXX XXX
%7712:	call	 %7711 XXX strcmp
%7713:	icmp	 %7712 XXX
%7714:	br	 %7713 lor.lhs.false if.then10

BASIC BLOCK lor.lhs.false
%7715:	getelementptr	 %7707 XXX XXX
%7716:	getelementptr	 %7715 XXX XXX
%7717:	call	 %7716 XXX strcmp
%7718:	icmp	 %7717 XXX
%7719:	br	 %7718 if.end11 if.then10

BASIC BLOCK if.then10
%7720:	br	 while.cond

BASIC BLOCK if.end11
%7721:	call	 dir strlen
%7722:	trunc	 %7721
%7723:	getelementptr	 %7707 XXX XXX
%7724:	getelementptr	 %7723 XXX XXX
%7725:	call	 %7724 strlen
%7726:	trunc	 %7725
%7727:	add	 %7722 %7726
%7728:	add	 %7727 XXX
%7729:	icmp	 %7728 XXX
%7730:	br	 %7729 if.else if.then20

BASIC BLOCK if.then20
%7731:	getelementptr	 %7697 XXX XXX
%7732:	call	 %7731 dir strcpy
%7733:	icmp	 %7722 XXX
%7734:	br	 %7733 if.end26 if.then25

BASIC BLOCK if.then25
%7735:	add	 %7722 XXX
%7736:	sext	 %7722
%7737:	getelementptr	 %7697 XXX %7736
%7738:	store	 XXX %7737
%7739:	br	 if.end26

BASIC BLOCK if.end26
%7740:	phi	 %7735 %7722
%7741:	getelementptr	 %7697 XXX XXX
%7742:	sext	 %7740
%7743:	getelementptr	 %7741 %7742
%7744:	getelementptr	 %7707 XXX XXX
%7745:	getelementptr	 %7744 XXX XXX
%7746:	call	 %7743 %7745 strcpy
%7747:	getelementptr	 %7697 XXX XXX
%7748:	call	 %7747 treat_file
%7749:	br	 if.end35

BASIC BLOCK if.else
%7750:	load	 stderr
%7751:	load	 progname
%7752:	getelementptr	 %7707 XXX XXX
%7753:	getelementptr	 %7752 XXX XXX
%7754:	call	 %7750 XXX %7751 dir %7753 fprintf
%7755:	store	 XXX exit_code
%7756:	br	 if.end35

BASIC BLOCK if.end35
%7757:	br	 while.cond

BASIC BLOCK while.end
%7758:	call	 %7698 closedir
%7759:	br	 return

BASIC BLOCK return
%7760:	ret	

FUNCTION reset_times

BASIC BLOCK entry
%7761:	alloca	 XXX
%7762:	getelementptr	 statb XXX XXX
%7763:	getelementptr	 %7762 XXX XXX
%7764:	load	 %7763
%7765:	getelementptr	 %7761 XXX XXX
%7766:	store	 %7764 %7765
%7767:	getelementptr	 statb XXX XXX
%7768:	getelementptr	 %7767 XXX XXX
%7769:	load	 %7768
%7770:	getelementptr	 %7761 XXX XXX
%7771:	store	 %7769 %7770
%7772:	call	 name %7761 utime
%7773:	icmp	 %7772 XXX
%7774:	br	 %7773 if.end11 land.lhs.true

BASIC BLOCK land.lhs.true
%7775:	getelementptr	 statb XXX XXX
%7776:	load	 %7775
%7777:	and	 %7776 XXX
%7778:	icmp	 %7777 XXX
%7779:	br	 %7778 if.then if.end11

BASIC BLOCK if.then
%7780:	load	 quiet
%7781:	icmp	 %7780 XXX
%7782:	br	 %7781 if.then3 if.end

BASIC BLOCK if.then3
%7783:	load	 stderr
%7784:	load	 progname
%7785:	call	 %7783 XXX %7784 fprintf
%7786:	br	 if.end

BASIC BLOCK if.end
%7787:	load	 exit_code
%7788:	icmp	 %7787 XXX
%7789:	br	 %7788 if.end7 if.then6

BASIC BLOCK if.then6
%7790:	store	 XXX exit_code
%7791:	br	 if.end7

BASIC BLOCK if.end7
%7792:	load	 quiet
%7793:	icmp	 %7792 XXX
%7794:	br	 %7793 if.then9 if.end10

BASIC BLOCK if.then9
%7795:	call	 XXX perror
%7796:	br	 if.end10

BASIC BLOCK if.end10
%7797:	br	 if.end11

BASIC BLOCK if.end11
%7798:	ret	

FUNCTION make_ofname

BASIC BLOCK entry
%7799:	call	 XXX XXX strcpy
%7800:	call	 XXX get_suffix
%7801:	load	 decompress
%7802:	icmp	 %7801 XXX
%7803:	br	 %7802 if.else18 if.then

BASIC BLOCK if.then
%7804:	icmp	 %7800 XXX
%7805:	br	 %7804 if.end9 if.then2

BASIC BLOCK if.then2
%7806:	load	 quiet
%7807:	icmp	 %7806 XXX
%7808:	br	 %7807 if.then4 if.end

BASIC BLOCK if.then4
%7809:	load	 stderr
%7810:	load	 progname
%7811:	call	 %7809 XXX %7810 XXX fprintf
%7812:	br	 if.end

BASIC BLOCK if.end
%7813:	load	 exit_code
%7814:	icmp	 %7813 XXX
%7815:	br	 %7814 if.end8 if.then7

BASIC BLOCK if.then7
%7816:	store	 XXX exit_code
%7817:	br	 if.end8

BASIC BLOCK if.end8
%7818:	br	 return

BASIC BLOCK if.end9
%7819:	call	 %7800 strlwr
%7820:	call	 %7800 XXX strcmp
%7821:	icmp	 %7820 XXX
%7822:	br	 %7821 lor.lhs.false if.then15

BASIC BLOCK lor.lhs.false
%7823:	call	 %7800 XXX strcmp
%7824:	icmp	 %7823 XXX
%7825:	br	 %7824 if.else if.then15

BASIC BLOCK if.then15
%7826:	call	 %7800 XXX strcpy
%7827:	br	 if.end17

BASIC BLOCK if.else
%7828:	store	 XXX %7800
%7829:	br	 if.end17

BASIC BLOCK if.end17
%7830:	br	 if.end34

BASIC BLOCK if.else18
%7831:	icmp	 %7800 XXX
%7832:	br	 %7831 if.else31 if.then20

BASIC BLOCK if.then20
%7833:	load	 verbose
%7834:	icmp	 %7833 XXX
%7835:	br	 %7834 lor.lhs.false22 if.then25

BASIC BLOCK lor.lhs.false22
%7836:	load	 recursive
%7837:	icmp	 %7836 XXX
%7838:	br	 %7837 land.lhs.true if.end27

BASIC BLOCK land.lhs.true
%7839:	load	 quiet
%7840:	icmp	 %7839 XXX
%7841:	br	 %7840 if.then25 if.end27

BASIC BLOCK if.then25
%7842:	load	 stderr
%7843:	load	 progname
%7844:	call	 %7842 XXX %7843 XXX %7800 fprintf
%7845:	br	 if.end27

BASIC BLOCK if.end27
%7846:	load	 exit_code
%7847:	icmp	 %7846 XXX
%7848:	br	 %7847 if.end30 if.then29

BASIC BLOCK if.then29
%7849:	store	 XXX exit_code
%7850:	br	 if.end30

BASIC BLOCK if.end30
%7851:	br	 return

BASIC BLOCK if.else31
%7852:	store	 XXX save_orig_name
%7853:	call	 XXX XXX strcat
%7854:	br	 if.end33

BASIC BLOCK if.end33
%7855:	br	 if.end34

BASIC BLOCK if.end34
%7856:	br	 return

BASIC BLOCK return
%7857:	phi	 XXX XXX XXX
%7858:	ret	 %7857

FUNCTION get_method

BASIC BLOCK entry
%7859:	alloca	 XXX
%7860:	load	 inptr
%7861:	load	 insize
%7862:	icmp	 %7860 %7861
%7863:	br	 %7862 cond.false cond.true

BASIC BLOCK cond.true
%7864:	load	 inptr
%7865:	add	 %7864 XXX
%7866:	store	 %7865 inptr
%7867:	zext	 %7864
%7868:	getelementptr	 inbuf XXX %7867
%7869:	load	 %7868
%7870:	zext	 %7869
%7871:	br	 cond.end

BASIC BLOCK cond.false
%7872:	call	 fill_inbuf
%7873:	br	 cond.end

BASIC BLOCK cond.end
%7874:	phi	 %7870 %7872
%7875:	trunc	 %7874
%7876:	getelementptr	 %7859 XXX XXX
%7877:	store	 %7875 %7876
%7878:	load	 inptr
%7879:	load	 insize
%7880:	icmp	 %7878 %7879
%7881:	br	 %7880 cond.false10 cond.true5

BASIC BLOCK cond.true5
%7882:	load	 inptr
%7883:	add	 %7882 XXX
%7884:	store	 %7883 inptr
%7885:	zext	 %7882
%7886:	getelementptr	 inbuf XXX %7885
%7887:	load	 %7886
%7888:	zext	 %7887
%7889:	br	 cond.end12

BASIC BLOCK cond.false10
%7890:	call	 fill_inbuf
%7891:	br	 cond.end12

BASIC BLOCK cond.end12
%7892:	phi	 %7888 %7890
%7893:	trunc	 %7892
%7894:	getelementptr	 %7859 XXX XXX
%7895:	store	 %7893 %7894
%7896:	store	 XXX time_stamp
%7897:	store	 XXX method
%7898:	load	 part_nb
%7899:	add	 %7898 XXX
%7900:	store	 %7899 part_nb
%7901:	store	 XXX header_bytes
%7902:	store	 XXX last_member
%7903:	getelementptr	 %7859 XXX XXX
%7904:	call	 %7903 XXX XXX memcmp
%7905:	icmp	 %7904 XXX
%7906:	br	 %7905 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%7907:	getelementptr	 %7859 XXX XXX
%7908:	call	 %7907 XXX XXX memcmp
%7909:	icmp	 %7908 XXX
%7910:	br	 %7909 if.else313 if.then

BASIC BLOCK if.then
%7911:	load	 inptr
%7912:	load	 insize
%7913:	icmp	 %7911 %7912
%7914:	br	 %7913 cond.false31 cond.true26

BASIC BLOCK cond.true26
%7915:	load	 inptr
%7916:	add	 %7915 XXX
%7917:	store	 %7916 inptr
%7918:	zext	 %7915
%7919:	getelementptr	 inbuf XXX %7918
%7920:	load	 %7919
%7921:	zext	 %7920
%7922:	br	 cond.end33

BASIC BLOCK cond.false31
%7923:	call	 fill_inbuf
%7924:	br	 cond.end33

BASIC BLOCK cond.end33
%7925:	phi	 %7921 %7923
%7926:	store	 %7925 method
%7927:	load	 method
%7928:	icmp	 %7927 XXX
%7929:	br	 %7928 if.end if.then37

BASIC BLOCK if.then37
%7930:	load	 stderr
%7931:	load	 progname
%7932:	load	 method
%7933:	call	 %7930 XXX %7931 XXX %7932 fprintf
%7934:	store	 XXX exit_code
%7935:	br	 return

BASIC BLOCK if.end
%7936:	store	 unzip work
%7937:	load	 inptr
%7938:	load	 insize
%7939:	icmp	 %7937 %7938
%7940:	br	 %7939 cond.false46 cond.true41

BASIC BLOCK cond.true41
%7941:	load	 inptr
%7942:	add	 %7941 XXX
%7943:	store	 %7942 inptr
%7944:	zext	 %7941
%7945:	getelementptr	 inbuf XXX %7944
%7946:	load	 %7945
%7947:	zext	 %7946
%7948:	br	 cond.end48

BASIC BLOCK cond.false46
%7949:	call	 fill_inbuf
%7950:	br	 cond.end48

BASIC BLOCK cond.end48
%7951:	phi	 %7947 %7949
%7952:	trunc	 %7951
%7953:	zext	 %7952
%7954:	and	 %7953 XXX
%7955:	icmp	 %7954 XXX
%7956:	br	 %7955 if.end56 if.then54

BASIC BLOCK if.then54
%7957:	load	 stderr
%7958:	load	 progname
%7959:	call	 %7957 XXX %7958 XXX fprintf
%7960:	store	 XXX exit_code
%7961:	br	 return

BASIC BLOCK if.end56
%7962:	zext	 %7952
%7963:	and	 %7962 XXX
%7964:	icmp	 %7963 XXX
%7965:	br	 %7964 if.end67 if.then61

BASIC BLOCK if.then61
%7966:	load	 stderr
%7967:	load	 progname
%7968:	call	 %7966 XXX %7967 XXX fprintf
%7969:	store	 XXX exit_code
%7970:	load	 force
%7971:	icmp	 %7970 XXX
%7972:	br	 %7971 if.end66 if.then65

BASIC BLOCK if.then65
%7973:	br	 return

BASIC BLOCK if.end66
%7974:	br	 if.end67

BASIC BLOCK if.end67
%7975:	zext	 %7952
%7976:	and	 %7975 XXX
%7977:	icmp	 %7976 XXX
%7978:	br	 %7977 if.end79 if.then72

BASIC BLOCK if.then72
%7979:	load	 stderr
%7980:	load	 progname
%7981:	zext	 %7952
%7982:	call	 %7979 XXX %7980 XXX %7981 fprintf
%7983:	store	 XXX exit_code
%7984:	load	 force
%7985:	icmp	 %7984 XXX
%7986:	br	 %7985 if.end78 if.then77

BASIC BLOCK if.then77
%7987:	br	 return

BASIC BLOCK if.end78
%7988:	br	 if.end79

BASIC BLOCK if.end79
%7989:	load	 inptr
%7990:	load	 insize
%7991:	icmp	 %7989 %7990
%7992:	br	 %7991 cond.false87 cond.true82

BASIC BLOCK cond.true82
%7993:	load	 inptr
%7994:	add	 %7993 XXX
%7995:	store	 %7994 inptr
%7996:	zext	 %7993
%7997:	getelementptr	 inbuf XXX %7996
%7998:	load	 %7997
%7999:	zext	 %7998
%8000:	br	 cond.end89

BASIC BLOCK cond.false87
%8001:	call	 fill_inbuf
%8002:	br	 cond.end89

BASIC BLOCK cond.end89
%8003:	phi	 %7999 %8001
%8004:	sext	 %8003
%8005:	store	 %8004 time_stamp
%8006:	load	 inptr
%8007:	load	 insize
%8008:	icmp	 %8006 %8007
%8009:	br	 %8008 cond.false99 cond.true94

BASIC BLOCK cond.true94
%8010:	load	 inptr
%8011:	add	 %8010 XXX
%8012:	store	 %8011 inptr
%8013:	zext	 %8010
%8014:	getelementptr	 inbuf XXX %8013
%8015:	load	 %8014
%8016:	zext	 %8015
%8017:	br	 cond.end101

BASIC BLOCK cond.false99
%8018:	call	 fill_inbuf
%8019:	br	 cond.end101

BASIC BLOCK cond.end101
%8020:	phi	 %8016 %8018
%8021:	sext	 %8020
%8022:	shl	 %8021 XXX
%8023:	load	 time_stamp
%8024:	or	 %8023 %8022
%8025:	store	 %8024 time_stamp
%8026:	load	 inptr
%8027:	load	 insize
%8028:	icmp	 %8026 %8027
%8029:	br	 %8028 cond.false111 cond.true106

BASIC BLOCK cond.true106
%8030:	load	 inptr
%8031:	add	 %8030 XXX
%8032:	store	 %8031 inptr
%8033:	zext	 %8030
%8034:	getelementptr	 inbuf XXX %8033
%8035:	load	 %8034
%8036:	zext	 %8035
%8037:	br	 cond.end113

BASIC BLOCK cond.false111
%8038:	call	 fill_inbuf
%8039:	br	 cond.end113

BASIC BLOCK cond.end113
%8040:	phi	 %8036 %8038
%8041:	sext	 %8040
%8042:	shl	 %8041 XXX
%8043:	load	 time_stamp
%8044:	or	 %8043 %8042
%8045:	store	 %8044 time_stamp
%8046:	load	 inptr
%8047:	load	 insize
%8048:	icmp	 %8046 %8047
%8049:	br	 %8048 cond.false125 cond.true120

BASIC BLOCK cond.true120
%8050:	load	 inptr
%8051:	add	 %8050 XXX
%8052:	store	 %8051 inptr
%8053:	zext	 %8050
%8054:	getelementptr	 inbuf XXX %8053
%8055:	load	 %8054
%8056:	zext	 %8055
%8057:	br	 cond.end127

BASIC BLOCK cond.false125
%8058:	call	 fill_inbuf
%8059:	br	 cond.end127

BASIC BLOCK cond.end127
%8060:	phi	 %8056 %8058
%8061:	sext	 %8060
%8062:	shl	 %8061 XXX
%8063:	load	 time_stamp
%8064:	or	 %8063 %8062
%8065:	store	 %8064 time_stamp
%8066:	store	 XXX time_stamp
%8067:	load	 inptr
%8068:	load	 insize
%8069:	icmp	 %8067 %8068
%8070:	br	 %8069 cond.false139 cond.true134

BASIC BLOCK cond.true134
%8071:	load	 inptr
%8072:	add	 %8071 XXX
%8073:	store	 %8072 inptr
%8074:	zext	 %8071
%8075:	getelementptr	 inbuf XXX %8074
%8076:	load	 %8075
%8077:	zext	 %8076
%8078:	br	 cond.end141

BASIC BLOCK cond.false139
%8079:	call	 fill_inbuf
%8080:	br	 cond.end141

BASIC BLOCK cond.end141
%8081:	phi	 %8077 %8079
%8082:	load	 inptr
%8083:	load	 insize
%8084:	icmp	 %8082 %8083
%8085:	br	 %8084 cond.false150 cond.true145

BASIC BLOCK cond.true145
%8086:	load	 inptr
%8087:	add	 %8086 XXX
%8088:	store	 %8087 inptr
%8089:	zext	 %8086
%8090:	getelementptr	 inbuf XXX %8089
%8091:	load	 %8090
%8092:	zext	 %8091
%8093:	br	 cond.end152

BASIC BLOCK cond.false150
%8094:	call	 fill_inbuf
%8095:	br	 cond.end152

BASIC BLOCK cond.end152
%8096:	phi	 %8092 %8094
%8097:	zext	 %7952
%8098:	and	 %8097 XXX
%8099:	icmp	 %8098 XXX
%8100:	br	 %8099 if.end186 if.then158

BASIC BLOCK if.then158
%8101:	load	 inptr
%8102:	load	 insize
%8103:	icmp	 %8101 %8102
%8104:	br	 %8103 cond.false166 cond.true161

BASIC BLOCK cond.true161
%8105:	load	 inptr
%8106:	add	 %8105 XXX
%8107:	store	 %8106 inptr
%8108:	zext	 %8105
%8109:	getelementptr	 inbuf XXX %8108
%8110:	load	 %8109
%8111:	zext	 %8110
%8112:	br	 cond.end168

BASIC BLOCK cond.false166
%8113:	call	 fill_inbuf
%8114:	br	 cond.end168

BASIC BLOCK cond.end168
%8115:	phi	 %8111 %8113
%8116:	load	 inptr
%8117:	load	 insize
%8118:	icmp	 %8116 %8117
%8119:	br	 %8118 cond.false177 cond.true172

BASIC BLOCK cond.true172
%8120:	load	 inptr
%8121:	add	 %8120 XXX
%8122:	store	 %8121 inptr
%8123:	zext	 %8120
%8124:	getelementptr	 inbuf XXX %8123
%8125:	load	 %8124
%8126:	zext	 %8125
%8127:	br	 cond.end179

BASIC BLOCK cond.false177
%8128:	call	 fill_inbuf
%8129:	br	 cond.end179

BASIC BLOCK cond.end179
%8130:	phi	 %8126 %8128
%8131:	shl	 %8130 XXX
%8132:	or	 %8115 %8131
%8133:	load	 verbose
%8134:	icmp	 %8133 XXX
%8135:	br	 %8134 if.end185 if.then183

BASIC BLOCK if.then183
%8136:	load	 stderr
%8137:	load	 progname
%8138:	call	 %8136 XXX %8137 XXX %8132 fprintf
%8139:	br	 if.end185

BASIC BLOCK if.end185
%8140:	br	 if.end186

BASIC BLOCK if.end186
%8141:	zext	 %7952
%8142:	and	 %8141 XXX
%8143:	icmp	 %8142 XXX
%8144:	br	 %8143 if.end232 if.then191

BASIC BLOCK if.then191
%8145:	load	 inptr
%8146:	load	 insize
%8147:	icmp	 %8145 %8146
%8148:	br	 %8147 cond.false199 cond.true194

BASIC BLOCK cond.true194
%8149:	load	 inptr
%8150:	add	 %8149 XXX
%8151:	store	 %8150 inptr
%8152:	zext	 %8149
%8153:	getelementptr	 inbuf XXX %8152
%8154:	load	 %8153
%8155:	zext	 %8154
%8156:	br	 cond.end201

BASIC BLOCK cond.false199
%8157:	call	 fill_inbuf
%8158:	br	 cond.end201

BASIC BLOCK cond.end201
%8159:	phi	 %8155 %8157
%8160:	load	 inptr
%8161:	load	 insize
%8162:	icmp	 %8160 %8161
%8163:	br	 %8162 cond.false210 cond.true205

BASIC BLOCK cond.true205
%8164:	load	 inptr
%8165:	add	 %8164 XXX
%8166:	store	 %8165 inptr
%8167:	zext	 %8164
%8168:	getelementptr	 inbuf XXX %8167
%8169:	load	 %8168
%8170:	zext	 %8169
%8171:	br	 cond.end212

BASIC BLOCK cond.false210
%8172:	call	 fill_inbuf
%8173:	br	 cond.end212

BASIC BLOCK cond.end212
%8174:	phi	 %8170 %8172
%8175:	shl	 %8174 XXX
%8176:	or	 %8159 %8175
%8177:	load	 verbose
%8178:	icmp	 %8177 XXX
%8179:	br	 %8178 if.end219 if.then217

BASIC BLOCK if.then217
%8180:	load	 stderr
%8181:	load	 progname
%8182:	call	 %8180 XXX %8181 XXX %8176 fprintf
%8183:	br	 if.end219

BASIC BLOCK if.end219
%8184:	br	 while.cond

BASIC BLOCK while.cond
%8185:	phi	 %8176 %8186
%8186:	add	 %8185 XXX
%8187:	icmp	 %8185 XXX
%8188:	br	 %8187 while.end while.body

BASIC BLOCK while.body
%8189:	load	 inptr
%8190:	load	 insize
%8191:	icmp	 %8189 %8190
%8192:	br	 %8191 cond.false228 cond.true223

BASIC BLOCK cond.true223
%8193:	load	 inptr
%8194:	add	 %8193 XXX
%8195:	store	 %8194 inptr
%8196:	zext	 %8193
%8197:	getelementptr	 inbuf XXX %8196
%8198:	load	 %8197
%8199:	zext	 %8198
%8200:	br	 cond.end230

BASIC BLOCK cond.false228
%8201:	call	 fill_inbuf
%8202:	br	 cond.end230

BASIC BLOCK cond.end230
%8203:	phi	 %8199 %8201
%8204:	br	 while.cond

BASIC BLOCK while.end
%8205:	br	 if.end232

BASIC BLOCK if.end232
%8206:	zext	 %7952
%8207:	and	 %8206 XXX
%8208:	icmp	 %8207 XXX
%8209:	br	 %8208 if.end285 if.then237

BASIC BLOCK if.then237
%8210:	load	 to_stdout
%8211:	icmp	 %8210 XXX
%8212:	br	 %8211 lor.lhs.false239 if.then242

BASIC BLOCK lor.lhs.false239
%8213:	load	 part_nb
%8214:	icmp	 %8213 XXX
%8215:	br	 %8214 if.else if.then242

BASIC BLOCK if.then242
%8216:	br	 while.cond243

BASIC BLOCK while.cond243
%8217:	load	 inptr
%8218:	load	 insize
%8219:	icmp	 %8217 %8218
%8220:	br	 %8219 cond.false251 cond.true246

BASIC BLOCK cond.true246
%8221:	load	 inptr
%8222:	add	 %8221 XXX
%8223:	store	 %8222 inptr
%8224:	zext	 %8221
%8225:	getelementptr	 inbuf XXX %8224
%8226:	load	 %8225
%8227:	zext	 %8226
%8228:	br	 cond.end253

BASIC BLOCK cond.false251
%8229:	call	 fill_inbuf
%8230:	br	 cond.end253

BASIC BLOCK cond.end253
%8231:	phi	 %8227 %8229
%8232:	trunc	 %8231
%8233:	sext	 %8232
%8234:	icmp	 %8233 XXX
%8235:	br	 %8234 while.end261 while.body259

BASIC BLOCK while.body259
%8236:	add	 %8232 XXX
%8237:	br	 while.cond243

BASIC BLOCK while.end261
%8238:	br	 if.end284

BASIC BLOCK if.else
%8239:	call	 XXX basename
%8240:	br	 for.cond

BASIC BLOCK for.cond
%8241:	phi	 %8239 %8259
%8242:	load	 inptr
%8243:	load	 insize
%8244:	icmp	 %8242 %8243
%8245:	br	 %8244 cond.false270 cond.true265

BASIC BLOCK cond.true265
%8246:	load	 inptr
%8247:	add	 %8246 XXX
%8248:	store	 %8247 inptr
%8249:	zext	 %8246
%8250:	getelementptr	 inbuf XXX %8249
%8251:	load	 %8250
%8252:	zext	 %8251
%8253:	br	 cond.end272

BASIC BLOCK cond.false270
%8254:	call	 fill_inbuf
%8255:	br	 cond.end272

BASIC BLOCK cond.end272
%8256:	phi	 %8252 %8254
%8257:	trunc	 %8256
%8258:	store	 %8257 %8241
%8259:	getelementptr	 %8241 XXX
%8260:	load	 %8241
%8261:	sext	 %8260
%8262:	icmp	 %8261 XXX
%8263:	br	 %8262 if.end279 if.then278

BASIC BLOCK if.then278
%8264:	br	 for.end

BASIC BLOCK if.end279
%8265:	icmp	 %8259 XXX
%8266:	br	 %8265 if.end283 if.then282

BASIC BLOCK if.then282
%8267:	call	 XXX error
%8268:	br	 if.end283

BASIC BLOCK if.end283
%8269:	br	 for.cond

BASIC BLOCK for.end
%8270:	br	 if.end284

BASIC BLOCK if.end284
%8271:	br	 if.end285

BASIC BLOCK if.end285
%8272:	zext	 %7952
%8273:	and	 %8272 XXX
%8274:	icmp	 %8273 XXX
%8275:	br	 %8274 if.end307 if.then290

BASIC BLOCK if.then290
%8276:	br	 while.cond291

BASIC BLOCK while.cond291
%8277:	load	 inptr
%8278:	load	 insize
%8279:	icmp	 %8277 %8278
%8280:	br	 %8279 cond.false299 cond.true294

BASIC BLOCK cond.true294
%8281:	load	 inptr
%8282:	add	 %8281 XXX
%8283:	store	 %8282 inptr
%8284:	zext	 %8281
%8285:	getelementptr	 inbuf XXX %8284
%8286:	load	 %8285
%8287:	zext	 %8286
%8288:	br	 cond.end301

BASIC BLOCK cond.false299
%8289:	call	 fill_inbuf
%8290:	br	 cond.end301

BASIC BLOCK cond.end301
%8291:	phi	 %8287 %8289
%8292:	icmp	 %8291 XXX
%8293:	br	 %8292 while.end306 while.body305

BASIC BLOCK while.body305
%8294:	br	 while.cond291

BASIC BLOCK while.end306
%8295:	br	 if.end307

BASIC BLOCK if.end307
%8296:	load	 part_nb
%8297:	icmp	 %8296 XXX
%8298:	br	 %8297 if.end312 if.then310

BASIC BLOCK if.then310
%8299:	load	 inptr
%8300:	zext	 %8299
%8301:	add	 %8300 XXX
%8302:	store	 %8301 header_bytes
%8303:	br	 if.end312

BASIC BLOCK if.end312
%8304:	br	 if.end345

BASIC BLOCK if.else313
%8305:	getelementptr	 %7859 XXX XXX
%8306:	call	 %8305 XXX XXX memcmp
%8307:	icmp	 %8306 XXX
%8308:	br	 %8307 if.else330 land.lhs.true

BASIC BLOCK land.lhs.true
%8309:	load	 inptr
%8310:	icmp	 %8309 XXX
%8311:	br	 %8310 if.else330 land.lhs.true320

BASIC BLOCK land.lhs.true320
%8312:	call	 XXX XXX XXX memcmp
%8313:	icmp	 %8312 XXX
%8314:	br	 %8313 if.else330 if.then324

BASIC BLOCK if.then324
%8315:	store	 XXX inptr
%8316:	store	 unzip work
%8317:	call	 in check_zipfile
%8318:	icmp	 %8317 XXX
%8319:	br	 %8318 if.end329 if.then328

BASIC BLOCK if.then328
%8320:	br	 return

BASIC BLOCK if.end329
%8321:	store	 XXX last_member
%8322:	br	 if.end344

BASIC BLOCK if.else330
%8323:	getelementptr	 %7859 XXX XXX
%8324:	call	 %8323 XXX XXX memcmp
%8325:	icmp	 %8324 XXX
%8326:	br	 %8325 if.else336 if.then335

BASIC BLOCK if.then335
%8327:	store	 unpack work
%8328:	store	 XXX method
%8329:	br	 if.end343

BASIC BLOCK if.else336
%8330:	getelementptr	 %7859 XXX XXX
%8331:	call	 %8330 XXX XXX memcmp
%8332:	icmp	 %8331 XXX
%8333:	br	 %8332 if.end342 if.then341

BASIC BLOCK if.then341
%8334:	store	 unlzw work
%8335:	store	 XXX method
%8336:	store	 XXX last_member
%8337:	br	 if.end342

BASIC BLOCK if.end342
%8338:	br	 if.end343

BASIC BLOCK if.end343
%8339:	br	 if.end344

BASIC BLOCK if.end344
%8340:	br	 if.end345

BASIC BLOCK if.end345
%8341:	load	 method
%8342:	icmp	 %8341 XXX
%8343:	br	 %8342 if.end349 if.then348

BASIC BLOCK if.then348
%8344:	load	 method
%8345:	br	 return

BASIC BLOCK if.end349
%8346:	load	 part_nb
%8347:	icmp	 %8346 XXX
%8348:	br	 %8347 if.else354 if.then352

BASIC BLOCK if.then352
%8349:	load	 stderr
%8350:	load	 progname
%8351:	call	 %8349 XXX %8350 XXX fprintf
%8352:	store	 XXX exit_code
%8353:	br	 return

BASIC BLOCK if.else354
%8354:	load	 quiet
%8355:	icmp	 %8354 XXX
%8356:	br	 %8355 if.then356 if.end358

BASIC BLOCK if.then356
%8357:	load	 stderr
%8358:	load	 progname
%8359:	call	 %8357 XXX %8358 XXX fprintf
%8360:	br	 if.end358

BASIC BLOCK if.end358
%8361:	load	 exit_code
%8362:	icmp	 %8361 XXX
%8363:	br	 %8362 if.end362 if.then361

BASIC BLOCK if.then361
%8364:	store	 XXX exit_code
%8365:	br	 if.end362

BASIC BLOCK if.end362
%8366:	br	 return

BASIC BLOCK return
%8367:	phi	 XXX XXX XXX XXX %8344 XXX XXX XXX
%8368:	ret	 %8367

FUNCTION create_outfile

BASIC BLOCK entry
%8369:	alloca	 XXX
%8370:	load	 stdout
%8371:	call	 %8370 XXX fprintf
%8372:	load	 ascii
%8373:	icmp	 %8372 XXX
%8374:	br	 %8373 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%8375:	load	 decompress
%8376:	icmp	 %8375 XXX
%8377:	br	 %8376 if.end if.then

BASIC BLOCK if.then
%8378:	br	 if.end

BASIC BLOCK if.end
%8379:	br	 for.cond

BASIC BLOCK for.cond
%8380:	call	 XXX strlen
%8381:	trunc	 %8380
%8382:	icmp	 %8381 XXX
%8383:	br	 %8382 lor.lhs.false if.then7

BASIC BLOCK lor.lhs.false
%8384:	sext	 %8381
%8385:	getelementptr	 ofname XXX %8384
%8386:	load	 %8385
%8387:	sext	 %8386
%8388:	icmp	 %8387 XXX
%8389:	br	 %8388 if.end8 if.then7

BASIC BLOCK if.then7
%8390:	br	 for.end

BASIC BLOCK if.end8
%8391:	call	 check_ofname
%8392:	icmp	 %8391 XXX
%8393:	br	 %8392 if.end14 if.then12

BASIC BLOCK if.then12
%8394:	load	 ifd
%8395:	call	 %8394 close
%8396:	br	 return

BASIC BLOCK if.end14
%8397:	store	 XXX remove_ofname
%8398:	call	 XXX XXX XXX open
%8399:	store	 %8398 ofd
%8400:	load	 ofd
%8401:	icmp	 %8400 XXX
%8402:	br	 %8401 if.end20 if.then18

BASIC BLOCK if.then18
%8403:	call	 XXX perror
%8404:	load	 ifd
%8405:	call	 %8404 close
%8406:	store	 XXX exit_code
%8407:	br	 return

BASIC BLOCK if.end20
%8408:	load	 ofd
%8409:	call	 %8408 %8369 fstat
%8410:	icmp	 %8409 XXX
%8411:	br	 %8410 if.end29 if.then24

BASIC BLOCK if.then24
%8412:	load	 stderr
%8413:	load	 progname
%8414:	call	 %8412 XXX %8413 fprintf
%8415:	call	 XXX perror
%8416:	load	 ifd
%8417:	call	 %8416 close
%8418:	load	 ofd
%8419:	call	 %8418 close
%8420:	call	 XXX unlink
%8421:	store	 XXX exit_code
%8422:	br	 return

BASIC BLOCK if.end29
%8423:	call	 XXX %8369 name_too_long
%8424:	icmp	 %8423 XXX
%8425:	br	 %8424 if.then32 if.end33

BASIC BLOCK if.then32
%8426:	br	 return

BASIC BLOCK if.end33
%8427:	load	 decompress
%8428:	icmp	 %8427 XXX
%8429:	br	 %8428 if.else if.then35

BASIC BLOCK if.then35
%8430:	load	 quiet
%8431:	icmp	 %8430 XXX
%8432:	br	 %8431 if.then37 if.end39

BASIC BLOCK if.then37
%8433:	load	 stderr
%8434:	load	 progname
%8435:	call	 %8433 XXX %8434 XXX fprintf
%8436:	br	 if.end39

BASIC BLOCK if.end39
%8437:	load	 exit_code
%8438:	icmp	 %8437 XXX
%8439:	br	 %8438 if.end43 if.then42

BASIC BLOCK if.then42
%8440:	store	 XXX exit_code
%8441:	br	 if.end43

BASIC BLOCK if.end43
%8442:	br	 return

BASIC BLOCK if.else
%8443:	load	 ofd
%8444:	call	 %8443 close
%8445:	call	 XXX unlink
%8446:	store	 XXX save_orig_name
%8447:	call	 XXX strlen
%8448:	getelementptr	 XXX %8447
%8449:	load	 z_len
%8450:	sext	 %8449
%8451:	sub	 XXX %8450
%8452:	getelementptr	 %8448 %8451
%8453:	getelementptr	 %8452 XXX
%8454:	call	 %8453 XXX strcpy
%8455:	br	 if.end50

BASIC BLOCK if.end50
%8456:	br	 for.cond

BASIC BLOCK for.end
%8457:	load	 ifd
%8458:	call	 %8457 close
%8459:	load	 stderr
%8460:	load	 progname
%8461:	call	 %8459 XXX %8460 XXX fprintf
%8462:	store	 XXX exit_code
%8463:	br	 return

BASIC BLOCK return
%8464:	phi	 XXX XXX XXX XXX XXX XXX
%8465:	ret	 %8464

FUNCTION copy_stat

BASIC BLOCK entry
%8466:	load	 decompress
%8467:	icmp	 %8466 XXX
%8468:	br	 %8467 if.end7 land.lhs.true

BASIC BLOCK land.lhs.true
%8469:	load	 time_stamp
%8470:	icmp	 %8469 XXX
%8471:	br	 %8470 if.end7 land.lhs.true1

BASIC BLOCK land.lhs.true1
%8472:	getelementptr	 ifstat XXX XXX
%8473:	getelementptr	 %8472 XXX XXX
%8474:	load	 %8473
%8475:	load	 time_stamp
%8476:	icmp	 %8474 %8475
%8477:	br	 %8476 if.end7 if.then

BASIC BLOCK if.then
%8478:	load	 time_stamp
%8479:	getelementptr	 ifstat XXX XXX
%8480:	getelementptr	 %8479 XXX XXX
%8481:	store	 %8478 %8480
%8482:	load	 verbose
%8483:	icmp	 %8482 XXX
%8484:	br	 %8483 if.end if.then6

BASIC BLOCK if.then6
%8485:	load	 stderr
%8486:	call	 %8485 XXX XXX fprintf
%8487:	br	 if.end

BASIC BLOCK if.end
%8488:	br	 if.end7

BASIC BLOCK if.end7
%8489:	call	 XXX ifstat reset_times
%8490:	getelementptr	 ifstat XXX XXX
%8491:	load	 %8490
%8492:	and	 %8491 XXX
%8493:	call	 XXX %8492 chmod
%8494:	icmp	 %8493 XXX
%8495:	br	 %8494 if.end21 if.then10

BASIC BLOCK if.then10
%8496:	load	 quiet
%8497:	icmp	 %8496 XXX
%8498:	br	 %8497 if.then12 if.end14

BASIC BLOCK if.then12
%8499:	load	 stderr
%8500:	load	 progname
%8501:	call	 %8499 XXX %8500 fprintf
%8502:	br	 if.end14

BASIC BLOCK if.end14
%8503:	load	 exit_code
%8504:	icmp	 %8503 XXX
%8505:	br	 %8504 if.end17 if.then16

BASIC BLOCK if.then16
%8506:	store	 XXX exit_code
%8507:	br	 if.end17

BASIC BLOCK if.end17
%8508:	load	 quiet
%8509:	icmp	 %8508 XXX
%8510:	br	 %8509 if.then19 if.end20

BASIC BLOCK if.then19
%8511:	call	 XXX perror
%8512:	br	 if.end20

BASIC BLOCK if.end20
%8513:	br	 if.end21

BASIC BLOCK if.end21
%8514:	getelementptr	 ifstat XXX XXX
%8515:	load	 %8514
%8516:	getelementptr	 ifstat XXX XXX
%8517:	load	 %8516
%8518:	call	 XXX %8515 %8517 chown
%8519:	store	 XXX remove_ofname
%8520:	call	 XXX XXX chmod
%8521:	call	 XXX unlink
%8522:	icmp	 %8521 XXX
%8523:	br	 %8522 if.end37 if.then26

BASIC BLOCK if.then26
%8524:	load	 quiet
%8525:	icmp	 %8524 XXX
%8526:	br	 %8525 if.then28 if.end30

BASIC BLOCK if.then28
%8527:	load	 stderr
%8528:	load	 progname
%8529:	call	 %8527 XXX %8528 fprintf
%8530:	br	 if.end30

BASIC BLOCK if.end30
%8531:	load	 exit_code
%8532:	icmp	 %8531 XXX
%8533:	br	 %8532 if.end33 if.then32

BASIC BLOCK if.then32
%8534:	store	 XXX exit_code
%8535:	br	 if.end33

BASIC BLOCK if.end33
%8536:	load	 quiet
%8537:	icmp	 %8536 XXX
%8538:	br	 %8537 if.then35 if.end36

BASIC BLOCK if.then35
%8539:	call	 XXX perror
%8540:	br	 if.end36

BASIC BLOCK if.end36
%8541:	br	 if.end37

BASIC BLOCK if.end37
%8542:	ret	

FUNCTION check_ofname

BASIC BLOCK entry
%8543:	alloca	 XXX
%8544:	alloca	 XXX
%8545:	call	 XXX strlen
%8546:	trunc	 %8545
%8547:	call	 XXX %8543 stat
%8548:	icmp	 %8547 XXX
%8549:	br	 %8548 if.end if.then

BASIC BLOCK if.then
%8550:	br	 return

BASIC BLOCK if.end
%8551:	load	 decompress
%8552:	icmp	 %8551 XXX
%8553:	br	 %8552 land.lhs.true if.end18

BASIC BLOCK land.lhs.true
%8554:	icmp	 %8546 XXX
%8555:	br	 %8554 if.end18 land.lhs.true5

BASIC BLOCK land.lhs.true5
%8556:	call	 XXX %8543 name_too_long
%8557:	icmp	 %8556 XXX
%8558:	br	 %8557 if.end18 if.then8

BASIC BLOCK if.then8
%8559:	store	 XXX save_orig_name
%8560:	sext	 %8546
%8561:	getelementptr	 XXX %8560
%8562:	load	 z_len
%8563:	sext	 %8562
%8564:	sub	 XXX %8563
%8565:	getelementptr	 %8561 %8564
%8566:	getelementptr	 %8565 XXX
%8567:	call	 %8566 XXX strcpy
%8568:	call	 XXX %8543 stat
%8569:	icmp	 %8568 XXX
%8570:	br	 %8569 if.end17 if.then16

BASIC BLOCK if.then16
%8571:	br	 return

BASIC BLOCK if.end17
%8572:	br	 if.end18

BASIC BLOCK if.end18
%8573:	call	 istat %8543 same_file
%8574:	icmp	 %8573 XXX
%8575:	br	 %8574 if.end23 if.then21

BASIC BLOCK if.then21
%8576:	load	 stderr
%8577:	load	 progname
%8578:	call	 %8576 XXX %8577 XXX XXX fprintf
%8579:	store	 XXX exit_code
%8580:	br	 return

BASIC BLOCK if.end23
%8581:	load	 force
%8582:	icmp	 %8581 XXX
%8583:	br	 %8582 if.then25 if.end57

BASIC BLOCK if.then25
%8584:	getelementptr	 %8544 XXX XXX
%8585:	call	 %8584 XXX strcpy
%8586:	load	 stderr
%8587:	load	 progname
%8588:	call	 %8586 XXX %8587 XXX fprintf
%8589:	load	 foreground
%8590:	icmp	 %8589 XXX
%8591:	br	 %8590 if.end38 land.lhs.true29

BASIC BLOCK land.lhs.true29
%8592:	load	 stdin
%8593:	call	 %8592 fileno
%8594:	call	 %8593 isatty
%8595:	icmp	 %8594 XXX
%8596:	br	 %8595 if.end38 if.then33

BASIC BLOCK if.then33
%8597:	load	 stderr
%8598:	call	 %8597 XXX fprintf
%8599:	load	 stderr
%8600:	call	 %8599 fflush
%8601:	getelementptr	 %8544 XXX XXX
%8602:	load	 stdin
%8603:	call	 %8601 XXX %8602 fgets
%8604:	br	 if.end38

BASIC BLOCK if.end38
%8605:	getelementptr	 %8544 XXX XXX
%8606:	load	 %8605
%8607:	sext	 %8606
%8608:	sext	 %8607
%8609:	call	 __ctype_b_loc
%8610:	load	 %8609
%8611:	getelementptr	 %8610 %8608
%8612:	load	 %8611
%8613:	zext	 %8612
%8614:	and	 %8613 XXX
%8615:	icmp	 %8614 XXX
%8616:	br	 %8615 cond.false cond.true

BASIC BLOCK cond.true
%8617:	getelementptr	 %8544 XXX XXX
%8618:	load	 %8617
%8619:	sext	 %8618
%8620:	sub	 %8619 XXX
%8621:	add	 %8620 XXX
%8622:	br	 cond.end

BASIC BLOCK cond.false
%8623:	getelementptr	 %8544 XXX XXX
%8624:	load	 %8623
%8625:	sext	 %8624
%8626:	br	 cond.end

BASIC BLOCK cond.end
%8627:	phi	 %8621 %8625
%8628:	icmp	 %8627 XXX
%8629:	br	 %8628 if.end56 if.then50

BASIC BLOCK if.then50
%8630:	load	 stderr
%8631:	call	 %8630 XXX fprintf
%8632:	load	 exit_code
%8633:	icmp	 %8632 XXX
%8634:	br	 %8633 if.end55 if.then54

BASIC BLOCK if.then54
%8635:	store	 XXX exit_code
%8636:	br	 if.end55

BASIC BLOCK if.end55
%8637:	br	 return

BASIC BLOCK if.end56
%8638:	br	 if.end57

BASIC BLOCK if.end57
%8639:	call	 XXX XXX chmod
%8640:	call	 XXX unlink
%8641:	icmp	 %8640 XXX
%8642:	br	 %8641 if.end63 if.then61

BASIC BLOCK if.then61
%8643:	load	 stderr
%8644:	load	 progname
%8645:	call	 %8643 XXX %8644 fprintf
%8646:	call	 XXX perror
%8647:	store	 XXX exit_code
%8648:	br	 return

BASIC BLOCK if.end63
%8649:	br	 return

BASIC BLOCK return
%8650:	phi	 XXX XXX XXX XXX XXX XXX
%8651:	ret	 %8650

FUNCTION name_too_long

BASIC BLOCK entry
%8652:	alloca	 XXX
%8653:	call	 name strlen
%8654:	trunc	 %8653
%8655:	sub	 %8654 XXX
%8656:	sext	 %8655
%8657:	getelementptr	 name %8656
%8658:	load	 %8657
%8659:	bitcast	 %8652
%8660:	bitcast	 statb
%8661:	call	 %8659 %8660 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%8662:	sub	 %8654 XXX
%8663:	sext	 %8662
%8664:	getelementptr	 name %8663
%8665:	store	 XXX %8664
%8666:	call	 name %8652 stat
%8667:	icmp	 %8666 XXX
%8668:	br	 %8667 land.end land.rhs

BASIC BLOCK land.rhs
%8669:	call	 statb %8652 same_file
%8670:	icmp	 %8669 XXX
%8671:	br	 land.end

BASIC BLOCK land.end
%8672:	phi	 XXX %8670
%8673:	zext	 %8672
%8674:	sub	 %8654 XXX
%8675:	sext	 %8674
%8676:	getelementptr	 name %8675
%8677:	store	 %8658 %8676
%8678:	ret	 %8673

FUNCTION same_file

BASIC BLOCK entry
%8679:	getelementptr	 stat1 XXX XXX
%8680:	load	 %8679
%8681:	getelementptr	 stat2 XXX XXX
%8682:	load	 %8681
%8683:	icmp	 %8680 %8682
%8684:	br	 %8683 land.end land.rhs

BASIC BLOCK land.rhs
%8685:	getelementptr	 stat1 XXX XXX
%8686:	load	 %8685
%8687:	getelementptr	 stat2 XXX XXX
%8688:	load	 %8687
%8689:	icmp	 %8686 %8688
%8690:	br	 land.end

BASIC BLOCK land.end
%8691:	phi	 XXX %8689
%8692:	zext	 %8691
%8693:	ret	 %8692

FUNCTION get_suffix

BASIC BLOCK entry
%8694:	alloca	 XXX
%8695:	call	 XXX XXX strcmp
%8696:	icmp	 %8695 XXX
%8697:	br	 %8696 if.end if.then

BASIC BLOCK if.then
%8698:	getelementptr	 XXX XXX
%8699:	br	 if.end

BASIC BLOCK if.end
%8700:	phi	 %8698 XXX
%8701:	call	 name strlen
%8702:	trunc	 %8701
%8703:	icmp	 %8702 XXX
%8704:	br	 %8703 if.else if.then4

BASIC BLOCK if.then4
%8705:	getelementptr	 %8694 XXX XXX
%8706:	call	 %8705 name strcpy
%8707:	br	 if.end10

BASIC BLOCK if.else
%8708:	getelementptr	 %8694 XXX XXX
%8709:	sext	 %8702
%8710:	getelementptr	 name %8709
%8711:	getelementptr	 %8710 XXX
%8712:	getelementptr	 %8711 XXX
%8713:	call	 %8708 %8712 strcpy
%8714:	br	 if.end10

BASIC BLOCK if.end10
%8715:	getelementptr	 %8694 XXX XXX
%8716:	call	 %8715 strlwr
%8717:	getelementptr	 %8694 XXX XXX
%8718:	call	 %8717 strlen
%8719:	trunc	 %8718
%8720:	br	 do.body

BASIC BLOCK do.body
%8721:	phi	 %8700 %8752
%8722:	load	 %8721
%8723:	call	 %8722 strlen
%8724:	trunc	 %8723
%8725:	icmp	 %8719 %8724
%8726:	br	 %8725 if.end39 land.lhs.true

BASIC BLOCK land.lhs.true
%8727:	sub	 %8719 %8724
%8728:	sub	 %8727 XXX
%8729:	sext	 %8728
%8730:	getelementptr	 %8694 XXX %8729
%8731:	load	 %8730
%8732:	sext	 %8731
%8733:	icmp	 %8732 XXX
%8734:	br	 %8733 if.end39 land.lhs.true24

BASIC BLOCK land.lhs.true24
%8735:	getelementptr	 %8694 XXX XXX
%8736:	sext	 %8719
%8737:	getelementptr	 %8735 %8736
%8738:	sext	 %8724
%8739:	sub	 XXX %8738
%8740:	getelementptr	 %8737 %8739
%8741:	load	 %8721
%8742:	call	 %8740 %8741 strcmp
%8743:	icmp	 %8742 XXX
%8744:	br	 %8743 if.end39 if.then33

BASIC BLOCK if.then33
%8745:	sext	 %8702
%8746:	getelementptr	 name %8745
%8747:	sext	 %8724
%8748:	sub	 XXX %8747
%8749:	getelementptr	 %8746 %8748
%8750:	br	 return

BASIC BLOCK if.end39
%8751:	br	 do.cond

BASIC BLOCK do.cond
%8752:	getelementptr	 %8721 XXX
%8753:	load	 %8752
%8754:	icmp	 %8753 XXX
%8755:	br	 %8754 do.end do.body

BASIC BLOCK do.end
%8756:	br	 return

BASIC BLOCK return
%8757:	phi	 %8749 XXX
%8758:	ret	 %8757

FUNCTION do_stat

BASIC BLOCK entry
%8759:	call	 __errno_location
%8760:	store	 XXX %8759
%8761:	load	 to_stdout
%8762:	icmp	 %8761 XXX
%8763:	br	 %8762 land.lhs.true if.end

BASIC BLOCK land.lhs.true
%8764:	load	 force
%8765:	icmp	 %8764 XXX
%8766:	br	 %8765 if.then if.end

BASIC BLOCK if.then
%8767:	call	 name sbuf lstat
%8768:	br	 return

BASIC BLOCK if.end
%8769:	call	 name sbuf stat
%8770:	br	 return

BASIC BLOCK return
%8771:	phi	 %8769 %8767
%8772:	ret	 %8771
