sed.c:238:25: warning: field '__cd' with variable sized type 'struct __gconv_info' not at the end of a struct or class is a GNU extension [-Wgnu]
    struct __gconv_info __cd;
                        ^
sed.c:3406:40: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
              if ((compile_stack.avail == compile_stack.size))
                   ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
sed.c:3406:40: note: remove extraneous parentheses around the comparison to silence this warning
              if ((compile_stack.avail == compile_stack.size))
                  ~                    ^                    ~
sed.c:3406:40: note: use '=' to turn this equality comparison into an assignment
              if ((compile_stack.avail == compile_stack.size))
                                       ^~
                                       =
sed.c:3430:40: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
              if ((compile_stack.avail == 0))
                   ~~~~~~~~~~~~~~~~~~~~^~~~
sed.c:3430:40: note: remove extraneous parentheses around the comparison to silence this warning
              if ((compile_stack.avail == 0))
                  ~                    ^   ~
sed.c:3430:40: note: use '=' to turn this equality comparison into an assignment
              if ((compile_stack.avail == 0))
                                       ^~
                                       =
sed.c:3433:17: warning: add explicit braces to avoid dangling else [-Wdangling-else]
                else
                ^
sed.c:3441:40: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
              if ((compile_stack.avail == 0))
                   ~~~~~~~~~~~~~~~~~~~~^~~~
sed.c:3441:40: note: remove extraneous parentheses around the comparison to silence this warning
              if ((compile_stack.avail == 0))
                  ~                    ^   ~
sed.c:3441:40: note: use '=' to turn this equality comparison into an assignment
              if ((compile_stack.avail == 0))
                                       ^~
                                       =
sed.c:3444:17: warning: add explicit braces to avoid dangling else [-Wdangling-else]
                else
                ^
sed.c:4387:975: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
                  do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) p1 + mcnt; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) d; ; ; } while (0);

sed.c:4387:1054: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
                  do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) p1 + mcnt; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) d; ; ; } while (0);

sed.c:4439:20: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
          if (((d) == end2))
               ~~~~^~~~~~~
sed.c:4439:20: note: remove extraneous parentheses around the comparison to silence this warning
          if (((d) == end2))
              ~    ^      ~
sed.c:4439:20: note: use '=' to turn this equality comparison into an assignment
          if (((d) == end2))
                   ^~
                   =
sed.c:4456:13: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
   if (((d) == end2))
        ~~~~^~~~~~~
sed.c:4456:13: note: remove extraneous parentheses around the comparison to silence this warning
   if (((d) == end2))
       ~    ^      ~
sed.c:4456:13: note: use '=' to turn this equality comparison into an assignment
   if (((d) == end2))
            ^~
            =
sed.c:4463:967: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) p + mcnt; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) ((void *)0); ; ; } while (0);

sed.c:4463:1046: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) p + mcnt; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) ((void *)0); ; ; } while (0);

sed.c:4480:967: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) p + mcnt; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) d; ; ; } while (0);

sed.c:4480:1046: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) p + mcnt; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) d; ; ; } while (0);

sed.c:4549:967: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; } while (0);

sed.c:4549:1046: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; } while (0);

sed.c:4553:967: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; } while (0);

sed.c:4553:1046: warning: cast to 'fail_stack_elt_t' (aka 'const unsigned char *') from smaller integer type 'unsigned int' [-Wint-to-pointer-cast]
          do { char *destination; int this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)) { if (!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *) (destination = (char *) __builtin_alloca (((fail_stack).size << 1) * sizeof (fail_stack_elt_t)), memcpy ((destination), ((fail_stack).stack), ((fail_stack).size * sizeof (fail_stack_elt_t))), destination), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regstart[this_reg]; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) regend[this_reg]; ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) reg_info[this_reg].word; } ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) lowest_active_reg; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) highest_active_reg; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; ; fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) 0; ; ; } while (0);

sed.c:4628:91: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
   if ((re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1))
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
sed.c:4628:91: note: remove extraneous parentheses around the comparison to silence this warning
   if ((re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1))
       ~                                                                                  ^   ~
sed.c:4628:91: note: use '=' to turn this equality comparison into an assignment
   if ((re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1))
                                                                                          ^~
                                                                                          =
19 warnings generated.

FUNCTION gnu_dev_major

BASIC BLOCK entry
%1:	lshr	 __dev XXX
%2:	and	 %1 XXX
%3:	lshr	 __dev XXX
%4:	trunc	 %3
%5:	and	 %4 XXX
%6:	zext	 %5
%7:	or	 %2 %6
%8:	trunc	 %7
%9:	ret	 %8

FUNCTION gnu_dev_minor

BASIC BLOCK entry
%10:	and	 __dev XXX
%11:	lshr	 __dev XXX
%12:	trunc	 %11
%13:	and	 %12 XXX
%14:	zext	 %13
%15:	or	 %10 %14
%16:	trunc	 %15
%17:	ret	 %16

FUNCTION gnu_dev_makedev

BASIC BLOCK entry
%18:	and	 __minor XXX
%19:	and	 __major XXX
%20:	shl	 %19 XXX
%21:	or	 %18 %20
%22:	zext	 %21
%23:	and	 __minor XXX
%24:	zext	 %23
%25:	shl	 %24 XXX
%26:	or	 %22 %25
%27:	and	 __major XXX
%28:	zext	 %27
%29:	shl	 %28 XXX
%30:	or	 %26 %29
%31:	ret	 %30

FUNCTION main

BASIC BLOCK entry
%32:	call	 XXX re_set_syntax
%33:	store	 XXX myname
%34:	br	 while.cond

BASIC BLOCK while.cond
%35:	phi	 XXX %78
%36:	phi	 XXX %79
%37:	call	 argc argv XXX XXX XXX getopt_long
%38:	icmp	 %37 XXX
%39:	br	 %38 while.end while.body

BASIC BLOCK while.body
%40:	switch	 %37 sw.default XXX sw.bb XXX sw.bb2 XXX sw.bb15 XXX sw.bb16 XXX sw.bb18

BASIC BLOCK sw.bb
%41:	store	 XXX no_default_output
%42:	br	 sw.epilog

BASIC BLOCK sw.bb2
%43:	icmp	 %35 XXX
%44:	br	 %43 if.else if.then

BASIC BLOCK if.then
%45:	load	 optarg
%46:	call	 %45 strlen
%47:	add	 %46 XXX
%48:	trunc	 %47
%49:	call	 %48 ck_malloc
%50:	load	 optarg
%51:	call	 %49 %50 strcpy
%52:	br	 if.end

BASIC BLOCK if.else
%53:	call	 %35 strlen
%54:	load	 optarg
%55:	call	 %54 strlen
%56:	add	 %53 %55
%57:	add	 %56 XXX
%58:	trunc	 %57
%59:	call	 %35 %58 ck_realloc
%60:	load	 optarg
%61:	call	 %59 %60 strcat
%62:	br	 if.end

BASIC BLOCK if.end
%63:	phi	 %49 %59
%64:	call	 %63 XXX strcat
%65:	br	 sw.epilog

BASIC BLOCK sw.bb15
%66:	load	 optarg
%67:	call	 %66 compile_file
%68:	br	 sw.epilog

BASIC BLOCK sw.bb16
%69:	load	 stdout
%70:	load	 version_string
%71:	call	 %69 XXX %70 fprintf
%72:	call	 XXX exit
%73:	unreachable	

BASIC BLOCK sw.bb18
%74:	call	 XXX usage
%75:	br	 sw.epilog

BASIC BLOCK sw.default
%76:	call	 XXX usage
%77:	br	 sw.epilog

BASIC BLOCK sw.epilog
%78:	phi	 %35 %35 %35 %63 %35
%79:	phi	 %36 %36 XXX XXX %36
%80:	br	 while.cond

BASIC BLOCK while.end
%81:	icmp	 %35 XXX
%82:	br	 %81 if.end20 if.then19

BASIC BLOCK if.then19
%83:	call	 %35 compile_string
%84:	call	 %35 free
%85:	br	 if.end20

BASIC BLOCK if.end20
%86:	icmp	 %36 XXX
%87:	br	 %86 if.then22 if.end27

BASIC BLOCK if.then22
%88:	load	 optind
%89:	icmp	 %88 argc
%90:	br	 %89 if.end26 if.then25

BASIC BLOCK if.then25
%91:	call	 XXX usage
%92:	br	 if.end26

BASIC BLOCK if.end26
%93:	load	 optind
%94:	add	 %93 XXX
%95:	store	 %94 optind
%96:	sext	 %93
%97:	getelementptr	 argv %96
%98:	load	 %97
%99:	call	 %98 compile_string
%100:	br	 if.end27

BASIC BLOCK if.end27
%101:	load	 jumps
%102:	br	 for.cond

BASIC BLOCK for.cond
%103:	phi	 %101 %148
%104:	icmp	 %103 XXX
%105:	br	 %104 for.end49 for.body

BASIC BLOCK for.body
%106:	load	 labels
%107:	br	 for.cond29

BASIC BLOCK for.cond29
%108:	phi	 %106 %121
%109:	icmp	 %108 XXX
%110:	br	 %109 for.end for.body31

BASIC BLOCK for.body31
%111:	getelementptr	 %108 XXX XXX
%112:	load	 %111
%113:	getelementptr	 %103 XXX XXX
%114:	load	 %113
%115:	call	 %112 %114 strcmp
%116:	icmp	 %115 XXX
%117:	br	 %116 if.then35 if.end36

BASIC BLOCK if.then35
%118:	br	 for.end

BASIC BLOCK if.end36
%119:	br	 for.inc

BASIC BLOCK for.inc
%120:	getelementptr	 %108 XXX XXX
%121:	load	 %120
%122:	br	 for.cond29

BASIC BLOCK for.end
%123:	getelementptr	 %103 XXX XXX
%124:	load	 %123
%125:	load	 %124
%126:	sext	 %125
%127:	icmp	 %126 XXX
%128:	br	 %127 if.end43 land.lhs.true

BASIC BLOCK land.lhs.true
%129:	icmp	 %108 XXX
%130:	br	 %129 if.then41 if.end43

BASIC BLOCK if.then41
%131:	getelementptr	 %103 XXX XXX
%132:	load	 %131
%133:	call	 XXX %132 panic
%134:	br	 if.end43

BASIC BLOCK if.end43
%135:	getelementptr	 %103 XXX XXX
%136:	load	 %135
%137:	sext	 %136
%138:	getelementptr	 %103 XXX XXX
%139:	load	 %138
%140:	getelementptr	 %139 XXX XXX
%141:	load	 %140
%142:	getelementptr	 %141 %137
%143:	getelementptr	 %142 XXX XXX
%144:	bitcast	 %143
%145:	store	 %108 %144
%146:	br	 for.inc47

BASIC BLOCK for.inc47
%147:	getelementptr	 %103 XXX XXX
%148:	load	 %147
%149:	br	 for.cond

BASIC BLOCK for.end49
%150:	store	 XXX XXX
%151:	store	 XXX XXX
%152:	call	 XXX ck_malloc
%153:	store	 %152 XXX
%154:	store	 XXX XXX
%155:	store	 XXX XXX
%156:	call	 XXX ck_malloc
%157:	store	 %156 XXX
%158:	store	 XXX XXX
%159:	store	 XXX XXX
%160:	call	 XXX ck_malloc
%161:	store	 %160 XXX
%162:	load	 XXX
%163:	getelementptr	 %162 XXX
%164:	store	 XXX %163
%165:	load	 optind
%166:	icmp	 argc %165
%167:	br	 %166 if.else58 if.then56

BASIC BLOCK if.then56
%168:	load	 last_input_file
%169:	add	 %168 XXX
%170:	store	 %169 last_input_file
%171:	call	 XXX read_file
%172:	br	 if.end75

BASIC BLOCK if.else58
%173:	br	 while.cond59

BASIC BLOCK while.cond59
%174:	load	 optind
%175:	icmp	 %174 argc
%176:	br	 %175 while.end74 while.body62

BASIC BLOCK while.body62
%177:	load	 optind
%178:	sub	 argc XXX
%179:	icmp	 %177 %178
%180:	br	 %179 if.end67 if.then65

BASIC BLOCK if.then65
%181:	load	 last_input_file
%182:	add	 %181 XXX
%183:	store	 %182 last_input_file
%184:	br	 if.end67

BASIC BLOCK if.end67
%185:	load	 optind
%186:	sext	 %185
%187:	getelementptr	 argv %186
%188:	load	 %187
%189:	call	 %188 read_file
%190:	load	 optind
%191:	add	 %190 XXX
%192:	store	 %191 optind
%193:	load	 quit_cmd
%194:	icmp	 %193 XXX
%195:	br	 %194 if.end73 if.then72

BASIC BLOCK if.then72
%196:	br	 while.end74

BASIC BLOCK if.end73
%197:	br	 while.cond59

BASIC BLOCK while.end74
%198:	br	 if.end75

BASIC BLOCK if.end75
%199:	call	 close_files
%200:	load	 bad_input
%201:	icmp	 %200 XXX
%202:	br	 %201 if.end78 if.then77

BASIC BLOCK if.then77
%203:	call	 XXX exit
%204:	unreachable	

BASIC BLOCK if.end78
%205:	call	 XXX exit
%206:	unreachable	

BASIC BLOCK return
%207:	ret	 XXX

FUNCTION re_set_syntax

BASIC BLOCK entry
%208:	load	 re_syntax_options
%209:	store	 syntax re_syntax_options
%210:	ret	 %208

FUNCTION ck_malloc

BASIC BLOCK entry
%211:	icmp	 size XXX
%212:	br	 %211 if.then if.end

BASIC BLOCK if.then
%213:	add	 size XXX
%214:	br	 if.end

BASIC BLOCK if.end
%215:	phi	 size %213
%216:	sext	 %215
%217:	call	 %216 malloc
%218:	icmp	 %217 XXX
%219:	br	 %218 if.end3 if.then2

BASIC BLOCK if.then2
%220:	call	 XXX panic
%221:	br	 if.end3

BASIC BLOCK if.end3
%222:	ret	 %217

FUNCTION ck_realloc

BASIC BLOCK entry
%223:	sext	 size
%224:	call	 ptr %223 realloc
%225:	icmp	 %224 XXX
%226:	br	 %225 if.end if.then

BASIC BLOCK if.then
%227:	call	 XXX panic
%228:	br	 if.end

BASIC BLOCK if.end
%229:	ret	 %224

FUNCTION compile_file

BASIC BLOCK entry
%230:	store	 XXX prog_end
%231:	store	 XXX prog_cur
%232:	store	 XXX prog_start
%233:	store	 str prog_name
%234:	store	 XXX prog_line
%235:	getelementptr	 str XXX
%236:	load	 %235
%237:	sext	 %236
%238:	icmp	 %237 XXX
%239:	br	 %238 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%240:	getelementptr	 str XXX
%241:	load	 %240
%242:	sext	 %241
%243:	icmp	 %242 XXX
%244:	br	 %243 if.else if.then

BASIC BLOCK if.then
%245:	load	 stdin
%246:	store	 %245 prog_file
%247:	br	 if.end

BASIC BLOCK if.else
%248:	call	 str XXX ck_fopen
%249:	store	 %248 prog_file
%250:	br	 if.end

BASIC BLOCK if.end
%251:	load	 prog_file
%252:	call	 %251 _IO_getc
%253:	icmp	 %252 XXX
%254:	br	 %253 if.else21 if.then9

BASIC BLOCK if.then9
%255:	load	 prog_file
%256:	call	 %255 _IO_getc
%257:	icmp	 %256 XXX
%258:	br	 %257 if.end14 if.then13

BASIC BLOCK if.then13
%259:	load	 no_default_output
%260:	add	 %259 XXX
%261:	store	 %260 no_default_output
%262:	br	 if.end14

BASIC BLOCK if.end14
%263:	br	 while.cond

BASIC BLOCK while.cond
%264:	phi	 %256 %272
%265:	icmp	 %264 XXX
%266:	br	 %265 land.end land.rhs

BASIC BLOCK land.rhs
%267:	icmp	 %264 XXX
%268:	br	 land.end

BASIC BLOCK land.end
%269:	phi	 XXX %267
%270:	br	 %269 while.end while.body

BASIC BLOCK while.body
%271:	load	 prog_file
%272:	call	 %271 _IO_getc
%273:	br	 while.cond

BASIC BLOCK while.end
%274:	load	 prog_line
%275:	add	 %274 XXX
%276:	store	 %275 prog_line
%277:	br	 if.end27

BASIC BLOCK if.else21
%278:	icmp	 %252 XXX
%279:	br	 %278 if.end26 if.then24

BASIC BLOCK if.then24
%280:	load	 prog_file
%281:	call	 %252 %280 ungetc
%282:	br	 if.end26

BASIC BLOCK if.end26
%283:	br	 if.end27

BASIC BLOCK if.end27
%284:	load	 the_program
%285:	load	 prog_line
%286:	call	 %284 %285 compile_program
%287:	store	 %286 the_program
%288:	ret	

FUNCTION usage

BASIC BLOCK entry
%289:	icmp	 status XXX
%290:	br	 %289 cond.false cond.true

BASIC BLOCK cond.true
%291:	load	 stdout
%292:	br	 cond.end

BASIC BLOCK cond.false
%293:	load	 stdout
%294:	br	 cond.end

BASIC BLOCK cond.end
%295:	phi	 %291 %293
%296:	load	 myname
%297:	call	 %295 XXX %296 fprintf
%298:	call	 status exit
%299:	unreachable	

BASIC BLOCK return
%300:	ret	

FUNCTION compile_string

BASIC BLOCK entry
%301:	store	 XXX prog_file
%302:	store	 XXX prog_line
%303:	store	 str prog_cur
%304:	store	 str prog_start
%305:	call	 str strlen
%306:	getelementptr	 str %305
%307:	store	 %306 prog_end
%308:	load	 the_program
%309:	load	 prog_line
%310:	call	 %308 %309 compile_program
%311:	store	 %310 the_program
%312:	ret	

FUNCTION panic

BASIC BLOCK entry
%313:	alloca	 XXX
%314:	load	 stdout
%315:	load	 myname
%316:	call	 %314 XXX %315 fprintf
%317:	getelementptr	 %313 XXX XXX
%318:	bitcast	 %317
%319:	call	 %318 llvm.va_start
%320:	load	 stdout
%321:	getelementptr	 %313 XXX XXX
%322:	call	 %320 str %321 vfprintf
%323:	getelementptr	 %313 XXX XXX
%324:	bitcast	 %323
%325:	call	 %324 llvm.va_end
%326:	load	 stdout
%327:	call	 XXX %326 _IO_putc
%328:	call	 XXX exit
%329:	unreachable	

BASIC BLOCK return
%330:	ret	

FUNCTION read_file

BASIC BLOCK entry
%331:	load	 name
%332:	sext	 %331
%333:	icmp	 %332 XXX
%334:	br	 %333 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%335:	getelementptr	 name XXX
%336:	load	 %335
%337:	sext	 %336
%338:	icmp	 %337 XXX
%339:	br	 %338 if.else if.then

BASIC BLOCK if.then
%340:	load	 stdin
%341:	store	 %340 input_file
%342:	br	 if.end11

BASIC BLOCK if.else
%343:	call	 name XXX fopen
%344:	store	 %343 input_file
%345:	load	 input_file
%346:	icmp	 %345 XXX
%347:	br	 %346 if.end if.then7

BASIC BLOCK if.then7
%348:	call	 __errno_location
%349:	load	 %348
%350:	call	 %349 strerror
%351:	load	 bad_input
%352:	add	 %351 XXX
%353:	store	 %352 bad_input
%354:	load	 stdout
%355:	load	 myname
%356:	call	 %354 XXX %355 name %350 fprintf
%357:	br	 return

BASIC BLOCK if.end
%358:	br	 if.end11

BASIC BLOCK if.end11
%359:	br	 while.cond

BASIC BLOCK while.cond
%360:	call	 read_pattern_space
%361:	icmp	 %360 XXX
%362:	br	 %361 while.end while.body

BASIC BLOCK while.body
%363:	load	 the_program
%364:	call	 %363 execute_program
%365:	load	 no_default_output
%366:	icmp	 %365 XXX
%367:	br	 %366 if.then14 if.end15

BASIC BLOCK if.then14
%368:	load	 XXX
%369:	load	 XXX
%370:	load	 stdout
%371:	call	 %368 XXX %369 %370 ck_fwrite
%372:	br	 if.end15

BASIC BLOCK if.end15
%373:	load	 XXX
%374:	icmp	 %373 XXX
%375:	br	 %374 if.end18 if.then17

BASIC BLOCK if.then17
%376:	load	 XXX
%377:	load	 XXX
%378:	load	 stdout
%379:	call	 %376 XXX %377 %378 ck_fwrite
%380:	store	 XXX XXX
%381:	br	 if.end18

BASIC BLOCK if.end18
%382:	load	 quit_cmd
%383:	icmp	 %382 XXX
%384:	br	 %383 if.end21 if.then20

BASIC BLOCK if.then20
%385:	br	 while.end

BASIC BLOCK if.end21
%386:	br	 while.cond

BASIC BLOCK while.end
%387:	load	 input_file
%388:	call	 %387 ck_fclose
%389:	br	 return

BASIC BLOCK return
%390:	ret	

FUNCTION close_files

BASIC BLOCK entry
%391:	br	 for.cond

BASIC BLOCK for.cond
%392:	phi	 XXX %408
%393:	icmp	 %392 XXX
%394:	br	 %393 for.end for.body

BASIC BLOCK for.body
%395:	sext	 %392
%396:	getelementptr	 file_ptrs XXX %395
%397:	getelementptr	 %396 XXX XXX
%398:	load	 %397
%399:	icmp	 %398 XXX
%400:	br	 %399 if.end if.then

BASIC BLOCK if.then
%401:	sext	 %392
%402:	getelementptr	 file_ptrs XXX %401
%403:	getelementptr	 %402 XXX XXX
%404:	load	 %403
%405:	call	 %404 fclose
%406:	br	 if.end

BASIC BLOCK if.end
%407:	br	 for.inc

BASIC BLOCK for.inc
%408:	add	 %392 XXX
%409:	br	 for.cond

BASIC BLOCK for.end
%410:	ret	

FUNCTION compile_program

BASIC BLOCK entry
%411:	icmp	 vector XXX
%412:	br	 %411 if.then if.end

BASIC BLOCK if.then
%413:	call	 XXX ck_malloc
%414:	bitcast	 %413
%415:	call	 XXX ck_malloc
%416:	bitcast	 %415
%417:	getelementptr	 %414 XXX XXX
%418:	store	 %416 %417
%419:	getelementptr	 %414 XXX XXX
%420:	store	 XXX %419
%421:	getelementptr	 %414 XXX XXX
%422:	store	 XXX %421
%423:	getelementptr	 %414 XXX XXX
%424:	store	 XXX %423
%425:	getelementptr	 %414 XXX XXX
%426:	store	 XXX %425
%427:	br	 if.end

BASIC BLOCK if.end
%428:	phi	 vector %414
%429:	br	 for.cond

BASIC BLOCK for.cond
%430:	phi	 XXX %1118
%431:	br	 skip_comment

BASIC BLOCK skip_comment
%432:	phi	 %430 %587
%433:	br	 do.body

BASIC BLOCK do.body
%434:	phi	 %432 %442
%435:	call	 inchar
%436:	icmp	 %434 XXX
%437:	br	 %436 if.end6 land.lhs.true

BASIC BLOCK land.lhs.true
%438:	icmp	 %435 XXX
%439:	br	 %438 if.end6 if.then4

BASIC BLOCK if.then4
%440:	call	 inchar
%441:	br	 if.end6

BASIC BLOCK if.end6
%442:	phi	 %440 %435 %435
%443:	br	 do.cond

BASIC BLOCK do.cond
%444:	icmp	 %442 XXX
%445:	br	 %444 land.end land.rhs

BASIC BLOCK land.rhs
%446:	sext	 %442
%447:	call	 __ctype_b_loc
%448:	load	 %447
%449:	getelementptr	 %448 %446
%450:	load	 %449
%451:	zext	 %450
%452:	and	 %451 XXX
%453:	icmp	 %452 XXX
%454:	br	 %453 lor.lhs.false lor.end

BASIC BLOCK lor.lhs.false
%455:	icmp	 %442 XXX
%456:	br	 %455 lor.rhs lor.end

BASIC BLOCK lor.rhs
%457:	icmp	 %442 XXX
%458:	br	 lor.end

BASIC BLOCK lor.end
%459:	phi	 XXX XXX %457
%460:	br	 land.end

BASIC BLOCK land.end
%461:	phi	 XXX %459
%462:	br	 %461 do.end do.body

BASIC BLOCK do.end
%463:	icmp	 %442 XXX
%464:	br	 %463 if.end17 if.then16

BASIC BLOCK if.then16
%465:	br	 for.end521

BASIC BLOCK if.end17
%466:	call	 %442 savchar
%467:	getelementptr	 %428 XXX XXX
%468:	load	 %467
%469:	getelementptr	 %428 XXX XXX
%470:	load	 %469
%471:	icmp	 %468 %470
%472:	br	 %471 if.end31 if.then22

BASIC BLOCK if.then22
%473:	getelementptr	 %428 XXX XXX
%474:	load	 %473
%475:	bitcast	 %474
%476:	getelementptr	 %428 XXX XXX
%477:	load	 %476
%478:	add	 %477 XXX
%479:	sext	 %478
%480:	mul	 %479 XXX
%481:	trunc	 %480
%482:	call	 %475 %481 ck_realloc
%483:	bitcast	 %482
%484:	getelementptr	 %428 XXX XXX
%485:	store	 %483 %484
%486:	getelementptr	 %428 XXX XXX
%487:	load	 %486
%488:	add	 %487 XXX
%489:	store	 %488 %486
%490:	br	 if.end31

BASIC BLOCK if.end31
%491:	getelementptr	 %428 XXX XXX
%492:	load	 %491
%493:	getelementptr	 %428 XXX XXX
%494:	load	 %493
%495:	sext	 %494
%496:	getelementptr	 %492 %495
%497:	getelementptr	 %428 XXX XXX
%498:	load	 %497
%499:	add	 %498 XXX
%500:	store	 %499 %497
%501:	getelementptr	 %496 XXX XXX
%502:	getelementptr	 %501 XXX XXX
%503:	store	 XXX %502
%504:	getelementptr	 %496 XXX XXX
%505:	getelementptr	 %504 XXX XXX
%506:	store	 XXX %505
%507:	getelementptr	 %496 XXX XXX
%508:	store	 XXX %507
%509:	getelementptr	 %496 XXX XXX
%510:	store	 XXX %509
%511:	getelementptr	 %496 XXX XXX
%512:	call	 %511 compile_address
%513:	icmp	 %512 XXX
%514:	br	 %513 if.end65 if.then39

BASIC BLOCK if.then39
%515:	call	 inchar
%516:	icmp	 %515 XXX
%517:	br	 %516 if.else63 if.then43

BASIC BLOCK if.then43
%518:	br	 do.body44

BASIC BLOCK do.body44
%519:	call	 inchar
%520:	br	 do.cond46

BASIC BLOCK do.cond46
%521:	icmp	 %519 XXX
%522:	br	 %521 land.end56 land.rhs49

BASIC BLOCK land.rhs49
%523:	sext	 %519
%524:	call	 __ctype_b_loc
%525:	load	 %524
%526:	getelementptr	 %525 %523
%527:	load	 %526
%528:	zext	 %527
%529:	and	 %528 XXX
%530:	icmp	 %529 XXX
%531:	br	 land.end56

BASIC BLOCK land.end56
%532:	phi	 XXX %530
%533:	br	 %532 do.end57 do.body44

BASIC BLOCK do.end57
%534:	call	 %519 savchar
%535:	getelementptr	 %496 XXX XXX
%536:	call	 %535 compile_address
%537:	icmp	 %536 XXX
%538:	br	 %537 if.else if.then61

BASIC BLOCK if.then61
%539:	br	 if.end62

BASIC BLOCK if.else
%540:	call	 XXX bad_prog
%541:	br	 if.end62

BASIC BLOCK if.end62
%542:	br	 if.end64

BASIC BLOCK if.else63
%543:	call	 %515 savchar
%544:	br	 if.end64

BASIC BLOCK if.end64
%545:	br	 if.end65

BASIC BLOCK if.end65
%546:	getelementptr	 %496 XXX XXX
%547:	getelementptr	 %546 XXX XXX
%548:	load	 %547
%549:	icmp	 %548 XXX
%550:	br	 %549 if.end86 land.lhs.true70

BASIC BLOCK land.lhs.true70
%551:	getelementptr	 %496 XXX XXX
%552:	getelementptr	 %551 XXX XXX
%553:	load	 %552
%554:	icmp	 %553 XXX
%555:	br	 %554 if.end86 land.lhs.true75

BASIC BLOCK land.lhs.true75
%556:	getelementptr	 %496 XXX XXX
%557:	getelementptr	 %556 XXX XXX
%558:	load	 %557
%559:	getelementptr	 %496 XXX XXX
%560:	getelementptr	 %559 XXX XXX
%561:	load	 %560
%562:	icmp	 %558 %561
%563:	br	 %562 if.end86 if.then81

BASIC BLOCK if.then81
%564:	getelementptr	 %496 XXX XXX
%565:	getelementptr	 %564 XXX XXX
%566:	load	 %565
%567:	getelementptr	 %496 XXX XXX
%568:	getelementptr	 %567 XXX XXX
%569:	store	 %566 %568
%570:	br	 if.end86

BASIC BLOCK if.end86
%571:	call	 inchar
%572:	icmp	 %571 XXX
%573:	br	 %572 if.end91 if.then90

BASIC BLOCK if.then90
%574:	call	 XXX bad_prog
%575:	br	 if.end91

BASIC BLOCK if.end91
%576:	br	 new_cmd

BASIC BLOCK new_cmd
%577:	phi	 %571 %612
%578:	switch	 %577 sw.default519 XXX sw.bb XXX sw.bb109 XXX sw.bb134 XXX sw.bb134 XXX sw.bb141 XXX sw.bb176 XXX sw.bb190 XXX sw.bb224 XXX sw.bb234 XXX sw.bb234 XXX sw.bb238 XXX sw.bb238 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb244 XXX sw.bb277 XXX sw.bb284 XXX sw.bb291 XXX sw.bb458

BASIC BLOCK sw.bb
%579:	getelementptr	 %496 XXX XXX
%580:	getelementptr	 %579 XXX XXX
%581:	load	 %580
%582:	icmp	 %581 XXX
%583:	br	 %582 if.end97 if.then96

BASIC BLOCK if.then96
%584:	call	 XXX bad_prog
%585:	br	 if.end97

BASIC BLOCK if.end97
%586:	br	 do.body98

BASIC BLOCK do.body98
%587:	call	 inchar
%588:	br	 do.cond100

BASIC BLOCK do.cond100
%589:	icmp	 %587 XXX
%590:	br	 %589 land.end106 land.rhs103

BASIC BLOCK land.rhs103
%591:	icmp	 %587 XXX
%592:	br	 land.end106

BASIC BLOCK land.end106
%593:	phi	 XXX %591
%594:	br	 %593 do.end107 do.body98

BASIC BLOCK do.end107
%595:	getelementptr	 %428 XXX XXX
%596:	load	 %595
%597:	add	 %596 XXX
%598:	store	 %597 %595
%599:	br	 skip_comment

BASIC BLOCK sw.bb109
%600:	getelementptr	 %496 XXX XXX
%601:	load	 %600
%602:	and	 %601 XXX
%603:	icmp	 %602 XXX
%604:	br	 %603 if.end114 if.then113

BASIC BLOCK if.then113
%605:	call	 XXX bad_prog
%606:	br	 if.end114

BASIC BLOCK if.end114
%607:	getelementptr	 %496 XXX XXX
%608:	load	 %607
%609:	or	 %608 XXX
%610:	store	 %609 %607
%611:	br	 do.body116

BASIC BLOCK do.body116
%612:	call	 inchar
%613:	br	 do.cond118

BASIC BLOCK do.cond118
%614:	icmp	 %612 XXX
%615:	br	 %614 land.end128 land.rhs121

BASIC BLOCK land.rhs121
%616:	sext	 %612
%617:	call	 __ctype_b_loc
%618:	load	 %617
%619:	getelementptr	 %618 %616
%620:	load	 %619
%621:	zext	 %620
%622:	and	 %621 XXX
%623:	icmp	 %622 XXX
%624:	br	 land.end128

BASIC BLOCK land.end128
%625:	phi	 XXX %623
%626:	br	 %625 do.end129 do.body116

BASIC BLOCK do.end129
%627:	icmp	 %612 XXX
%628:	br	 %627 if.end133 if.then132

BASIC BLOCK if.then132
%629:	call	 XXX bad_prog
%630:	br	 if.end133

BASIC BLOCK if.end133
%631:	br	 new_cmd

BASIC BLOCK sw.bb134
%632:	getelementptr	 %496 XXX XXX
%633:	getelementptr	 %632 XXX XXX
%634:	load	 %633
%635:	icmp	 %634 XXX
%636:	br	 %635 if.end140 if.then139

BASIC BLOCK if.then139
%637:	call	 XXX bad_prog
%638:	br	 if.end140

BASIC BLOCK if.end140
%639:	br	 sw.bb141

BASIC BLOCK sw.bb141
%640:	trunc	 %577
%641:	getelementptr	 %496 XXX XXX
%642:	store	 %640 %641
%643:	call	 inchar
%644:	icmp	 %643 XXX
%645:	br	 %644 lor.lhs.false147 if.then151

BASIC BLOCK lor.lhs.false147
%646:	call	 inchar
%647:	icmp	 %646 XXX
%648:	br	 %647 if.end152 if.then151

BASIC BLOCK if.then151
%649:	call	 XXX bad_prog
%650:	br	 if.end152

BASIC BLOCK if.end152
%651:	call	 init_buffer
%652:	br	 while.cond

BASIC BLOCK while.cond
%653:	call	 inchar
%654:	icmp	 %653 XXX
%655:	br	 %654 land.end160 land.rhs157

BASIC BLOCK land.rhs157
%656:	icmp	 %653 XXX
%657:	br	 land.end160

BASIC BLOCK land.end160
%658:	phi	 XXX %656
%659:	br	 %658 while.end while.body

BASIC BLOCK while.body
%660:	icmp	 %653 XXX
%661:	br	 %660 if.end165 if.then163

BASIC BLOCK if.then163
%662:	call	 inchar
%663:	br	 if.end165

BASIC BLOCK if.end165
%664:	phi	 %662 %653
%665:	call	 %651 %664 add1_buffer
%666:	br	 while.cond

BASIC BLOCK while.end
%667:	icmp	 %653 XXX
%668:	br	 %667 if.end169 if.then168

BASIC BLOCK if.then168
%669:	call	 %651 %653 add1_buffer
%670:	br	 if.end169

BASIC BLOCK if.end169
%671:	call	 %651 size_buffer
%672:	call	 %671 ck_malloc
%673:	call	 %651 get_buffer
%674:	sext	 %671
%675:	call	 %673 %672 %674 bcopy
%676:	call	 %651 flush_buffer
%677:	getelementptr	 %496 XXX XXX
%678:	bitcast	 %677
%679:	getelementptr	 %678 XXX XXX
%680:	store	 %671 %679
%681:	getelementptr	 %496 XXX XXX
%682:	bitcast	 %681
%683:	getelementptr	 %682 XXX XXX
%684:	store	 %672 %683
%685:	br	 sw.epilog520

BASIC BLOCK sw.bb176
%686:	trunc	 %577
%687:	getelementptr	 %496 XXX XXX
%688:	store	 %686 %687
%689:	load	 program_depth
%690:	add	 %689 XXX
%691:	store	 %690 program_depth
%692:	load	 prog_line
%693:	call	 XXX %692 compile_program
%694:	getelementptr	 %496 XXX XXX
%695:	bitcast	 %694
%696:	store	 %693 %695
%697:	getelementptr	 %496 XXX XXX
%698:	bitcast	 %697
%699:	load	 %698
%700:	getelementptr	 %699 XXX XXX
%701:	store	 %428 %700
%702:	getelementptr	 %428 XXX XXX
%703:	load	 %702
%704:	sub	 %703 XXX
%705:	getelementptr	 %496 XXX XXX
%706:	bitcast	 %705
%707:	load	 %706
%708:	getelementptr	 %707 XXX XXX
%709:	store	 %704 %708
%710:	br	 sw.epilog520

BASIC BLOCK sw.bb190
%711:	load	 program_depth
%712:	icmp	 %711 XXX
%713:	br	 %712 if.then192 if.end193

BASIC BLOCK if.then192
%714:	call	 XXX bad_prog
%715:	br	 if.end193

BASIC BLOCK if.end193
%716:	load	 program_depth
%717:	add	 %716 XXX
%718:	store	 %717 program_depth
%719:	trunc	 %577
%720:	getelementptr	 %496 XXX XXX
%721:	store	 %719 %720
%722:	getelementptr	 %496 XXX XXX
%723:	getelementptr	 %722 XXX XXX
%724:	load	 %723
%725:	icmp	 %724 XXX
%726:	br	 %725 if.end202 if.then201

BASIC BLOCK if.then201
%727:	call	 XXX bad_prog
%728:	br	 if.end202

BASIC BLOCK if.end202
%729:	br	 while.cond203

BASIC BLOCK while.cond203
%730:	call	 inchar
%731:	icmp	 %730 XXX
%732:	br	 %731 land.end213 land.lhs.true207

BASIC BLOCK land.lhs.true207
%733:	icmp	 %730 XXX
%734:	br	 %733 land.end213 land.rhs210

BASIC BLOCK land.rhs210
%735:	icmp	 %730 XXX
%736:	br	 land.end213

BASIC BLOCK land.end213
%737:	phi	 XXX XXX %735
%738:	br	 %737 while.end223 while.body214

BASIC BLOCK while.body214
%739:	sext	 %730
%740:	call	 __ctype_b_loc
%741:	load	 %740
%742:	getelementptr	 %741 %739
%743:	load	 %742
%744:	zext	 %743
%745:	and	 %744 XXX
%746:	icmp	 %745 XXX
%747:	br	 %746 if.then221 if.end222

BASIC BLOCK if.then221
%748:	call	 XXX bad_prog
%749:	br	 if.end222

BASIC BLOCK if.end222
%750:	br	 while.cond203

BASIC BLOCK while.end223
%751:	br	 return

BASIC BLOCK sw.bb224
%752:	trunc	 %577
%753:	getelementptr	 %496 XXX XXX
%754:	store	 %752 %753
%755:	getelementptr	 %496 XXX XXX
%756:	getelementptr	 %755 XXX XXX
%757:	load	 %756
%758:	icmp	 %757 XXX
%759:	br	 %758 if.end232 if.then231

BASIC BLOCK if.then231
%760:	call	 XXX bad_prog
%761:	br	 if.end232

BASIC BLOCK if.end232
%762:	load	 labels
%763:	call	 %762 %496 %428 setup_jump
%764:	store	 %763 labels
%765:	br	 sw.epilog520

BASIC BLOCK sw.bb234
%766:	trunc	 %577
%767:	getelementptr	 %496 XXX XXX
%768:	store	 %766 %767
%769:	load	 jumps
%770:	call	 %769 %496 %428 setup_jump
%771:	store	 %770 jumps
%772:	br	 sw.epilog520

BASIC BLOCK sw.bb238
%773:	getelementptr	 %496 XXX XXX
%774:	getelementptr	 %773 XXX XXX
%775:	load	 %774
%776:	icmp	 %775 XXX
%777:	br	 %776 if.end243 if.then242

BASIC BLOCK if.then242
%778:	call	 XXX bad_prog
%779:	br	 if.end243

BASIC BLOCK if.end243
%780:	br	 sw.bb244

BASIC BLOCK sw.bb244
%781:	trunc	 %577
%782:	getelementptr	 %496 XXX XXX
%783:	store	 %781 %782
%784:	br	 do.body247

BASIC BLOCK do.body247
%785:	call	 inchar
%786:	br	 do.cond249

BASIC BLOCK do.cond249
%787:	icmp	 %785 XXX
%788:	br	 %787 land.end265 land.lhs.true252

BASIC BLOCK land.lhs.true252
%789:	sext	 %785
%790:	call	 __ctype_b_loc
%791:	load	 %790
%792:	getelementptr	 %791 %789
%793:	load	 %792
%794:	zext	 %793
%795:	and	 %794 XXX
%796:	icmp	 %795 XXX
%797:	br	 %796 land.end265 land.lhs.true259

BASIC BLOCK land.lhs.true259
%798:	icmp	 %785 XXX
%799:	br	 %798 land.end265 land.rhs262

BASIC BLOCK land.rhs262
%800:	icmp	 %785 XXX
%801:	br	 land.end265

BASIC BLOCK land.end265
%802:	phi	 XXX XXX XXX %800
%803:	br	 %802 do.end266 do.body247

BASIC BLOCK do.end266
%804:	icmp	 %785 XXX
%805:	br	 %804 if.end276 land.lhs.true269

BASIC BLOCK land.lhs.true269
%806:	icmp	 %785 XXX
%807:	br	 %806 if.end276 land.lhs.true272

BASIC BLOCK land.lhs.true272
%808:	icmp	 %785 XXX
%809:	br	 %808 if.end276 if.then275

BASIC BLOCK if.then275
%810:	call	 XXX bad_prog
%811:	br	 if.end276

BASIC BLOCK if.end276
%812:	br	 sw.epilog520

BASIC BLOCK sw.bb277
%813:	getelementptr	 %496 XXX XXX
%814:	getelementptr	 %813 XXX XXX
%815:	load	 %814
%816:	icmp	 %815 XXX
%817:	br	 %816 if.end283 if.then282

BASIC BLOCK if.then282
%818:	call	 XXX bad_prog
%819:	br	 if.end283

BASIC BLOCK if.end283
%820:	br	 sw.bb284

BASIC BLOCK sw.bb284
%821:	trunc	 %577
%822:	getelementptr	 %496 XXX XXX
%823:	store	 %821 %822
%824:	icmp	 %577 XXX
%825:	zext	 %824
%826:	call	 %825 compile_filename
%827:	getelementptr	 %496 XXX XXX
%828:	bitcast	 %827
%829:	store	 %826 %828
%830:	br	 sw.epilog520

BASIC BLOCK sw.bb291
%831:	trunc	 %577
%832:	getelementptr	 %496 XXX XXX
%833:	store	 %831 %832
%834:	call	 inchar
%835:	call	 %834 compile_regex
%836:	load	 last_regex
%837:	getelementptr	 %496 XXX XXX
%838:	bitcast	 %837
%839:	getelementptr	 %838 XXX XXX
%840:	store	 %836 %839
%841:	call	 init_buffer
%842:	br	 while.cond297

BASIC BLOCK while.cond297
%843:	call	 inchar
%844:	icmp	 %843 XXX
%845:	br	 %844 land.end307 land.lhs.true301

BASIC BLOCK land.lhs.true301
%846:	icmp	 %843 %834
%847:	br	 %846 land.end307 land.rhs304

BASIC BLOCK land.rhs304
%848:	icmp	 %843 XXX
%849:	br	 land.end307

BASIC BLOCK land.end307
%850:	phi	 XXX XXX %848
%851:	br	 %850 while.end323 while.body308

BASIC BLOCK while.body308
%852:	icmp	 %843 XXX
%853:	br	 %852 if.else321 if.then311

BASIC BLOCK if.then311
%854:	call	 inchar
%855:	icmp	 %854 XXX
%856:	br	 %855 if.end320 if.then315

BASIC BLOCK if.then315
%857:	icmp	 %854 XXX
%858:	br	 %857 if.end319 if.then318

BASIC BLOCK if.then318
%859:	call	 %841 %843 add1_buffer
%860:	br	 if.end319

BASIC BLOCK if.end319
%861:	call	 %841 %854 add1_buffer
%862:	br	 if.end320

BASIC BLOCK if.end320
%863:	br	 if.end322

BASIC BLOCK if.else321
%864:	call	 %841 %843 add1_buffer
%865:	br	 if.end322

BASIC BLOCK if.end322
%866:	br	 while.cond297

BASIC BLOCK while.end323
%867:	icmp	 %843 %834
%868:	br	 %867 if.end335 if.then326

BASIC BLOCK if.then326
%869:	icmp	 %843 XXX
%870:	br	 %869 if.end334 land.lhs.true329

BASIC BLOCK land.lhs.true329
%871:	load	 prog_line
%872:	icmp	 %871 XXX
%873:	br	 %872 if.end334 if.then332

BASIC BLOCK if.then332
%874:	load	 prog_line
%875:	add	 %874 XXX
%876:	store	 %875 prog_line
%877:	br	 if.end334

BASIC BLOCK if.end334
%878:	call	 XXX bad_prog
%879:	br	 if.end335

BASIC BLOCK if.end335
%880:	call	 %841 size_buffer
%881:	getelementptr	 %496 XXX XXX
%882:	bitcast	 %881
%883:	getelementptr	 %882 XXX XXX
%884:	store	 %880 %883
%885:	getelementptr	 %496 XXX XXX
%886:	bitcast	 %885
%887:	getelementptr	 %886 XXX XXX
%888:	load	 %887
%889:	call	 %888 ck_malloc
%890:	getelementptr	 %496 XXX XXX
%891:	bitcast	 %890
%892:	getelementptr	 %891 XXX XXX
%893:	store	 %889 %892
%894:	call	 %841 get_buffer
%895:	getelementptr	 %496 XXX XXX
%896:	bitcast	 %895
%897:	getelementptr	 %896 XXX XXX
%898:	load	 %897
%899:	getelementptr	 %496 XXX XXX
%900:	bitcast	 %899
%901:	getelementptr	 %900 XXX XXX
%902:	load	 %901
%903:	sext	 %902
%904:	call	 %894 %898 %903 bcopy
%905:	call	 %841 flush_buffer
%906:	getelementptr	 %496 XXX XXX
%907:	bitcast	 %906
%908:	getelementptr	 %907 XXX XXX
%909:	store	 XXX %908
%910:	getelementptr	 %496 XXX XXX
%911:	bitcast	 %910
%912:	getelementptr	 %911 XXX XXX
%913:	store	 XXX %912
%914:	icmp	 %843 XXX
%915:	br	 %914 if.end360 if.then359

BASIC BLOCK if.then359
%916:	br	 sw.epilog520

BASIC BLOCK if.end360
%917:	br	 do.body361

BASIC BLOCK do.body361
%918:	call	 inchar
%919:	switch	 %918 sw.default XXX sw.bb363 XXX sw.bb375 XXX sw.bb398 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb406 XXX sw.bb442 XXX sw.bb442 XXX sw.bb442

BASIC BLOCK sw.bb363
%920:	getelementptr	 %496 XXX XXX
%921:	bitcast	 %920
%922:	getelementptr	 %921 XXX XXX
%923:	load	 %922
%924:	and	 %923 XXX
%925:	icmp	 %924 XXX
%926:	br	 %925 if.end370 if.then369

BASIC BLOCK if.then369
%927:	call	 XXX bad_prog
%928:	br	 if.end370

BASIC BLOCK if.end370
%929:	getelementptr	 %496 XXX XXX
%930:	bitcast	 %929
%931:	getelementptr	 %930 XXX XXX
%932:	load	 %931
%933:	or	 %932 XXX
%934:	store	 %933 %931
%935:	br	 sw.epilog

BASIC BLOCK sw.bb375
%936:	getelementptr	 %496 XXX XXX
%937:	bitcast	 %936
%938:	getelementptr	 %937 XXX XXX
%939:	load	 %938
%940:	and	 %939 XXX
%941:	icmp	 %940 XXX
%942:	br	 %941 if.end386 if.then381

BASIC BLOCK if.then381
%943:	getelementptr	 %496 XXX XXX
%944:	bitcast	 %943
%945:	getelementptr	 %944 XXX XXX
%946:	load	 %945
%947:	and	 %946 XXX
%948:	store	 %947 %945
%949:	br	 if.end386

BASIC BLOCK if.end386
%950:	getelementptr	 %496 XXX XXX
%951:	bitcast	 %950
%952:	getelementptr	 %951 XXX XXX
%953:	load	 %952
%954:	and	 %953 XXX
%955:	icmp	 %954 XXX
%956:	br	 %955 if.end393 if.then392

BASIC BLOCK if.then392
%957:	call	 XXX bad_prog
%958:	br	 if.end393

BASIC BLOCK if.end393
%959:	getelementptr	 %496 XXX XXX
%960:	bitcast	 %959
%961:	getelementptr	 %960 XXX XXX
%962:	load	 %961
%963:	or	 %962 XXX
%964:	store	 %963 %961
%965:	br	 sw.epilog

BASIC BLOCK sw.bb398
%966:	getelementptr	 %496 XXX XXX
%967:	bitcast	 %966
%968:	getelementptr	 %967 XXX XXX
%969:	load	 %968
%970:	or	 %969 XXX
%971:	store	 %970 %968
%972:	call	 XXX compile_filename
%973:	getelementptr	 %496 XXX XXX
%974:	bitcast	 %973
%975:	getelementptr	 %974 XXX XXX
%976:	store	 %972 %975
%977:	br	 sw.epilog

BASIC BLOCK sw.bb406
%978:	getelementptr	 %496 XXX XXX
%979:	bitcast	 %978
%980:	getelementptr	 %979 XXX XXX
%981:	load	 %980
%982:	and	 %981 XXX
%983:	icmp	 %982 XXX
%984:	br	 %983 if.end413 if.then412

BASIC BLOCK if.then412
%985:	call	 XXX bad_prog
%986:	br	 if.end413

BASIC BLOCK if.end413
%987:	getelementptr	 %496 XXX XXX
%988:	bitcast	 %987
%989:	getelementptr	 %988 XXX XXX
%990:	load	 %989
%991:	and	 %990 XXX
%992:	icmp	 %991 XXX
%993:	br	 %992 if.end425 if.then420

BASIC BLOCK if.then420
%994:	getelementptr	 %496 XXX XXX
%995:	bitcast	 %994
%996:	getelementptr	 %995 XXX XXX
%997:	load	 %996
%998:	or	 %997 XXX
%999:	store	 %998 %996
%1000:	br	 if.end425

BASIC BLOCK if.end425
%1001:	br	 while.cond426

BASIC BLOCK while.cond426
%1002:	phi	 %918 %1016
%1003:	phi	 XXX %1015
%1004:	sext	 %1002
%1005:	call	 __ctype_b_loc
%1006:	load	 %1005
%1007:	getelementptr	 %1006 %1004
%1008:	load	 %1007
%1009:	zext	 %1008
%1010:	and	 %1009 XXX
%1011:	icmp	 %1010 XXX
%1012:	br	 %1011 while.end438 while.body433

BASIC BLOCK while.body433
%1013:	mul	 %1003 XXX
%1014:	add	 %1013 %1002
%1015:	sub	 %1014 XXX
%1016:	call	 inchar
%1017:	br	 while.cond426

BASIC BLOCK while.end438
%1018:	call	 %1002 savchar
%1019:	getelementptr	 %496 XXX XXX
%1020:	bitcast	 %1019
%1021:	getelementptr	 %1020 XXX XXX
%1022:	store	 %1003 %1021
%1023:	br	 sw.epilog

BASIC BLOCK sw.bb442
%1024:	br	 sw.epilog

BASIC BLOCK sw.default
%1025:	call	 XXX bad_prog
%1026:	br	 sw.epilog

BASIC BLOCK sw.epilog
%1027:	phi	 %918 %918 %1002 XXX %918 %918
%1028:	br	 do.cond443

BASIC BLOCK do.cond443
%1029:	icmp	 %1027 XXX
%1030:	br	 %1029 land.end452 land.lhs.true446

BASIC BLOCK land.lhs.true446
%1031:	icmp	 %1027 XXX
%1032:	br	 %1031 land.end452 land.rhs449

BASIC BLOCK land.rhs449
%1033:	icmp	 %1027 XXX
%1034:	br	 land.end452

BASIC BLOCK land.end452
%1035:	phi	 XXX XXX %1033
%1036:	br	 %1035 do.end453 do.body361

BASIC BLOCK do.end453
%1037:	icmp	 %1027 XXX
%1038:	br	 %1037 if.end457 if.then456

BASIC BLOCK if.then456
%1039:	br	 sw.epilog520

BASIC BLOCK if.end457
%1040:	br	 sw.epilog520

BASIC BLOCK sw.bb458
%1041:	trunc	 %577
%1042:	getelementptr	 %496 XXX XXX
%1043:	store	 %1041 %1042
%1044:	call	 XXX ck_malloc
%1045:	br	 for.cond462

BASIC BLOCK for.cond462
%1046:	phi	 XXX %1054
%1047:	icmp	 %1046 XXX
%1048:	br	 %1047 for.end for.body

BASIC BLOCK for.body
%1049:	trunc	 %1046
%1050:	sext	 %1046
%1051:	getelementptr	 %1044 %1050
%1052:	store	 %1049 %1051
%1053:	br	 for.inc

BASIC BLOCK for.inc
%1054:	add	 %1046 XXX
%1055:	br	 for.cond462

BASIC BLOCK for.end
%1056:	call	 init_buffer
%1057:	call	 inchar
%1058:	br	 while.cond471

BASIC BLOCK while.cond471
%1059:	call	 inchar
%1060:	icmp	 %1059 XXX
%1061:	br	 %1060 land.end478 land.rhs475

BASIC BLOCK land.rhs475
%1062:	icmp	 %1059 %1057
%1063:	br	 land.end478

BASIC BLOCK land.end478
%1064:	phi	 XXX %1062
%1065:	br	 %1064 while.end480 while.body479

BASIC BLOCK while.body479
%1066:	call	 %1056 %1059 add1_buffer
%1067:	br	 while.cond471

BASIC BLOCK while.end480
%1068:	getelementptr	 %496 XXX XXX
%1069:	bitcast	 %1068
%1070:	store	 %1044 %1069
%1071:	call	 %1056 get_buffer
%1072:	call	 %1056 size_buffer
%1073:	br	 for.cond484

BASIC BLOCK for.cond484
%1074:	phi	 %1059 %1079
%1075:	phi	 %1071 %1089
%1076:	phi	 %1072 %1098
%1077:	icmp	 %1076 XXX
%1078:	br	 %1077 for.end503 for.body486

BASIC BLOCK for.body486
%1079:	call	 inchar
%1080:	icmp	 %1079 XXX
%1081:	br	 %1080 if.end491 if.then490

BASIC BLOCK if.then490
%1082:	call	 XXX bad_prog
%1083:	br	 if.end491

BASIC BLOCK if.end491
%1084:	icmp	 %1079 %1057
%1085:	br	 %1084 if.end495 if.then494

BASIC BLOCK if.then494
%1086:	call	 XXX bad_prog
%1087:	br	 if.end495

BASIC BLOCK if.end495
%1088:	trunc	 %1079
%1089:	getelementptr	 %1075 XXX
%1090:	load	 %1075
%1091:	zext	 %1090
%1092:	getelementptr	 %496 XXX XXX
%1093:	bitcast	 %1092
%1094:	load	 %1093
%1095:	getelementptr	 %1094 %1091
%1096:	store	 %1088 %1095
%1097:	br	 for.inc501

BASIC BLOCK for.inc501
%1098:	add	 %1076 XXX
%1099:	br	 for.cond484

BASIC BLOCK for.end503
%1100:	call	 %1056 flush_buffer
%1101:	call	 inchar
%1102:	icmp	 %1101 %1057
%1103:	br	 %1102 lor.lhs.false507 if.then517

BASIC BLOCK lor.lhs.false507
%1104:	call	 inchar
%1105:	icmp	 %1104 XXX
%1106:	br	 %1105 if.end518 land.lhs.true511

BASIC BLOCK land.lhs.true511
%1107:	icmp	 %1104 XXX
%1108:	br	 %1107 if.end518 land.lhs.true514

BASIC BLOCK land.lhs.true514
%1109:	icmp	 %1104 XXX
%1110:	br	 %1109 if.end518 if.then517

BASIC BLOCK if.then517
%1111:	phi	 %1074 %1104
%1112:	call	 XXX bad_prog
%1113:	br	 if.end518

BASIC BLOCK if.end518
%1114:	phi	 %1111 %1104 %1104 %1104
%1115:	br	 sw.epilog520

BASIC BLOCK sw.default519
%1116:	call	 XXX bad_prog
%1117:	br	 sw.epilog520

BASIC BLOCK sw.epilog520
%1118:	phi	 %577 %1114 %843 %1027 %1027 %577 %785 %577 %577 %577 %653
%1119:	br	 for.cond

BASIC BLOCK for.end521
%1120:	load	 program_depth
%1121:	icmp	 %1120 XXX
%1122:	br	 %1121 if.end524 if.then523

BASIC BLOCK if.then523
%1123:	store	 open_line prog_line
%1124:	call	 XXX bad_prog
%1125:	br	 if.end524

BASIC BLOCK if.end524
%1126:	br	 return

BASIC BLOCK return
%1127:	ret	 %428

FUNCTION ck_fopen

BASIC BLOCK entry
%1128:	call	 name mode fopen
%1129:	icmp	 %1128 XXX
%1130:	br	 %1129 if.end if.then

BASIC BLOCK if.then
%1131:	call	 XXX name panic
%1132:	br	 if.end

BASIC BLOCK if.end
%1133:	br	 for.cond

BASIC BLOCK for.cond
%1134:	phi	 XXX %1163
%1135:	icmp	 %1134 XXX
%1136:	br	 %1135 for.end for.body

BASIC BLOCK for.body
%1137:	sext	 %1134
%1138:	getelementptr	 __id_s XXX %1137
%1139:	getelementptr	 %1138 XXX XXX
%1140:	load	 %1139
%1141:	icmp	 %1128 %1140
%1142:	br	 %1141 if.end16 if.then3

BASIC BLOCK if.then3
%1143:	sext	 %1134
%1144:	getelementptr	 __id_s XXX %1143
%1145:	getelementptr	 %1144 XXX XXX
%1146:	load	 %1145
%1147:	call	 %1146 free
%1148:	call	 name strlen
%1149:	add	 %1148 XXX
%1150:	trunc	 %1149
%1151:	call	 %1150 ck_malloc
%1152:	sext	 %1134
%1153:	getelementptr	 __id_s XXX %1152
%1154:	getelementptr	 %1153 XXX XXX
%1155:	store	 %1151 %1154
%1156:	sext	 %1134
%1157:	getelementptr	 __id_s XXX %1156
%1158:	getelementptr	 %1157 XXX XXX
%1159:	load	 %1158
%1160:	call	 %1159 name strcpy
%1161:	br	 for.end

BASIC BLOCK if.end16
%1162:	br	 for.inc

BASIC BLOCK for.inc
%1163:	add	 %1134 XXX
%1164:	br	 for.cond

BASIC BLOCK for.end
%1165:	icmp	 %1134 XXX
%1166:	br	 %1165 if.end52 if.then19

BASIC BLOCK if.then19
%1167:	br	 for.cond20

BASIC BLOCK for.cond20
%1168:	phi	 XXX %1179
%1169:	icmp	 %1168 XXX
%1170:	br	 %1169 for.end33 for.body23

BASIC BLOCK for.body23
%1171:	sext	 %1168
%1172:	getelementptr	 __id_s XXX %1171
%1173:	getelementptr	 %1172 XXX XXX
%1174:	load	 %1173
%1175:	icmp	 %1174 XXX
%1176:	br	 %1175 if.end30 if.then29

BASIC BLOCK if.then29
%1177:	br	 for.end33

BASIC BLOCK if.end30
%1178:	br	 for.inc31

BASIC BLOCK for.inc31
%1179:	add	 %1168 XXX
%1180:	br	 for.cond20

BASIC BLOCK for.end33
%1181:	icmp	 %1168 XXX
%1182:	br	 %1181 if.end37 if.then36

BASIC BLOCK if.then36
%1183:	call	 XXX panic
%1184:	br	 if.end37

BASIC BLOCK if.end37
%1185:	sext	 %1168
%1186:	getelementptr	 __id_s XXX %1185
%1187:	getelementptr	 %1186 XXX XXX
%1188:	store	 %1128 %1187
%1189:	call	 name strlen
%1190:	add	 %1189 XXX
%1191:	trunc	 %1190
%1192:	call	 %1191 ck_malloc
%1193:	sext	 %1168
%1194:	getelementptr	 __id_s XXX %1193
%1195:	getelementptr	 %1194 XXX XXX
%1196:	store	 %1192 %1195
%1197:	sext	 %1168
%1198:	getelementptr	 __id_s XXX %1197
%1199:	getelementptr	 %1198 XXX XXX
%1200:	load	 %1199
%1201:	call	 %1200 name strcpy
%1202:	br	 if.end52

BASIC BLOCK if.end52
%1203:	ret	 %1128

FUNCTION inchar

BASIC BLOCK entry
%1204:	load	 prog_file
%1205:	icmp	 %1204 XXX
%1206:	br	 %1205 if.else4 if.then

BASIC BLOCK if.then
%1207:	load	 prog_file
%1208:	call	 %1207 feof
%1209:	icmp	 %1208 XXX
%1210:	br	 %1209 if.else if.then2

BASIC BLOCK if.then2
%1211:	br	 return

BASIC BLOCK if.else
%1212:	load	 prog_file
%1213:	call	 %1212 _IO_getc
%1214:	br	 if.end

BASIC BLOCK if.end
%1215:	br	 if.end12

BASIC BLOCK if.else4
%1216:	load	 prog_cur
%1217:	icmp	 %1216 XXX
%1218:	br	 %1217 if.then6 if.else7

BASIC BLOCK if.then6
%1219:	br	 return

BASIC BLOCK if.else7
%1220:	load	 prog_cur
%1221:	load	 prog_end
%1222:	icmp	 %1220 %1221
%1223:	br	 %1222 if.else9 if.then8

BASIC BLOCK if.then8
%1224:	store	 XXX prog_cur
%1225:	br	 if.end10

BASIC BLOCK if.else9
%1226:	load	 prog_cur
%1227:	getelementptr	 %1226 XXX
%1228:	store	 %1227 prog_cur
%1229:	load	 %1226
%1230:	zext	 %1229
%1231:	br	 if.end10

BASIC BLOCK if.end10
%1232:	phi	 XXX %1230
%1233:	br	 if.end11

BASIC BLOCK if.end11
%1234:	br	 if.end12

BASIC BLOCK if.end12
%1235:	phi	 %1213 %1232
%1236:	icmp	 %1235 XXX
%1237:	br	 %1236 if.end17 land.lhs.true

BASIC BLOCK land.lhs.true
%1238:	load	 prog_line
%1239:	icmp	 %1238 XXX
%1240:	br	 %1239 if.end17 if.then16

BASIC BLOCK if.then16
%1241:	load	 prog_line
%1242:	add	 %1241 XXX
%1243:	store	 %1242 prog_line
%1244:	br	 if.end17

BASIC BLOCK if.end17
%1245:	br	 return

BASIC BLOCK return
%1246:	phi	 XXX %1235 XXX
%1247:	ret	 %1246

FUNCTION savchar

BASIC BLOCK entry
%1248:	icmp	 ch XXX
%1249:	br	 %1248 if.end if.then

BASIC BLOCK if.then
%1250:	br	 if.end6

BASIC BLOCK if.end
%1251:	icmp	 ch XXX
%1252:	br	 %1251 if.end4 land.lhs.true

BASIC BLOCK land.lhs.true
%1253:	load	 prog_line
%1254:	icmp	 %1253 XXX
%1255:	br	 %1254 if.end4 if.then3

BASIC BLOCK if.then3
%1256:	load	 prog_line
%1257:	add	 %1256 XXX
%1258:	store	 %1257 prog_line
%1259:	br	 if.end4

BASIC BLOCK if.end4
%1260:	load	 prog_file
%1261:	icmp	 %1260 XXX
%1262:	br	 %1261 if.else if.then5

BASIC BLOCK if.then5
%1263:	load	 prog_file
%1264:	call	 ch %1263 ungetc
%1265:	br	 if.end6

BASIC BLOCK if.else
%1266:	trunc	 ch
%1267:	load	 prog_cur
%1268:	getelementptr	 %1267 XXX
%1269:	store	 %1268 prog_cur
%1270:	store	 %1266 %1268
%1271:	br	 if.end6

BASIC BLOCK if.end6
%1272:	ret	

FUNCTION compile_address

BASIC BLOCK entry
%1273:	call	 inchar
%1274:	sext	 %1273
%1275:	call	 __ctype_b_loc
%1276:	load	 %1275
%1277:	getelementptr	 %1276 %1274
%1278:	load	 %1277
%1279:	zext	 %1278
%1280:	and	 %1279 XXX
%1281:	icmp	 %1280 XXX
%1282:	br	 %1281 if.else if.then

BASIC BLOCK if.then
%1283:	sub	 %1273 XXX
%1284:	br	 while.cond

BASIC BLOCK while.cond
%1285:	phi	 %1283 %1302
%1286:	call	 inchar
%1287:	icmp	 %1286 XXX
%1288:	br	 %1287 land.end land.rhs

BASIC BLOCK land.rhs
%1289:	sext	 %1286
%1290:	call	 __ctype_b_loc
%1291:	load	 %1290
%1292:	getelementptr	 %1291 %1289
%1293:	load	 %1292
%1294:	zext	 %1293
%1295:	and	 %1294 XXX
%1296:	icmp	 %1295 XXX
%1297:	br	 land.end

BASIC BLOCK land.end
%1298:	phi	 XXX %1296
%1299:	br	 %1298 while.end while.body

BASIC BLOCK while.body
%1300:	mul	 %1285 XXX
%1301:	add	 %1300 %1286
%1302:	sub	 %1301 XXX
%1303:	br	 while.cond

BASIC BLOCK while.end
%1304:	br	 while.cond11

BASIC BLOCK while.cond11
%1305:	phi	 %1286 %1319
%1306:	icmp	 %1305 XXX
%1307:	br	 %1306 land.end21 land.rhs14

BASIC BLOCK land.rhs14
%1308:	sext	 %1305
%1309:	call	 __ctype_b_loc
%1310:	load	 %1309
%1311:	getelementptr	 %1310 %1308
%1312:	load	 %1311
%1313:	zext	 %1312
%1314:	and	 %1313 XXX
%1315:	icmp	 %1314 XXX
%1316:	br	 land.end21

BASIC BLOCK land.end21
%1317:	phi	 XXX %1315
%1318:	br	 %1317 while.end24 while.body22

BASIC BLOCK while.body22
%1319:	call	 inchar
%1320:	br	 while.cond11

BASIC BLOCK while.end24
%1321:	call	 %1305 savchar
%1322:	getelementptr	 addr XXX XXX
%1323:	store	 XXX %1322
%1324:	getelementptr	 addr XXX XXX
%1325:	store	 %1285 %1324
%1326:	br	 return

BASIC BLOCK if.else
%1327:	icmp	 %1273 XXX
%1328:	br	 %1327 lor.lhs.false if.then29

BASIC BLOCK lor.lhs.false
%1329:	icmp	 %1273 XXX
%1330:	br	 %1329 if.else46 if.then29

BASIC BLOCK if.then29
%1331:	getelementptr	 addr XXX XXX
%1332:	store	 XXX %1331
%1333:	icmp	 %1273 XXX
%1334:	br	 %1333 if.end if.then33

BASIC BLOCK if.then33
%1335:	call	 inchar
%1336:	br	 if.end

BASIC BLOCK if.end
%1337:	phi	 %1335 %1273
%1338:	call	 %1337 compile_regex
%1339:	load	 last_regex
%1340:	getelementptr	 addr XXX XXX
%1341:	store	 %1339 %1340
%1342:	br	 do.body

BASIC BLOCK do.body
%1343:	call	 inchar
%1344:	br	 do.cond

BASIC BLOCK do.cond
%1345:	icmp	 %1343 XXX
%1346:	br	 %1345 land.end45 land.rhs38

BASIC BLOCK land.rhs38
%1347:	sext	 %1343
%1348:	call	 __ctype_b_loc
%1349:	load	 %1348
%1350:	getelementptr	 %1349 %1347
%1351:	load	 %1350
%1352:	zext	 %1351
%1353:	and	 %1352 XXX
%1354:	icmp	 %1353 XXX
%1355:	br	 land.end45

BASIC BLOCK land.end45
%1356:	phi	 XXX %1354
%1357:	br	 %1356 do.end do.body

BASIC BLOCK do.end
%1358:	call	 %1343 savchar
%1359:	br	 return

BASIC BLOCK if.else46
%1360:	icmp	 %1273 XXX
%1361:	br	 %1360 if.else65 if.then49

BASIC BLOCK if.then49
%1362:	getelementptr	 addr XXX XXX
%1363:	store	 XXX %1362
%1364:	br	 do.body51

BASIC BLOCK do.body51
%1365:	call	 inchar
%1366:	br	 do.cond53

BASIC BLOCK do.cond53
%1367:	icmp	 %1365 XXX
%1368:	br	 %1367 land.end63 land.rhs56

BASIC BLOCK land.rhs56
%1369:	sext	 %1365
%1370:	call	 __ctype_b_loc
%1371:	load	 %1370
%1372:	getelementptr	 %1371 %1369
%1373:	load	 %1372
%1374:	zext	 %1373
%1375:	and	 %1374 XXX
%1376:	icmp	 %1375 XXX
%1377:	br	 land.end63

BASIC BLOCK land.end63
%1378:	phi	 XXX %1376
%1379:	br	 %1378 do.end64 do.body51

BASIC BLOCK do.end64
%1380:	call	 %1365 savchar
%1381:	br	 return

BASIC BLOCK if.else65
%1382:	call	 %1273 savchar
%1383:	br	 if.end66

BASIC BLOCK if.end66
%1384:	br	 if.end67

BASIC BLOCK if.end67
%1385:	br	 if.end68

BASIC BLOCK if.end68
%1386:	br	 return

BASIC BLOCK return
%1387:	phi	 XXX XXX XXX XXX
%1388:	ret	 %1387

FUNCTION bad_prog

BASIC BLOCK entry
%1389:	load	 prog_line
%1390:	icmp	 %1389 XXX
%1391:	br	 %1390 if.else if.then

BASIC BLOCK if.then
%1392:	load	 stdout
%1393:	load	 myname
%1394:	load	 prog_name
%1395:	load	 prog_line
%1396:	call	 %1392 XXX %1393 %1394 %1395 why fprintf
%1397:	br	 if.end

BASIC BLOCK if.else
%1398:	load	 stdout
%1399:	load	 myname
%1400:	call	 %1398 XXX %1399 why fprintf
%1401:	br	 if.end

BASIC BLOCK if.end
%1402:	call	 XXX exit
%1403:	unreachable	

BASIC BLOCK return
%1404:	ret	

FUNCTION init_buffer

BASIC BLOCK entry
%1405:	call	 XXX ck_malloc
%1406:	bitcast	 %1405
%1407:	getelementptr	 %1406 XXX XXX
%1408:	store	 XXX %1407
%1409:	call	 XXX ck_malloc
%1410:	getelementptr	 %1406 XXX XXX
%1411:	store	 %1409 %1410
%1412:	getelementptr	 %1406 XXX XXX
%1413:	store	 XXX %1412
%1414:	bitcast	 %1406
%1415:	ret	 %1414

FUNCTION add1_buffer

BASIC BLOCK entry
%1416:	bitcast	 bb
%1417:	getelementptr	 %1416 XXX XXX
%1418:	load	 %1417
%1419:	add	 %1418 XXX
%1420:	getelementptr	 %1416 XXX XXX
%1421:	load	 %1420
%1422:	icmp	 %1419 %1421
%1423:	br	 %1422 if.end if.then

BASIC BLOCK if.then
%1424:	getelementptr	 %1416 XXX XXX
%1425:	load	 %1424
%1426:	mul	 %1425 XXX
%1427:	store	 %1426 %1424
%1428:	getelementptr	 %1416 XXX XXX
%1429:	load	 %1428
%1430:	getelementptr	 %1416 XXX XXX
%1431:	load	 %1430
%1432:	call	 %1429 %1431 ck_realloc
%1433:	getelementptr	 %1416 XXX XXX
%1434:	store	 %1432 %1433
%1435:	br	 if.end

BASIC BLOCK if.end
%1436:	trunc	 ch
%1437:	getelementptr	 %1416 XXX XXX
%1438:	load	 %1437
%1439:	sext	 %1438
%1440:	getelementptr	 %1416 XXX XXX
%1441:	load	 %1440
%1442:	getelementptr	 %1441 %1439
%1443:	store	 %1436 %1442
%1444:	getelementptr	 %1416 XXX XXX
%1445:	load	 %1444
%1446:	add	 %1445 XXX
%1447:	store	 %1446 %1444
%1448:	ret	

FUNCTION size_buffer

BASIC BLOCK entry
%1449:	bitcast	 b
%1450:	getelementptr	 %1449 XXX XXX
%1451:	load	 %1450
%1452:	ret	 %1451

FUNCTION get_buffer

BASIC BLOCK entry
%1453:	bitcast	 bb
%1454:	getelementptr	 %1453 XXX XXX
%1455:	load	 %1454
%1456:	ret	 %1455

FUNCTION flush_buffer

BASIC BLOCK entry
%1457:	bitcast	 bb
%1458:	getelementptr	 %1457 XXX XXX
%1459:	load	 %1458
%1460:	call	 %1459 free
%1461:	getelementptr	 %1457 XXX XXX
%1462:	store	 XXX %1461
%1463:	getelementptr	 %1457 XXX XXX
%1464:	store	 XXX %1463
%1465:	getelementptr	 %1457 XXX XXX
%1466:	store	 XXX %1465
%1467:	bitcast	 %1457
%1468:	call	 %1467 free
%1469:	ret	

FUNCTION setup_jump

BASIC BLOCK entry
%1470:	call	 init_buffer
%1471:	br	 while.cond

BASIC BLOCK while.cond
%1472:	call	 inchar
%1473:	icmp	 %1472 XXX
%1474:	br	 %1473 land.end land.rhs

BASIC BLOCK land.rhs
%1475:	sext	 %1472
%1476:	call	 __ctype_b_loc
%1477:	load	 %1476
%1478:	getelementptr	 %1477 %1475
%1479:	load	 %1478
%1480:	zext	 %1479
%1481:	and	 %1480 XXX
%1482:	icmp	 %1481 XXX
%1483:	br	 land.end

BASIC BLOCK land.end
%1484:	phi	 XXX %1482
%1485:	br	 %1484 while.end while.body

BASIC BLOCK while.body
%1486:	br	 while.cond

BASIC BLOCK while.end
%1487:	br	 while.cond5

BASIC BLOCK while.cond5
%1488:	phi	 %1472 %1509
%1489:	icmp	 %1488 XXX
%1490:	br	 %1489 land.end23 land.lhs.true

BASIC BLOCK land.lhs.true
%1491:	icmp	 %1488 XXX
%1492:	br	 %1491 land.end23 land.lhs.true10

BASIC BLOCK land.lhs.true10
%1493:	sext	 %1488
%1494:	call	 __ctype_b_loc
%1495:	load	 %1494
%1496:	getelementptr	 %1495 %1493
%1497:	load	 %1496
%1498:	zext	 %1497
%1499:	and	 %1498 XXX
%1500:	icmp	 %1499 XXX
%1501:	br	 %1500 land.lhs.true17 land.end23

BASIC BLOCK land.lhs.true17
%1502:	icmp	 %1488 XXX
%1503:	br	 %1502 land.end23 land.rhs20

BASIC BLOCK land.rhs20
%1504:	icmp	 %1488 XXX
%1505:	br	 land.end23

BASIC BLOCK land.end23
%1506:	phi	 XXX XXX XXX XXX %1504
%1507:	br	 %1506 while.end26 while.body24

BASIC BLOCK while.body24
%1508:	call	 %1470 %1488 add1_buffer
%1509:	call	 inchar
%1510:	br	 while.cond5

BASIC BLOCK while.end26
%1511:	call	 %1488 savchar
%1512:	call	 %1470 XXX add1_buffer
%1513:	call	 XXX ck_malloc
%1514:	bitcast	 %1513
%1515:	getelementptr	 %1514 XXX XXX
%1516:	store	 vec %1515
%1517:	getelementptr	 vec XXX XXX
%1518:	load	 %1517
%1519:	ptrtoint	 cmd
%1520:	ptrtoint	 %1518
%1521:	sub	 %1519 %1520
%1522:	sdiv	 %1521 XXX
%1523:	trunc	 %1522
%1524:	getelementptr	 %1514 XXX XXX
%1525:	store	 %1523 %1524
%1526:	call	 %1470 get_buffer
%1527:	call	 %1526 ck_strdup
%1528:	getelementptr	 %1514 XXX XXX
%1529:	store	 %1527 %1528
%1530:	getelementptr	 %1514 XXX XXX
%1531:	store	 list %1530
%1532:	call	 %1470 flush_buffer
%1533:	ret	 %1514

FUNCTION compile_filename

BASIC BLOCK entry
%1534:	call	 inchar
%1535:	icmp	 %1534 XXX
%1536:	br	 %1535 if.end if.then

BASIC BLOCK if.then
%1537:	call	 XXX bad_prog
%1538:	br	 if.end

BASIC BLOCK if.end
%1539:	call	 init_buffer
%1540:	br	 while.cond

BASIC BLOCK while.cond
%1541:	call	 inchar
%1542:	icmp	 %1541 XXX
%1543:	br	 %1542 land.end land.rhs

BASIC BLOCK land.rhs
%1544:	icmp	 %1541 XXX
%1545:	br	 land.end

BASIC BLOCK land.end
%1546:	phi	 XXX %1544
%1547:	br	 %1546 while.end while.body

BASIC BLOCK while.body
%1548:	call	 %1539 %1541 add1_buffer
%1549:	br	 while.cond

BASIC BLOCK while.end
%1550:	call	 %1539 XXX add1_buffer
%1551:	call	 %1539 get_buffer
%1552:	br	 for.cond

BASIC BLOCK for.cond
%1553:	phi	 XXX %1585
%1554:	icmp	 %1553 XXX
%1555:	br	 %1554 for.end for.body

BASIC BLOCK for.body
%1556:	sext	 %1553
%1557:	getelementptr	 file_ptrs XXX %1556
%1558:	getelementptr	 %1557 XXX XXX
%1559:	load	 %1558
%1560:	icmp	 %1559 XXX
%1561:	br	 %1560 if.then7 if.end8

BASIC BLOCK if.then7
%1562:	br	 for.end

BASIC BLOCK if.end8
%1563:	sext	 %1553
%1564:	getelementptr	 file_ptrs XXX %1563
%1565:	getelementptr	 %1564 XXX XXX
%1566:	load	 %1565
%1567:	call	 %1566 %1551 strcmp
%1568:	icmp	 %1567 XXX
%1569:	br	 %1568 if.then14 if.end23

BASIC BLOCK if.then14
%1570:	sext	 %1553
%1571:	getelementptr	 file_ptrs XXX %1570
%1572:	getelementptr	 %1571 XXX XXX
%1573:	load	 %1572
%1574:	icmp	 %1573 readit
%1575:	br	 %1574 if.end20 if.then19

BASIC BLOCK if.then19
%1576:	call	 XXX bad_prog
%1577:	br	 if.end20

BASIC BLOCK if.end20
%1578:	call	 %1539 flush_buffer
%1579:	sext	 %1553
%1580:	getelementptr	 file_ptrs XXX %1579
%1581:	getelementptr	 %1580 XXX XXX
%1582:	load	 %1581
%1583:	br	 return

BASIC BLOCK if.end23
%1584:	br	 for.inc

BASIC BLOCK for.inc
%1585:	add	 %1553 XXX
%1586:	br	 for.cond

BASIC BLOCK for.end
%1587:	icmp	 %1553 XXX
%1588:	br	 %1587 if.else47 if.then25

BASIC BLOCK if.then25
%1589:	call	 %1551 ck_strdup
%1590:	sext	 %1553
%1591:	getelementptr	 file_ptrs XXX %1590
%1592:	getelementptr	 %1591 XXX XXX
%1593:	store	 %1589 %1592
%1594:	sext	 %1553
%1595:	getelementptr	 file_ptrs XXX %1594
%1596:	getelementptr	 %1595 XXX XXX
%1597:	store	 readit %1596
%1598:	icmp	 readit XXX
%1599:	br	 %1598 if.then34 if.else

BASIC BLOCK if.then34
%1600:	call	 %1551 XXX ck_fopen
%1601:	sext	 %1553
%1602:	getelementptr	 file_ptrs XXX %1601
%1603:	getelementptr	 %1602 XXX XXX
%1604:	store	 %1600 %1603
%1605:	br	 if.end43

BASIC BLOCK if.else
%1606:	call	 %1551 XXX ck_fopen
%1607:	sext	 %1553
%1608:	getelementptr	 file_ptrs XXX %1607
%1609:	getelementptr	 %1608 XXX XXX
%1610:	store	 %1606 %1609
%1611:	br	 if.end43

BASIC BLOCK if.end43
%1612:	call	 %1539 flush_buffer
%1613:	sext	 %1553
%1614:	getelementptr	 file_ptrs XXX %1613
%1615:	getelementptr	 %1614 XXX XXX
%1616:	load	 %1615
%1617:	br	 return

BASIC BLOCK if.else47
%1618:	call	 XXX bad_prog
%1619:	br	 return

BASIC BLOCK return
%1620:	phi	 %1582 %1616 XXX
%1621:	ret	 %1620

FUNCTION compile_regex

BASIC BLOCK entry
%1622:	call	 init_buffer
%1623:	br	 while.cond

BASIC BLOCK while.cond
%1624:	phi	 XXX %1624 %1624 %1665 %1690 %1624 %1624
%1625:	call	 inchar
%1626:	icmp	 %1625 XXX
%1627:	br	 %1626 land.end land.rhs

BASIC BLOCK land.rhs
%1628:	icmp	 %1625 slash
%1629:	br	 %1628 lor.rhs lor.end

BASIC BLOCK lor.rhs
%1630:	icmp	 %1624 XXX
%1631:	br	 lor.end

BASIC BLOCK lor.end
%1632:	phi	 XXX %1630
%1633:	br	 land.end

BASIC BLOCK land.end
%1634:	phi	 XXX %1632
%1635:	br	 %1634 while.end while.body

BASIC BLOCK while.body
%1636:	icmp	 %1625 XXX
%1637:	br	 %1636 if.else8 if.then

BASIC BLOCK if.then
%1638:	call	 %1622 size_buffer
%1639:	icmp	 %1638 XXX
%1640:	br	 %1639 if.else if.then7

BASIC BLOCK if.then7
%1641:	call	 %1622 XXX add1_buffer
%1642:	call	 %1622 XXX add1_buffer
%1643:	br	 if.end

BASIC BLOCK if.else
%1644:	call	 %1622 %1625 add1_buffer
%1645:	br	 if.end

BASIC BLOCK if.end
%1646:	br	 while.cond

BASIC BLOCK if.else8
%1647:	icmp	 %1625 XXX
%1648:	br	 %1647 if.else16 if.then10

BASIC BLOCK if.then10
%1649:	call	 inchar
%1650:	call	 %1649 savchar
%1651:	icmp	 %1649 slash
%1652:	br	 %1651 if.else14 if.then13

BASIC BLOCK if.then13
%1653:	call	 %1622 XXX add1_buffer
%1654:	call	 %1622 XXX add1_buffer
%1655:	br	 if.end15

BASIC BLOCK if.else14
%1656:	call	 %1622 XXX add1_buffer
%1657:	br	 if.end15

BASIC BLOCK if.end15
%1658:	br	 while.cond

BASIC BLOCK if.else16
%1659:	icmp	 %1625 XXX
%1660:	br	 %1659 if.else23 if.then18

BASIC BLOCK if.then18
%1661:	icmp	 %1624 XXX
%1662:	br	 %1661 if.end22 if.then20

BASIC BLOCK if.then20
%1663:	call	 %1622 size_buffer
%1664:	br	 if.end22

BASIC BLOCK if.end22
%1665:	phi	 %1663 %1624
%1666:	call	 %1622 %1625 add1_buffer
%1667:	br	 while.cond

BASIC BLOCK if.else23
%1668:	icmp	 %1625 XXX
%1669:	br	 %1668 if.else38 if.then25

BASIC BLOCK if.then25
%1670:	call	 %1622 %1625 add1_buffer
%1671:	call	 %1622 get_buffer
%1672:	call	 %1622 size_buffer
%1673:	sub	 %1672 XXX
%1674:	icmp	 %1624 XXX
%1675:	br	 %1674 if.then36 land.lhs.true

BASIC BLOCK land.lhs.true
%1676:	add	 %1624 XXX
%1677:	icmp	 %1673 %1676
%1678:	br	 %1677 lor.lhs.false if.end37

BASIC BLOCK lor.lhs.false
%1679:	add	 %1624 XXX
%1680:	icmp	 %1673 %1679
%1681:	br	 %1680 if.then36 land.lhs.true32

BASIC BLOCK land.lhs.true32
%1682:	add	 %1624 XXX
%1683:	sext	 %1682
%1684:	getelementptr	 %1671 %1683
%1685:	load	 %1684
%1686:	sext	 %1685
%1687:	icmp	 %1686 XXX
%1688:	br	 %1687 if.then36 if.end37

BASIC BLOCK if.then36
%1689:	br	 if.end37

BASIC BLOCK if.end37
%1690:	phi	 %1624 %1624 XXX
%1691:	br	 while.cond

BASIC BLOCK if.else38
%1692:	icmp	 %1625 XXX
%1693:	br	 %1692 lor.lhs.false41 if.then44

BASIC BLOCK lor.lhs.false41
%1694:	icmp	 %1624 XXX
%1695:	br	 %1694 if.end45 if.then44

BASIC BLOCK if.then44
%1696:	call	 %1622 %1625 add1_buffer
%1697:	br	 while.cond

BASIC BLOCK if.end45
%1698:	br	 if.end46

BASIC BLOCK if.end46
%1699:	br	 if.end47

BASIC BLOCK if.end47
%1700:	br	 if.end48

BASIC BLOCK if.end48
%1701:	br	 if.end49

BASIC BLOCK if.end49
%1702:	call	 inchar
%1703:	switch	 %1702 sw.default XXX sw.bb XXX sw.bb51

BASIC BLOCK sw.bb
%1704:	call	 %1622 XXX add1_buffer
%1705:	br	 sw.epilog

BASIC BLOCK sw.bb51
%1706:	br	 sw.epilog

BASIC BLOCK sw.default
%1707:	call	 %1622 XXX add1_buffer
%1708:	call	 %1622 %1702 add1_buffer
%1709:	br	 sw.epilog

BASIC BLOCK sw.epilog
%1710:	br	 while.cond

BASIC BLOCK while.end
%1711:	icmp	 %1625 XXX
%1712:	br	 %1711 if.end55 if.then54

BASIC BLOCK if.then54
%1713:	call	 XXX bad_prog
%1714:	br	 if.end55

BASIC BLOCK if.end55
%1715:	call	 %1622 size_buffer
%1716:	icmp	 %1715 XXX
%1717:	br	 %1716 if.else69 if.then57

BASIC BLOCK if.then57
%1718:	call	 XXX ck_malloc
%1719:	bitcast	 %1718
%1720:	store	 %1719 last_regex
%1721:	call	 %1622 size_buffer
%1722:	add	 %1721 XXX
%1723:	sext	 %1722
%1724:	load	 last_regex
%1725:	getelementptr	 %1724 XXX XXX
%1726:	store	 %1723 %1725
%1727:	load	 last_regex
%1728:	getelementptr	 %1727 XXX XXX
%1729:	load	 %1728
%1730:	trunc	 %1729
%1731:	call	 %1730 ck_malloc
%1732:	load	 last_regex
%1733:	getelementptr	 %1732 XXX XXX
%1734:	store	 %1731 %1733
%1735:	call	 XXX ck_malloc
%1736:	load	 last_regex
%1737:	getelementptr	 %1736 XXX XXX
%1738:	store	 %1735 %1737
%1739:	load	 last_regex
%1740:	getelementptr	 %1739 XXX XXX
%1741:	store	 XXX %1740
%1742:	call	 %1622 get_buffer
%1743:	call	 %1622 size_buffer
%1744:	load	 last_regex
%1745:	call	 %1742 %1743 %1744 re_compile_pattern
%1746:	br	 if.end73

BASIC BLOCK if.else69
%1747:	load	 last_regex
%1748:	icmp	 %1747 XXX
%1749:	br	 %1748 if.then71 if.end72

BASIC BLOCK if.then71
%1750:	call	 XXX bad_prog
%1751:	br	 if.end72

BASIC BLOCK if.end72
%1752:	br	 if.end73

BASIC BLOCK if.end73
%1753:	call	 %1622 flush_buffer
%1754:	ret	

FUNCTION re_compile_pattern

BASIC BLOCK entry
%1755:	getelementptr	 bufp XXX XXX
%1756:	load	 %1755
%1757:	and	 %1756 XXX
%1758:	store	 %1757 %1755
%1759:	getelementptr	 bufp XXX XXX
%1760:	load	 %1759
%1761:	and	 %1760 XXX
%1762:	store	 %1761 %1759
%1763:	getelementptr	 bufp XXX XXX
%1764:	load	 %1763
%1765:	and	 %1764 XXX
%1766:	or	 %1765 XXX
%1767:	store	 %1766 %1763
%1768:	load	 re_syntax_options
%1769:	call	 pattern length %1768 bufp regex_compile
%1770:	sext	 %1769
%1771:	getelementptr	 re_error_msg XXX %1770
%1772:	load	 %1771
%1773:	ret	 %1772

FUNCTION ck_strdup

BASIC BLOCK entry
%1774:	call	 str strlen
%1775:	add	 %1774 XXX
%1776:	trunc	 %1775
%1777:	call	 %1776 ck_malloc
%1778:	call	 %1777 str strcpy
%1779:	ret	 %1777

FUNCTION read_pattern_space

BASIC BLOCK entry
%1780:	load	 XXX
%1781:	load	 XXX
%1782:	load	 input_file
%1783:	call	 %1782 feof
%1784:	icmp	 %1783 XXX
%1785:	br	 %1784 if.end if.then

BASIC BLOCK if.then
%1786:	br	 return

BASIC BLOCK if.end
%1787:	load	 input_line_number
%1788:	add	 %1787 XXX
%1789:	store	 %1788 input_line_number
%1790:	store	 XXX replaced
%1791:	br	 for.cond

BASIC BLOCK for.cond
%1792:	phi	 %1780 %1832
%1793:	phi	 %1781 %1834
%1794:	icmp	 %1793 XXX
%1795:	br	 %1794 if.end4 if.then1

BASIC BLOCK if.then1
%1796:	load	 XXX
%1797:	load	 XXX
%1798:	mul	 %1797 XXX
%1799:	call	 %1796 %1798 ck_realloc
%1800:	store	 %1799 XXX
%1801:	load	 XXX
%1802:	load	 XXX
%1803:	sext	 %1802
%1804:	getelementptr	 %1801 %1803
%1805:	load	 XXX
%1806:	load	 XXX
%1807:	mul	 %1806 XXX
%1808:	store	 %1807 XXX
%1809:	br	 if.end4

BASIC BLOCK if.end4
%1810:	phi	 %1804 %1792
%1811:	phi	 %1805 %1793
%1812:	load	 input_file
%1813:	call	 %1812 _IO_getc
%1814:	icmp	 %1813 XXX
%1815:	br	 %1814 if.end15 if.then7

BASIC BLOCK if.then7
%1816:	load	 XXX
%1817:	icmp	 %1811 %1816
%1818:	br	 %1817 if.end10 if.then9

BASIC BLOCK if.then9
%1819:	br	 return

BASIC BLOCK if.end10
%1820:	load	 XXX
%1821:	sub	 %1820 %1811
%1822:	store	 %1821 XXX
%1823:	load	 last_input_file
%1824:	icmp	 %1823 XXX
%1825:	br	 %1824 if.end14 if.then12

BASIC BLOCK if.then12
%1826:	load	 input_EOF
%1827:	add	 %1826 XXX
%1828:	store	 %1827 input_EOF
%1829:	br	 if.end14

BASIC BLOCK if.end14
%1830:	br	 return

BASIC BLOCK if.end15
%1831:	trunc	 %1813
%1832:	getelementptr	 %1810 XXX
%1833:	store	 %1831 %1810
%1834:	add	 %1811 XXX
%1835:	icmp	 %1813 XXX
%1836:	br	 %1835 if.end20 if.then18

BASIC BLOCK if.then18
%1837:	load	 XXX
%1838:	sub	 %1837 %1834
%1839:	store	 %1838 XXX
%1840:	br	 for.end

BASIC BLOCK if.end20
%1841:	br	 for.cond

BASIC BLOCK for.end
%1842:	load	 input_file
%1843:	call	 %1842 _IO_getc
%1844:	icmp	 %1843 XXX
%1845:	br	 %1844 if.else if.then24

BASIC BLOCK if.then24
%1846:	load	 input_file
%1847:	call	 %1843 %1846 ungetc
%1848:	br	 if.end30

BASIC BLOCK if.else
%1849:	load	 last_input_file
%1850:	icmp	 %1849 XXX
%1851:	br	 %1850 if.end29 if.then27

BASIC BLOCK if.then27
%1852:	load	 input_EOF
%1853:	add	 %1852 XXX
%1854:	store	 %1853 input_EOF
%1855:	br	 if.end29

BASIC BLOCK if.end29
%1856:	br	 if.end30

BASIC BLOCK if.end30
%1857:	br	 return

BASIC BLOCK return
%1858:	phi	 XXX XXX XXX XXX
%1859:	ret	 %1858

FUNCTION execute_program

BASIC BLOCK entry
%1860:	alloca	 XXX
%1861:	alloca	 XXX
%1862:	br	 restart

BASIC BLOCK restart
%1863:	store	 XXX execute_program.end_cycle
%1864:	getelementptr	 vec XXX XXX
%1865:	load	 %1864
%1866:	getelementptr	 vec XXX XXX
%1867:	load	 %1866
%1868:	br	 for.cond

BASIC BLOCK for.cond
%1869:	phi	 %1867 %2706
%1870:	phi	 %1865 %2705
%1871:	phi	 vec %2704
%1872:	icmp	 %1869 XXX
%1873:	br	 %1872 for.end513 for.body

BASIC BLOCK for.body
%1874:	br	 exe_loop

BASIC BLOCK exe_loop
%1875:	phi	 %1869 %2638 %2034 %1951
%1876:	phi	 %1870 %2646 %2042 %1949
%1877:	phi	 %1871 %1877 %1877 %1947
%1878:	getelementptr	 %1876 XXX XXX
%1879:	load	 %1878
%1880:	and	 %1879 XXX
%1881:	icmp	 %1880 XXX
%1882:	br	 %1881 if.else if.then

BASIC BLOCK if.then
%1883:	getelementptr	 %1876 XXX XXX
%1884:	call	 %1883 match_address
%1885:	icmp	 %1884 XXX
%1886:	br	 %1885 if.end if.then3

BASIC BLOCK if.then3
%1887:	getelementptr	 %1876 XXX XXX
%1888:	load	 %1887
%1889:	and	 %1888 XXX
%1890:	store	 %1889 %1887
%1891:	br	 if.end

BASIC BLOCK if.end
%1892:	br	 if.end22

BASIC BLOCK if.else
%1893:	getelementptr	 %1876 XXX XXX
%1894:	call	 %1893 match_address
%1895:	icmp	 %1894 XXX
%1896:	br	 %1895 if.end21 if.then8

BASIC BLOCK if.then8
%1897:	getelementptr	 %1876 XXX XXX
%1898:	getelementptr	 %1897 XXX XXX
%1899:	load	 %1898
%1900:	icmp	 %1899 XXX
%1901:	br	 %1900 if.end20 if.then10

BASIC BLOCK if.then10
%1902:	getelementptr	 %1876 XXX XXX
%1903:	getelementptr	 %1902 XXX XXX
%1904:	load	 %1903
%1905:	icmp	 %1904 XXX
%1906:	br	 %1905 lor.lhs.false if.then17

BASIC BLOCK lor.lhs.false
%1907:	getelementptr	 %1876 XXX XXX
%1908:	call	 %1907 match_address
%1909:	icmp	 %1908 XXX
%1910:	br	 %1909 if.then17 if.end19

BASIC BLOCK if.then17
%1911:	getelementptr	 %1876 XXX XXX
%1912:	load	 %1911
%1913:	or	 %1912 XXX
%1914:	store	 %1913 %1911
%1915:	br	 if.end19

BASIC BLOCK if.end19
%1916:	br	 if.end20

BASIC BLOCK if.end20
%1917:	br	 if.end21

BASIC BLOCK if.end21
%1918:	phi	 XXX XXX
%1919:	br	 if.end22

BASIC BLOCK if.end22
%1920:	phi	 XXX %1918
%1921:	getelementptr	 %1876 XXX XXX
%1922:	load	 %1921
%1923:	and	 %1922 XXX
%1924:	icmp	 %1923 XXX
%1925:	br	 %1924 if.end28 if.then26

BASIC BLOCK if.then26
%1926:	icmp	 %1920 XXX
%1927:	xor	 %1926 XXX
%1928:	zext	 %1927
%1929:	br	 if.end28

BASIC BLOCK if.end28
%1930:	phi	 %1928 %1920
%1931:	icmp	 %1930 XXX
%1932:	br	 %1931 if.then30 if.end31

BASIC BLOCK if.then30
%1933:	br	 for.inc510

BASIC BLOCK if.end31
%1934:	getelementptr	 %1876 XXX XXX
%1935:	load	 %1934
%1936:	sext	 %1935
%1937:	switch	 %1936 sw.default503 XXX sw.bb XXX sw.bb40 XXX sw.bb47 XXX sw.bb48 XXX sw.bb50 XXX sw.bb67 XXX sw.bb83 XXX sw.bb96 XXX sw.bb98 XXX sw.bb110 XXX sw.bb111 XXX sw.bb112 XXX sw.bb113 XXX sw.bb114 XXX sw.bb121 XXX sw.bb188 XXX sw.bb197 XXX sw.bb202 XXX sw.bb203 XXX sw.bb214 XXX sw.bb217 XXX sw.bb249 XXX sw.bb453 XXX sw.bb477 XXX sw.bb485 XXX sw.bb488

BASIC BLOCK sw.bb
%1938:	getelementptr	 %1876 XXX XXX
%1939:	bitcast	 %1938
%1940:	load	 %1939
%1941:	getelementptr	 %1940 XXX XXX
%1942:	load	 %1941
%1943:	icmp	 %1942 XXX
%1944:	br	 %1943 if.end39 if.then34

BASIC BLOCK if.then34
%1945:	getelementptr	 %1876 XXX XXX
%1946:	bitcast	 %1945
%1947:	load	 %1946
%1948:	getelementptr	 %1947 XXX XXX
%1949:	load	 %1948
%1950:	getelementptr	 %1947 XXX XXX
%1951:	load	 %1950
%1952:	br	 exe_loop

BASIC BLOCK if.end39
%1953:	br	 sw.epilog506

BASIC BLOCK sw.bb40
%1954:	getelementptr	 %1877 XXX XXX
%1955:	load	 %1954
%1956:	getelementptr	 %1955 XXX XXX
%1957:	load	 %1956
%1958:	getelementptr	 %1877 XXX XXX
%1959:	load	 %1958
%1960:	sext	 %1959
%1961:	getelementptr	 %1957 %1960
%1962:	getelementptr	 %1877 XXX XXX
%1963:	load	 %1962
%1964:	getelementptr	 %1963 XXX XXX
%1965:	load	 %1964
%1966:	getelementptr	 %1877 XXX XXX
%1967:	load	 %1966
%1968:	sub	 %1965 %1967
%1969:	getelementptr	 %1877 XXX XXX
%1970:	load	 %1969
%1971:	br	 sw.epilog506

BASIC BLOCK sw.bb47
%1972:	br	 sw.epilog506

BASIC BLOCK sw.bb48
%1973:	load	 input_line_number
%1974:	call	 XXX %1973 printf
%1975:	br	 sw.epilog506

BASIC BLOCK sw.bb50
%1976:	br	 while.cond

BASIC BLOCK while.cond
%1977:	load	 XXX
%1978:	load	 XXX
%1979:	sub	 %1977 %1978
%1980:	getelementptr	 %1876 XXX XXX
%1981:	bitcast	 %1980
%1982:	getelementptr	 %1981 XXX XXX
%1983:	load	 %1982
%1984:	icmp	 %1979 %1983
%1985:	br	 %1984 while.end while.body

BASIC BLOCK while.body
%1986:	load	 XXX
%1987:	mul	 %1986 XXX
%1988:	store	 %1987 XXX
%1989:	load	 XXX
%1990:	load	 XXX
%1991:	call	 %1989 %1990 ck_realloc
%1992:	store	 %1991 XXX
%1993:	br	 while.cond

BASIC BLOCK while.end
%1994:	getelementptr	 %1876 XXX XXX
%1995:	bitcast	 %1994
%1996:	getelementptr	 %1995 XXX XXX
%1997:	load	 %1996
%1998:	load	 XXX
%1999:	load	 XXX
%2000:	sext	 %1999
%2001:	getelementptr	 %1998 %2000
%2002:	getelementptr	 %1876 XXX XXX
%2003:	bitcast	 %2002
%2004:	getelementptr	 %2003 XXX XXX
%2005:	load	 %2004
%2006:	sext	 %2005
%2007:	call	 %1997 %2001 %2006 bcopy
%2008:	getelementptr	 %1876 XXX XXX
%2009:	bitcast	 %2008
%2010:	getelementptr	 %2009 XXX XXX
%2011:	load	 %2010
%2012:	load	 XXX
%2013:	add	 %2012 %2011
%2014:	store	 %2013 XXX
%2015:	br	 sw.epilog506

BASIC BLOCK sw.bb67
%2016:	getelementptr	 %1876 XXX XXX
%2017:	bitcast	 %2016
%2018:	load	 %2017
%2019:	icmp	 %2018 XXX
%2020:	br	 %2019 if.then70 if.else71

BASIC BLOCK if.then70
%2021:	load	 execute_program.end_cycle
%2022:	add	 %2021 XXX
%2023:	store	 %2022 execute_program.end_cycle
%2024:	br	 if.end82

BASIC BLOCK if.else71
%2025:	getelementptr	 %1876 XXX XXX
%2026:	bitcast	 %2025
%2027:	load	 %2026
%2028:	getelementptr	 %2027 XXX XXX
%2029:	load	 %2028
%2030:	getelementptr	 %2029 XXX XXX
%2031:	load	 %2030
%2032:	getelementptr	 %2027 XXX XXX
%2033:	load	 %2032
%2034:	sub	 %2031 %2033
%2035:	getelementptr	 %2027 XXX XXX
%2036:	load	 %2035
%2037:	getelementptr	 %2036 XXX XXX
%2038:	load	 %2037
%2039:	getelementptr	 %2027 XXX XXX
%2040:	load	 %2039
%2041:	sext	 %2040
%2042:	getelementptr	 %2038 %2041
%2043:	br	 exe_loop

BASIC BLOCK if.end82
%2044:	br	 sw.epilog506

BASIC BLOCK sw.bb83
%2045:	store	 XXX XXX
%2046:	getelementptr	 %1876 XXX XXX
%2047:	load	 %2046
%2048:	and	 %2047 XXX
%2049:	icmp	 %2048 XXX
%2050:	br	 %2049 if.then87 if.end94

BASIC BLOCK if.then87
%2051:	getelementptr	 %1876 XXX XXX
%2052:	bitcast	 %2051
%2053:	getelementptr	 %2052 XXX XXX
%2054:	load	 %2053
%2055:	getelementptr	 %1876 XXX XXX
%2056:	bitcast	 %2055
%2057:	getelementptr	 %2056 XXX XXX
%2058:	load	 %2057
%2059:	load	 stdout
%2060:	call	 %2054 XXX %2058 %2059 ck_fwrite
%2061:	br	 if.end94

BASIC BLOCK if.end94
%2062:	load	 execute_program.end_cycle
%2063:	add	 %2062 XXX
%2064:	store	 %2063 execute_program.end_cycle
%2065:	br	 sw.epilog506

BASIC BLOCK sw.bb96
%2066:	store	 XXX XXX
%2067:	load	 execute_program.end_cycle
%2068:	add	 %2067 XXX
%2069:	store	 %2068 execute_program.end_cycle
%2070:	br	 sw.epilog506

BASIC BLOCK sw.bb98
%2071:	load	 XXX
%2072:	load	 XXX
%2073:	call	 %2071 %2072 eol_pos
%2074:	load	 XXX
%2075:	sext	 %2074
%2076:	load	 XXX
%2077:	ptrtoint	 %2073
%2078:	ptrtoint	 %2076
%2079:	sub	 %2077 %2078
%2080:	sub	 %2075 %2079
%2081:	sub	 %2080 XXX
%2082:	trunc	 %2081
%2083:	icmp	 %2082 XXX
%2084:	br	 %2083 if.end108 if.then106

BASIC BLOCK if.then106
%2085:	load	 XXX
%2086:	getelementptr	 %2073 XXX
%2087:	call	 %2085 %2086 %2082 chr_copy
%2088:	store	 %2082 XXX
%2089:	br	 restart

BASIC BLOCK if.end108
%2090:	store	 XXX XXX
%2091:	load	 execute_program.end_cycle
%2092:	add	 %2091 XXX
%2093:	store	 %2092 execute_program.end_cycle
%2094:	br	 sw.epilog506

BASIC BLOCK sw.bb110
%2095:	call	 hold line line_copy
%2096:	br	 sw.epilog506

BASIC BLOCK sw.bb111
%2097:	call	 hold line line_append
%2098:	br	 sw.epilog506

BASIC BLOCK sw.bb112
%2099:	call	 line hold line_copy
%2100:	br	 sw.epilog506

BASIC BLOCK sw.bb113
%2101:	call	 line hold line_append
%2102:	br	 sw.epilog506

BASIC BLOCK sw.bb114
%2103:	getelementptr	 %1876 XXX XXX
%2104:	bitcast	 %2103
%2105:	getelementptr	 %2104 XXX XXX
%2106:	load	 %2105
%2107:	getelementptr	 %1876 XXX XXX
%2108:	bitcast	 %2107
%2109:	getelementptr	 %2108 XXX XXX
%2110:	load	 %2109
%2111:	load	 stdout
%2112:	call	 %2106 XXX %2110 %2111 ck_fwrite
%2113:	br	 sw.epilog506

BASIC BLOCK sw.bb121
%2114:	load	 XXX
%2115:	load	 XXX
%2116:	br	 while.cond127

BASIC BLOCK while.cond127
%2117:	phi	 %2115 %2193
%2118:	phi	 %2114 %2120
%2119:	phi	 XXX %2192
%2120:	add	 %2118 XXX
%2121:	icmp	 %2118 XXX
%2122:	br	 %2121 while.end186 while.body129

BASIC BLOCK while.body129
%2123:	icmp	 %2120 XXX
%2124:	br	 %2123 land.lhs.true if.end135

BASIC BLOCK land.lhs.true
%2125:	load	 %2117
%2126:	sext	 %2125
%2127:	icmp	 %2126 XXX
%2128:	br	 %2127 if.end135 if.then134

BASIC BLOCK if.then134
%2129:	br	 while.end186

BASIC BLOCK if.end135
%2130:	icmp	 %2119 XXX
%2131:	br	 %2130 if.end140 if.then138

BASIC BLOCK if.then138
%2132:	call	 XXX putchar
%2133:	br	 if.end140

BASIC BLOCK if.end140
%2134:	phi	 XXX %2119
%2135:	load	 %2117
%2136:	sext	 %2135
%2137:	icmp	 %2136 XXX
%2138:	br	 %2137 if.else147 if.then144

BASIC BLOCK if.then144
%2139:	call	 XXX printf
%2140:	add	 %2134 XXX
%2141:	br	 if.end185

BASIC BLOCK if.else147
%2142:	load	 %2117
%2143:	sext	 %2142
%2144:	sext	 %2143
%2145:	call	 __ctype_b_loc
%2146:	load	 %2145
%2147:	getelementptr	 %2146 %2144
%2148:	load	 %2147
%2149:	zext	 %2148
%2150:	and	 %2149 XXX
%2151:	icmp	 %2150 XXX
%2152:	br	 %2151 if.else157 if.then153

BASIC BLOCK if.then153
%2153:	load	 %2117
%2154:	sext	 %2153
%2155:	call	 %2154 putchar
%2156:	add	 %2134 XXX
%2157:	br	 if.end184

BASIC BLOCK if.else157
%2158:	load	 %2117
%2159:	sext	 %2158
%2160:	switch	 %2159 sw.default XXX sw.bb159 XXX sw.bb162 XXX sw.bb165 XXX sw.bb168 XXX sw.bb171 XXX sw.bb174 XXX sw.bb177

BASIC BLOCK sw.bb159
%2161:	call	 XXX printf
%2162:	add	 %2134 XXX
%2163:	br	 sw.epilog

BASIC BLOCK sw.bb162
%2164:	call	 XXX printf
%2165:	add	 %2134 XXX
%2166:	br	 sw.epilog

BASIC BLOCK sw.bb165
%2167:	call	 XXX printf
%2168:	add	 %2134 XXX
%2169:	br	 sw.epilog

BASIC BLOCK sw.bb168
%2170:	call	 XXX printf
%2171:	add	 %2134 XXX
%2172:	br	 sw.epilog

BASIC BLOCK sw.bb171
%2173:	call	 XXX printf
%2174:	add	 %2134 XXX
%2175:	br	 sw.epilog

BASIC BLOCK sw.bb174
%2176:	call	 XXX printf
%2177:	add	 %2134 XXX
%2178:	br	 sw.epilog

BASIC BLOCK sw.bb177
%2179:	call	 XXX printf
%2180:	add	 %2134 XXX
%2181:	br	 sw.epilog

BASIC BLOCK sw.default
%2182:	load	 %2117
%2183:	sext	 %2182
%2184:	and	 %2183 XXX
%2185:	call	 XXX %2184 printf
%2186:	add	 %2134 XXX
%2187:	br	 sw.epilog

BASIC BLOCK sw.epilog
%2188:	phi	 %2186 %2180 %2177 %2174 %2171 %2168 %2165 %2162
%2189:	br	 if.end184

BASIC BLOCK if.end184
%2190:	phi	 %2156 %2188
%2191:	br	 if.end185

BASIC BLOCK if.end185
%2192:	phi	 %2140 %2190
%2193:	getelementptr	 %2117 XXX
%2194:	br	 while.cond127

BASIC BLOCK while.end186
%2195:	call	 XXX putchar
%2196:	br	 sw.epilog506

BASIC BLOCK sw.bb188
%2197:	load	 input_file
%2198:	call	 %2197 feof
%2199:	icmp	 %2198 XXX
%2200:	br	 %2199 if.end192 if.then191

BASIC BLOCK if.then191
%2201:	br	 quit

BASIC BLOCK if.end192
%2202:	load	 no_default_output
%2203:	icmp	 %2202 XXX
%2204:	br	 %2203 if.then194 if.end195

BASIC BLOCK if.then194
%2205:	load	 XXX
%2206:	load	 XXX
%2207:	load	 stdout
%2208:	call	 %2205 XXX %2206 %2207 ck_fwrite
%2209:	br	 if.end195

BASIC BLOCK if.end195
%2210:	call	 read_pattern_space
%2211:	br	 sw.epilog506

BASIC BLOCK sw.bb197
%2212:	load	 input_file
%2213:	call	 %2212 feof
%2214:	icmp	 %2213 XXX
%2215:	br	 %2214 if.end201 if.then200

BASIC BLOCK if.then200
%2216:	store	 XXX XXX
%2217:	br	 quit

BASIC BLOCK if.end201
%2218:	call	 append_pattern_space
%2219:	br	 sw.epilog506

BASIC BLOCK sw.bb202
%2220:	load	 XXX
%2221:	load	 XXX
%2222:	load	 stdout
%2223:	call	 %2220 XXX %2221 %2222 ck_fwrite
%2224:	br	 sw.epilog506

BASIC BLOCK sw.bb203
%2225:	load	 XXX
%2226:	load	 XXX
%2227:	call	 %2225 %2226 eol_pos
%2228:	load	 XXX
%2229:	icmp	 %2227 XXX
%2230:	br	 %2229 cond.false cond.true

BASIC BLOCK cond.true
%2231:	load	 XXX
%2232:	ptrtoint	 %2227
%2233:	ptrtoint	 %2231
%2234:	sub	 %2232 %2233
%2235:	add	 %2234 XXX
%2236:	br	 cond.end

BASIC BLOCK cond.false
%2237:	load	 XXX
%2238:	sext	 %2237
%2239:	br	 cond.end

BASIC BLOCK cond.end
%2240:	phi	 %2235 %2238
%2241:	trunc	 %2240
%2242:	load	 stdout
%2243:	call	 %2228 XXX %2241 %2242 ck_fwrite
%2244:	br	 sw.epilog506

BASIC BLOCK sw.bb214
%2245:	br	 quit

BASIC BLOCK quit
%2246:	load	 quit_cmd
%2247:	add	 %2246 XXX
%2248:	store	 %2247 quit_cmd
%2249:	load	 execute_program.end_cycle
%2250:	add	 %2249 XXX
%2251:	store	 %2250 execute_program.end_cycle
%2252:	br	 sw.epilog506

BASIC BLOCK sw.bb217
%2253:	getelementptr	 %1876 XXX XXX
%2254:	bitcast	 %2253
%2255:	load	 %2254
%2256:	icmp	 %2255 XXX
%2257:	br	 %2256 if.end248 if.then222

BASIC BLOCK if.then222
%2258:	getelementptr	 %1876 XXX XXX
%2259:	bitcast	 %2258
%2260:	load	 %2259
%2261:	call	 %2260 rewind
%2262:	br	 do.body

BASIC BLOCK do.body
%2263:	phi	 XXX %2291
%2264:	load	 XXX
%2265:	add	 %2264 %2263
%2266:	store	 %2265 XXX
%2267:	load	 XXX
%2268:	load	 XXX
%2269:	icmp	 %2267 %2268
%2270:	br	 %2269 if.end231 if.then228

BASIC BLOCK if.then228
%2271:	load	 XXX
%2272:	mul	 %2271 XXX
%2273:	store	 %2272 XXX
%2274:	load	 XXX
%2275:	load	 XXX
%2276:	call	 %2274 %2275 ck_realloc
%2277:	store	 %2276 XXX
%2278:	br	 if.end231

BASIC BLOCK if.end231
%2279:	load	 XXX
%2280:	load	 XXX
%2281:	sext	 %2280
%2282:	getelementptr	 %2279 %2281
%2283:	load	 XXX
%2284:	load	 XXX
%2285:	sub	 %2283 %2284
%2286:	sext	 %2285
%2287:	getelementptr	 %1876 XXX XXX
%2288:	bitcast	 %2287
%2289:	load	 %2288
%2290:	call	 %2282 XXX %2286 %2289 fread
%2291:	trunc	 %2290
%2292:	br	 do.cond

BASIC BLOCK do.cond
%2293:	icmp	 %2291 XXX
%2294:	br	 %2293 do.end do.body

BASIC BLOCK do.end
%2295:	getelementptr	 %1876 XXX XXX
%2296:	bitcast	 %2295
%2297:	load	 %2296
%2298:	call	 %2297 ferror
%2299:	icmp	 %2298 XXX
%2300:	br	 %2299 if.end247 if.then246

BASIC BLOCK if.then246
%2301:	call	 XXX panic
%2302:	br	 if.end247

BASIC BLOCK if.end247
%2303:	br	 if.end248

BASIC BLOCK if.end248
%2304:	br	 sw.epilog506

BASIC BLOCK sw.bb249
%2305:	load	 XXX
%2306:	sub	 %2305 XXX
%2307:	sext	 %2306
%2308:	load	 XXX
%2309:	getelementptr	 %2308 %2307
%2310:	load	 %2309
%2311:	sext	 %2310
%2312:	icmp	 %2311 XXX
%2313:	zext	 %2312
%2314:	load	 XXX
%2315:	icmp	 %2314 XXX
%2316:	br	 %2315 if.then258 if.end260

BASIC BLOCK if.then258
%2317:	store	 XXX XXX
%2318:	call	 XXX ck_malloc
%2319:	store	 %2318 XXX
%2320:	br	 if.end260

BASIC BLOCK if.end260
%2321:	load	 XXX
%2322:	sub	 %2321 %2313
%2323:	store	 XXX XXX
%2324:	getelementptr	 %1876 XXX XXX
%2325:	bitcast	 %2324
%2326:	getelementptr	 %2325 XXX XXX
%2327:	load	 %2326
%2328:	getelementptr	 %1876 XXX XXX
%2329:	bitcast	 %2328
%2330:	getelementptr	 %2329 XXX XXX
%2331:	load	 %2330
%2332:	sext	 %2331
%2333:	getelementptr	 %2327 %2332
%2334:	br	 while.cond267

BASIC BLOCK while.cond267
%2335:	phi	 XXX %2348 %2348
%2336:	phi	 %2322 %2403 %2533
%2337:	phi	 XXX %2400 %2530
%2338:	getelementptr	 %1876 XXX XXX
%2339:	bitcast	 %2338
%2340:	getelementptr	 %2339 XXX XXX
%2341:	load	 %2340
%2342:	load	 XXX
%2343:	load	 XXX
%2344:	sub	 %2343 %2313
%2345:	call	 %2341 %2342 %2344 %2337 %2336 regs re_search
%2346:	icmp	 %2345 XXX
%2347:	br	 %2346 while.end421 while.body274

BASIC BLOCK while.body274
%2348:	add	 %2335 XXX
%2349:	sub	 %2345 %2337
%2350:	icmp	 %2349 XXX
%2351:	br	 %2350 if.end282 if.then278

BASIC BLOCK if.then278
%2352:	load	 XXX
%2353:	sext	 %2337
%2354:	getelementptr	 %2352 %2353
%2355:	sub	 %2345 %2337
%2356:	call	 execute_program.tmp %2354 %2355 str_append
%2357:	br	 if.end282

BASIC BLOCK if.end282
%2358:	getelementptr	 %1876 XXX XXX
%2359:	bitcast	 %2358
%2360:	getelementptr	 %2359 XXX XXX
%2361:	load	 %2360
%2362:	and	 %2361 XXX
%2363:	icmp	 %2362 XXX
%2364:	br	 %2363 if.end315 if.then287

BASIC BLOCK if.then287
%2365:	getelementptr	 %1876 XXX XXX
%2366:	bitcast	 %2365
%2367:	getelementptr	 %2366 XXX XXX
%2368:	load	 %2367
%2369:	icmp	 %2348 %2368
%2370:	br	 %2369 if.end314 if.then292

BASIC BLOCK if.then292
%2371:	load	 XXX
%2372:	getelementptr	 %2371 XXX
%2373:	load	 %2372
%2374:	load	 XXX
%2375:	getelementptr	 %2374 XXX
%2376:	load	 %2375
%2377:	sub	 %2373 %2376
%2378:	icmp	 %2377 XXX
%2379:	br	 %2378 if.then298 if.end299

BASIC BLOCK if.then298
%2380:	br	 if.end299

BASIC BLOCK if.end299
%2381:	phi	 %2377 XXX
%2382:	load	 XXX
%2383:	load	 XXX
%2384:	getelementptr	 %2383 XXX
%2385:	load	 %2384
%2386:	sext	 %2385
%2387:	getelementptr	 %2382 %2386
%2388:	call	 execute_program.tmp %2387 %2381 str_append
%2389:	load	 XXX
%2390:	getelementptr	 %2389 XXX
%2391:	load	 %2390
%2392:	icmp	 %2345 %2391
%2393:	br	 %2392 cond.false308 cond.true306

BASIC BLOCK cond.true306
%2394:	add	 %2345 XXX
%2395:	br	 cond.end310

BASIC BLOCK cond.false308
%2396:	load	 XXX
%2397:	getelementptr	 %2396 XXX
%2398:	load	 %2397
%2399:	br	 cond.end310

BASIC BLOCK cond.end310
%2400:	phi	 %2394 %2398
%2401:	load	 XXX
%2402:	sub	 %2401 %2313
%2403:	sub	 %2402 %2400
%2404:	br	 while.cond267

BASIC BLOCK if.end314
%2405:	br	 if.end315

BASIC BLOCK if.end315
%2406:	br	 for.cond316

BASIC BLOCK for.cond316
%2407:	phi	 %2327 %2497
%2408:	phi	 %2327 %2500
%2409:	icmp	 %2408 %2333
%2410:	br	 %2409 for.end for.body319

BASIC BLOCK for.body319
%2411:	load	 %2408
%2412:	sext	 %2411
%2413:	icmp	 %2412 XXX
%2414:	br	 %2413 if.else341 if.then323

BASIC BLOCK if.then323
%2415:	ptrtoint	 %2408
%2416:	ptrtoint	 %2407
%2417:	sub	 %2415 %2416
%2418:	icmp	 %2417 XXX
%2419:	br	 %2418 if.end333 if.then328

BASIC BLOCK if.then328
%2420:	ptrtoint	 %2408
%2421:	ptrtoint	 %2407
%2422:	sub	 %2420 %2421
%2423:	trunc	 %2422
%2424:	call	 execute_program.tmp %2407 %2423 str_append
%2425:	br	 if.end333

BASIC BLOCK if.end333
%2426:	load	 XXX
%2427:	load	 XXX
%2428:	getelementptr	 %2427 XXX
%2429:	load	 %2428
%2430:	sext	 %2429
%2431:	getelementptr	 %2426 %2430
%2432:	load	 XXX
%2433:	getelementptr	 %2432 XXX
%2434:	load	 %2433
%2435:	load	 XXX
%2436:	getelementptr	 %2435 XXX
%2437:	load	 %2436
%2438:	sub	 %2434 %2437
%2439:	call	 execute_program.tmp %2431 %2438 str_append
%2440:	getelementptr	 %2408 XXX
%2441:	br	 if.end386

BASIC BLOCK if.else341
%2442:	load	 %2408
%2443:	sext	 %2442
%2444:	icmp	 %2443 XXX
%2445:	br	 %2444 if.end385 if.then345

BASIC BLOCK if.then345
%2446:	ptrtoint	 %2408
%2447:	ptrtoint	 %2407
%2448:	sub	 %2446 %2447
%2449:	icmp	 %2448 XXX
%2450:	br	 %2449 if.end355 if.then350

BASIC BLOCK if.then350
%2451:	ptrtoint	 %2408
%2452:	ptrtoint	 %2407
%2453:	sub	 %2451 %2452
%2454:	trunc	 %2453
%2455:	call	 execute_program.tmp %2407 %2454 str_append
%2456:	br	 if.end355

BASIC BLOCK if.end355
%2457:	getelementptr	 %2408 XXX
%2458:	icmp	 %2457 %2333
%2459:	br	 %2458 if.end383 if.then359

BASIC BLOCK if.then359
%2460:	load	 %2457
%2461:	sext	 %2460
%2462:	icmp	 %2461 XXX
%2463:	br	 %2462 if.else381 land.lhs.true365

BASIC BLOCK land.lhs.true365
%2464:	load	 %2457
%2465:	sext	 %2464
%2466:	icmp	 %2465 XXX
%2467:	br	 %2466 if.else381 if.then369

BASIC BLOCK if.then369
%2468:	load	 %2457
%2469:	sext	 %2468
%2470:	sub	 %2469 XXX
%2471:	load	 XXX
%2472:	sext	 %2470
%2473:	load	 XXX
%2474:	getelementptr	 %2473 %2472
%2475:	load	 %2474
%2476:	sext	 %2475
%2477:	getelementptr	 %2471 %2476
%2478:	sext	 %2470
%2479:	load	 XXX
%2480:	getelementptr	 %2479 %2478
%2481:	load	 %2480
%2482:	sext	 %2470
%2483:	load	 XXX
%2484:	getelementptr	 %2483 %2482
%2485:	load	 %2484
%2486:	sub	 %2481 %2485
%2487:	call	 execute_program.tmp %2477 %2486 str_append
%2488:	br	 if.end382

BASIC BLOCK if.else381
%2489:	call	 execute_program.tmp %2457 XXX str_append
%2490:	br	 if.end382

BASIC BLOCK if.end382
%2491:	br	 if.end383

BASIC BLOCK if.end383
%2492:	getelementptr	 %2457 XXX
%2493:	br	 if.end385

BASIC BLOCK if.end385
%2494:	phi	 %2492 %2407
%2495:	phi	 %2457 %2408
%2496:	br	 if.end386

BASIC BLOCK if.end386
%2497:	phi	 %2440 %2494
%2498:	phi	 %2408 %2495
%2499:	br	 for.inc

BASIC BLOCK for.inc
%2500:	getelementptr	 %2498 XXX
%2501:	br	 for.cond316

BASIC BLOCK for.end
%2502:	ptrtoint	 %2408
%2503:	ptrtoint	 %2407
%2504:	sub	 %2502 %2503
%2505:	icmp	 %2504 XXX
%2506:	br	 %2505 if.end397 if.then392

BASIC BLOCK if.then392
%2507:	ptrtoint	 %2408
%2508:	ptrtoint	 %2407
%2509:	sub	 %2507 %2508
%2510:	trunc	 %2509
%2511:	call	 execute_program.tmp %2407 %2510 str_append
%2512:	br	 if.end397

BASIC BLOCK if.end397
%2513:	load	 XXX
%2514:	getelementptr	 %2513 XXX
%2515:	load	 %2514
%2516:	icmp	 %2345 %2515
%2517:	br	 %2516 if.end406 if.then401

BASIC BLOCK if.then401
%2518:	load	 XXX
%2519:	sext	 %2345
%2520:	getelementptr	 %2518 %2519
%2521:	call	 execute_program.tmp %2520 XXX str_append
%2522:	load	 XXX
%2523:	getelementptr	 %2522 XXX
%2524:	load	 %2523
%2525:	add	 %2524 XXX
%2526:	store	 %2525 %2523
%2527:	br	 if.end406

BASIC BLOCK if.end406
%2528:	load	 XXX
%2529:	getelementptr	 %2528 XXX
%2530:	load	 %2529
%2531:	load	 XXX
%2532:	sub	 %2531 %2313
%2533:	sub	 %2532 %2530
%2534:	icmp	 %2533 XXX
%2535:	br	 %2534 if.end413 if.then412

BASIC BLOCK if.then412
%2536:	br	 while.end421

BASIC BLOCK if.end413
%2537:	getelementptr	 %1876 XXX XXX
%2538:	bitcast	 %2537
%2539:	getelementptr	 %2538 XXX XXX
%2540:	load	 %2539
%2541:	and	 %2540 XXX
%2542:	icmp	 %2541 XXX
%2543:	br	 %2542 if.then419 if.end420

BASIC BLOCK if.then419
%2544:	br	 while.end421

BASIC BLOCK if.end420
%2545:	br	 while.cond267

BASIC BLOCK while.end421
%2546:	phi	 %2348 %2348 %2335
%2547:	phi	 %2533 %2533 %2336
%2548:	phi	 %2530 %2530 %2337
%2549:	icmp	 %2546 XXX
%2550:	br	 %2549 if.then423 if.end424

BASIC BLOCK if.then423
%2551:	br	 sw.epilog506

BASIC BLOCK if.end424
%2552:	store	 XXX replaced
%2553:	load	 XXX
%2554:	sext	 %2548
%2555:	getelementptr	 %2553 %2554
%2556:	add	 %2547 %2313
%2557:	call	 execute_program.tmp %2555 %2556 str_append
%2558:	load	 XXX
%2559:	getelementptr	 %1860 XXX XXX
%2560:	store	 %2558 %2559
%2561:	load	 XXX
%2562:	getelementptr	 %1860 XXX XXX
%2563:	store	 %2561 %2562
%2564:	load	 XXX
%2565:	getelementptr	 %1860 XXX XXX
%2566:	store	 %2564 %2565
%2567:	load	 XXX
%2568:	store	 %2567 XXX
%2569:	load	 XXX
%2570:	store	 %2569 XXX
%2571:	load	 XXX
%2572:	store	 %2571 XXX
%2573:	getelementptr	 %1860 XXX XXX
%2574:	load	 %2573
%2575:	store	 %2574 XXX
%2576:	getelementptr	 %1860 XXX XXX
%2577:	load	 %2576
%2578:	store	 %2577 XXX
%2579:	getelementptr	 %1860 XXX XXX
%2580:	load	 %2579
%2581:	store	 %2580 XXX
%2582:	getelementptr	 %1876 XXX XXX
%2583:	bitcast	 %2582
%2584:	getelementptr	 %2583 XXX XXX
%2585:	load	 %2584
%2586:	and	 %2585 XXX
%2587:	icmp	 %2586 XXX
%2588:	br	 %2587 if.end445 land.lhs.true437

BASIC BLOCK land.lhs.true437
%2589:	getelementptr	 %1876 XXX XXX
%2590:	bitcast	 %2589
%2591:	getelementptr	 %2590 XXX XXX
%2592:	load	 %2591
%2593:	icmp	 %2592 XXX
%2594:	br	 %2593 if.end445 if.then441

BASIC BLOCK if.then441
%2595:	load	 XXX
%2596:	load	 XXX
%2597:	getelementptr	 %1876 XXX XXX
%2598:	bitcast	 %2597
%2599:	getelementptr	 %2598 XXX XXX
%2600:	load	 %2599
%2601:	call	 %2595 XXX %2596 %2600 ck_fwrite
%2602:	br	 if.end445

BASIC BLOCK if.end445
%2603:	getelementptr	 %1876 XXX XXX
%2604:	bitcast	 %2603
%2605:	getelementptr	 %2604 XXX XXX
%2606:	load	 %2605
%2607:	and	 %2606 XXX
%2608:	icmp	 %2607 XXX
%2609:	br	 %2608 if.end452 if.then451

BASIC BLOCK if.then451
%2610:	load	 XXX
%2611:	load	 XXX
%2612:	load	 stdout
%2613:	call	 %2610 XXX %2611 %2612 ck_fwrite
%2614:	br	 if.end452

BASIC BLOCK if.end452
%2615:	br	 sw.epilog506

BASIC BLOCK sw.bb453
%2616:	load	 replaced
%2617:	icmp	 %2616 XXX
%2618:	br	 %2617 if.end476 if.then455

BASIC BLOCK if.then455
%2619:	store	 XXX replaced
%2620:	getelementptr	 %1876 XXX XXX
%2621:	bitcast	 %2620
%2622:	load	 %2621
%2623:	icmp	 %2622 XXX
%2624:	br	 %2623 if.then459 if.else461

BASIC BLOCK if.then459
%2625:	load	 execute_program.end_cycle
%2626:	add	 %2625 XXX
%2627:	store	 %2626 execute_program.end_cycle
%2628:	br	 if.end475

BASIC BLOCK if.else461
%2629:	getelementptr	 %1876 XXX XXX
%2630:	bitcast	 %2629
%2631:	load	 %2630
%2632:	getelementptr	 %2631 XXX XXX
%2633:	load	 %2632
%2634:	getelementptr	 %2633 XXX XXX
%2635:	load	 %2634
%2636:	getelementptr	 %2631 XXX XXX
%2637:	load	 %2636
%2638:	sub	 %2635 %2637
%2639:	getelementptr	 %2631 XXX XXX
%2640:	load	 %2639
%2641:	getelementptr	 %2640 XXX XXX
%2642:	load	 %2641
%2643:	getelementptr	 %2631 XXX XXX
%2644:	load	 %2643
%2645:	sext	 %2644
%2646:	getelementptr	 %2642 %2645
%2647:	br	 exe_loop

BASIC BLOCK if.end475
%2648:	br	 if.end476

BASIC BLOCK if.end476
%2649:	br	 sw.epilog506

BASIC BLOCK sw.bb477
%2650:	getelementptr	 %1876 XXX XXX
%2651:	bitcast	 %2650
%2652:	load	 %2651
%2653:	icmp	 %2652 XXX
%2654:	br	 %2653 if.end484 if.then481

BASIC BLOCK if.then481
%2655:	load	 XXX
%2656:	load	 XXX
%2657:	getelementptr	 %1876 XXX XXX
%2658:	bitcast	 %2657
%2659:	load	 %2658
%2660:	call	 %2655 XXX %2656 %2659 ck_fwrite
%2661:	br	 if.end484

BASIC BLOCK if.end484
%2662:	br	 sw.epilog506

BASIC BLOCK sw.bb485
%2663:	bitcast	 %1861
%2664:	call	 %2663 XXX XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%2665:	call	 XXX XXX XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%2666:	bitcast	 %1861
%2667:	call	 XXX %2666 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%2668:	br	 sw.epilog506

BASIC BLOCK sw.bb488
%2669:	load	 XXX
%2670:	load	 XXX
%2671:	sext	 %2670
%2672:	getelementptr	 %2669 %2671
%2673:	br	 for.cond493

BASIC BLOCK for.cond493
%2674:	phi	 %2669 %2686
%2675:	icmp	 %2674 %2672
%2676:	br	 %2675 for.end502 for.body496

BASIC BLOCK for.body496
%2677:	load	 %2674
%2678:	zext	 %2677
%2679:	getelementptr	 %1876 XXX XXX
%2680:	bitcast	 %2679
%2681:	load	 %2680
%2682:	getelementptr	 %2681 %2678
%2683:	load	 %2682
%2684:	store	 %2683 %2674
%2685:	br	 for.inc500

BASIC BLOCK for.inc500
%2686:	getelementptr	 %2674 XXX
%2687:	br	 for.cond493

BASIC BLOCK for.end502
%2688:	br	 sw.epilog506

BASIC BLOCK sw.default503
%2689:	getelementptr	 %1876 XXX XXX
%2690:	load	 %2689
%2691:	sext	 %2690
%2692:	call	 XXX %2691 panic
%2693:	br	 sw.epilog506

BASIC BLOCK sw.epilog506
%2694:	phi	 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1875 %1968 %1875
%2695:	phi	 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1876 %1961 %1876
%2696:	phi	 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1877 %1970 %1877
%2697:	load	 execute_program.end_cycle
%2698:	icmp	 %2697 XXX
%2699:	br	 %2698 if.end509 if.then508

BASIC BLOCK if.then508
%2700:	br	 for.end513

BASIC BLOCK if.end509
%2701:	br	 for.inc510

BASIC BLOCK for.inc510
%2702:	phi	 %2694 %1875
%2703:	phi	 %2695 %1876
%2704:	phi	 %2696 %1877
%2705:	getelementptr	 %2703 XXX
%2706:	add	 %2702 XXX
%2707:	br	 for.cond

BASIC BLOCK for.end513
%2708:	ret	

FUNCTION ck_fwrite

BASIC BLOCK entry
%2709:	sext	 size
%2710:	sext	 nmemb
%2711:	call	 ptr %2709 %2710 stream fwrite
%2712:	sext	 nmemb
%2713:	icmp	 %2711 %2712
%2714:	br	 %2713 if.end if.then

BASIC BLOCK if.then
%2715:	call	 stream __fp_name
%2716:	call	 XXX nmemb %2715 panic
%2717:	br	 if.end

BASIC BLOCK if.end
%2718:	ret	

FUNCTION ck_fclose

BASIC BLOCK entry
%2719:	call	 stream fclose
%2720:	icmp	 %2719 XXX
%2721:	br	 %2720 if.end if.then

BASIC BLOCK if.then
%2722:	call	 stream __fp_name
%2723:	call	 XXX %2722 panic
%2724:	br	 if.end

BASIC BLOCK if.end
%2725:	ret	

FUNCTION match_address

BASIC BLOCK entry
%2726:	getelementptr	 addr XXX XXX
%2727:	load	 %2726
%2728:	switch	 %2727 sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb2 XXX sw.bb10

BASIC BLOCK sw.bb
%2729:	br	 return

BASIC BLOCK sw.bb1
%2730:	load	 input_line_number
%2731:	getelementptr	 addr XXX XXX
%2732:	load	 %2731
%2733:	icmp	 %2730 %2732
%2734:	zext	 %2733
%2735:	br	 return

BASIC BLOCK sw.bb2
%2736:	load	 XXX
%2737:	sub	 %2736 XXX
%2738:	sext	 %2737
%2739:	load	 XXX
%2740:	getelementptr	 %2739 %2738
%2741:	load	 %2740
%2742:	sext	 %2741
%2743:	icmp	 %2742 XXX
%2744:	zext	 %2743
%2745:	getelementptr	 addr XXX XXX
%2746:	load	 %2745
%2747:	load	 XXX
%2748:	load	 XXX
%2749:	sub	 %2748 %2744
%2750:	load	 XXX
%2751:	sub	 %2750 %2744
%2752:	call	 %2746 %2747 %2749 XXX %2751 XXX re_search
%2753:	icmp	 %2752 XXX
%2754:	select	 %2753 XXX XXX
%2755:	br	 return

BASIC BLOCK sw.bb10
%2756:	load	 input_EOF
%2757:	icmp	 %2756 XXX
%2758:	select	 %2757 XXX XXX
%2759:	br	 return

BASIC BLOCK sw.default
%2760:	call	 XXX panic
%2761:	br	 sw.epilog

BASIC BLOCK sw.epilog
%2762:	br	 return

BASIC BLOCK return
%2763:	phi	 XXX %2758 %2754 %2734 XXX
%2764:	ret	 %2763

FUNCTION eol_pos

BASIC BLOCK entry
%2765:	br	 while.cond

BASIC BLOCK while.cond
%2766:	phi	 len %2768
%2767:	phi	 str %2771
%2768:	add	 %2766 XXX
%2769:	icmp	 %2766 XXX
%2770:	br	 %2769 while.end while.body

BASIC BLOCK while.body
%2771:	getelementptr	 %2767 XXX
%2772:	load	 %2767
%2773:	sext	 %2772
%2774:	icmp	 %2773 XXX
%2775:	br	 %2774 if.end if.then

BASIC BLOCK if.then
%2776:	getelementptr	 %2771 XXX
%2777:	br	 return

BASIC BLOCK if.end
%2778:	br	 while.cond

BASIC BLOCK while.end
%2779:	getelementptr	 %2767 XXX
%2780:	br	 return

BASIC BLOCK return
%2781:	phi	 %2776 %2779
%2782:	ret	 %2781

FUNCTION chr_copy

BASIC BLOCK entry
%2783:	br	 while.cond

BASIC BLOCK while.cond
%2784:	phi	 len %2787
%2785:	phi	 src %2790
%2786:	phi	 dest %2792
%2787:	add	 %2784 XXX
%2788:	icmp	 %2784 XXX
%2789:	br	 %2788 while.end while.body

BASIC BLOCK while.body
%2790:	getelementptr	 %2785 XXX
%2791:	load	 %2785
%2792:	getelementptr	 %2786 XXX
%2793:	store	 %2791 %2786
%2794:	br	 while.cond

BASIC BLOCK while.end
%2795:	ret	

FUNCTION line_copy

BASIC BLOCK entry
%2796:	getelementptr	 from XXX XXX
%2797:	load	 %2796
%2798:	getelementptr	 to XXX XXX
%2799:	load	 %2798
%2800:	icmp	 %2797 %2799
%2801:	br	 %2800 if.end if.then

BASIC BLOCK if.then
%2802:	getelementptr	 from XXX XXX
%2803:	load	 %2802
%2804:	getelementptr	 to XXX XXX
%2805:	store	 %2803 %2804
%2806:	getelementptr	 to XXX XXX
%2807:	load	 %2806
%2808:	getelementptr	 to XXX XXX
%2809:	load	 %2808
%2810:	call	 %2807 %2809 ck_realloc
%2811:	getelementptr	 to XXX XXX
%2812:	store	 %2810 %2811
%2813:	br	 if.end

BASIC BLOCK if.end
%2814:	getelementptr	 from XXX XXX
%2815:	load	 %2814
%2816:	getelementptr	 to XXX XXX
%2817:	load	 %2816
%2818:	getelementptr	 from XXX XXX
%2819:	load	 %2818
%2820:	sext	 %2819
%2821:	call	 %2815 %2817 %2820 bcopy
%2822:	getelementptr	 from XXX XXX
%2823:	load	 %2822
%2824:	getelementptr	 to XXX XXX
%2825:	store	 %2823 %2824
%2826:	ret	

FUNCTION line_append

BASIC BLOCK entry
%2827:	getelementptr	 from XXX XXX
%2828:	load	 %2827
%2829:	getelementptr	 to XXX XXX
%2830:	load	 %2829
%2831:	getelementptr	 to XXX XXX
%2832:	load	 %2831
%2833:	sub	 %2830 %2832
%2834:	icmp	 %2828 %2833
%2835:	br	 %2834 if.end if.then

BASIC BLOCK if.then
%2836:	getelementptr	 from XXX XXX
%2837:	load	 %2836
%2838:	getelementptr	 to XXX XXX
%2839:	load	 %2838
%2840:	add	 %2839 %2837
%2841:	store	 %2840 %2838
%2842:	getelementptr	 to XXX XXX
%2843:	load	 %2842
%2844:	getelementptr	 to XXX XXX
%2845:	load	 %2844
%2846:	call	 %2843 %2845 ck_realloc
%2847:	getelementptr	 to XXX XXX
%2848:	store	 %2846 %2847
%2849:	br	 if.end

BASIC BLOCK if.end
%2850:	getelementptr	 from XXX XXX
%2851:	load	 %2850
%2852:	getelementptr	 to XXX XXX
%2853:	load	 %2852
%2854:	getelementptr	 to XXX XXX
%2855:	load	 %2854
%2856:	sext	 %2855
%2857:	getelementptr	 %2853 %2856
%2858:	getelementptr	 from XXX XXX
%2859:	load	 %2858
%2860:	sext	 %2859
%2861:	call	 %2851 %2857 %2860 bcopy
%2862:	getelementptr	 from XXX XXX
%2863:	load	 %2862
%2864:	getelementptr	 to XXX XXX
%2865:	load	 %2864
%2866:	add	 %2865 %2863
%2867:	store	 %2866 %2864
%2868:	ret	

FUNCTION append_pattern_space

BASIC BLOCK entry
%2869:	load	 XXX
%2870:	load	 XXX
%2871:	sext	 %2870
%2872:	getelementptr	 %2869 %2871
%2873:	load	 XXX
%2874:	load	 XXX
%2875:	sub	 %2873 %2874
%2876:	load	 input_line_number
%2877:	add	 %2876 XXX
%2878:	store	 %2877 input_line_number
%2879:	store	 XXX replaced
%2880:	br	 for.cond

BASIC BLOCK for.cond
%2881:	phi	 %2875 %2923
%2882:	phi	 %2872 %2921
%2883:	load	 input_file
%2884:	call	 %2883 _IO_getc
%2885:	icmp	 %2884 XXX
%2886:	br	 %2885 if.end7 if.then

BASIC BLOCK if.then
%2887:	load	 XXX
%2888:	icmp	 %2881 %2887
%2889:	br	 %2888 if.end if.then2

BASIC BLOCK if.then2
%2890:	br	 if.end29

BASIC BLOCK if.end
%2891:	load	 XXX
%2892:	sub	 %2891 %2881
%2893:	store	 %2892 XXX
%2894:	load	 last_input_file
%2895:	icmp	 %2894 XXX
%2896:	br	 %2895 if.end6 if.then4

BASIC BLOCK if.then4
%2897:	load	 input_EOF
%2898:	add	 %2897 XXX
%2899:	store	 %2898 input_EOF
%2900:	br	 if.end6

BASIC BLOCK if.end6
%2901:	br	 if.end29

BASIC BLOCK if.end7
%2902:	icmp	 %2881 XXX
%2903:	br	 %2902 if.end14 if.then9

BASIC BLOCK if.then9
%2904:	load	 XXX
%2905:	load	 XXX
%2906:	mul	 %2905 XXX
%2907:	call	 %2904 %2906 ck_realloc
%2908:	store	 %2907 XXX
%2909:	load	 XXX
%2910:	load	 XXX
%2911:	sext	 %2910
%2912:	getelementptr	 %2909 %2911
%2913:	load	 XXX
%2914:	load	 XXX
%2915:	mul	 %2914 XXX
%2916:	store	 %2915 XXX
%2917:	br	 if.end14

BASIC BLOCK if.end14
%2918:	phi	 %2913 %2881
%2919:	phi	 %2912 %2882
%2920:	trunc	 %2884
%2921:	getelementptr	 %2919 XXX
%2922:	store	 %2920 %2919
%2923:	add	 %2918 XXX
%2924:	icmp	 %2884 XXX
%2925:	br	 %2924 if.end19 if.then17

BASIC BLOCK if.then17
%2926:	load	 XXX
%2927:	sub	 %2926 %2923
%2928:	store	 %2927 XXX
%2929:	br	 for.end

BASIC BLOCK if.end19
%2930:	br	 for.cond

BASIC BLOCK for.end
%2931:	load	 input_file
%2932:	call	 %2931 _IO_getc
%2933:	icmp	 %2932 XXX
%2934:	br	 %2933 if.else if.then23

BASIC BLOCK if.then23
%2935:	load	 input_file
%2936:	call	 %2932 %2935 ungetc
%2937:	br	 if.end29

BASIC BLOCK if.else
%2938:	load	 last_input_file
%2939:	icmp	 %2938 XXX
%2940:	br	 %2939 if.end28 if.then26

BASIC BLOCK if.then26
%2941:	load	 input_EOF
%2942:	add	 %2941 XXX
%2943:	store	 %2942 input_EOF
%2944:	br	 if.end28

BASIC BLOCK if.end28
%2945:	br	 if.end29

BASIC BLOCK if.end29
%2946:	ret	

FUNCTION re_search

BASIC BLOCK entry
%2947:	call	 bufp XXX XXX string size startpos range regs size re_search_2
%2948:	ret	 %2947

FUNCTION str_append

BASIC BLOCK entry
%2949:	getelementptr	 to XXX XXX
%2950:	load	 %2949
%2951:	getelementptr	 to XXX XXX
%2952:	load	 %2951
%2953:	sub	 %2950 %2952
%2954:	icmp	 length %2953
%2955:	br	 %2954 if.end if.then

BASIC BLOCK if.then
%2956:	getelementptr	 to XXX XXX
%2957:	load	 %2956
%2958:	add	 %2957 length
%2959:	store	 %2958 %2956
%2960:	getelementptr	 to XXX XXX
%2961:	load	 %2960
%2962:	getelementptr	 to XXX XXX
%2963:	load	 %2962
%2964:	call	 %2961 %2963 ck_realloc
%2965:	getelementptr	 to XXX XXX
%2966:	store	 %2964 %2965
%2967:	br	 if.end

BASIC BLOCK if.end
%2968:	getelementptr	 to XXX XXX
%2969:	load	 %2968
%2970:	getelementptr	 to XXX XXX
%2971:	load	 %2970
%2972:	sext	 %2971
%2973:	getelementptr	 %2969 %2972
%2974:	sext	 length
%2975:	call	 string %2973 %2974 bcopy
%2976:	getelementptr	 to XXX XXX
%2977:	load	 %2976
%2978:	add	 %2977 length
%2979:	store	 %2978 %2976
%2980:	ret	

FUNCTION __fp_name

BASIC BLOCK entry
%2981:	br	 for.cond

BASIC BLOCK for.cond
%2982:	phi	 XXX %2997
%2983:	icmp	 %2982 XXX
%2984:	br	 %2983 for.end for.body

BASIC BLOCK for.body
%2985:	sext	 %2982
%2986:	getelementptr	 __id_s XXX %2985
%2987:	getelementptr	 %2986 XXX XXX
%2988:	load	 %2987
%2989:	icmp	 %2988 fp
%2990:	br	 %2989 if.end if.then

BASIC BLOCK if.then
%2991:	sext	 %2982
%2992:	getelementptr	 __id_s XXX %2991
%2993:	getelementptr	 %2992 XXX XXX
%2994:	load	 %2993
%2995:	br	 return

BASIC BLOCK if.end
%2996:	br	 for.inc

BASIC BLOCK for.inc
%2997:	add	 %2982 XXX
%2998:	br	 for.cond

BASIC BLOCK for.end
%2999:	br	 return

BASIC BLOCK return
%3000:	phi	 %2994 XXX
%3001:	ret	 %3000

FUNCTION xmalloc

BASIC BLOCK entry
%3002:	call	 size ck_malloc
%3003:	ret	 %3002

FUNCTION add_buffer

BASIC BLOCK entry
%3004:	bitcast	 bb
%3005:	getelementptr	 %3004 XXX XXX
%3006:	load	 %3005
%3007:	add	 %3006 n
%3008:	getelementptr	 %3004 XXX XXX
%3009:	load	 %3008
%3010:	icmp	 %3007 %3009
%3011:	br	 %3010 if.end if.then

BASIC BLOCK if.then
%3012:	getelementptr	 %3004 XXX XXX
%3013:	load	 %3012
%3014:	mul	 %3013 XXX
%3015:	store	 %3014 %3012
%3016:	getelementptr	 %3004 XXX XXX
%3017:	load	 %3016
%3018:	getelementptr	 %3004 XXX XXX
%3019:	load	 %3018
%3020:	call	 %3017 %3019 ck_realloc
%3021:	getelementptr	 %3004 XXX XXX
%3022:	store	 %3020 %3021
%3023:	br	 if.end

BASIC BLOCK if.end
%3024:	getelementptr	 %3004 XXX XXX
%3025:	load	 %3024
%3026:	getelementptr	 %3004 XXX XXX
%3027:	load	 %3026
%3028:	sext	 %3027
%3029:	getelementptr	 %3025 %3028
%3030:	br	 while.cond

BASIC BLOCK while.cond
%3031:	phi	 n %3034
%3032:	phi	 p %3037
%3033:	phi	 %3029 %3039
%3034:	add	 %3031 XXX
%3035:	icmp	 %3031 XXX
%3036:	br	 %3035 while.end while.body

BASIC BLOCK while.body
%3037:	getelementptr	 %3032 XXX
%3038:	load	 %3032
%3039:	getelementptr	 %3033 XXX
%3040:	store	 %3038 %3033
%3041:	br	 while.cond

BASIC BLOCK while.end
%3042:	getelementptr	 %3004 XXX XXX
%3043:	load	 %3042
%3044:	add	 %3043 n
%3045:	store	 %3044 %3042
%3046:	ret	

FUNCTION re_compile_fastmap

BASIC BLOCK entry
%3047:	alloca	 XXX
%3048:	getelementptr	 bufp XXX XXX
%3049:	load	 %3048
%3050:	getelementptr	 bufp XXX XXX
%3051:	load	 %3050
%3052:	getelementptr	 bufp XXX XXX
%3053:	load	 %3052
%3054:	getelementptr	 %3051 %3053
%3055:	br	 do.body

BASIC BLOCK do.body
%3056:	alloca	 XXX
%3057:	bitcast	 %3056
%3058:	getelementptr	 %3047 XXX XXX
%3059:	store	 %3057 %3058
%3060:	getelementptr	 %3047 XXX XXX
%3061:	load	 %3060
%3062:	icmp	 %3061 XXX
%3063:	br	 %3062 if.end if.then

BASIC BLOCK if.then
%3064:	br	 return

BASIC BLOCK if.end
%3065:	getelementptr	 %3047 XXX XXX
%3066:	store	 XXX %3065
%3067:	getelementptr	 %3047 XXX XXX
%3068:	store	 XXX %3067
%3069:	br	 do.end

BASIC BLOCK do.end
%3070:	call	 %3049 XXX XXX XXX XXX llvm.memset.p0i8.i64
%3071:	getelementptr	 bufp XXX XXX
%3072:	load	 %3071
%3073:	and	 %3072 XXX
%3074:	or	 %3073 XXX
%3075:	store	 %3074 %3071
%3076:	getelementptr	 bufp XXX XXX
%3077:	load	 %3076
%3078:	and	 %3077 XXX
%3079:	store	 %3078 %3076
%3080:	br	 while.cond

BASIC BLOCK while.cond
%3081:	phi	 %3051 %3457 %3455 %3433 %3448 %3281 %3281 %3309 %3120 %3054
%3082:	phi	 XXX %3119 %3119 %3119 %3119 %3119 %3119 %3119 %3119 XXX
%3083:	phi	 XXX %3083 %3083 %3434 %3083 %3083 %3083 %3083 %3083 %3083
%3084:	icmp	 %3081 %3054
%3085:	br	 %3084 lor.rhs lor.end

BASIC BLOCK lor.rhs
%3086:	getelementptr	 %3047 XXX XXX
%3087:	load	 %3086
%3088:	icmp	 %3087 XXX
%3089:	xor	 %3088 XXX
%3090:	br	 lor.end

BASIC BLOCK lor.end
%3091:	phi	 XXX %3089
%3092:	br	 %3091 while.end while.body

BASIC BLOCK while.body
%3093:	icmp	 %3081 %3054
%3094:	br	 %3093 if.end19 if.then10

BASIC BLOCK if.then10
%3095:	sext	 %3082
%3096:	getelementptr	 bufp XXX XXX
%3097:	load	 %3096
%3098:	and	 %3097 XXX
%3099:	zext	 %3098
%3100:	or	 %3099 %3095
%3101:	trunc	 %3100
%3102:	load	 %3096
%3103:	and	 %3101 XXX
%3104:	and	 %3102 XXX
%3105:	or	 %3104 %3103
%3106:	store	 %3105 %3096
%3107:	zext	 %3103
%3108:	getelementptr	 %3047 XXX XXX
%3109:	load	 %3108
%3110:	add	 %3109 XXX
%3111:	store	 %3110 %3108
%3112:	zext	 %3110
%3113:	getelementptr	 %3047 XXX XXX
%3114:	load	 %3113
%3115:	getelementptr	 %3114 %3112
%3116:	load	 %3115
%3117:	br	 if.end19

BASIC BLOCK if.end19
%3118:	phi	 %3116 %3081
%3119:	phi	 XXX %3082
%3120:	getelementptr	 %3118 XXX
%3121:	load	 %3118
%3122:	zext	 %3121
%3123:	switch	 %3122 sw.default XXX sw.bb XXX sw.bb25 XXX sw.bb29 XXX sw.bb42 XXX sw.bb76 XXX sw.bb93 XXX sw.bb110 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb132 XXX sw.bb133 XXX sw.bb133 XXX sw.bb133 XXX sw.bb133 XXX sw.bb133 XXX sw.bb133 XXX sw.bb186 XXX sw.bb186 XXX sw.bb263 XXX sw.bb281 XXX sw.bb283 XXX sw.bb283

BASIC BLOCK sw.bb
%3124:	getelementptr	 bufp XXX XXX
%3125:	load	 %3124
%3126:	and	 %3125 XXX
%3127:	or	 %3126 XXX
%3128:	store	 %3127 %3124
%3129:	br	 return

BASIC BLOCK sw.bb25
%3130:	getelementptr	 %3120 XXX
%3131:	load	 %3130
%3132:	zext	 %3131
%3133:	getelementptr	 %3049 %3132
%3134:	store	 XXX %3133
%3135:	br	 sw.epilog

BASIC BLOCK sw.bb29
%3136:	getelementptr	 %3120 XXX
%3137:	load	 %3120
%3138:	zext	 %3137
%3139:	mul	 %3138 XXX
%3140:	sub	 %3139 XXX
%3141:	br	 for.cond

BASIC BLOCK for.cond
%3142:	phi	 %3140 %3160
%3143:	icmp	 %3142 XXX
%3144:	br	 %3143 for.end for.body

BASIC BLOCK for.body
%3145:	sdiv	 %3142 XXX
%3146:	sext	 %3145
%3147:	getelementptr	 %3136 %3146
%3148:	load	 %3147
%3149:	zext	 %3148
%3150:	srem	 %3142 XXX
%3151:	shl	 XXX %3150
%3152:	and	 %3149 %3151
%3153:	icmp	 %3152 XXX
%3154:	br	 %3153 if.end40 if.then37

BASIC BLOCK if.then37
%3155:	sext	 %3142
%3156:	getelementptr	 %3049 %3155
%3157:	store	 XXX %3156
%3158:	br	 if.end40

BASIC BLOCK if.end40
%3159:	br	 for.inc

BASIC BLOCK for.inc
%3160:	add	 %3142 XXX
%3161:	br	 for.cond

BASIC BLOCK for.end
%3162:	br	 sw.epilog

BASIC BLOCK sw.bb42
%3163:	load	 %3120
%3164:	zext	 %3163
%3165:	mul	 %3164 XXX
%3166:	br	 for.cond45

BASIC BLOCK for.cond45
%3167:	phi	 %3165 %3174
%3168:	icmp	 %3167 XXX
%3169:	br	 %3168 for.end52 for.body48

BASIC BLOCK for.body48
%3170:	sext	 %3167
%3171:	getelementptr	 %3049 %3170
%3172:	store	 XXX %3171
%3173:	br	 for.inc51

BASIC BLOCK for.inc51
%3174:	add	 %3167 XXX
%3175:	br	 for.cond45

BASIC BLOCK for.end52
%3176:	getelementptr	 %3120 XXX
%3177:	load	 %3120
%3178:	zext	 %3177
%3179:	mul	 %3178 XXX
%3180:	sub	 %3179 XXX
%3181:	br	 for.cond57

BASIC BLOCK for.cond57
%3182:	phi	 %3180 %3200
%3183:	icmp	 %3182 XXX
%3184:	br	 %3183 for.end75 for.body60

BASIC BLOCK for.body60
%3185:	sdiv	 %3182 XXX
%3186:	sext	 %3185
%3187:	getelementptr	 %3176 %3186
%3188:	load	 %3187
%3189:	zext	 %3188
%3190:	srem	 %3182 XXX
%3191:	shl	 XXX %3190
%3192:	and	 %3189 %3191
%3193:	icmp	 %3192 XXX
%3194:	br	 %3193 if.then69 if.end72

BASIC BLOCK if.then69
%3195:	sext	 %3182
%3196:	getelementptr	 %3049 %3195
%3197:	store	 XXX %3196
%3198:	br	 if.end72

BASIC BLOCK if.end72
%3199:	br	 for.inc73

BASIC BLOCK for.inc73
%3200:	add	 %3182 XXX
%3201:	br	 for.cond57

BASIC BLOCK for.end75
%3202:	br	 sw.epilog

BASIC BLOCK sw.bb76
%3203:	br	 for.cond77

BASIC BLOCK for.cond77
%3204:	phi	 XXX %3218
%3205:	icmp	 %3204 XXX
%3206:	br	 %3205 for.end92 for.body80

BASIC BLOCK for.body80
%3207:	sext	 %3204
%3208:	getelementptr	 re_syntax_table XXX %3207
%3209:	load	 %3208
%3210:	sext	 %3209
%3211:	icmp	 %3210 XXX
%3212:	br	 %3211 if.end89 if.then86

BASIC BLOCK if.then86
%3213:	sext	 %3204
%3214:	getelementptr	 %3049 %3213
%3215:	store	 XXX %3214
%3216:	br	 if.end89

BASIC BLOCK if.end89
%3217:	br	 for.inc90

BASIC BLOCK for.inc90
%3218:	add	 %3204 XXX
%3219:	br	 for.cond77

BASIC BLOCK for.end92
%3220:	br	 sw.epilog

BASIC BLOCK sw.bb93
%3221:	br	 for.cond94

BASIC BLOCK for.cond94
%3222:	phi	 XXX %3236
%3223:	icmp	 %3222 XXX
%3224:	br	 %3223 for.end109 for.body97

BASIC BLOCK for.body97
%3225:	sext	 %3222
%3226:	getelementptr	 re_syntax_table XXX %3225
%3227:	load	 %3226
%3228:	sext	 %3227
%3229:	icmp	 %3228 XXX
%3230:	br	 %3229 if.end106 if.then103

BASIC BLOCK if.then103
%3231:	sext	 %3222
%3232:	getelementptr	 %3049 %3231
%3233:	store	 XXX %3232
%3234:	br	 if.end106

BASIC BLOCK if.end106
%3235:	br	 for.inc107

BASIC BLOCK for.inc107
%3236:	add	 %3222 XXX
%3237:	br	 for.cond94

BASIC BLOCK for.end109
%3238:	br	 sw.epilog

BASIC BLOCK sw.bb110
%3239:	br	 for.cond111

BASIC BLOCK for.cond111
%3240:	phi	 XXX %3247
%3241:	icmp	 %3240 XXX
%3242:	br	 %3241 for.end119 for.body114

BASIC BLOCK for.body114
%3243:	sext	 %3240
%3244:	getelementptr	 %3049 %3243
%3245:	store	 XXX %3244
%3246:	br	 for.inc117

BASIC BLOCK for.inc117
%3247:	add	 %3240 XXX
%3248:	br	 for.cond111

BASIC BLOCK for.end119
%3249:	getelementptr	 bufp XXX XXX
%3250:	load	 %3249
%3251:	and	 %3250 XXX
%3252:	icmp	 %3251 XXX
%3253:	br	 %3252 if.then122 if.else

BASIC BLOCK if.then122
%3254:	getelementptr	 %3049 XXX
%3255:	store	 XXX %3254
%3256:	br	 if.end131

BASIC BLOCK if.else
%3257:	getelementptr	 bufp XXX XXX
%3258:	load	 %3257
%3259:	and	 %3258 XXX
%3260:	zext	 %3259
%3261:	icmp	 %3260 XXX
%3262:	br	 %3261 if.end130 if.then129

BASIC BLOCK if.then129
%3263:	br	 return

BASIC BLOCK if.end130
%3264:	br	 if.end131

BASIC BLOCK if.end131
%3265:	br	 sw.epilog

BASIC BLOCK sw.bb132
%3266:	br	 while.cond

BASIC BLOCK sw.bb133
%3267:	br	 do.body134

BASIC BLOCK do.body134
%3268:	br	 do.body135

BASIC BLOCK do.body135
%3269:	load	 %3120
%3270:	zext	 %3269
%3271:	and	 %3270 XXX
%3272:	getelementptr	 %3120 XXX
%3273:	load	 %3272
%3274:	sext	 %3273
%3275:	shl	 %3274 XXX
%3276:	add	 %3271 %3275
%3277:	br	 do.end141

BASIC BLOCK do.end141
%3278:	getelementptr	 %3120 XXX
%3279:	br	 do.end143

BASIC BLOCK do.end143
%3280:	sext	 %3276
%3281:	getelementptr	 %3278 %3280
%3282:	icmp	 %3276 XXX
%3283:	br	 %3282 if.end148 if.then147

BASIC BLOCK if.then147
%3284:	br	 while.cond

BASIC BLOCK if.end148
%3285:	load	 %3281
%3286:	zext	 %3285
%3287:	icmp	 %3286 XXX
%3288:	br	 %3287 if.end156 land.lhs.true

BASIC BLOCK land.lhs.true
%3289:	load	 %3281
%3290:	zext	 %3289
%3291:	icmp	 %3290 XXX
%3292:	br	 %3291 if.end156 if.then155

BASIC BLOCK if.then155
%3293:	br	 while.cond

BASIC BLOCK if.end156
%3294:	getelementptr	 %3281 XXX
%3295:	br	 do.body158

BASIC BLOCK do.body158
%3296:	br	 do.body159

BASIC BLOCK do.body159
%3297:	load	 %3294
%3298:	zext	 %3297
%3299:	and	 %3298 XXX
%3300:	getelementptr	 %3294 XXX
%3301:	load	 %3300
%3302:	sext	 %3301
%3303:	shl	 %3302 XXX
%3304:	add	 %3299 %3303
%3305:	br	 do.end166

BASIC BLOCK do.end166
%3306:	getelementptr	 %3294 XXX
%3307:	br	 do.end168

BASIC BLOCK do.end168
%3308:	sext	 %3304
%3309:	getelementptr	 %3306 %3308
%3310:	getelementptr	 %3047 XXX XXX
%3311:	load	 %3310
%3312:	icmp	 %3311 XXX
%3313:	br	 %3312 land.lhs.true174 if.end185

BASIC BLOCK land.lhs.true174
%3314:	getelementptr	 %3047 XXX XXX
%3315:	load	 %3314
%3316:	sub	 %3315 XXX
%3317:	zext	 %3316
%3318:	getelementptr	 %3047 XXX XXX
%3319:	load	 %3318
%3320:	getelementptr	 %3319 %3317
%3321:	load	 %3320
%3322:	icmp	 %3321 %3309
%3323:	br	 %3322 if.end185 if.then182

BASIC BLOCK if.then182
%3324:	getelementptr	 %3047 XXX XXX
%3325:	load	 %3324
%3326:	add	 %3325 XXX
%3327:	store	 %3326 %3324
%3328:	br	 if.end185

BASIC BLOCK if.end185
%3329:	br	 while.cond

BASIC BLOCK sw.bb186
%3330:	br	 handle_on_failure_jump

BASIC BLOCK handle_on_failure_jump
%3331:	phi	 %3452 %3120
%3332:	phi	 XXX %3083
%3333:	br	 do.body187

BASIC BLOCK do.body187
%3334:	br	 do.body188

BASIC BLOCK do.body188
%3335:	load	 %3331
%3336:	zext	 %3335
%3337:	and	 %3336 XXX
%3338:	getelementptr	 %3331 XXX
%3339:	load	 %3338
%3340:	sext	 %3339
%3341:	shl	 %3340 XXX
%3342:	add	 %3337 %3341
%3343:	br	 do.end195

BASIC BLOCK do.end195
%3344:	getelementptr	 %3331 XXX
%3345:	br	 do.end197

BASIC BLOCK do.end197
%3346:	sext	 %3342
%3347:	getelementptr	 %3344 %3346
%3348:	icmp	 %3347 %3054
%3349:	br	 %3348 if.else243 if.then202

BASIC BLOCK if.then202
%3350:	getelementptr	 %3047 XXX XXX
%3351:	load	 %3350
%3352:	getelementptr	 %3047 XXX XXX
%3353:	load	 %3352
%3354:	icmp	 %3351 %3353
%3355:	br	 %3354 cond.false233 land.lhs.true207

BASIC BLOCK land.lhs.true207
%3356:	getelementptr	 %3047 XXX XXX
%3357:	load	 %3356
%3358:	load	 re_max_failures
%3359:	sub	 XXX XXX
%3360:	mul	 %3359 XXX
%3361:	add	 %3360 XXX
%3362:	mul	 %3358 %3361
%3363:	icmp	 %3357 %3362
%3364:	br	 %3363 cond.false cond.true

BASIC BLOCK cond.true
%3365:	br	 XXX cond.true232 cond.false233

BASIC BLOCK cond.false
%3366:	getelementptr	 %3047 XXX XXX
%3367:	load	 %3366
%3368:	shl	 %3367 XXX
%3369:	zext	 %3368
%3370:	mul	 %3369 XXX
%3371:	alloca	 %3370
%3372:	getelementptr	 %3047 XXX XXX
%3373:	load	 %3372
%3374:	bitcast	 %3373
%3375:	getelementptr	 %3047 XXX XXX
%3376:	load	 %3375
%3377:	zext	 %3376
%3378:	mul	 %3377 XXX
%3379:	call	 %3371 %3374 %3378 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%3380:	bitcast	 %3371
%3381:	getelementptr	 %3047 XXX XXX
%3382:	store	 %3380 %3381
%3383:	getelementptr	 %3047 XXX XXX
%3384:	load	 %3383
%3385:	icmp	 %3384 XXX
%3386:	br	 %3385 cond.false228 cond.true227

BASIC BLOCK cond.true227
%3387:	br	 cond.end

BASIC BLOCK cond.false228
%3388:	getelementptr	 %3047 XXX XXX
%3389:	load	 %3388
%3390:	shl	 %3389 XXX
%3391:	store	 %3390 %3388
%3392:	br	 cond.end

BASIC BLOCK cond.end
%3393:	phi	 XXX XXX
%3394:	icmp	 %3393 XXX
%3395:	br	 %3394 cond.true232 cond.false233

BASIC BLOCK cond.true232
%3396:	br	 XXX if.then241 if.end242

BASIC BLOCK cond.false233
%3397:	sext	 %3342
%3398:	getelementptr	 %3344 %3397
%3399:	getelementptr	 %3047 XXX XXX
%3400:	load	 %3399
%3401:	add	 %3400 XXX
%3402:	store	 %3401 %3399
%3403:	zext	 %3400
%3404:	getelementptr	 %3047 XXX XXX
%3405:	load	 %3404
%3406:	getelementptr	 %3405 %3403
%3407:	store	 %3398 %3406
%3408:	br	 XXX if.then241 if.end242

BASIC BLOCK if.then241
%3409:	br	 return

BASIC BLOCK if.end242
%3410:	br	 if.end248

BASIC BLOCK if.else243
%3411:	getelementptr	 bufp XXX XXX
%3412:	load	 %3411
%3413:	and	 %3412 XXX
%3414:	or	 %3413 XXX
%3415:	store	 %3414 %3411
%3416:	br	 if.end248

BASIC BLOCK if.end248
%3417:	icmp	 %3332 XXX
%3418:	br	 %3417 if.end262 if.then250

BASIC BLOCK if.then250
%3419:	br	 do.body251

BASIC BLOCK do.body251
%3420:	br	 do.body252

BASIC BLOCK do.body252
%3421:	load	 %3344
%3422:	zext	 %3421
%3423:	and	 %3422 XXX
%3424:	getelementptr	 %3344 XXX
%3425:	load	 %3424
%3426:	sext	 %3425
%3427:	shl	 %3426 XXX
%3428:	add	 %3423 %3427
%3429:	br	 do.end259

BASIC BLOCK do.end259
%3430:	getelementptr	 %3344 XXX
%3431:	br	 do.end261

BASIC BLOCK do.end261
%3432:	br	 if.end262

BASIC BLOCK if.end262
%3433:	phi	 %3430 %3344
%3434:	phi	 XXX %3332
%3435:	br	 while.cond

BASIC BLOCK sw.bb263
%3436:	getelementptr	 %3120 XXX
%3437:	br	 do.body265

BASIC BLOCK do.body265
%3438:	br	 do.body266

BASIC BLOCK do.body266
%3439:	load	 %3436
%3440:	zext	 %3439
%3441:	and	 %3440 XXX
%3442:	getelementptr	 %3436 XXX
%3443:	load	 %3442
%3444:	sext	 %3443
%3445:	shl	 %3444 XXX
%3446:	add	 %3441 %3445
%3447:	br	 do.end273

BASIC BLOCK do.end273
%3448:	getelementptr	 %3436 XXX
%3449:	br	 do.end275

BASIC BLOCK do.end275
%3450:	icmp	 %3446 XXX
%3451:	br	 %3450 if.end280 if.then278

BASIC BLOCK if.then278
%3452:	getelementptr	 %3448 XXX
%3453:	br	 handle_on_failure_jump

BASIC BLOCK if.end280
%3454:	br	 while.cond

BASIC BLOCK sw.bb281
%3455:	getelementptr	 %3120 XXX
%3456:	br	 while.cond

BASIC BLOCK sw.bb283
%3457:	getelementptr	 %3120 XXX
%3458:	br	 while.cond

BASIC BLOCK sw.default
%3459:	call	 abort
%3460:	unreachable	

BASIC BLOCK sw.epilog
%3461:	br	 while.cond

BASIC BLOCK while.end
%3462:	sext	 %3082
%3463:	getelementptr	 bufp XXX XXX
%3464:	load	 %3463
%3465:	and	 %3464 XXX
%3466:	zext	 %3465
%3467:	or	 %3466 %3462
%3468:	trunc	 %3467
%3469:	load	 %3463
%3470:	and	 %3468 XXX
%3471:	and	 %3469 XXX
%3472:	or	 %3471 %3470
%3473:	store	 %3472 %3463
%3474:	zext	 %3470
%3475:	br	 return

BASIC BLOCK return
%3476:	phi	 XXX XXX XXX XXX XXX
%3477:	ret	 %3476

FUNCTION re_set_registers

BASIC BLOCK entry
%3478:	icmp	 num_regs XXX
%3479:	br	 %3478 if.else if.then

BASIC BLOCK if.then
%3480:	getelementptr	 bufp XXX XXX
%3481:	load	 %3480
%3482:	and	 %3481 XXX
%3483:	or	 %3482 XXX
%3484:	store	 %3483 %3480
%3485:	getelementptr	 regs XXX XXX
%3486:	store	 num_regs %3485
%3487:	getelementptr	 regs XXX XXX
%3488:	store	 starts %3487
%3489:	getelementptr	 regs XXX XXX
%3490:	store	 ends %3489
%3491:	br	 if.end

BASIC BLOCK if.else
%3492:	getelementptr	 bufp XXX XXX
%3493:	load	 %3492
%3494:	and	 %3493 XXX
%3495:	store	 %3494 %3492
%3496:	getelementptr	 regs XXX XXX
%3497:	store	 XXX %3496
%3498:	getelementptr	 regs XXX XXX
%3499:	store	 XXX %3498
%3500:	getelementptr	 regs XXX XXX
%3501:	store	 XXX %3500
%3502:	br	 if.end

BASIC BLOCK if.end
%3503:	ret	

FUNCTION re_search_2

BASIC BLOCK entry
%3504:	getelementptr	 bufp XXX XXX
%3505:	load	 %3504
%3506:	getelementptr	 bufp XXX XXX
%3507:	load	 %3506
%3508:	add	 size1 size2
%3509:	add	 startpos range
%3510:	icmp	 startpos XXX
%3511:	br	 %3510 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%3512:	icmp	 startpos %3508
%3513:	br	 %3512 if.end if.then

BASIC BLOCK if.then
%3514:	br	 return

BASIC BLOCK if.end
%3515:	icmp	 %3509 XXX
%3516:	br	 %3515 if.else if.then6

BASIC BLOCK if.then6
%3517:	sub	 XXX startpos
%3518:	br	 if.end11

BASIC BLOCK if.else
%3519:	icmp	 %3509 %3508
%3520:	br	 %3519 if.end10 if.then8

BASIC BLOCK if.then8
%3521:	sub	 %3508 startpos
%3522:	br	 if.end10

BASIC BLOCK if.end10
%3523:	phi	 %3521 range
%3524:	br	 if.end11

BASIC BLOCK if.end11
%3525:	phi	 %3517 %3523
%3526:	getelementptr	 bufp XXX XXX
%3527:	load	 %3526
%3528:	icmp	 %3527 XXX
%3529:	br	 %3528 if.end24 land.lhs.true

BASIC BLOCK land.lhs.true
%3530:	getelementptr	 bufp XXX XXX
%3531:	load	 %3530
%3532:	getelementptr	 %3531 XXX
%3533:	load	 %3532
%3534:	zext	 %3533
%3535:	icmp	 %3534 XXX
%3536:	br	 %3535 if.end24 land.lhs.true15

BASIC BLOCK land.lhs.true15
%3537:	icmp	 %3525 XXX
%3538:	br	 %3537 if.end24 if.then18

BASIC BLOCK if.then18
%3539:	icmp	 startpos XXX
%3540:	br	 %3539 if.else22 if.then21

BASIC BLOCK if.then21
%3541:	br	 return

BASIC BLOCK if.else22
%3542:	br	 if.end23

BASIC BLOCK if.end23
%3543:	br	 if.end24

BASIC BLOCK if.end24
%3544:	phi	 XXX %3525 %3525 %3525
%3545:	icmp	 %3505 XXX
%3546:	br	 %3545 if.end32 land.lhs.true25

BASIC BLOCK land.lhs.true25
%3547:	getelementptr	 bufp XXX XXX
%3548:	load	 %3547
%3549:	lshr	 %3548 XXX
%3550:	and	 %3549 XXX
%3551:	zext	 %3550
%3552:	icmp	 %3551 XXX
%3553:	br	 %3552 if.then27 if.end32

BASIC BLOCK if.then27
%3554:	call	 bufp re_compile_fastmap
%3555:	icmp	 %3554 XXX
%3556:	br	 %3555 if.end31 if.then30

BASIC BLOCK if.then30
%3557:	br	 return

BASIC BLOCK if.end31
%3558:	br	 if.end32

BASIC BLOCK if.end32
%3559:	br	 for.cond

BASIC BLOCK for.cond
%3560:	phi	 startpos %3714
%3561:	phi	 %3544 %3715
%3562:	icmp	 %3505 XXX
%3563:	br	 %3562 if.end119 land.lhs.true34

BASIC BLOCK land.lhs.true34
%3564:	icmp	 %3560 %3508
%3565:	br	 %3564 if.end119 land.lhs.true37

BASIC BLOCK land.lhs.true37
%3566:	getelementptr	 bufp XXX XXX
%3567:	load	 %3566
%3568:	and	 %3567 XXX
%3569:	zext	 %3568
%3570:	icmp	 %3569 XXX
%3571:	br	 %3570 if.then42 if.end119

BASIC BLOCK if.then42
%3572:	icmp	 %3561 XXX
%3573:	br	 %3572 if.else85 if.then45

BASIC BLOCK if.then45
%3574:	icmp	 %3560 size1
%3575:	br	 %3574 if.end55 land.lhs.true48

BASIC BLOCK land.lhs.true48
%3576:	add	 %3560 %3561
%3577:	icmp	 %3576 size1
%3578:	br	 %3577 if.end55 if.then52

BASIC BLOCK if.then52
%3579:	sub	 size1 %3560
%3580:	sub	 %3561 %3579
%3581:	br	 if.end55

BASIC BLOCK if.end55
%3582:	phi	 %3580 XXX XXX
%3583:	icmp	 %3560 size1
%3584:	br	 %3583 cond.false cond.true

BASIC BLOCK cond.true
%3585:	sext	 size1
%3586:	sub	 XXX %3585
%3587:	getelementptr	 string2 %3586
%3588:	br	 cond.end

BASIC BLOCK cond.false
%3589:	br	 cond.end

BASIC BLOCK cond.end
%3590:	phi	 %3587 string1
%3591:	sext	 %3560
%3592:	getelementptr	 %3590 %3591
%3593:	icmp	 %3507 XXX
%3594:	br	 %3593 if.else68 if.then61

BASIC BLOCK if.then61
%3595:	br	 while.cond

BASIC BLOCK while.cond
%3596:	phi	 %3561 %3614
%3597:	phi	 %3592 %3611
%3598:	icmp	 %3596 %3582
%3599:	br	 %3598 land.end land.rhs

BASIC BLOCK land.rhs
%3600:	getelementptr	 %3597 XXX
%3601:	load	 %3597
%3602:	zext	 %3601
%3603:	getelementptr	 %3507 %3602
%3604:	load	 %3603
%3605:	zext	 %3604
%3606:	getelementptr	 %3505 %3605
%3607:	load	 %3606
%3608:	icmp	 %3607 XXX
%3609:	xor	 %3608 XXX
%3610:	br	 land.end

BASIC BLOCK land.end
%3611:	phi	 %3600 %3597
%3612:	phi	 XXX %3609
%3613:	br	 %3612 while.end while.body

BASIC BLOCK while.body
%3614:	add	 %3596 XXX
%3615:	br	 while.cond

BASIC BLOCK while.end
%3616:	br	 if.end82

BASIC BLOCK if.else68
%3617:	br	 while.cond69

BASIC BLOCK while.cond69
%3618:	phi	 %3561 %3633
%3619:	phi	 %3592 %3630
%3620:	icmp	 %3618 %3582
%3621:	br	 %3620 land.end78 land.rhs72

BASIC BLOCK land.rhs72
%3622:	getelementptr	 %3619 XXX
%3623:	load	 %3619
%3624:	zext	 %3623
%3625:	getelementptr	 %3505 %3624
%3626:	load	 %3625
%3627:	icmp	 %3626 XXX
%3628:	xor	 %3627 XXX
%3629:	br	 land.end78

BASIC BLOCK land.end78
%3630:	phi	 %3622 %3619
%3631:	phi	 XXX %3628
%3632:	br	 %3631 while.end81 while.body79

BASIC BLOCK while.body79
%3633:	add	 %3618 XXX
%3634:	br	 while.cond69

BASIC BLOCK while.end81
%3635:	br	 if.end82

BASIC BLOCK if.end82
%3636:	phi	 %3596 %3618
%3637:	sub	 %3561 %3636
%3638:	add	 %3560 %3637
%3639:	br	 if.end118

BASIC BLOCK if.else85
%3640:	icmp	 size1 XXX
%3641:	br	 %3640 lor.lhs.false88 cond.true91

BASIC BLOCK lor.lhs.false88
%3642:	icmp	 %3560 size1
%3643:	br	 %3642 cond.false96 cond.true91

BASIC BLOCK cond.true91
%3644:	sub	 %3560 size1
%3645:	sext	 %3644
%3646:	getelementptr	 string2 %3645
%3647:	load	 %3646
%3648:	sext	 %3647
%3649:	br	 cond.end100

BASIC BLOCK cond.false96
%3650:	sext	 %3560
%3651:	getelementptr	 string1 %3650
%3652:	load	 %3651
%3653:	sext	 %3652
%3654:	br	 cond.end100

BASIC BLOCK cond.end100
%3655:	phi	 %3648 %3653
%3656:	trunc	 %3655
%3657:	icmp	 %3507 XXX
%3658:	br	 %3657 cond.false108 cond.true104

BASIC BLOCK cond.true104
%3659:	zext	 %3656
%3660:	getelementptr	 %3507 %3659
%3661:	load	 %3660
%3662:	sext	 %3661
%3663:	br	 cond.end110

BASIC BLOCK cond.false108
%3664:	sext	 %3656
%3665:	br	 cond.end110

BASIC BLOCK cond.end110
%3666:	phi	 %3662 %3664
%3667:	trunc	 %3666
%3668:	zext	 %3667
%3669:	getelementptr	 %3505 %3668
%3670:	load	 %3669
%3671:	icmp	 %3670 XXX
%3672:	br	 %3671 if.then116 if.end117

BASIC BLOCK if.then116
%3673:	br	 advance

BASIC BLOCK if.end117
%3674:	br	 if.end118

BASIC BLOCK if.end118
%3675:	phi	 %3638 %3560
%3676:	phi	 %3636 %3561
%3677:	br	 if.end119

BASIC BLOCK if.end119
%3678:	phi	 %3560 %3675 %3560 %3560
%3679:	phi	 %3561 %3676 %3561 %3561
%3680:	icmp	 %3679 XXX
%3681:	br	 %3680 if.end134 land.lhs.true122

BASIC BLOCK land.lhs.true122
%3682:	icmp	 %3678 %3508
%3683:	br	 %3682 if.end134 land.lhs.true125

BASIC BLOCK land.lhs.true125
%3684:	icmp	 %3505 XXX
%3685:	br	 %3684 if.end134 land.lhs.true127

BASIC BLOCK land.lhs.true127
%3686:	getelementptr	 bufp XXX XXX
%3687:	load	 %3686
%3688:	and	 %3687 XXX
%3689:	zext	 %3688
%3690:	icmp	 %3689 XXX
%3691:	br	 %3690 if.then133 if.end134

BASIC BLOCK if.then133
%3692:	br	 return

BASIC BLOCK if.end134
%3693:	call	 bufp string1 size1 string2 size2 %3678 regs stop re_match_2
%3694:	icmp	 %3693 XXX
%3695:	br	 %3694 if.end139 if.then138

BASIC BLOCK if.then138
%3696:	br	 return

BASIC BLOCK if.end139
%3697:	icmp	 %3693 XXX
%3698:	br	 %3697 if.end143 if.then142

BASIC BLOCK if.then142
%3699:	br	 return

BASIC BLOCK if.end143
%3700:	br	 advance

BASIC BLOCK advance
%3701:	phi	 %3678 %3560
%3702:	phi	 %3679 %3561
%3703:	icmp	 %3702 XXX
%3704:	br	 %3703 if.then145 if.else146

BASIC BLOCK if.then145
%3705:	br	 for.end

BASIC BLOCK if.else146
%3706:	icmp	 %3702 XXX
%3707:	br	 %3706 if.else151 if.then149

BASIC BLOCK if.then149
%3708:	add	 %3702 XXX
%3709:	add	 %3701 XXX
%3710:	br	 if.end154

BASIC BLOCK if.else151
%3711:	add	 %3702 XXX
%3712:	add	 %3701 XXX
%3713:	br	 if.end154

BASIC BLOCK if.end154
%3714:	phi	 %3709 %3712
%3715:	phi	 %3708 %3711
%3716:	br	 if.end155

BASIC BLOCK if.end155
%3717:	br	 for.cond

BASIC BLOCK for.end
%3718:	br	 return

BASIC BLOCK return
%3719:	phi	 XXX XXX %3678 XXX XXX XXX XXX
%3720:	ret	 %3719

FUNCTION re_match_2

BASIC BLOCK entry
%3721:	alloca	 XXX
%3722:	alloca	 XXX
%3723:	getelementptr	 bufp XXX XXX
%3724:	load	 %3723
%3725:	getelementptr	 bufp XXX XXX
%3726:	load	 %3725
%3727:	getelementptr	 %3724 %3726
%3728:	getelementptr	 bufp XXX XXX
%3729:	load	 %3728
%3730:	getelementptr	 bufp XXX XXX
%3731:	load	 %3730
%3732:	add	 %3731 XXX
%3733:	trunc	 %3732
%3734:	br	 do.body

BASIC BLOCK do.body
%3735:	alloca	 XXX
%3736:	bitcast	 %3735
%3737:	getelementptr	 %3722 XXX XXX
%3738:	store	 %3736 %3737
%3739:	getelementptr	 %3722 XXX XXX
%3740:	load	 %3739
%3741:	icmp	 %3740 XXX
%3742:	br	 %3741 if.end if.then

BASIC BLOCK if.then
%3743:	br	 return

BASIC BLOCK if.end
%3744:	getelementptr	 %3722 XXX XXX
%3745:	store	 XXX %3744
%3746:	getelementptr	 %3722 XXX XXX
%3747:	store	 XXX %3746
%3748:	br	 do.end

BASIC BLOCK do.end
%3749:	getelementptr	 bufp XXX XXX
%3750:	load	 %3749
%3751:	icmp	 %3750 XXX
%3752:	br	 %3751 if.end41 if.then5

BASIC BLOCK if.then5
%3753:	zext	 %3733
%3754:	mul	 %3753 XXX
%3755:	alloca	 %3754
%3756:	bitcast	 %3755
%3757:	zext	 %3733
%3758:	mul	 %3757 XXX
%3759:	alloca	 %3758
%3760:	bitcast	 %3759
%3761:	zext	 %3733
%3762:	mul	 %3761 XXX
%3763:	alloca	 %3762
%3764:	bitcast	 %3763
%3765:	zext	 %3733
%3766:	mul	 %3765 XXX
%3767:	alloca	 %3766
%3768:	bitcast	 %3767
%3769:	zext	 %3733
%3770:	mul	 %3769 XXX
%3771:	alloca	 %3770
%3772:	bitcast	 %3771
%3773:	zext	 %3733
%3774:	mul	 %3773 XXX
%3775:	alloca	 %3774
%3776:	bitcast	 %3775
%3777:	zext	 %3733
%3778:	mul	 %3777 XXX
%3779:	alloca	 %3778
%3780:	bitcast	 %3779
%3781:	zext	 %3733
%3782:	mul	 %3781 XXX
%3783:	alloca	 %3782
%3784:	bitcast	 %3783
%3785:	zext	 %3733
%3786:	mul	 %3785 XXX
%3787:	alloca	 %3786
%3788:	bitcast	 %3787
%3789:	icmp	 %3756 XXX
%3790:	br	 %3789 if.then39 land.lhs.true

BASIC BLOCK land.lhs.true
%3791:	icmp	 %3760 XXX
%3792:	br	 %3791 if.then39 land.lhs.true25

BASIC BLOCK land.lhs.true25
%3793:	icmp	 %3764 XXX
%3794:	br	 %3793 if.then39 land.lhs.true27

BASIC BLOCK land.lhs.true27
%3795:	icmp	 %3768 XXX
%3796:	br	 %3795 if.then39 land.lhs.true29

BASIC BLOCK land.lhs.true29
%3797:	icmp	 %3780 XXX
%3798:	br	 %3797 if.then39 land.lhs.true31

BASIC BLOCK land.lhs.true31
%3799:	icmp	 %3772 XXX
%3800:	br	 %3799 if.then39 land.lhs.true33

BASIC BLOCK land.lhs.true33
%3801:	icmp	 %3776 XXX
%3802:	br	 %3801 if.then39 land.lhs.true35

BASIC BLOCK land.lhs.true35
%3803:	icmp	 %3784 XXX
%3804:	br	 %3803 if.then39 land.lhs.true37

BASIC BLOCK land.lhs.true37
%3805:	icmp	 %3788 XXX
%3806:	br	 %3805 if.then39 if.end40

BASIC BLOCK if.then39
%3807:	alloca	 XXX
%3808:	br	 return

BASIC BLOCK if.end40
%3809:	br	 if.end41

BASIC BLOCK if.end41
%3810:	phi	 %3788 XXX
%3811:	phi	 %3784 XXX
%3812:	phi	 %3776 XXX
%3813:	phi	 %3772 XXX
%3814:	phi	 %3780 XXX
%3815:	phi	 %3768 XXX
%3816:	phi	 %3764 XXX
%3817:	phi	 %3760 XXX
%3818:	phi	 %3756 XXX
%3819:	icmp	 pos XXX
%3820:	br	 %3819 lor.lhs.false if.then47

BASIC BLOCK lor.lhs.false
%3821:	add	 size1 size2
%3822:	icmp	 pos %3821
%3823:	br	 %3822 if.end48 if.then47

BASIC BLOCK if.then47
%3824:	alloca	 XXX
%3825:	br	 return

BASIC BLOCK if.end48
%3826:	br	 for.cond

BASIC BLOCK for.cond
%3827:	phi	 XXX %3872
%3828:	icmp	 %3827 %3733
%3829:	br	 %3828 for.end for.body

BASIC BLOCK for.body
%3830:	sext	 %3827
%3831:	getelementptr	 %3815 %3830
%3832:	store	 XXX %3831
%3833:	sext	 %3827
%3834:	getelementptr	 %3816 %3833
%3835:	store	 XXX %3834
%3836:	sext	 %3827
%3837:	getelementptr	 %3817 %3836
%3838:	store	 XXX %3837
%3839:	sext	 %3827
%3840:	getelementptr	 %3818 %3839
%3841:	store	 XXX %3840
%3842:	sext	 %3827
%3843:	getelementptr	 %3814 %3842
%3844:	bitcast	 %3843
%3845:	bitcast	 %3844
%3846:	load	 %3845
%3847:	and	 %3846 XXX
%3848:	or	 %3847 XXX
%3849:	store	 %3848 %3845
%3850:	sext	 %3827
%3851:	getelementptr	 %3814 %3850
%3852:	bitcast	 %3851
%3853:	bitcast	 %3852
%3854:	load	 %3853
%3855:	and	 %3854 XXX
%3856:	store	 %3855 %3853
%3857:	sext	 %3827
%3858:	getelementptr	 %3814 %3857
%3859:	bitcast	 %3858
%3860:	bitcast	 %3859
%3861:	load	 %3860
%3862:	and	 %3861 XXX
%3863:	store	 %3862 %3860
%3864:	sext	 %3827
%3865:	getelementptr	 %3814 %3864
%3866:	bitcast	 %3865
%3867:	bitcast	 %3866
%3868:	load	 %3867
%3869:	and	 %3868 XXX
%3870:	store	 %3869 %3867
%3871:	br	 for.inc

BASIC BLOCK for.inc
%3872:	add	 %3827 XXX
%3873:	br	 for.cond

BASIC BLOCK for.end
%3874:	icmp	 size2 XXX
%3875:	br	 %3874 if.end80 land.lhs.true76

BASIC BLOCK land.lhs.true76
%3876:	icmp	 string1 XXX
%3877:	br	 %3876 if.end80 if.then79

BASIC BLOCK if.then79
%3878:	br	 if.end80

BASIC BLOCK if.end80
%3879:	phi	 size1 size2 size2
%3880:	phi	 string1 string2 string2
%3881:	phi	 XXX size1 size1
%3882:	phi	 XXX string1 string1
%3883:	sext	 %3881
%3884:	getelementptr	 %3882 %3883
%3885:	sext	 %3879
%3886:	getelementptr	 %3880 %3885
%3887:	icmp	 stop %3881
%3888:	br	 %3887 if.else if.then86

BASIC BLOCK if.then86
%3889:	sext	 stop
%3890:	getelementptr	 %3882 %3889
%3891:	br	 if.end93

BASIC BLOCK if.else
%3892:	sext	 stop
%3893:	getelementptr	 %3880 %3892
%3894:	sext	 %3881
%3895:	sub	 XXX %3894
%3896:	getelementptr	 %3893 %3895
%3897:	br	 if.end93

BASIC BLOCK if.end93
%3898:	phi	 %3880 %3896
%3899:	phi	 %3890 %3884
%3900:	icmp	 %3881 XXX
%3901:	br	 %3900 if.else102 land.lhs.true96

BASIC BLOCK land.lhs.true96
%3902:	icmp	 pos %3881
%3903:	br	 %3902 if.else102 if.then99

BASIC BLOCK if.then99
%3904:	sext	 pos
%3905:	getelementptr	 %3882 %3904
%3906:	br	 if.end108

BASIC BLOCK if.else102
%3907:	sext	 pos
%3908:	getelementptr	 %3880 %3907
%3909:	sext	 %3881
%3910:	sub	 XXX %3909
%3911:	getelementptr	 %3908 %3910
%3912:	br	 if.end108

BASIC BLOCK if.end108
%3913:	phi	 %3899 %3898
%3914:	phi	 %3905 %3911
%3915:	br	 for.cond109

BASIC BLOCK for.cond109
%3916:	phi	 XXX %6636 %3916
%3917:	phi	 XXX %6637 %3917
%3918:	phi	 XXX %6675 %6630
%3919:	phi	 XXX %6685 %6631
%3920:	phi	 %3724 %6665 %6632
%3921:	phi	 %3913 %6787 %6633
%3922:	phi	 %3914 %6656 %6634
%3923:	icmp	 %3920 %3727
%3924:	br	 %3923 if.end422 if.then112

BASIC BLOCK if.then112
%3925:	icmp	 %3922 %3898
%3926:	br	 %3925 if.end187 if.then115

BASIC BLOCK if.then115
%3927:	getelementptr	 %3722 XXX XXX
%3928:	load	 %3927
%3929:	icmp	 %3928 XXX
%3930:	br	 %3929 if.then119 if.else162

BASIC BLOCK if.then119
%3931:	icmp	 %3881 XXX
%3932:	br	 %3931 land.end land.lhs.true121

BASIC BLOCK land.lhs.true121
%3933:	icmp	 %3882 %3916
%3934:	br	 %3933 land.end land.rhs

BASIC BLOCK land.rhs
%3935:	sext	 %3881
%3936:	getelementptr	 %3882 %3935
%3937:	icmp	 %3916 %3936
%3938:	br	 land.end

BASIC BLOCK land.end
%3939:	phi	 XXX XXX %3937
%3940:	zext	 %3939
%3941:	icmp	 %3921 %3899
%3942:	zext	 %3941
%3943:	icmp	 %3940 %3942
%3944:	zext	 %3943
%3945:	trunc	 %3944
%3946:	icmp	 %3917 XXX
%3947:	br	 %3946 if.then145 lor.lhs.false134

BASIC BLOCK lor.lhs.false134
%3948:	sext	 %3945
%3949:	icmp	 %3948 XXX
%3950:	br	 %3949 lor.lhs.false140 land.lhs.true137

BASIC BLOCK land.lhs.true137
%3951:	icmp	 %3922 %3916
%3952:	br	 %3951 lor.lhs.false140 if.then145

BASIC BLOCK lor.lhs.false140
%3953:	icmp	 %3945 XXX
%3954:	br	 %3953 land.lhs.true142 if.end161

BASIC BLOCK land.lhs.true142
%3955:	icmp	 %3921 %3899
%3956:	br	 %3955 if.then145 if.end161

BASIC BLOCK if.then145
%3957:	br	 for.cond146

BASIC BLOCK for.cond146
%3958:	phi	 XXX %3974
%3959:	icmp	 %3958 %3733
%3960:	br	 %3959 for.end160 for.body149

BASIC BLOCK for.body149
%3961:	sext	 %3958
%3962:	getelementptr	 %3818 %3961
%3963:	load	 %3962
%3964:	sext	 %3958
%3965:	getelementptr	 %3813 %3964
%3966:	store	 %3963 %3965
%3967:	sext	 %3958
%3968:	getelementptr	 %3817 %3967
%3969:	load	 %3968
%3970:	sext	 %3958
%3971:	getelementptr	 %3812 %3970
%3972:	store	 %3969 %3971
%3973:	br	 for.inc158

BASIC BLOCK for.inc158
%3974:	add	 %3958 XXX
%3975:	br	 for.cond146

BASIC BLOCK for.end160
%3976:	br	 if.end161

BASIC BLOCK if.end161
%3977:	phi	 %3922 %3916 %3916
%3978:	phi	 XXX %3917 %3917
%3979:	br	 fail

BASIC BLOCK if.else162
%3980:	icmp	 %3917 XXX
%3981:	br	 %3980 if.end185 if.then164

BASIC BLOCK if.then164
%3982:	br	 restore_best_regs

BASIC BLOCK restore_best_regs
%3983:	phi	 %3916 %6636
%3984:	icmp	 %3983 %3882
%3985:	br	 %3984 cond.false land.lhs.true167

BASIC BLOCK land.lhs.true167
%3986:	icmp	 %3983 %3884
%3987:	br	 %3986 cond.false cond.true

BASIC BLOCK cond.true
%3988:	br	 cond.end

BASIC BLOCK cond.false
%3989:	br	 cond.end

BASIC BLOCK cond.end
%3990:	phi	 %3899 %3898
%3991:	br	 for.cond170

BASIC BLOCK for.cond170
%3992:	phi	 XXX %4008
%3993:	icmp	 %3992 %3733
%3994:	br	 %3993 for.end184 for.body173

BASIC BLOCK for.body173
%3995:	sext	 %3992
%3996:	getelementptr	 %3813 %3995
%3997:	load	 %3996
%3998:	sext	 %3992
%3999:	getelementptr	 %3818 %3998
%4000:	store	 %3997 %3999
%4001:	sext	 %3992
%4002:	getelementptr	 %3812 %4001
%4003:	load	 %4002
%4004:	sext	 %3992
%4005:	getelementptr	 %3817 %4004
%4006:	store	 %4003 %4005
%4007:	br	 for.inc182

BASIC BLOCK for.inc182
%4008:	add	 %3992 XXX
%4009:	br	 for.cond170

BASIC BLOCK for.end184
%4010:	br	 if.end185

BASIC BLOCK if.end185
%4011:	phi	 %3990 %3921
%4012:	phi	 %3983 %3922
%4013:	br	 if.end186

BASIC BLOCK if.end186
%4014:	br	 if.end187

BASIC BLOCK if.end187
%4015:	phi	 %4011 %3921
%4016:	phi	 %4012 %3922
%4017:	icmp	 regs XXX
%4018:	br	 %4017 if.end405 land.lhs.true189

BASIC BLOCK land.lhs.true189
%4019:	getelementptr	 bufp XXX XXX
%4020:	load	 %4019
%4021:	lshr	 %4020 XXX
%4022:	and	 %4021 XXX
%4023:	zext	 %4022
%4024:	icmp	 %4023 XXX
%4025:	br	 %4024 if.then193 if.end405

BASIC BLOCK if.then193
%4026:	getelementptr	 bufp XXX XXX
%4027:	load	 %4026
%4028:	lshr	 %4027 XXX
%4029:	and	 %4028 XXX
%4030:	zext	 %4029
%4031:	icmp	 %4030 XXX
%4032:	br	 %4031 if.else230 if.then200

BASIC BLOCK if.then200
%4033:	add	 %3733 XXX
%4034:	icmp	 XXX %4033
%4035:	br	 %4034 cond.false205 cond.true204

BASIC BLOCK cond.true204
%4036:	br	 cond.end207

BASIC BLOCK cond.false205
%4037:	add	 %3733 XXX
%4038:	br	 cond.end207

BASIC BLOCK cond.end207
%4039:	phi	 XXX %4037
%4040:	getelementptr	 regs XXX XXX
%4041:	store	 %4039 %4040
%4042:	getelementptr	 regs XXX XXX
%4043:	load	 %4042
%4044:	zext	 %4043
%4045:	mul	 %4044 XXX
%4046:	call	 %4045 malloc
%4047:	bitcast	 %4046
%4048:	getelementptr	 regs XXX XXX
%4049:	store	 %4047 %4048
%4050:	getelementptr	 regs XXX XXX
%4051:	load	 %4050
%4052:	zext	 %4051
%4053:	mul	 %4052 XXX
%4054:	call	 %4053 malloc
%4055:	bitcast	 %4054
%4056:	getelementptr	 regs XXX XXX
%4057:	store	 %4055 %4056
%4058:	getelementptr	 regs XXX XXX
%4059:	load	 %4058
%4060:	icmp	 %4059 XXX
%4061:	br	 %4060 lor.lhs.false220 if.then224

BASIC BLOCK lor.lhs.false220
%4062:	getelementptr	 regs XXX XXX
%4063:	load	 %4062
%4064:	icmp	 %4063 XXX
%4065:	br	 %4064 if.end225 if.then224

BASIC BLOCK if.then224
%4066:	br	 return

BASIC BLOCK if.end225
%4067:	getelementptr	 bufp XXX XXX
%4068:	load	 %4067
%4069:	and	 %4068 XXX
%4070:	or	 %4069 XXX
%4071:	store	 %4070 %4067
%4072:	br	 if.end270

BASIC BLOCK if.else230
%4073:	getelementptr	 bufp XXX XXX
%4074:	load	 %4073
%4075:	lshr	 %4074 XXX
%4076:	and	 %4075 XXX
%4077:	zext	 %4076
%4078:	icmp	 %4077 XXX
%4079:	br	 %4078 if.else268 if.then238

BASIC BLOCK if.then238
%4080:	getelementptr	 regs XXX XXX
%4081:	load	 %4080
%4082:	add	 %3733 XXX
%4083:	icmp	 %4081 %4082
%4084:	br	 %4083 if.end267 if.then243

BASIC BLOCK if.then243
%4085:	add	 %3733 XXX
%4086:	getelementptr	 regs XXX XXX
%4087:	store	 %4085 %4086
%4088:	getelementptr	 regs XXX XXX
%4089:	load	 %4088
%4090:	bitcast	 %4089
%4091:	getelementptr	 regs XXX XXX
%4092:	load	 %4091
%4093:	zext	 %4092
%4094:	mul	 %4093 XXX
%4095:	call	 %4090 %4094 realloc
%4096:	bitcast	 %4095
%4097:	getelementptr	 regs XXX XXX
%4098:	store	 %4096 %4097
%4099:	getelementptr	 regs XXX XXX
%4100:	load	 %4099
%4101:	bitcast	 %4100
%4102:	getelementptr	 regs XXX XXX
%4103:	load	 %4102
%4104:	zext	 %4103
%4105:	mul	 %4104 XXX
%4106:	call	 %4101 %4105 realloc
%4107:	bitcast	 %4106
%4108:	getelementptr	 regs XXX XXX
%4109:	store	 %4107 %4108
%4110:	getelementptr	 regs XXX XXX
%4111:	load	 %4110
%4112:	icmp	 %4111 XXX
%4113:	br	 %4112 lor.lhs.false261 if.then265

BASIC BLOCK lor.lhs.false261
%4114:	getelementptr	 regs XXX XXX
%4115:	load	 %4114
%4116:	icmp	 %4115 XXX
%4117:	br	 %4116 if.end266 if.then265

BASIC BLOCK if.then265
%4118:	br	 return

BASIC BLOCK if.end266
%4119:	br	 if.end267

BASIC BLOCK if.end267
%4120:	br	 if.end269

BASIC BLOCK if.else268
%4121:	br	 if.end269

BASIC BLOCK if.end269
%4122:	br	 if.end270

BASIC BLOCK if.end270
%4123:	getelementptr	 regs XXX XXX
%4124:	load	 %4123
%4125:	icmp	 %4124 XXX
%4126:	br	 %4125 if.end291 if.then274

BASIC BLOCK if.then274
%4127:	getelementptr	 regs XXX XXX
%4128:	load	 %4127
%4129:	getelementptr	 %4128 XXX
%4130:	store	 pos %4129
%4131:	icmp	 %4015 %3899
%4132:	br	 %4131 cond.false280 cond.true279

BASIC BLOCK cond.true279
%4133:	ptrtoint	 %4016
%4134:	ptrtoint	 %3882
%4135:	sub	 %4133 %4134
%4136:	br	 cond.end286

BASIC BLOCK cond.false280
%4137:	ptrtoint	 %4016
%4138:	ptrtoint	 %3880
%4139:	sub	 %4137 %4138
%4140:	sext	 %3881
%4141:	add	 %4139 %4140
%4142:	br	 cond.end286

BASIC BLOCK cond.end286
%4143:	phi	 %4135 %4141
%4144:	trunc	 %4143
%4145:	getelementptr	 regs XXX XXX
%4146:	load	 %4145
%4147:	getelementptr	 %4146 XXX
%4148:	store	 %4144 %4147
%4149:	br	 if.end291

BASIC BLOCK if.end291
%4150:	br	 for.cond292

BASIC BLOCK for.cond292
%4151:	phi	 XXX %4260
%4152:	getelementptr	 regs XXX XXX
%4153:	load	 %4152
%4154:	icmp	 %3733 %4153
%4155:	br	 %4154 cond.false297 cond.true296

BASIC BLOCK cond.true296
%4156:	br	 cond.end299

BASIC BLOCK cond.false297
%4157:	getelementptr	 regs XXX XXX
%4158:	load	 %4157
%4159:	br	 cond.end299

BASIC BLOCK cond.end299
%4160:	phi	 %3733 %4158
%4161:	icmp	 %4151 %4160
%4162:	br	 %4161 for.end390 for.body303

BASIC BLOCK for.body303
%4163:	sext	 %4151
%4164:	getelementptr	 %3818 %4163
%4165:	load	 %4164
%4166:	icmp	 %4165 XXX
%4167:	br	 %4166 lor.lhs.false308 if.then313

BASIC BLOCK lor.lhs.false308
%4168:	sext	 %4151
%4169:	getelementptr	 %3817 %4168
%4170:	load	 %4169
%4171:	icmp	 %4170 XXX
%4172:	br	 %4171 if.else320 if.then313

BASIC BLOCK if.then313
%4173:	sext	 %4151
%4174:	getelementptr	 regs XXX XXX
%4175:	load	 %4174
%4176:	getelementptr	 %4175 %4173
%4177:	store	 XXX %4176
%4178:	sext	 %4151
%4179:	getelementptr	 regs XXX XXX
%4180:	load	 %4179
%4181:	getelementptr	 %4180 %4178
%4182:	store	 XXX %4181
%4183:	br	 if.end387

BASIC BLOCK if.else320
%4184:	icmp	 %3881 XXX
%4185:	br	 %4184 cond.false340 land.lhs.true322

BASIC BLOCK land.lhs.true322
%4186:	sext	 %4151
%4187:	getelementptr	 %3818 %4186
%4188:	load	 %4187
%4189:	icmp	 %3882 %4188
%4190:	br	 %4189 cond.false340 land.lhs.true327

BASIC BLOCK land.lhs.true327
%4191:	sext	 %4151
%4192:	getelementptr	 %3818 %4191
%4193:	load	 %4192
%4194:	sext	 %3881
%4195:	getelementptr	 %3882 %4194
%4196:	icmp	 %4193 %4195
%4197:	br	 %4196 cond.false340 cond.true334

BASIC BLOCK cond.true334
%4198:	sext	 %4151
%4199:	getelementptr	 %3818 %4198
%4200:	load	 %4199
%4201:	ptrtoint	 %4200
%4202:	ptrtoint	 %3882
%4203:	sub	 %4201 %4202
%4204:	br	 cond.end348

BASIC BLOCK cond.false340
%4205:	sext	 %4151
%4206:	getelementptr	 %3818 %4205
%4207:	load	 %4206
%4208:	ptrtoint	 %4207
%4209:	ptrtoint	 %3880
%4210:	sub	 %4208 %4209
%4211:	sext	 %3881
%4212:	add	 %4210 %4211
%4213:	br	 cond.end348

BASIC BLOCK cond.end348
%4214:	phi	 %4203 %4212
%4215:	trunc	 %4214
%4216:	sext	 %4151
%4217:	getelementptr	 regs XXX XXX
%4218:	load	 %4217
%4219:	getelementptr	 %4218 %4216
%4220:	store	 %4215 %4219
%4221:	icmp	 %3881 XXX
%4222:	br	 %4221 cond.false373 land.lhs.true355

BASIC BLOCK land.lhs.true355
%4223:	sext	 %4151
%4224:	getelementptr	 %3817 %4223
%4225:	load	 %4224
%4226:	icmp	 %3882 %4225
%4227:	br	 %4226 cond.false373 land.lhs.true360

BASIC BLOCK land.lhs.true360
%4228:	sext	 %4151
%4229:	getelementptr	 %3817 %4228
%4230:	load	 %4229
%4231:	sext	 %3881
%4232:	getelementptr	 %3882 %4231
%4233:	icmp	 %4230 %4232
%4234:	br	 %4233 cond.false373 cond.true367

BASIC BLOCK cond.true367
%4235:	sext	 %4151
%4236:	getelementptr	 %3817 %4235
%4237:	load	 %4236
%4238:	ptrtoint	 %4237
%4239:	ptrtoint	 %3882
%4240:	sub	 %4238 %4239
%4241:	br	 cond.end381

BASIC BLOCK cond.false373
%4242:	sext	 %4151
%4243:	getelementptr	 %3817 %4242
%4244:	load	 %4243
%4245:	ptrtoint	 %4244
%4246:	ptrtoint	 %3880
%4247:	sub	 %4245 %4246
%4248:	sext	 %3881
%4249:	add	 %4247 %4248
%4250:	br	 cond.end381

BASIC BLOCK cond.end381
%4251:	phi	 %4240 %4249
%4252:	trunc	 %4251
%4253:	sext	 %4151
%4254:	getelementptr	 regs XXX XXX
%4255:	load	 %4254
%4256:	getelementptr	 %4255 %4253
%4257:	store	 %4252 %4256
%4258:	br	 if.end387

BASIC BLOCK if.end387
%4259:	br	 for.inc388

BASIC BLOCK for.inc388
%4260:	add	 %4151 XXX
%4261:	br	 for.cond292

BASIC BLOCK for.end390
%4262:	br	 for.cond391

BASIC BLOCK for.cond391
%4263:	phi	 %3733 %4279
%4264:	getelementptr	 regs XXX XXX
%4265:	load	 %4264
%4266:	icmp	 %4263 %4265
%4267:	br	 %4266 for.end404 for.body395

BASIC BLOCK for.body395
%4268:	sext	 %4263
%4269:	getelementptr	 regs XXX XXX
%4270:	load	 %4269
%4271:	getelementptr	 %4270 %4268
%4272:	store	 XXX %4271
%4273:	sext	 %4263
%4274:	getelementptr	 regs XXX XXX
%4275:	load	 %4274
%4276:	getelementptr	 %4275 %4273
%4277:	store	 XXX %4276
%4278:	br	 for.inc402

BASIC BLOCK for.inc402
%4279:	add	 %4263 XXX
%4280:	br	 for.cond391

BASIC BLOCK for.end404
%4281:	br	 if.end405

BASIC BLOCK if.end405
%4282:	alloca	 XXX
%4283:	sext	 pos
%4284:	sub	 XXX %4283
%4285:	getelementptr	 %4016 %4284
%4286:	icmp	 %4015 %3899
%4287:	br	 %4286 cond.false412 cond.true411

BASIC BLOCK cond.true411
%4288:	br	 cond.end416

BASIC BLOCK cond.false412
%4289:	sext	 %3881
%4290:	sub	 XXX %4289
%4291:	getelementptr	 %3880 %4290
%4292:	br	 cond.end416

BASIC BLOCK cond.end416
%4293:	phi	 %3882 %4291
%4294:	ptrtoint	 %4285
%4295:	ptrtoint	 %4293
%4296:	sub	 %4294 %4295
%4297:	trunc	 %4296
%4298:	br	 return

BASIC BLOCK if.end422
%4299:	getelementptr	 %3920 XXX
%4300:	load	 %3920
%4301:	zext	 %4300
%4302:	switch	 %4301 sw.default2313 XXX sw.bb XXX sw.bb424 XXX sw.bb494 XXX sw.bb559 XXX sw.bb559 XXX sw.bb633 XXX sw.bb697 XXX sw.bb983 XXX sw.bb1099 XXX sw.bb1130 XXX sw.bb1161 XXX sw.bb1173 XXX sw.bb1178 XXX sw.bb1292 XXX sw.bb1437 XXX sw.bb1568 XXX sw.bb1623 XXX sw.bb1639 XXX sw.bb1640 XXX sw.bb1739 XXX sw.bb1838 XXX sw.bb1875 XXX sw.bb1904 XXX sw.bb1942 XXX sw.bb2007 XXX sw.bb2072 XXX sw.bb2133 XXX sw.bb2197 XXX sw.bb2255

BASIC BLOCK sw.bb
%4303:	br	 sw.epilog2314

BASIC BLOCK sw.bb424
%4304:	getelementptr	 %4299 XXX
%4305:	load	 %4299
%4306:	zext	 %4305
%4307:	icmp	 %3729 XXX
%4308:	br	 %4307 if.else448 if.then428

BASIC BLOCK if.then428
%4309:	br	 do.body429

BASIC BLOCK do.body429
%4310:	phi	 %4304 %4329
%4311:	phi	 %3921 %4315
%4312:	phi	 %3922 %4323
%4313:	phi	 %4306 %4336
%4314:	br	 while.cond

BASIC BLOCK while.cond
%4315:	phi	 %4311 %3898
%4316:	phi	 %4312 %3880
%4317:	icmp	 %4316 %4315
%4318:	br	 %4317 while.end while.body

BASIC BLOCK while.body
%4319:	icmp	 %4315 %3898
%4320:	br	 %4319 if.end435 if.then434

BASIC BLOCK if.then434
%4321:	br	 fail

BASIC BLOCK if.end435
%4322:	br	 while.cond

BASIC BLOCK while.end
%4323:	getelementptr	 %4316 XXX
%4324:	load	 %4316
%4325:	zext	 %4324
%4326:	getelementptr	 %3729 %4325
%4327:	load	 %4326
%4328:	sext	 %4327
%4329:	getelementptr	 %4310 XXX
%4330:	load	 %4310
%4331:	sext	 %4330
%4332:	icmp	 %4328 %4331
%4333:	br	 %4332 if.end445 if.then444

BASIC BLOCK if.then444
%4334:	br	 fail

BASIC BLOCK if.end445
%4335:	br	 do.cond

BASIC BLOCK do.cond
%4336:	add	 %4313 XXX
%4337:	icmp	 %4336 XXX
%4338:	br	 %4337 do.end447 do.body429

BASIC BLOCK do.end447
%4339:	br	 if.end471

BASIC BLOCK if.else448
%4340:	br	 do.body449

BASIC BLOCK do.body449
%4341:	phi	 %4304 %4357
%4342:	phi	 %3921 %4346
%4343:	phi	 %3922 %4354
%4344:	phi	 %4306 %4364
%4345:	br	 while.cond450

BASIC BLOCK while.cond450
%4346:	phi	 %4342 %3898
%4347:	phi	 %4343 %3880
%4348:	icmp	 %4347 %4346
%4349:	br	 %4348 while.end458 while.body453

BASIC BLOCK while.body453
%4350:	icmp	 %4346 %3898
%4351:	br	 %4350 if.end457 if.then456

BASIC BLOCK if.then456
%4352:	br	 fail

BASIC BLOCK if.end457
%4353:	br	 while.cond450

BASIC BLOCK while.end458
%4354:	getelementptr	 %4347 XXX
%4355:	load	 %4347
%4356:	sext	 %4355
%4357:	getelementptr	 %4341 XXX
%4358:	load	 %4341
%4359:	sext	 %4358
%4360:	icmp	 %4356 %4359
%4361:	br	 %4360 if.end466 if.then465

BASIC BLOCK if.then465
%4362:	br	 fail

BASIC BLOCK if.end466
%4363:	br	 do.cond467

BASIC BLOCK do.cond467
%4364:	add	 %4344 XXX
%4365:	icmp	 %4364 XXX
%4366:	br	 %4365 do.end470 do.body449

BASIC BLOCK do.end470
%4367:	br	 if.end471

BASIC BLOCK if.end471
%4368:	phi	 %4329 %4357
%4369:	phi	 %4315 %4346
%4370:	phi	 %4323 %4354
%4371:	br	 do.body472

BASIC BLOCK do.body472
%4372:	br	 for.cond473

BASIC BLOCK for.cond473
%4373:	phi	 %3919 %4393
%4374:	icmp	 %4373 %3918
%4375:	br	 %4374 for.end491 for.body476

BASIC BLOCK for.body476
%4376:	zext	 %4373
%4377:	getelementptr	 %3814 %4376
%4378:	bitcast	 %4377
%4379:	bitcast	 %4378
%4380:	load	 %4379
%4381:	and	 %4380 XXX
%4382:	or	 %4381 XXX
%4383:	store	 %4382 %4379
%4384:	zext	 %4373
%4385:	getelementptr	 %3814 %4384
%4386:	bitcast	 %4385
%4387:	bitcast	 %4386
%4388:	load	 %4387
%4389:	and	 %4388 XXX
%4390:	or	 %4389 XXX
%4391:	store	 %4390 %4387
%4392:	br	 for.inc489

BASIC BLOCK for.inc489
%4393:	add	 %4373 XXX
%4394:	br	 for.cond473

BASIC BLOCK for.end491
%4395:	br	 do.end493

BASIC BLOCK do.end493
%4396:	br	 sw.epilog2314

BASIC BLOCK sw.bb494
%4397:	br	 while.cond495

BASIC BLOCK while.cond495
%4398:	phi	 %3921 %3898
%4399:	phi	 %3922 %3880
%4400:	icmp	 %4399 %4398
%4401:	br	 %4400 while.end503 while.body498

BASIC BLOCK while.body498
%4402:	icmp	 %4398 %3898
%4403:	br	 %4402 if.end502 if.then501

BASIC BLOCK if.then501
%4404:	br	 fail

BASIC BLOCK if.end502
%4405:	br	 while.cond495

BASIC BLOCK while.end503
%4406:	getelementptr	 bufp XXX XXX
%4407:	load	 %4406
%4408:	and	 %4407 XXX
%4409:	icmp	 %4408 XXX
%4410:	br	 %4409 land.lhs.true505 lor.lhs.false517

BASIC BLOCK land.lhs.true505
%4411:	icmp	 %3729 XXX
%4412:	br	 %4411 cond.false511 cond.true507

BASIC BLOCK cond.true507
%4413:	load	 %4399
%4414:	zext	 %4413
%4415:	getelementptr	 %3729 %4414
%4416:	load	 %4415
%4417:	sext	 %4416
%4418:	br	 cond.end513

BASIC BLOCK cond.false511
%4419:	load	 %4399
%4420:	sext	 %4419
%4421:	br	 cond.end513

BASIC BLOCK cond.end513
%4422:	phi	 %4417 %4420
%4423:	icmp	 %4422 XXX
%4424:	br	 %4423 lor.lhs.false517 if.then533

BASIC BLOCK lor.lhs.false517
%4425:	getelementptr	 bufp XXX XXX
%4426:	load	 %4425
%4427:	and	 %4426 XXX
%4428:	icmp	 %4427 XXX
%4429:	br	 %4428 if.end534 land.lhs.true521

BASIC BLOCK land.lhs.true521
%4430:	icmp	 %3729 XXX
%4431:	br	 %4430 cond.false527 cond.true523

BASIC BLOCK cond.true523
%4432:	load	 %4399
%4433:	zext	 %4432
%4434:	getelementptr	 %3729 %4433
%4435:	load	 %4434
%4436:	sext	 %4435
%4437:	br	 cond.end529

BASIC BLOCK cond.false527
%4438:	load	 %4399
%4439:	sext	 %4438
%4440:	br	 cond.end529

BASIC BLOCK cond.end529
%4441:	phi	 %4436 %4439
%4442:	icmp	 %4441 XXX
%4443:	br	 %4442 if.end534 if.then533

BASIC BLOCK if.then533
%4444:	br	 fail

BASIC BLOCK if.end534
%4445:	br	 do.body535

BASIC BLOCK do.body535
%4446:	br	 for.cond537

BASIC BLOCK for.cond537
%4447:	phi	 %3919 %4467
%4448:	icmp	 %4447 %3918
%4449:	br	 %4448 for.end555 for.body540

BASIC BLOCK for.body540
%4450:	zext	 %4447
%4451:	getelementptr	 %3814 %4450
%4452:	bitcast	 %4451
%4453:	bitcast	 %4452
%4454:	load	 %4453
%4455:	and	 %4454 XXX
%4456:	or	 %4455 XXX
%4457:	store	 %4456 %4453
%4458:	zext	 %4447
%4459:	getelementptr	 %3814 %4458
%4460:	bitcast	 %4459
%4461:	bitcast	 %4460
%4462:	load	 %4461
%4463:	and	 %4462 XXX
%4464:	or	 %4463 XXX
%4465:	store	 %4464 %4461
%4466:	br	 for.inc553

BASIC BLOCK for.inc553
%4467:	add	 %4447 XXX
%4468:	br	 for.cond537

BASIC BLOCK for.end555
%4469:	br	 do.end557

BASIC BLOCK do.end557
%4470:	getelementptr	 %4399 XXX
%4471:	br	 sw.epilog2314

BASIC BLOCK sw.bb559
%4472:	getelementptr	 %4299 XXX
%4473:	load	 %4472
%4474:	zext	 %4473
%4475:	icmp	 %4474 XXX
%4476:	zext	 %4475
%4477:	trunc	 %4476
%4478:	br	 while.cond565

BASIC BLOCK while.cond565
%4479:	phi	 %3921 %3898
%4480:	phi	 %3922 %3880
%4481:	icmp	 %4480 %4479
%4482:	br	 %4481 while.end573 while.body568

BASIC BLOCK while.body568
%4483:	icmp	 %4479 %3898
%4484:	br	 %4483 if.end572 if.then571

BASIC BLOCK if.then571
%4485:	br	 fail

BASIC BLOCK if.end572
%4486:	br	 while.cond565

BASIC BLOCK while.end573
%4487:	icmp	 %3729 XXX
%4488:	br	 %4487 cond.false579 cond.true575

BASIC BLOCK cond.true575
%4489:	load	 %4480
%4490:	zext	 %4489
%4491:	getelementptr	 %3729 %4490
%4492:	load	 %4491
%4493:	sext	 %4492
%4494:	br	 cond.end581

BASIC BLOCK cond.false579
%4495:	load	 %4480
%4496:	sext	 %4495
%4497:	br	 cond.end581

BASIC BLOCK cond.end581
%4498:	phi	 %4493 %4496
%4499:	trunc	 %4498
%4500:	zext	 %4499
%4501:	load	 %4299
%4502:	zext	 %4501
%4503:	mul	 %4502 XXX
%4504:	icmp	 %4500 %4503
%4505:	br	 %4504 if.end601 land.lhs.true589

BASIC BLOCK land.lhs.true589
%4506:	zext	 %4499
%4507:	sdiv	 %4506 XXX
%4508:	add	 XXX %4507
%4509:	sext	 %4508
%4510:	getelementptr	 %4299 %4509
%4511:	load	 %4510
%4512:	zext	 %4511
%4513:	zext	 %4499
%4514:	srem	 %4513 XXX
%4515:	shl	 XXX %4514
%4516:	and	 %4512 %4515
%4517:	icmp	 %4516 XXX
%4518:	br	 %4517 if.end601 if.then598

BASIC BLOCK if.then598
%4519:	icmp	 %4477 XXX
%4520:	xor	 %4519 XXX
%4521:	zext	 %4520
%4522:	trunc	 %4521
%4523:	br	 if.end601

BASIC BLOCK if.end601
%4524:	phi	 %4522 %4477 %4477
%4525:	load	 %4299
%4526:	zext	 %4525
%4527:	add	 XXX %4526
%4528:	sext	 %4527
%4529:	getelementptr	 %4299 %4528
%4530:	icmp	 %4524 XXX
%4531:	br	 %4530 if.then607 if.end608

BASIC BLOCK if.then607
%4532:	br	 fail

BASIC BLOCK if.end608
%4533:	br	 do.body609

BASIC BLOCK do.body609
%4534:	br	 for.cond611

BASIC BLOCK for.cond611
%4535:	phi	 %3919 %4555
%4536:	icmp	 %4535 %3918
%4537:	br	 %4536 for.end629 for.body614

BASIC BLOCK for.body614
%4538:	zext	 %4535
%4539:	getelementptr	 %3814 %4538
%4540:	bitcast	 %4539
%4541:	bitcast	 %4540
%4542:	load	 %4541
%4543:	and	 %4542 XXX
%4544:	or	 %4543 XXX
%4545:	store	 %4544 %4541
%4546:	zext	 %4535
%4547:	getelementptr	 %3814 %4546
%4548:	bitcast	 %4547
%4549:	bitcast	 %4548
%4550:	load	 %4549
%4551:	and	 %4550 XXX
%4552:	or	 %4551 XXX
%4553:	store	 %4552 %4549
%4554:	br	 for.inc627

BASIC BLOCK for.inc627
%4555:	add	 %4535 XXX
%4556:	br	 for.cond611

BASIC BLOCK for.end629
%4557:	br	 do.end631

BASIC BLOCK do.end631
%4558:	getelementptr	 %4480 XXX
%4559:	br	 sw.epilog2314

BASIC BLOCK sw.bb633
%4560:	store	 %4299 %3721
%4561:	load	 %4299
%4562:	zext	 %4561
%4563:	getelementptr	 %3814 %4562
%4564:	bitcast	 %4563
%4565:	bitcast	 %4564
%4566:	load	 %4565
%4567:	and	 %4566 XXX
%4568:	zext	 %4567
%4569:	icmp	 %4568 XXX
%4570:	br	 %4569 if.end651 if.then642

BASIC BLOCK if.then642
%4571:	call	 %3721 %3727 %3814 group_match_null_string_p
%4572:	sext	 %4571
%4573:	load	 %4299
%4574:	zext	 %4573
%4575:	getelementptr	 %3814 %4574
%4576:	bitcast	 %4575
%4577:	bitcast	 %4576
%4578:	trunc	 %4572
%4579:	load	 %4577
%4580:	and	 %4578 XXX
%4581:	and	 %4579 XXX
%4582:	or	 %4581 %4580
%4583:	store	 %4582 %4577
%4584:	zext	 %4580
%4585:	br	 if.end651

BASIC BLOCK if.end651
%4586:	load	 %4299
%4587:	zext	 %4586
%4588:	getelementptr	 %3814 %4587
%4589:	bitcast	 %4588
%4590:	bitcast	 %4589
%4591:	load	 %4590
%4592:	and	 %4591 XXX
%4593:	zext	 %4592
%4594:	icmp	 %4593 XXX
%4595:	br	 %4594 cond.false670 cond.true659

BASIC BLOCK cond.true659
%4596:	load	 %4299
%4597:	zext	 %4596
%4598:	getelementptr	 %3818 %4597
%4599:	load	 %4598
%4600:	icmp	 %4599 XXX
%4601:	br	 %4600 cond.false665 cond.true664

BASIC BLOCK cond.true664
%4602:	br	 cond.end668

BASIC BLOCK cond.false665
%4603:	load	 %4299
%4604:	zext	 %4603
%4605:	getelementptr	 %3818 %4604
%4606:	load	 %4605
%4607:	br	 cond.end668

BASIC BLOCK cond.end668
%4608:	phi	 %3922 %4606
%4609:	br	 cond.end673

BASIC BLOCK cond.false670
%4610:	load	 %4299
%4611:	zext	 %4610
%4612:	getelementptr	 %3818 %4611
%4613:	load	 %4612
%4614:	br	 cond.end673

BASIC BLOCK cond.end673
%4615:	phi	 %4608 %4613
%4616:	load	 %4299
%4617:	zext	 %4616
%4618:	getelementptr	 %3816 %4617
%4619:	store	 %4615 %4618
%4620:	load	 %4299
%4621:	zext	 %4620
%4622:	getelementptr	 %3818 %4621
%4623:	store	 %3922 %4622
%4624:	load	 %4299
%4625:	zext	 %4624
%4626:	getelementptr	 %3814 %4625
%4627:	bitcast	 %4626
%4628:	bitcast	 %4627
%4629:	load	 %4628
%4630:	and	 %4629 XXX
%4631:	or	 %4630 XXX
%4632:	store	 %4631 %4628
%4633:	load	 %4299
%4634:	zext	 %4633
%4635:	getelementptr	 %3814 %4634
%4636:	bitcast	 %4635
%4637:	bitcast	 %4636
%4638:	load	 %4637
%4639:	and	 %4638 XXX
%4640:	store	 %4639 %4637
%4641:	load	 %4299
%4642:	zext	 %4641
%4643:	icmp	 %3919 XXX
%4644:	br	 %4643 if.end695 if.then693

BASIC BLOCK if.then693
%4645:	load	 %4299
%4646:	zext	 %4645
%4647:	br	 if.end695

BASIC BLOCK if.end695
%4648:	phi	 %4646 %3919
%4649:	getelementptr	 %4299 XXX
%4650:	br	 sw.epilog2314

BASIC BLOCK sw.bb697
%4651:	load	 %4299
%4652:	zext	 %4651
%4653:	getelementptr	 %3814 %4652
%4654:	bitcast	 %4653
%4655:	bitcast	 %4654
%4656:	load	 %4655
%4657:	and	 %4656 XXX
%4658:	zext	 %4657
%4659:	icmp	 %4658 XXX
%4660:	br	 %4659 cond.false716 cond.true705

BASIC BLOCK cond.true705
%4661:	load	 %4299
%4662:	zext	 %4661
%4663:	getelementptr	 %3817 %4662
%4664:	load	 %4663
%4665:	icmp	 %4664 XXX
%4666:	br	 %4665 cond.false711 cond.true710

BASIC BLOCK cond.true710
%4667:	br	 cond.end714

BASIC BLOCK cond.false711
%4668:	load	 %4299
%4669:	zext	 %4668
%4670:	getelementptr	 %3817 %4669
%4671:	load	 %4670
%4672:	br	 cond.end714

BASIC BLOCK cond.end714
%4673:	phi	 %3922 %4671
%4674:	br	 cond.end719

BASIC BLOCK cond.false716
%4675:	load	 %4299
%4676:	zext	 %4675
%4677:	getelementptr	 %3817 %4676
%4678:	load	 %4677
%4679:	br	 cond.end719

BASIC BLOCK cond.end719
%4680:	phi	 %4673 %4678
%4681:	load	 %4299
%4682:	zext	 %4681
%4683:	getelementptr	 %3815 %4682
%4684:	store	 %4680 %4683
%4685:	load	 %4299
%4686:	zext	 %4685
%4687:	getelementptr	 %3817 %4686
%4688:	store	 %3922 %4687
%4689:	load	 %4299
%4690:	zext	 %4689
%4691:	getelementptr	 %3814 %4690
%4692:	bitcast	 %4691
%4693:	bitcast	 %4692
%4694:	load	 %4693
%4695:	and	 %4694 XXX
%4696:	store	 %4695 %4693
%4697:	icmp	 %3919 %3918
%4698:	br	 %4697 if.else733 if.then732

BASIC BLOCK if.then732
%4699:	br	 if.end764

BASIC BLOCK if.else733
%4700:	load	 %4299
%4701:	zext	 %4700
%4702:	sub	 %4701 XXX
%4703:	trunc	 %4702
%4704:	br	 while.cond737

BASIC BLOCK while.cond737
%4705:	phi	 %4703 %4722
%4706:	zext	 %4705
%4707:	icmp	 %4706 XXX
%4708:	br	 %4707 land.end752 land.rhs741

BASIC BLOCK land.rhs741
%4709:	zext	 %4705
%4710:	getelementptr	 %3814 %4709
%4711:	bitcast	 %4710
%4712:	bitcast	 %4711
%4713:	load	 %4712
%4714:	lshr	 %4713 XXX
%4715:	and	 %4714 XXX
%4716:	zext	 %4715
%4717:	icmp	 %4716 XXX
%4718:	xor	 %4717 XXX
%4719:	br	 land.end752

BASIC BLOCK land.end752
%4720:	phi	 XXX %4718
%4721:	br	 %4720 while.end756 while.body754

BASIC BLOCK while.body754
%4722:	add	 %4705 XXX
%4723:	br	 while.cond737

BASIC BLOCK while.end756
%4724:	zext	 %4705
%4725:	icmp	 %4724 XXX
%4726:	br	 %4725 if.else761 if.then760

BASIC BLOCK if.then760
%4727:	br	 if.end763

BASIC BLOCK if.else761
%4728:	zext	 %4705
%4729:	br	 if.end763

BASIC BLOCK if.end763
%4730:	phi	 XXX %4728
%4731:	phi	 XXX %3919
%4732:	br	 if.end764

BASIC BLOCK if.end764
%4733:	phi	 XXX %4730
%4734:	phi	 XXX %4731
%4735:	load	 %4299
%4736:	zext	 %4735
%4737:	getelementptr	 %3814 %4736
%4738:	bitcast	 %4737
%4739:	bitcast	 %4738
%4740:	load	 %4739
%4741:	lshr	 %4740 XXX
%4742:	and	 %4741 XXX
%4743:	zext	 %4742
%4744:	icmp	 %4743 XXX
%4745:	br	 %4744 land.lhs.true778 lor.lhs.false773

BASIC BLOCK lor.lhs.false773
%4746:	getelementptr	 %4299 XXX
%4747:	load	 %4746
%4748:	zext	 %4747
%4749:	icmp	 %4748 XXX
%4750:	br	 %4749 if.end981 land.lhs.true778

BASIC BLOCK land.lhs.true778
%4751:	getelementptr	 %4299 XXX
%4752:	icmp	 %4751 %3727
%4753:	br	 %4752 if.end981 if.then782

BASIC BLOCK if.then782
%4754:	getelementptr	 %4299 XXX
%4755:	store	 %4754 %3721
%4756:	load	 %3721
%4757:	getelementptr	 %4756 XXX
%4758:	store	 %4757 %3721
%4759:	load	 %4756
%4760:	zext	 %4759
%4761:	switch	 %4760 sw.default XXX sw.bb786 XXX sw.bb787 XXX sw.bb787 XXX sw.bb787 XXX sw.bb787

BASIC BLOCK sw.bb786
%4762:	br	 sw.bb787

BASIC BLOCK sw.bb787
%4763:	phi	 XXX XXX XXX XXX XXX
%4764:	br	 do.body788

BASIC BLOCK do.body788
%4765:	br	 do.body789

BASIC BLOCK do.body789
%4766:	load	 %3721
%4767:	load	 %4766
%4768:	zext	 %4767
%4769:	and	 %4768 XXX
%4770:	load	 %3721
%4771:	getelementptr	 %4770 XXX
%4772:	load	 %4771
%4773:	sext	 %4772
%4774:	shl	 %4773 XXX
%4775:	add	 %4769 %4774
%4776:	br	 do.end797

BASIC BLOCK do.end797
%4777:	load	 %3721
%4778:	getelementptr	 %4777 XXX
%4779:	store	 %4778 %3721
%4780:	br	 do.end800

BASIC BLOCK do.end800
%4781:	icmp	 %4763 XXX
%4782:	br	 %4781 if.end804 if.then802

BASIC BLOCK if.then802
%4783:	load	 %3721
%4784:	getelementptr	 %4783 XXX
%4785:	store	 %4784 %3721
%4786:	br	 if.end804

BASIC BLOCK if.end804
%4787:	br	 sw.epilog

BASIC BLOCK sw.default
%4788:	br	 sw.epilog

BASIC BLOCK sw.epilog
%4789:	phi	 XXX %4775
%4790:	load	 %3721
%4791:	sext	 %4789
%4792:	getelementptr	 %4790 %4791
%4793:	store	 %4792 %3721
%4794:	icmp	 %4789 XXX
%4795:	br	 %4794 if.end980 land.lhs.true809

BASIC BLOCK land.lhs.true809
%4796:	load	 %3721
%4797:	load	 %4796
%4798:	zext	 %4797
%4799:	icmp	 %4798 XXX
%4800:	br	 %4799 if.end980 land.lhs.true813

BASIC BLOCK land.lhs.true813
%4801:	load	 %3721
%4802:	getelementptr	 %4801 XXX
%4803:	load	 %4802
%4804:	zext	 %4803
%4805:	icmp	 %4804 XXX
%4806:	br	 %4805 if.end980 land.lhs.true818

BASIC BLOCK land.lhs.true818
%4807:	load	 %3721
%4808:	getelementptr	 %4807 XXX
%4809:	load	 %4808
%4810:	zext	 %4809
%4811:	load	 %4299
%4812:	zext	 %4811
%4813:	icmp	 %4810 %4812
%4814:	br	 %4813 if.end980 if.then824

BASIC BLOCK if.then824
%4815:	load	 %4299
%4816:	zext	 %4815
%4817:	getelementptr	 %3814 %4816
%4818:	bitcast	 %4817
%4819:	bitcast	 %4818
%4820:	load	 %4819
%4821:	lshr	 %4820 XXX
%4822:	and	 %4821 XXX
%4823:	zext	 %4822
%4824:	icmp	 %4823 XXX
%4825:	br	 %4824 if.end868 if.then833

BASIC BLOCK if.then833
%4826:	load	 %4299
%4827:	zext	 %4826
%4828:	getelementptr	 %3814 %4827
%4829:	bitcast	 %4828
%4830:	bitcast	 %4829
%4831:	load	 %4830
%4832:	and	 %4831 XXX
%4833:	store	 %4832 %4830
%4834:	load	 %4299
%4835:	zext	 %4834
%4836:	br	 for.cond841

BASIC BLOCK for.cond841
%4837:	phi	 %4835 %4870
%4838:	load	 %4299
%4839:	zext	 %4838
%4840:	getelementptr	 %4299 XXX
%4841:	load	 %4840
%4842:	zext	 %4841
%4843:	add	 %4839 %4842
%4844:	icmp	 %4837 %4843
%4845:	br	 %4844 for.end867 for.body848

BASIC BLOCK for.body848
%4846:	zext	 %4837
%4847:	getelementptr	 %3816 %4846
%4848:	load	 %4847
%4849:	zext	 %4837
%4850:	getelementptr	 %3818 %4849
%4851:	store	 %4848 %4850
%4852:	zext	 %4837
%4853:	getelementptr	 %3815 %4852
%4854:	load	 %4853
%4855:	ptrtoint	 %4854
%4856:	zext	 %4837
%4857:	getelementptr	 %3818 %4856
%4858:	load	 %4857
%4859:	ptrtoint	 %4858
%4860:	icmp	 %4855 %4859
%4861:	br	 %4860 if.end864 if.then859

BASIC BLOCK if.then859
%4862:	zext	 %4837
%4863:	getelementptr	 %3815 %4862
%4864:	load	 %4863
%4865:	zext	 %4837
%4866:	getelementptr	 %3817 %4865
%4867:	store	 %4864 %4866
%4868:	br	 if.end864

BASIC BLOCK if.end864
%4869:	br	 for.inc865

BASIC BLOCK for.inc865
%4870:	add	 %4837 XXX
%4871:	br	 for.cond841

BASIC BLOCK for.end867
%4872:	br	 if.end868

BASIC BLOCK if.end868
%4873:	load	 %3721
%4874:	getelementptr	 %4873 XXX
%4875:	store	 %4874 %3721
%4876:	br	 do.body870

BASIC BLOCK do.body870
%4877:	br	 do.body871

BASIC BLOCK do.body871
%4878:	load	 %3721
%4879:	load	 %4878
%4880:	zext	 %4879
%4881:	and	 %4880 XXX
%4882:	load	 %3721
%4883:	getelementptr	 %4882 XXX
%4884:	load	 %4883
%4885:	sext	 %4884
%4886:	shl	 %4885 XXX
%4887:	add	 %4881 %4886
%4888:	br	 do.end879

BASIC BLOCK do.end879
%4889:	load	 %3721
%4890:	getelementptr	 %4889 XXX
%4891:	store	 %4890 %3721
%4892:	br	 do.end882

BASIC BLOCK do.end882
%4893:	br	 do.body883

BASIC BLOCK do.body883
%4894:	br	 while.cond884

BASIC BLOCK while.cond884
%4895:	getelementptr	 %3722 XXX XXX
%4896:	load	 %4895
%4897:	getelementptr	 %3722 XXX XXX
%4898:	load	 %4897
%4899:	sub	 %4896 %4898
%4900:	sub	 %4733 %4734
%4901:	add	 %4900 XXX
%4902:	mul	 %4901 XXX
%4903:	add	 %4902 XXX
%4904:	icmp	 %4899 %4903
%4905:	br	 %4904 while.end925 while.body894

BASIC BLOCK while.body894
%4906:	getelementptr	 %3722 XXX XXX
%4907:	load	 %4906
%4908:	load	 re_max_failures
%4909:	sub	 %3733 XXX
%4910:	mul	 %4909 XXX
%4911:	add	 %4910 XXX
%4912:	mul	 %4908 %4911
%4913:	icmp	 %4907 %4912
%4914:	br	 %4913 cond.false903 cond.true902

BASIC BLOCK cond.true902
%4915:	br	 XXX if.then923 if.end924

BASIC BLOCK cond.false903
%4916:	getelementptr	 %3722 XXX XXX
%4917:	load	 %4916
%4918:	shl	 %4917 XXX
%4919:	zext	 %4918
%4920:	mul	 %4919 XXX
%4921:	alloca	 %4920
%4922:	getelementptr	 %3722 XXX XXX
%4923:	load	 %4922
%4924:	bitcast	 %4923
%4925:	getelementptr	 %3722 XXX XXX
%4926:	load	 %4925
%4927:	zext	 %4926
%4928:	mul	 %4927 XXX
%4929:	call	 %4921 %4924 %4928 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%4930:	bitcast	 %4921
%4931:	getelementptr	 %3722 XXX XXX
%4932:	store	 %4930 %4931
%4933:	getelementptr	 %3722 XXX XXX
%4934:	load	 %4933
%4935:	icmp	 %4934 XXX
%4936:	br	 %4935 cond.false917 cond.true916

BASIC BLOCK cond.true916
%4937:	br	 cond.end920

BASIC BLOCK cond.false917
%4938:	getelementptr	 %3722 XXX XXX
%4939:	load	 %4938
%4940:	shl	 %4939 XXX
%4941:	store	 %4940 %4938
%4942:	br	 cond.end920

BASIC BLOCK cond.end920
%4943:	phi	 XXX XXX
%4944:	icmp	 %4943 XXX
%4945:	br	 %4944 if.then923 if.end924

BASIC BLOCK if.then923
%4946:	br	 return

BASIC BLOCK if.end924
%4947:	br	 while.cond884

BASIC BLOCK while.end925
%4948:	br	 for.cond926

BASIC BLOCK for.cond926
%4949:	phi	 %4734 %4990
%4950:	icmp	 %4949 %4733
%4951:	br	 %4950 for.end953 for.body929

BASIC BLOCK for.body929
%4952:	sext	 %4949
%4953:	getelementptr	 %3818 %4952
%4954:	load	 %4953
%4955:	getelementptr	 %3722 XXX XXX
%4956:	load	 %4955
%4957:	add	 %4956 XXX
%4958:	store	 %4957 %4955
%4959:	zext	 %4956
%4960:	getelementptr	 %3722 XXX XXX
%4961:	load	 %4960
%4962:	getelementptr	 %4961 %4959
%4963:	store	 %4954 %4962
%4964:	sext	 %4949
%4965:	getelementptr	 %3817 %4964
%4966:	load	 %4965
%4967:	getelementptr	 %3722 XXX XXX
%4968:	load	 %4967
%4969:	add	 %4968 XXX
%4970:	store	 %4969 %4967
%4971:	zext	 %4968
%4972:	getelementptr	 %3722 XXX XXX
%4973:	load	 %4972
%4974:	getelementptr	 %4973 %4971
%4975:	store	 %4966 %4974
%4976:	sext	 %4949
%4977:	getelementptr	 %3814 %4976
%4978:	bitcast	 %4977
%4979:	load	 %4978
%4980:	getelementptr	 %3722 XXX XXX
%4981:	load	 %4980
%4982:	add	 %4981 XXX
%4983:	store	 %4982 %4980
%4984:	zext	 %4981
%4985:	getelementptr	 %3722 XXX XXX
%4986:	load	 %4985
%4987:	getelementptr	 %4986 %4984
%4988:	store	 %4979 %4987
%4989:	br	 for.inc951

BASIC BLOCK for.inc951
%4990:	add	 %4949 XXX
%4991:	br	 for.cond926

BASIC BLOCK for.end953
%4992:	zext	 %4734
%4993:	inttoptr	 %4992
%4994:	getelementptr	 %3722 XXX XXX
%4995:	load	 %4994
%4996:	add	 %4995 XXX
%4997:	store	 %4996 %4994
%4998:	zext	 %4995
%4999:	getelementptr	 %3722 XXX XXX
%5000:	load	 %4999
%5001:	getelementptr	 %5000 %4998
%5002:	store	 %4993 %5001
%5003:	zext	 %4733
%5004:	inttoptr	 %5003
%5005:	getelementptr	 %3722 XXX XXX
%5006:	load	 %5005
%5007:	add	 %5006 XXX
%5008:	store	 %5007 %5005
%5009:	zext	 %5006
%5010:	getelementptr	 %3722 XXX XXX
%5011:	load	 %5010
%5012:	getelementptr	 %5011 %5009
%5013:	store	 %5004 %5012
%5014:	load	 %3721
%5015:	sext	 %4887
%5016:	getelementptr	 %5014 %5015
%5017:	getelementptr	 %3722 XXX XXX
%5018:	load	 %5017
%5019:	add	 %5018 XXX
%5020:	store	 %5019 %5017
%5021:	zext	 %5018
%5022:	getelementptr	 %3722 XXX XXX
%5023:	load	 %5022
%5024:	getelementptr	 %5023 %5021
%5025:	store	 %5016 %5024
%5026:	getelementptr	 %3722 XXX XXX
%5027:	load	 %5026
%5028:	add	 %5027 XXX
%5029:	store	 %5028 %5026
%5030:	zext	 %5027
%5031:	getelementptr	 %3722 XXX XXX
%5032:	load	 %5031
%5033:	getelementptr	 %5032 %5030
%5034:	store	 %3922 %5033
%5035:	br	 do.end979

BASIC BLOCK do.end979
%5036:	br	 fail

BASIC BLOCK if.end980
%5037:	br	 if.end981

BASIC BLOCK if.end981
%5038:	getelementptr	 %4299 XXX
%5039:	br	 sw.epilog2314

BASIC BLOCK sw.bb983
%5040:	getelementptr	 %4299 XXX
%5041:	load	 %4299
%5042:	zext	 %5041
%5043:	sext	 %5042
%5044:	getelementptr	 %3818 %5043
%5045:	load	 %5044
%5046:	icmp	 %5045 XXX
%5047:	br	 %5046 lor.lhs.false990 if.then995

BASIC BLOCK lor.lhs.false990
%5048:	sext	 %5042
%5049:	getelementptr	 %3817 %5048
%5050:	load	 %5049
%5051:	icmp	 %5050 XXX
%5052:	br	 %5051 if.end996 if.then995

BASIC BLOCK if.then995
%5053:	br	 fail

BASIC BLOCK if.end996
%5054:	sext	 %5042
%5055:	getelementptr	 %3818 %5054
%5056:	load	 %5055
%5057:	icmp	 %3881 XXX
%5058:	br	 %5057 land.end1012 land.lhs.true1000

BASIC BLOCK land.lhs.true1000
%5059:	sext	 %5042
%5060:	getelementptr	 %3818 %5059
%5061:	load	 %5060
%5062:	icmp	 %3882 %5061
%5063:	br	 %5062 land.end1012 land.rhs1005

BASIC BLOCK land.rhs1005
%5064:	sext	 %5042
%5065:	getelementptr	 %3818 %5064
%5066:	load	 %5065
%5067:	sext	 %3881
%5068:	getelementptr	 %3882 %5067
%5069:	icmp	 %5066 %5068
%5070:	br	 land.end1012

BASIC BLOCK land.end1012
%5071:	phi	 XXX XXX %5069
%5072:	zext	 %5071
%5073:	icmp	 %3881 XXX
%5074:	br	 %5073 land.end1027 land.lhs.true1015

BASIC BLOCK land.lhs.true1015
%5075:	sext	 %5042
%5076:	getelementptr	 %3817 %5075
%5077:	load	 %5076
%5078:	icmp	 %3882 %5077
%5079:	br	 %5078 land.end1027 land.rhs1020

BASIC BLOCK land.rhs1020
%5080:	sext	 %5042
%5081:	getelementptr	 %3817 %5080
%5082:	load	 %5081
%5083:	sext	 %3881
%5084:	getelementptr	 %3882 %5083
%5085:	icmp	 %5082 %5084
%5086:	br	 land.end1027

BASIC BLOCK land.end1027
%5087:	phi	 XXX XXX %5085
%5088:	zext	 %5087
%5089:	icmp	 %5072 %5088
%5090:	br	 %5089 cond.false1034 cond.true1031

BASIC BLOCK cond.true1031
%5091:	sext	 %5042
%5092:	getelementptr	 %3817 %5091
%5093:	load	 %5092
%5094:	br	 cond.end1035

BASIC BLOCK cond.false1034
%5095:	br	 cond.end1035

BASIC BLOCK cond.end1035
%5096:	phi	 %5093 %3899
%5097:	br	 for.cond1037

BASIC BLOCK for.cond1037
%5098:	phi	 %5056 %5161
%5099:	phi	 %5096 %5104
%5100:	phi	 %3921 %5124
%5101:	phi	 %3922 %5159
%5102:	br	 while.cond1038

BASIC BLOCK while.cond1038
%5103:	phi	 %5098 %3880
%5104:	phi	 %5099 %5118
%5105:	icmp	 %5103 %5104
%5106:	br	 %5105 while.end1054 while.body1041

BASIC BLOCK while.body1041
%5107:	icmp	 %5104 %3898
%5108:	br	 %5107 if.end1045 if.then1044

BASIC BLOCK if.then1044
%5109:	br	 while.end1054

BASIC BLOCK if.end1045
%5110:	sext	 %5042
%5111:	getelementptr	 %3817 %5110
%5112:	load	 %5111
%5113:	icmp	 %5104 %5112
%5114:	br	 %5113 if.end1051 if.then1050

BASIC BLOCK if.then1050
%5115:	br	 while.end1054

BASIC BLOCK if.end1051
%5116:	sext	 %5042
%5117:	getelementptr	 %3817 %5116
%5118:	load	 %5117
%5119:	br	 while.cond1038

BASIC BLOCK while.end1054
%5120:	icmp	 %5103 %5104
%5121:	br	 %5120 if.end1058 if.then1057

BASIC BLOCK if.then1057
%5122:	br	 for.end1098

BASIC BLOCK if.end1058
%5123:	br	 while.cond1059

BASIC BLOCK while.cond1059
%5124:	phi	 %5100 %3898
%5125:	phi	 %5101 %3880
%5126:	icmp	 %5125 %5124
%5127:	br	 %5126 while.end1067 while.body1062

BASIC BLOCK while.body1062
%5128:	icmp	 %5124 %3898
%5129:	br	 %5128 if.end1066 if.then1065

BASIC BLOCK if.then1065
%5130:	br	 fail

BASIC BLOCK if.end1066
%5131:	br	 while.cond1059

BASIC BLOCK while.end1067
%5132:	ptrtoint	 %5124
%5133:	ptrtoint	 %5125
%5134:	sub	 %5132 %5133
%5135:	trunc	 %5134
%5136:	sext	 %5135
%5137:	ptrtoint	 %5104
%5138:	ptrtoint	 %5103
%5139:	sub	 %5137 %5138
%5140:	icmp	 %5136 %5139
%5141:	br	 %5140 if.end1083 if.then1078

BASIC BLOCK if.then1078
%5142:	ptrtoint	 %5104
%5143:	ptrtoint	 %5103
%5144:	sub	 %5142 %5143
%5145:	trunc	 %5144
%5146:	br	 if.end1083

BASIC BLOCK if.end1083
%5147:	phi	 %5145 %5135
%5148:	icmp	 %3729 XXX
%5149:	br	 %5148 cond.false1088 cond.true1085

BASIC BLOCK cond.true1085
%5150:	call	 %5125 %5103 %5147 %3729 bcmp_translate
%5151:	icmp	 %5150 XXX
%5152:	br	 %5151 if.end1093 if.then1092

BASIC BLOCK cond.false1088
%5153:	sext	 %5147
%5154:	call	 %5125 %5103 %5153 memcmp
%5155:	icmp	 %5154 XXX
%5156:	br	 %5155 if.end1093 if.then1092

BASIC BLOCK if.then1092
%5157:	br	 fail

BASIC BLOCK if.end1093
%5158:	sext	 %5147
%5159:	getelementptr	 %5125 %5158
%5160:	sext	 %5147
%5161:	getelementptr	 %5103 %5160
%5162:	br	 for.cond1037

BASIC BLOCK for.end1098
%5163:	br	 sw.epilog2314

BASIC BLOCK sw.bb1099
%5164:	icmp	 %3881 XXX
%5165:	br	 %5164 cond.false1102 cond.true1101

BASIC BLOCK cond.true1101
%5166:	br	 cond.end1103

BASIC BLOCK cond.false1102
%5167:	br	 cond.end1103

BASIC BLOCK cond.end1103
%5168:	phi	 %3882 %3880
%5169:	icmp	 %3922 %5168
%5170:	br	 %5169 lor.lhs.false1107 if.then1109

BASIC BLOCK lor.lhs.false1107
%5171:	icmp	 %3879 XXX
%5172:	br	 %5171 if.then1109 if.else1117

BASIC BLOCK if.then1109
%5173:	getelementptr	 bufp XXX XXX
%5174:	load	 %5173
%5175:	lshr	 %5174 XXX
%5176:	and	 %5175 XXX
%5177:	zext	 %5176
%5178:	icmp	 %5177 XXX
%5179:	br	 %5178 if.then1115 if.end1116

BASIC BLOCK if.then1115
%5180:	br	 sw.epilog2314

BASIC BLOCK if.end1116
%5181:	br	 if.end1129

BASIC BLOCK if.else1117
%5182:	getelementptr	 %3922 XXX
%5183:	load	 %5182
%5184:	sext	 %5183
%5185:	icmp	 %5184 XXX
%5186:	br	 %5185 if.end1128 land.lhs.true1122

BASIC BLOCK land.lhs.true1122
%5187:	getelementptr	 bufp XXX XXX
%5188:	load	 %5187
%5189:	lshr	 %5188 XXX
%5190:	zext	 %5189
%5191:	icmp	 %5190 XXX
%5192:	br	 %5191 if.end1128 if.then1127

BASIC BLOCK if.then1127
%5193:	br	 sw.epilog2314

BASIC BLOCK if.end1128
%5194:	br	 if.end1129

BASIC BLOCK if.end1129
%5195:	br	 fail

BASIC BLOCK sw.bb1130
%5196:	icmp	 %3922 %3886
%5197:	br	 %5196 if.else1141 if.then1133

BASIC BLOCK if.then1133
%5198:	getelementptr	 bufp XXX XXX
%5199:	load	 %5198
%5200:	lshr	 %5199 XXX
%5201:	and	 %5200 XXX
%5202:	zext	 %5201
%5203:	icmp	 %5202 XXX
%5204:	br	 %5203 if.then1139 if.end1140

BASIC BLOCK if.then1139
%5205:	br	 sw.epilog2314

BASIC BLOCK if.end1140
%5206:	br	 if.end1160

BASIC BLOCK if.else1141
%5207:	icmp	 %3922 %3884
%5208:	br	 %5207 cond.false1146 cond.true1144

BASIC BLOCK cond.true1144
%5209:	load	 %3880
%5210:	sext	 %5209
%5211:	br	 cond.end1148

BASIC BLOCK cond.false1146
%5212:	load	 %3922
%5213:	sext	 %5212
%5214:	br	 cond.end1148

BASIC BLOCK cond.end1148
%5215:	phi	 %5210 %5213
%5216:	icmp	 %5215 XXX
%5217:	br	 %5216 if.end1159 land.lhs.true1152

BASIC BLOCK land.lhs.true1152
%5218:	getelementptr	 bufp XXX XXX
%5219:	load	 %5218
%5220:	lshr	 %5219 XXX
%5221:	zext	 %5220
%5222:	icmp	 %5221 XXX
%5223:	br	 %5222 if.end1159 if.then1158

BASIC BLOCK if.then1158
%5224:	br	 sw.epilog2314

BASIC BLOCK if.end1159
%5225:	br	 if.end1160

BASIC BLOCK if.end1160
%5226:	br	 fail

BASIC BLOCK sw.bb1161
%5227:	icmp	 %3881 XXX
%5228:	br	 %5227 cond.false1164 cond.true1163

BASIC BLOCK cond.true1163
%5229:	br	 cond.end1165

BASIC BLOCK cond.false1164
%5230:	br	 cond.end1165

BASIC BLOCK cond.end1165
%5231:	phi	 %3882 %3880
%5232:	icmp	 %3922 %5231
%5233:	br	 %5232 lor.lhs.false1169 if.then1171

BASIC BLOCK lor.lhs.false1169
%5234:	icmp	 %3879 XXX
%5235:	br	 %5234 if.then1171 if.end1172

BASIC BLOCK if.then1171
%5236:	br	 sw.epilog2314

BASIC BLOCK if.end1172
%5237:	br	 fail

BASIC BLOCK sw.bb1173
%5238:	icmp	 %3922 %3886
%5239:	br	 %5238 if.end1177 if.then1176

BASIC BLOCK if.then1176
%5240:	br	 sw.epilog2314

BASIC BLOCK if.end1177
%5241:	br	 fail

BASIC BLOCK sw.bb1178
%5242:	br	 do.body1179

BASIC BLOCK do.body1179
%5243:	br	 do.body1180

BASIC BLOCK do.body1180
%5244:	load	 %4299
%5245:	zext	 %5244
%5246:	and	 %5245 XXX
%5247:	getelementptr	 %4299 XXX
%5248:	load	 %5247
%5249:	sext	 %5248
%5250:	shl	 %5249 XXX
%5251:	add	 %5246 %5250
%5252:	br	 do.end1188

BASIC BLOCK do.end1188
%5253:	getelementptr	 %4299 XXX
%5254:	br	 do.end1191

BASIC BLOCK do.end1191
%5255:	br	 do.body1192

BASIC BLOCK do.body1192
%5256:	br	 while.cond1195

BASIC BLOCK while.cond1195
%5257:	getelementptr	 %3722 XXX XXX
%5258:	load	 %5257
%5259:	getelementptr	 %3722 XXX XXX
%5260:	load	 %5259
%5261:	sub	 %5258 %5260
%5262:	sub	 %3918 %3919
%5263:	add	 %5262 XXX
%5264:	mul	 %5263 XXX
%5265:	add	 %5264 XXX
%5266:	icmp	 %5261 %5265
%5267:	br	 %5266 while.end1236 while.body1205

BASIC BLOCK while.body1205
%5268:	getelementptr	 %3722 XXX XXX
%5269:	load	 %5268
%5270:	load	 re_max_failures
%5271:	sub	 %3733 XXX
%5272:	mul	 %5271 XXX
%5273:	add	 %5272 XXX
%5274:	mul	 %5270 %5273
%5275:	icmp	 %5269 %5274
%5276:	br	 %5275 cond.false1214 cond.true1213

BASIC BLOCK cond.true1213
%5277:	br	 XXX if.then1234 if.end1235

BASIC BLOCK cond.false1214
%5278:	getelementptr	 %3722 XXX XXX
%5279:	load	 %5278
%5280:	shl	 %5279 XXX
%5281:	zext	 %5280
%5282:	mul	 %5281 XXX
%5283:	alloca	 %5282
%5284:	getelementptr	 %3722 XXX XXX
%5285:	load	 %5284
%5286:	bitcast	 %5285
%5287:	getelementptr	 %3722 XXX XXX
%5288:	load	 %5287
%5289:	zext	 %5288
%5290:	mul	 %5289 XXX
%5291:	call	 %5283 %5286 %5290 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%5292:	bitcast	 %5283
%5293:	getelementptr	 %3722 XXX XXX
%5294:	store	 %5292 %5293
%5295:	getelementptr	 %3722 XXX XXX
%5296:	load	 %5295
%5297:	icmp	 %5296 XXX
%5298:	br	 %5297 cond.false1228 cond.true1227

BASIC BLOCK cond.true1227
%5299:	br	 cond.end1231

BASIC BLOCK cond.false1228
%5300:	getelementptr	 %3722 XXX XXX
%5301:	load	 %5300
%5302:	shl	 %5301 XXX
%5303:	store	 %5302 %5300
%5304:	br	 cond.end1231

BASIC BLOCK cond.end1231
%5305:	phi	 XXX XXX
%5306:	icmp	 %5305 XXX
%5307:	br	 %5306 if.then1234 if.end1235

BASIC BLOCK if.then1234
%5308:	br	 return

BASIC BLOCK if.end1235
%5309:	br	 while.cond1195

BASIC BLOCK while.end1236
%5310:	br	 for.cond1237

BASIC BLOCK for.cond1237
%5311:	phi	 %3919 %5352
%5312:	icmp	 %5311 %3918
%5313:	br	 %5312 for.end1265 for.body1240

BASIC BLOCK for.body1240
%5314:	sext	 %5311
%5315:	getelementptr	 %3818 %5314
%5316:	load	 %5315
%5317:	getelementptr	 %3722 XXX XXX
%5318:	load	 %5317
%5319:	add	 %5318 XXX
%5320:	store	 %5319 %5317
%5321:	zext	 %5318
%5322:	getelementptr	 %3722 XXX XXX
%5323:	load	 %5322
%5324:	getelementptr	 %5323 %5321
%5325:	store	 %5316 %5324
%5326:	sext	 %5311
%5327:	getelementptr	 %3817 %5326
%5328:	load	 %5327
%5329:	getelementptr	 %3722 XXX XXX
%5330:	load	 %5329
%5331:	add	 %5330 XXX
%5332:	store	 %5331 %5329
%5333:	zext	 %5330
%5334:	getelementptr	 %3722 XXX XXX
%5335:	load	 %5334
%5336:	getelementptr	 %5335 %5333
%5337:	store	 %5328 %5336
%5338:	sext	 %5311
%5339:	getelementptr	 %3814 %5338
%5340:	bitcast	 %5339
%5341:	load	 %5340
%5342:	getelementptr	 %3722 XXX XXX
%5343:	load	 %5342
%5344:	add	 %5343 XXX
%5345:	store	 %5344 %5342
%5346:	zext	 %5343
%5347:	getelementptr	 %3722 XXX XXX
%5348:	load	 %5347
%5349:	getelementptr	 %5348 %5346
%5350:	store	 %5341 %5349
%5351:	br	 for.inc1263

BASIC BLOCK for.inc1263
%5352:	add	 %5311 XXX
%5353:	br	 for.cond1237

BASIC BLOCK for.end1265
%5354:	zext	 %3919
%5355:	inttoptr	 %5354
%5356:	getelementptr	 %3722 XXX XXX
%5357:	load	 %5356
%5358:	add	 %5357 XXX
%5359:	store	 %5358 %5356
%5360:	zext	 %5357
%5361:	getelementptr	 %3722 XXX XXX
%5362:	load	 %5361
%5363:	getelementptr	 %5362 %5360
%5364:	store	 %5355 %5363
%5365:	zext	 %3918
%5366:	inttoptr	 %5365
%5367:	getelementptr	 %3722 XXX XXX
%5368:	load	 %5367
%5369:	add	 %5368 XXX
%5370:	store	 %5369 %5367
%5371:	zext	 %5368
%5372:	getelementptr	 %3722 XXX XXX
%5373:	load	 %5372
%5374:	getelementptr	 %5373 %5371
%5375:	store	 %5366 %5374
%5376:	sext	 %5251
%5377:	getelementptr	 %5253 %5376
%5378:	getelementptr	 %3722 XXX XXX
%5379:	load	 %5378
%5380:	add	 %5379 XXX
%5381:	store	 %5380 %5378
%5382:	zext	 %5379
%5383:	getelementptr	 %3722 XXX XXX
%5384:	load	 %5383
%5385:	getelementptr	 %5384 %5382
%5386:	store	 %5377 %5385
%5387:	getelementptr	 %3722 XXX XXX
%5388:	load	 %5387
%5389:	add	 %5388 XXX
%5390:	store	 %5389 %5387
%5391:	zext	 %5388
%5392:	getelementptr	 %3722 XXX XXX
%5393:	load	 %5392
%5394:	getelementptr	 %5393 %5391
%5395:	store	 XXX %5394
%5396:	br	 do.end1291

BASIC BLOCK do.end1291
%5397:	br	 sw.epilog2314

BASIC BLOCK sw.bb1292
%5398:	br	 on_failure

BASIC BLOCK on_failure
%5399:	br	 do.body1293

BASIC BLOCK do.body1293
%5400:	br	 do.body1294

BASIC BLOCK do.body1294
%5401:	load	 %4299
%5402:	zext	 %5401
%5403:	and	 %5402 XXX
%5404:	getelementptr	 %4299 XXX
%5405:	load	 %5404
%5406:	sext	 %5405
%5407:	shl	 %5406 XXX
%5408:	add	 %5403 %5407
%5409:	br	 do.end1302

BASIC BLOCK do.end1302
%5410:	getelementptr	 %4299 XXX
%5411:	br	 do.end1305

BASIC BLOCK do.end1305
%5412:	store	 %5410 %3721
%5413:	br	 while.cond1306

BASIC BLOCK while.cond1306
%5414:	load	 %3721
%5415:	icmp	 %5414 %3727
%5416:	br	 %5415 land.end1313 land.rhs1309

BASIC BLOCK land.rhs1309
%5417:	load	 %3721
%5418:	load	 %5417
%5419:	zext	 %5418
%5420:	icmp	 %5419 XXX
%5421:	br	 land.end1313

BASIC BLOCK land.end1313
%5422:	phi	 XXX %5420
%5423:	br	 %5422 while.end1317 while.body1315

BASIC BLOCK while.body1315
%5424:	load	 %3721
%5425:	getelementptr	 %5424 XXX
%5426:	store	 %5425 %3721
%5427:	br	 while.cond1306

BASIC BLOCK while.end1317
%5428:	load	 %3721
%5429:	icmp	 %5428 %3727
%5430:	br	 %5429 if.end1336 land.lhs.true1320

BASIC BLOCK land.lhs.true1320
%5431:	load	 %3721
%5432:	load	 %5431
%5433:	zext	 %5432
%5434:	icmp	 %5433 XXX
%5435:	br	 %5434 if.end1336 if.then1324

BASIC BLOCK if.then1324
%5436:	load	 %3721
%5437:	getelementptr	 %5436 XXX
%5438:	load	 %5437
%5439:	zext	 %5438
%5440:	load	 %3721
%5441:	getelementptr	 %5440 XXX
%5442:	load	 %5441
%5443:	zext	 %5442
%5444:	add	 %5439 %5443
%5445:	icmp	 %3919 XXX
%5446:	br	 %5445 if.end1335 if.then1332

BASIC BLOCK if.then1332
%5447:	load	 %3721
%5448:	getelementptr	 %5447 XXX
%5449:	load	 %5448
%5450:	zext	 %5449
%5451:	br	 if.end1335

BASIC BLOCK if.end1335
%5452:	phi	 %5450 %3919
%5453:	br	 if.end1336

BASIC BLOCK if.end1336
%5454:	phi	 %5444 %3918 %3918
%5455:	phi	 %5452 %3919 %3919
%5456:	br	 do.body1337

BASIC BLOCK do.body1337
%5457:	br	 while.cond1340

BASIC BLOCK while.cond1340
%5458:	getelementptr	 %3722 XXX XXX
%5459:	load	 %5458
%5460:	getelementptr	 %3722 XXX XXX
%5461:	load	 %5460
%5462:	sub	 %5459 %5461
%5463:	sub	 %5454 %5455
%5464:	add	 %5463 XXX
%5465:	mul	 %5464 XXX
%5466:	add	 %5465 XXX
%5467:	icmp	 %5462 %5466
%5468:	br	 %5467 while.end1381 while.body1350

BASIC BLOCK while.body1350
%5469:	getelementptr	 %3722 XXX XXX
%5470:	load	 %5469
%5471:	load	 re_max_failures
%5472:	sub	 %3733 XXX
%5473:	mul	 %5472 XXX
%5474:	add	 %5473 XXX
%5475:	mul	 %5471 %5474
%5476:	icmp	 %5470 %5475
%5477:	br	 %5476 cond.false1359 cond.true1358

BASIC BLOCK cond.true1358
%5478:	br	 XXX if.then1379 if.end1380

BASIC BLOCK cond.false1359
%5479:	getelementptr	 %3722 XXX XXX
%5480:	load	 %5479
%5481:	shl	 %5480 XXX
%5482:	zext	 %5481
%5483:	mul	 %5482 XXX
%5484:	alloca	 %5483
%5485:	getelementptr	 %3722 XXX XXX
%5486:	load	 %5485
%5487:	bitcast	 %5486
%5488:	getelementptr	 %3722 XXX XXX
%5489:	load	 %5488
%5490:	zext	 %5489
%5491:	mul	 %5490 XXX
%5492:	call	 %5484 %5487 %5491 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%5493:	bitcast	 %5484
%5494:	getelementptr	 %3722 XXX XXX
%5495:	store	 %5493 %5494
%5496:	getelementptr	 %3722 XXX XXX
%5497:	load	 %5496
%5498:	icmp	 %5497 XXX
%5499:	br	 %5498 cond.false1373 cond.true1372

BASIC BLOCK cond.true1372
%5500:	br	 cond.end1376

BASIC BLOCK cond.false1373
%5501:	getelementptr	 %3722 XXX XXX
%5502:	load	 %5501
%5503:	shl	 %5502 XXX
%5504:	store	 %5503 %5501
%5505:	br	 cond.end1376

BASIC BLOCK cond.end1376
%5506:	phi	 XXX XXX
%5507:	icmp	 %5506 XXX
%5508:	br	 %5507 if.then1379 if.end1380

BASIC BLOCK if.then1379
%5509:	br	 return

BASIC BLOCK if.end1380
%5510:	br	 while.cond1340

BASIC BLOCK while.end1381
%5511:	br	 for.cond1382

BASIC BLOCK for.cond1382
%5512:	phi	 %5455 %5553
%5513:	icmp	 %5512 %5454
%5514:	br	 %5513 for.end1410 for.body1385

BASIC BLOCK for.body1385
%5515:	sext	 %5512
%5516:	getelementptr	 %3818 %5515
%5517:	load	 %5516
%5518:	getelementptr	 %3722 XXX XXX
%5519:	load	 %5518
%5520:	add	 %5519 XXX
%5521:	store	 %5520 %5518
%5522:	zext	 %5519
%5523:	getelementptr	 %3722 XXX XXX
%5524:	load	 %5523
%5525:	getelementptr	 %5524 %5522
%5526:	store	 %5517 %5525
%5527:	sext	 %5512
%5528:	getelementptr	 %3817 %5527
%5529:	load	 %5528
%5530:	getelementptr	 %3722 XXX XXX
%5531:	load	 %5530
%5532:	add	 %5531 XXX
%5533:	store	 %5532 %5530
%5534:	zext	 %5531
%5535:	getelementptr	 %3722 XXX XXX
%5536:	load	 %5535
%5537:	getelementptr	 %5536 %5534
%5538:	store	 %5529 %5537
%5539:	sext	 %5512
%5540:	getelementptr	 %3814 %5539
%5541:	bitcast	 %5540
%5542:	load	 %5541
%5543:	getelementptr	 %3722 XXX XXX
%5544:	load	 %5543
%5545:	add	 %5544 XXX
%5546:	store	 %5545 %5543
%5547:	zext	 %5544
%5548:	getelementptr	 %3722 XXX XXX
%5549:	load	 %5548
%5550:	getelementptr	 %5549 %5547
%5551:	store	 %5542 %5550
%5552:	br	 for.inc1408

BASIC BLOCK for.inc1408
%5553:	add	 %5512 XXX
%5554:	br	 for.cond1382

BASIC BLOCK for.end1410
%5555:	zext	 %5455
%5556:	inttoptr	 %5555
%5557:	getelementptr	 %3722 XXX XXX
%5558:	load	 %5557
%5559:	add	 %5558 XXX
%5560:	store	 %5559 %5557
%5561:	zext	 %5558
%5562:	getelementptr	 %3722 XXX XXX
%5563:	load	 %5562
%5564:	getelementptr	 %5563 %5561
%5565:	store	 %5556 %5564
%5566:	zext	 %5454
%5567:	inttoptr	 %5566
%5568:	getelementptr	 %3722 XXX XXX
%5569:	load	 %5568
%5570:	add	 %5569 XXX
%5571:	store	 %5570 %5568
%5572:	zext	 %5569
%5573:	getelementptr	 %3722 XXX XXX
%5574:	load	 %5573
%5575:	getelementptr	 %5574 %5572
%5576:	store	 %5567 %5575
%5577:	sext	 %5408
%5578:	getelementptr	 %5410 %5577
%5579:	getelementptr	 %3722 XXX XXX
%5580:	load	 %5579
%5581:	add	 %5580 XXX
%5582:	store	 %5581 %5579
%5583:	zext	 %5580
%5584:	getelementptr	 %3722 XXX XXX
%5585:	load	 %5584
%5586:	getelementptr	 %5585 %5583
%5587:	store	 %5578 %5586
%5588:	getelementptr	 %3722 XXX XXX
%5589:	load	 %5588
%5590:	add	 %5589 XXX
%5591:	store	 %5590 %5588
%5592:	zext	 %5589
%5593:	getelementptr	 %3722 XXX XXX
%5594:	load	 %5593
%5595:	getelementptr	 %5594 %5592
%5596:	store	 %3922 %5595
%5597:	br	 do.end1436

BASIC BLOCK do.end1436
%5598:	br	 sw.epilog2314

BASIC BLOCK sw.bb1437
%5599:	br	 do.body1438

BASIC BLOCK do.body1438
%5600:	br	 do.body1439

BASIC BLOCK do.body1439
%5601:	load	 %4299
%5602:	zext	 %5601
%5603:	and	 %5602 XXX
%5604:	getelementptr	 %4299 XXX
%5605:	load	 %5604
%5606:	sext	 %5605
%5607:	shl	 %5606 XXX
%5608:	add	 %5603 %5607
%5609:	br	 do.end1447

BASIC BLOCK do.end1447
%5610:	getelementptr	 %4299 XXX
%5611:	br	 do.end1450

BASIC BLOCK do.end1450
%5612:	br	 while.cond1451

BASIC BLOCK while.cond1451
%5613:	phi	 %5610 %5629
%5614:	getelementptr	 %5613 XXX
%5615:	icmp	 %5614 %3727
%5616:	br	 %5615 land.end1462 land.rhs1455

BASIC BLOCK land.rhs1455
%5617:	load	 %5613
%5618:	zext	 %5617
%5619:	icmp	 %5618 XXX
%5620:	br	 %5619 lor.rhs lor.end

BASIC BLOCK lor.rhs
%5621:	load	 %5613
%5622:	zext	 %5621
%5623:	icmp	 %5622 XXX
%5624:	br	 lor.end

BASIC BLOCK lor.end
%5625:	phi	 XXX %5623
%5626:	br	 land.end1462

BASIC BLOCK land.end1462
%5627:	phi	 XXX %5625
%5628:	br	 %5627 while.end1466 while.body1464

BASIC BLOCK while.body1464
%5629:	getelementptr	 %5613 XXX
%5630:	br	 while.cond1451

BASIC BLOCK while.end1466
%5631:	icmp	 %5613 %3727
%5632:	br	 %5631 if.else1471 if.then1469

BASIC BLOCK if.then1469
%5633:	getelementptr	 %5610 XXX
%5634:	store	 XXX %5633
%5635:	br	 if.end1559

BASIC BLOCK if.else1471
%5636:	load	 %5613
%5637:	zext	 %5636
%5638:	icmp	 %5637 XXX
%5639:	br	 %5638 lor.lhs.false1475 if.then1485

BASIC BLOCK lor.lhs.false1475
%5640:	getelementptr	 bufp XXX XXX
%5641:	load	 %5640
%5642:	lshr	 %5641 XXX
%5643:	zext	 %5642
%5644:	icmp	 %5643 XXX
%5645:	br	 %5644 if.end1558 land.lhs.true1481

BASIC BLOCK land.lhs.true1481
%5646:	load	 %5613
%5647:	zext	 %5646
%5648:	icmp	 %5647 XXX
%5649:	br	 %5648 if.end1558 if.then1485

BASIC BLOCK if.then1485
%5650:	load	 %5613
%5651:	zext	 %5650
%5652:	icmp	 %5651 XXX
%5653:	br	 %5652 cond.false1491 cond.true1490

BASIC BLOCK cond.true1490
%5654:	br	 cond.end1494

BASIC BLOCK cond.false1491
%5655:	getelementptr	 %5613 XXX
%5656:	load	 %5655
%5657:	zext	 %5656
%5658:	br	 cond.end1494

BASIC BLOCK cond.end1494
%5659:	phi	 XXX %5657
%5660:	trunc	 %5659
%5661:	sext	 %5608
%5662:	getelementptr	 %5610 %5661
%5663:	store	 %5662 %3721
%5664:	load	 %3721
%5665:	getelementptr	 %5664 XXX
%5666:	load	 %5665
%5667:	zext	 %5666
%5668:	icmp	 %5667 XXX
%5669:	br	 %5668 if.else1511 land.lhs.true1503

BASIC BLOCK land.lhs.true1503
%5670:	load	 %3721
%5671:	getelementptr	 %5670 XXX
%5672:	load	 %5671
%5673:	zext	 %5672
%5674:	zext	 %5660
%5675:	icmp	 %5673 %5674
%5676:	br	 %5675 if.else1511 if.then1509

BASIC BLOCK if.then1509
%5677:	getelementptr	 %5610 XXX
%5678:	store	 XXX %5677
%5679:	br	 if.end1557

BASIC BLOCK if.else1511
%5680:	load	 %3721
%5681:	getelementptr	 %5680 XXX
%5682:	load	 %5681
%5683:	zext	 %5682
%5684:	icmp	 %5683 XXX
%5685:	br	 %5684 lor.lhs.false1516 if.then1521

BASIC BLOCK lor.lhs.false1516
%5686:	load	 %3721
%5687:	getelementptr	 %5686 XXX
%5688:	load	 %5687
%5689:	zext	 %5688
%5690:	icmp	 %5689 XXX
%5691:	br	 %5690 if.end1556 if.then1521

BASIC BLOCK if.then1521
%5692:	load	 %3721
%5693:	getelementptr	 %5692 XXX
%5694:	load	 %5693
%5695:	zext	 %5694
%5696:	icmp	 %5695 XXX
%5697:	zext	 %5696
%5698:	zext	 %5660
%5699:	load	 %3721
%5700:	getelementptr	 %5699 XXX
%5701:	load	 %5700
%5702:	zext	 %5701
%5703:	mul	 %5702 XXX
%5704:	trunc	 %5703
%5705:	zext	 %5704
%5706:	icmp	 %5698 %5705
%5707:	br	 %5706 if.end1551 land.lhs.true1535

BASIC BLOCK land.lhs.true1535
%5708:	zext	 %5660
%5709:	sdiv	 %5708 XXX
%5710:	add	 XXX %5709
%5711:	sext	 %5710
%5712:	load	 %3721
%5713:	getelementptr	 %5712 %5711
%5714:	load	 %5713
%5715:	zext	 %5714
%5716:	zext	 %5660
%5717:	srem	 %5716 XXX
%5718:	shl	 XXX %5717
%5719:	and	 %5715 %5718
%5720:	icmp	 %5719 XXX
%5721:	br	 %5720 if.end1551 if.then1547

BASIC BLOCK if.then1547
%5722:	icmp	 %5697 XXX
%5723:	xor	 %5722 XXX
%5724:	zext	 %5723
%5725:	br	 if.end1551

BASIC BLOCK if.end1551
%5726:	phi	 %5724 %5697 %5697
%5727:	icmp	 %5726 XXX
%5728:	br	 %5727 if.then1553 if.end1555

BASIC BLOCK if.then1553
%5729:	getelementptr	 %5610 XXX
%5730:	store	 XXX %5729
%5731:	br	 if.end1555

BASIC BLOCK if.end1555
%5732:	br	 if.end1556

BASIC BLOCK if.end1556
%5733:	br	 if.end1557

BASIC BLOCK if.end1557
%5734:	br	 if.end1558

BASIC BLOCK if.end1558
%5735:	br	 if.end1559

BASIC BLOCK if.end1559
%5736:	getelementptr	 %5610 XXX
%5737:	getelementptr	 %5736 XXX
%5738:	load	 %5737
%5739:	zext	 %5738
%5740:	icmp	 %5739 XXX
%5741:	br	 %5740 if.end1567 if.then1565

BASIC BLOCK if.then1565
%5742:	getelementptr	 %5736 XXX
%5743:	store	 XXX %5742
%5744:	br	 unconditional_jump

BASIC BLOCK if.end1567
%5745:	br	 sw.bb1568

BASIC BLOCK sw.bb1568
%5746:	phi	 %4299 %5736
%5747:	getelementptr	 %3722 XXX XXX
%5748:	load	 %5747
%5749:	add	 %5748 XXX
%5750:	store	 %5749 %5747
%5751:	zext	 %5749
%5752:	getelementptr	 %3722 XXX XXX
%5753:	load	 %5752
%5754:	getelementptr	 %5753 %5751
%5755:	load	 %5754
%5756:	icmp	 %5755 XXX
%5757:	br	 %5756 if.end1578 if.then1577

BASIC BLOCK if.then1577
%5758:	br	 if.end1578

BASIC BLOCK if.end1578
%5759:	getelementptr	 %3722 XXX XXX
%5760:	load	 %5759
%5761:	add	 %5760 XXX
%5762:	store	 %5761 %5759
%5763:	zext	 %5761
%5764:	getelementptr	 %3722 XXX XXX
%5765:	load	 %5764
%5766:	getelementptr	 %5765 %5763
%5767:	load	 %5766
%5768:	getelementptr	 %3722 XXX XXX
%5769:	load	 %5768
%5770:	add	 %5769 XXX
%5771:	store	 %5770 %5768
%5772:	zext	 %5770
%5773:	getelementptr	 %3722 XXX XXX
%5774:	load	 %5773
%5775:	getelementptr	 %5774 %5772
%5776:	load	 %5775
%5777:	ptrtoint	 %5776
%5778:	getelementptr	 %3722 XXX XXX
%5779:	load	 %5778
%5780:	add	 %5779 XXX
%5781:	store	 %5780 %5778
%5782:	zext	 %5780
%5783:	getelementptr	 %3722 XXX XXX
%5784:	load	 %5783
%5785:	getelementptr	 %5784 %5782
%5786:	load	 %5785
%5787:	ptrtoint	 %5786
%5788:	br	 for.cond1594

BASIC BLOCK for.cond1594
%5789:	phi	 %5777 %5830
%5790:	icmp	 %5789 %5787
%5791:	br	 %5790 for.end1622 for.body1597

BASIC BLOCK for.body1597
%5792:	getelementptr	 %3722 XXX XXX
%5793:	load	 %5792
%5794:	add	 %5793 XXX
%5795:	store	 %5794 %5792
%5796:	zext	 %5794
%5797:	getelementptr	 %3722 XXX XXX
%5798:	load	 %5797
%5799:	getelementptr	 %5798 %5796
%5800:	load	 %5799
%5801:	sext	 %5789
%5802:	getelementptr	 %3810 %5801
%5803:	bitcast	 %5802
%5804:	store	 %5800 %5803
%5805:	getelementptr	 %3722 XXX XXX
%5806:	load	 %5805
%5807:	add	 %5806 XXX
%5808:	store	 %5807 %5805
%5809:	zext	 %5807
%5810:	getelementptr	 %3722 XXX XXX
%5811:	load	 %5810
%5812:	getelementptr	 %5811 %5809
%5813:	load	 %5812
%5814:	sext	 %5789
%5815:	getelementptr	 %3811 %5814
%5816:	store	 %5813 %5815
%5817:	getelementptr	 %3722 XXX XXX
%5818:	load	 %5817
%5819:	add	 %5818 XXX
%5820:	store	 %5819 %5817
%5821:	zext	 %5819
%5822:	getelementptr	 %3722 XXX XXX
%5823:	load	 %5822
%5824:	getelementptr	 %5823 %5821
%5825:	load	 %5824
%5826:	sext	 %5789
%5827:	getelementptr	 %3811 %5826
%5828:	store	 %5825 %5827
%5829:	br	 for.inc1620

BASIC BLOCK for.inc1620
%5830:	add	 %5789 XXX
%5831:	br	 for.cond1594

BASIC BLOCK for.end1622
%5832:	br	 sw.bb1623

BASIC BLOCK sw.bb1623
%5833:	phi	 %4299 %5746
%5834:	br	 unconditional_jump

BASIC BLOCK unconditional_jump
%5835:	phi	 %4299 %4299 %4299 %5833 %5736
%5836:	br	 do.body1624

BASIC BLOCK do.body1624
%5837:	br	 do.body1625

BASIC BLOCK do.body1625
%5838:	load	 %5835
%5839:	zext	 %5838
%5840:	and	 %5839 XXX
%5841:	getelementptr	 %5835 XXX
%5842:	load	 %5841
%5843:	sext	 %5842
%5844:	shl	 %5843 XXX
%5845:	add	 %5840 %5844
%5846:	br	 do.end1633

BASIC BLOCK do.end1633
%5847:	getelementptr	 %5835 XXX
%5848:	br	 do.end1636

BASIC BLOCK do.end1636
%5849:	sext	 %5845
%5850:	getelementptr	 %5847 %5849
%5851:	br	 sw.epilog2314

BASIC BLOCK sw.bb1639
%5852:	br	 unconditional_jump

BASIC BLOCK sw.bb1640
%5853:	br	 do.body1641

BASIC BLOCK do.body1641
%5854:	br	 while.cond1644

BASIC BLOCK while.cond1644
%5855:	getelementptr	 %3722 XXX XXX
%5856:	load	 %5855
%5857:	getelementptr	 %3722 XXX XXX
%5858:	load	 %5857
%5859:	sub	 %5856 %5858
%5860:	sub	 %3918 %3919
%5861:	add	 %5860 XXX
%5862:	mul	 %5861 XXX
%5863:	add	 %5862 XXX
%5864:	icmp	 %5859 %5863
%5865:	br	 %5864 while.end1685 while.body1654

BASIC BLOCK while.body1654
%5866:	getelementptr	 %3722 XXX XXX
%5867:	load	 %5866
%5868:	load	 re_max_failures
%5869:	sub	 %3733 XXX
%5870:	mul	 %5869 XXX
%5871:	add	 %5870 XXX
%5872:	mul	 %5868 %5871
%5873:	icmp	 %5867 %5872
%5874:	br	 %5873 cond.false1663 cond.true1662

BASIC BLOCK cond.true1662
%5875:	br	 XXX if.then1683 if.end1684

BASIC BLOCK cond.false1663
%5876:	getelementptr	 %3722 XXX XXX
%5877:	load	 %5876
%5878:	shl	 %5877 XXX
%5879:	zext	 %5878
%5880:	mul	 %5879 XXX
%5881:	alloca	 %5880
%5882:	getelementptr	 %3722 XXX XXX
%5883:	load	 %5882
%5884:	bitcast	 %5883
%5885:	getelementptr	 %3722 XXX XXX
%5886:	load	 %5885
%5887:	zext	 %5886
%5888:	mul	 %5887 XXX
%5889:	call	 %5881 %5884 %5888 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%5890:	bitcast	 %5881
%5891:	getelementptr	 %3722 XXX XXX
%5892:	store	 %5890 %5891
%5893:	getelementptr	 %3722 XXX XXX
%5894:	load	 %5893
%5895:	icmp	 %5894 XXX
%5896:	br	 %5895 cond.false1677 cond.true1676

BASIC BLOCK cond.true1676
%5897:	br	 cond.end1680

BASIC BLOCK cond.false1677
%5898:	getelementptr	 %3722 XXX XXX
%5899:	load	 %5898
%5900:	shl	 %5899 XXX
%5901:	store	 %5900 %5898
%5902:	br	 cond.end1680

BASIC BLOCK cond.end1680
%5903:	phi	 XXX XXX
%5904:	icmp	 %5903 XXX
%5905:	br	 %5904 if.then1683 if.end1684

BASIC BLOCK if.then1683
%5906:	br	 return

BASIC BLOCK if.end1684
%5907:	br	 while.cond1644

BASIC BLOCK while.end1685
%5908:	br	 for.cond1686

BASIC BLOCK for.cond1686
%5909:	phi	 %3919 %5950
%5910:	icmp	 %5909 %3918
%5911:	br	 %5910 for.end1714 for.body1689

BASIC BLOCK for.body1689
%5912:	sext	 %5909
%5913:	getelementptr	 %3818 %5912
%5914:	load	 %5913
%5915:	getelementptr	 %3722 XXX XXX
%5916:	load	 %5915
%5917:	add	 %5916 XXX
%5918:	store	 %5917 %5915
%5919:	zext	 %5916
%5920:	getelementptr	 %3722 XXX XXX
%5921:	load	 %5920
%5922:	getelementptr	 %5921 %5919
%5923:	store	 %5914 %5922
%5924:	sext	 %5909
%5925:	getelementptr	 %3817 %5924
%5926:	load	 %5925
%5927:	getelementptr	 %3722 XXX XXX
%5928:	load	 %5927
%5929:	add	 %5928 XXX
%5930:	store	 %5929 %5927
%5931:	zext	 %5928
%5932:	getelementptr	 %3722 XXX XXX
%5933:	load	 %5932
%5934:	getelementptr	 %5933 %5931
%5935:	store	 %5926 %5934
%5936:	sext	 %5909
%5937:	getelementptr	 %3814 %5936
%5938:	bitcast	 %5937
%5939:	load	 %5938
%5940:	getelementptr	 %3722 XXX XXX
%5941:	load	 %5940
%5942:	add	 %5941 XXX
%5943:	store	 %5942 %5940
%5944:	zext	 %5941
%5945:	getelementptr	 %3722 XXX XXX
%5946:	load	 %5945
%5947:	getelementptr	 %5946 %5944
%5948:	store	 %5939 %5947
%5949:	br	 for.inc1712

BASIC BLOCK for.inc1712
%5950:	add	 %5909 XXX
%5951:	br	 for.cond1686

BASIC BLOCK for.end1714
%5952:	zext	 %3919
%5953:	inttoptr	 %5952
%5954:	getelementptr	 %3722 XXX XXX
%5955:	load	 %5954
%5956:	add	 %5955 XXX
%5957:	store	 %5956 %5954
%5958:	zext	 %5955
%5959:	getelementptr	 %3722 XXX XXX
%5960:	load	 %5959
%5961:	getelementptr	 %5960 %5958
%5962:	store	 %5953 %5961
%5963:	zext	 %3918
%5964:	inttoptr	 %5963
%5965:	getelementptr	 %3722 XXX XXX
%5966:	load	 %5965
%5967:	add	 %5966 XXX
%5968:	store	 %5967 %5965
%5969:	zext	 %5966
%5970:	getelementptr	 %3722 XXX XXX
%5971:	load	 %5970
%5972:	getelementptr	 %5971 %5969
%5973:	store	 %5964 %5972
%5974:	getelementptr	 %3722 XXX XXX
%5975:	load	 %5974
%5976:	add	 %5975 XXX
%5977:	store	 %5976 %5974
%5978:	zext	 %5975
%5979:	getelementptr	 %3722 XXX XXX
%5980:	load	 %5979
%5981:	getelementptr	 %5980 %5978
%5982:	store	 XXX %5981
%5983:	getelementptr	 %3722 XXX XXX
%5984:	load	 %5983
%5985:	add	 %5984 XXX
%5986:	store	 %5985 %5983
%5987:	zext	 %5984
%5988:	getelementptr	 %3722 XXX XXX
%5989:	load	 %5988
%5990:	getelementptr	 %5989 %5987
%5991:	store	 XXX %5990
%5992:	br	 do.end1738

BASIC BLOCK do.end1738
%5993:	br	 unconditional_jump

BASIC BLOCK sw.bb1739
%5994:	br	 do.body1740

BASIC BLOCK do.body1740
%5995:	br	 while.cond1743

BASIC BLOCK while.cond1743
%5996:	getelementptr	 %3722 XXX XXX
%5997:	load	 %5996
%5998:	getelementptr	 %3722 XXX XXX
%5999:	load	 %5998
%6000:	sub	 %5997 %5999
%6001:	sub	 %3918 %3919
%6002:	add	 %6001 XXX
%6003:	mul	 %6002 XXX
%6004:	add	 %6003 XXX
%6005:	icmp	 %6000 %6004
%6006:	br	 %6005 while.end1784 while.body1753

BASIC BLOCK while.body1753
%6007:	getelementptr	 %3722 XXX XXX
%6008:	load	 %6007
%6009:	load	 re_max_failures
%6010:	sub	 %3733 XXX
%6011:	mul	 %6010 XXX
%6012:	add	 %6011 XXX
%6013:	mul	 %6009 %6012
%6014:	icmp	 %6008 %6013
%6015:	br	 %6014 cond.false1762 cond.true1761

BASIC BLOCK cond.true1761
%6016:	br	 XXX if.then1782 if.end1783

BASIC BLOCK cond.false1762
%6017:	getelementptr	 %3722 XXX XXX
%6018:	load	 %6017
%6019:	shl	 %6018 XXX
%6020:	zext	 %6019
%6021:	mul	 %6020 XXX
%6022:	alloca	 %6021
%6023:	getelementptr	 %3722 XXX XXX
%6024:	load	 %6023
%6025:	bitcast	 %6024
%6026:	getelementptr	 %3722 XXX XXX
%6027:	load	 %6026
%6028:	zext	 %6027
%6029:	mul	 %6028 XXX
%6030:	call	 %6022 %6025 %6029 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%6031:	bitcast	 %6022
%6032:	getelementptr	 %3722 XXX XXX
%6033:	store	 %6031 %6032
%6034:	getelementptr	 %3722 XXX XXX
%6035:	load	 %6034
%6036:	icmp	 %6035 XXX
%6037:	br	 %6036 cond.false1776 cond.true1775

BASIC BLOCK cond.true1775
%6038:	br	 cond.end1779

BASIC BLOCK cond.false1776
%6039:	getelementptr	 %3722 XXX XXX
%6040:	load	 %6039
%6041:	shl	 %6040 XXX
%6042:	store	 %6041 %6039
%6043:	br	 cond.end1779

BASIC BLOCK cond.end1779
%6044:	phi	 XXX XXX
%6045:	icmp	 %6044 XXX
%6046:	br	 %6045 if.then1782 if.end1783

BASIC BLOCK if.then1782
%6047:	br	 return

BASIC BLOCK if.end1783
%6048:	br	 while.cond1743

BASIC BLOCK while.end1784
%6049:	br	 for.cond1785

BASIC BLOCK for.cond1785
%6050:	phi	 %3919 %6091
%6051:	icmp	 %6050 %3918
%6052:	br	 %6051 for.end1813 for.body1788

BASIC BLOCK for.body1788
%6053:	sext	 %6050
%6054:	getelementptr	 %3818 %6053
%6055:	load	 %6054
%6056:	getelementptr	 %3722 XXX XXX
%6057:	load	 %6056
%6058:	add	 %6057 XXX
%6059:	store	 %6058 %6056
%6060:	zext	 %6057
%6061:	getelementptr	 %3722 XXX XXX
%6062:	load	 %6061
%6063:	getelementptr	 %6062 %6060
%6064:	store	 %6055 %6063
%6065:	sext	 %6050
%6066:	getelementptr	 %3817 %6065
%6067:	load	 %6066
%6068:	getelementptr	 %3722 XXX XXX
%6069:	load	 %6068
%6070:	add	 %6069 XXX
%6071:	store	 %6070 %6068
%6072:	zext	 %6069
%6073:	getelementptr	 %3722 XXX XXX
%6074:	load	 %6073
%6075:	getelementptr	 %6074 %6072
%6076:	store	 %6067 %6075
%6077:	sext	 %6050
%6078:	getelementptr	 %3814 %6077
%6079:	bitcast	 %6078
%6080:	load	 %6079
%6081:	getelementptr	 %3722 XXX XXX
%6082:	load	 %6081
%6083:	add	 %6082 XXX
%6084:	store	 %6083 %6081
%6085:	zext	 %6082
%6086:	getelementptr	 %3722 XXX XXX
%6087:	load	 %6086
%6088:	getelementptr	 %6087 %6085
%6089:	store	 %6080 %6088
%6090:	br	 for.inc1811

BASIC BLOCK for.inc1811
%6091:	add	 %6050 XXX
%6092:	br	 for.cond1785

BASIC BLOCK for.end1813
%6093:	zext	 %3919
%6094:	inttoptr	 %6093
%6095:	getelementptr	 %3722 XXX XXX
%6096:	load	 %6095
%6097:	add	 %6096 XXX
%6098:	store	 %6097 %6095
%6099:	zext	 %6096
%6100:	getelementptr	 %3722 XXX XXX
%6101:	load	 %6100
%6102:	getelementptr	 %6101 %6099
%6103:	store	 %6094 %6102
%6104:	zext	 %3918
%6105:	inttoptr	 %6104
%6106:	getelementptr	 %3722 XXX XXX
%6107:	load	 %6106
%6108:	add	 %6107 XXX
%6109:	store	 %6108 %6106
%6110:	zext	 %6107
%6111:	getelementptr	 %3722 XXX XXX
%6112:	load	 %6111
%6113:	getelementptr	 %6112 %6110
%6114:	store	 %6105 %6113
%6115:	getelementptr	 %3722 XXX XXX
%6116:	load	 %6115
%6117:	add	 %6116 XXX
%6118:	store	 %6117 %6115
%6119:	zext	 %6116
%6120:	getelementptr	 %3722 XXX XXX
%6121:	load	 %6120
%6122:	getelementptr	 %6121 %6119
%6123:	store	 XXX %6122
%6124:	getelementptr	 %3722 XXX XXX
%6125:	load	 %6124
%6126:	add	 %6125 XXX
%6127:	store	 %6126 %6124
%6128:	zext	 %6125
%6129:	getelementptr	 %3722 XXX XXX
%6130:	load	 %6129
%6131:	getelementptr	 %6130 %6128
%6132:	store	 XXX %6131
%6133:	br	 do.end1837

BASIC BLOCK do.end1837
%6134:	br	 sw.epilog2314

BASIC BLOCK sw.bb1838
%6135:	br	 do.body1839

BASIC BLOCK do.body1839
%6136:	getelementptr	 %4299 XXX
%6137:	load	 %6136
%6138:	zext	 %6137
%6139:	and	 %6138 XXX
%6140:	getelementptr	 %4299 XXX
%6141:	getelementptr	 %6140 XXX
%6142:	load	 %6141
%6143:	sext	 %6142
%6144:	shl	 %6143 XXX
%6145:	add	 %6139 %6144
%6146:	br	 do.end1849

BASIC BLOCK do.end1849
%6147:	icmp	 %6145 XXX
%6148:	br	 %6147 if.else1867 if.then1852

BASIC BLOCK if.then1852
%6149:	add	 %6145 XXX
%6150:	getelementptr	 %4299 XXX
%6151:	br	 do.body1855

BASIC BLOCK do.body1855
%6152:	br	 do.body1856

BASIC BLOCK do.body1856
%6153:	and	 %6149 XXX
%6154:	trunc	 %6153
%6155:	getelementptr	 %6150 XXX
%6156:	store	 %6154 %6155
%6157:	ashr	 %6149 XXX
%6158:	trunc	 %6157
%6159:	getelementptr	 %6150 XXX
%6160:	store	 %6158 %6159
%6161:	br	 do.end1863

BASIC BLOCK do.end1863
%6162:	getelementptr	 %6150 XXX
%6163:	br	 do.end1866

BASIC BLOCK do.end1866
%6164:	br	 if.end1874

BASIC BLOCK if.else1867
%6165:	icmp	 %6145 XXX
%6166:	br	 %6165 if.end1873 if.then1870

BASIC BLOCK if.then1870
%6167:	getelementptr	 %4299 XXX
%6168:	store	 XXX %6167
%6169:	getelementptr	 %4299 XXX
%6170:	store	 XXX %6169
%6171:	br	 on_failure

BASIC BLOCK if.end1873
%6172:	br	 if.end1874

BASIC BLOCK if.end1874
%6173:	phi	 %6162 %4299
%6174:	br	 sw.epilog2314

BASIC BLOCK sw.bb1875
%6175:	br	 do.body1876

BASIC BLOCK do.body1876
%6176:	getelementptr	 %4299 XXX
%6177:	load	 %6176
%6178:	zext	 %6177
%6179:	and	 %6178 XXX
%6180:	getelementptr	 %4299 XXX
%6181:	getelementptr	 %6180 XXX
%6182:	load	 %6181
%6183:	sext	 %6182
%6184:	shl	 %6183 XXX
%6185:	add	 %6179 %6184
%6186:	br	 do.end1886

BASIC BLOCK do.end1886
%6187:	icmp	 %6185 XXX
%6188:	br	 %6187 if.else1901 if.then1888

BASIC BLOCK if.then1888
%6189:	add	 %6185 XXX
%6190:	br	 do.body1890

BASIC BLOCK do.body1890
%6191:	and	 %6189 XXX
%6192:	trunc	 %6191
%6193:	getelementptr	 %4299 XXX
%6194:	getelementptr	 %6193 XXX
%6195:	store	 %6192 %6194
%6196:	ashr	 %6189 XXX
%6197:	trunc	 %6196
%6198:	getelementptr	 %4299 XXX
%6199:	getelementptr	 %6198 XXX
%6200:	store	 %6197 %6199
%6201:	br	 do.end1900

BASIC BLOCK do.end1900
%6202:	br	 unconditional_jump

BASIC BLOCK if.else1901
%6203:	getelementptr	 %4299 XXX
%6204:	br	 if.end1903

BASIC BLOCK if.end1903
%6205:	br	 sw.epilog2314

BASIC BLOCK sw.bb1904
%6206:	br	 do.body1905

BASIC BLOCK do.body1905
%6207:	br	 do.body1906

BASIC BLOCK do.body1906
%6208:	load	 %4299
%6209:	zext	 %6208
%6210:	and	 %6209 XXX
%6211:	getelementptr	 %4299 XXX
%6212:	load	 %6211
%6213:	sext	 %6212
%6214:	shl	 %6213 XXX
%6215:	add	 %6210 %6214
%6216:	br	 do.end1914

BASIC BLOCK do.end1914
%6217:	getelementptr	 %4299 XXX
%6218:	br	 do.end1917

BASIC BLOCK do.end1917
%6219:	sext	 %6215
%6220:	getelementptr	 %6217 %6219
%6221:	store	 %6220 %3721
%6222:	br	 do.body1920

BASIC BLOCK do.body1920
%6223:	br	 do.body1921

BASIC BLOCK do.body1921
%6224:	load	 %6217
%6225:	zext	 %6224
%6226:	and	 %6225 XXX
%6227:	getelementptr	 %6217 XXX
%6228:	load	 %6227
%6229:	sext	 %6228
%6230:	shl	 %6229 XXX
%6231:	add	 %6226 %6230
%6232:	br	 do.end1929

BASIC BLOCK do.end1929
%6233:	getelementptr	 %6217 XXX
%6234:	br	 do.end1932

BASIC BLOCK do.end1932
%6235:	br	 do.body1933

BASIC BLOCK do.body1933
%6236:	and	 %6231 XXX
%6237:	trunc	 %6236
%6238:	load	 %3721
%6239:	getelementptr	 %6238 XXX
%6240:	store	 %6237 %6239
%6241:	ashr	 %6231 XXX
%6242:	trunc	 %6241
%6243:	load	 %3721
%6244:	getelementptr	 %6243 XXX
%6245:	store	 %6242 %6244
%6246:	br	 do.end1941

BASIC BLOCK do.end1941
%6247:	br	 sw.epilog2314

BASIC BLOCK sw.bb1942
%6248:	icmp	 %3881 XXX
%6249:	br	 %6248 cond.false1945 cond.true1944

BASIC BLOCK cond.true1944
%6250:	br	 cond.end1946

BASIC BLOCK cond.false1945
%6251:	br	 cond.end1946

BASIC BLOCK cond.end1946
%6252:	phi	 %3882 %3880
%6253:	icmp	 %3922 %6252
%6254:	br	 %6253 lor.lhs.false1950 if.then2005

BASIC BLOCK lor.lhs.false1950
%6255:	icmp	 %3879 XXX
%6256:	br	 %6255 if.then2005 lor.lhs.false1952

BASIC BLOCK lor.lhs.false1952
%6257:	icmp	 %3922 %3886
%6258:	br	 %6257 lor.lhs.false1955 if.then2005

BASIC BLOCK lor.lhs.false1955
%6259:	getelementptr	 %3922 XXX
%6260:	icmp	 %6259 %3884
%6261:	br	 %6260 cond.false1961 cond.true1959

BASIC BLOCK cond.true1959
%6262:	load	 %3880
%6263:	sext	 %6262
%6264:	br	 cond.end1974

BASIC BLOCK cond.false1961
%6265:	getelementptr	 %3922 XXX
%6266:	getelementptr	 %3880 XXX
%6267:	icmp	 %6265 %6266
%6268:	br	 %6267 cond.false1969 cond.true1966

BASIC BLOCK cond.true1966
%6269:	getelementptr	 %3884 XXX
%6270:	load	 %6269
%6271:	sext	 %6270
%6272:	br	 cond.end1972

BASIC BLOCK cond.false1969
%6273:	getelementptr	 %3922 XXX
%6274:	load	 %6273
%6275:	sext	 %6274
%6276:	br	 cond.end1972

BASIC BLOCK cond.end1972
%6277:	phi	 %6271 %6275
%6278:	br	 cond.end1974

BASIC BLOCK cond.end1974
%6279:	phi	 %6263 %6277
%6280:	sext	 %6279
%6281:	getelementptr	 re_syntax_table XXX %6280
%6282:	load	 %6281
%6283:	sext	 %6282
%6284:	icmp	 %6283 XXX
%6285:	zext	 %6284
%6286:	icmp	 %3922 %3884
%6287:	br	 %6286 cond.false1985 cond.true1983

BASIC BLOCK cond.true1983
%6288:	load	 %3880
%6289:	sext	 %6288
%6290:	br	 cond.end1996

BASIC BLOCK cond.false1985
%6291:	getelementptr	 %3880 XXX
%6292:	icmp	 %3922 %6291
%6293:	br	 %6292 cond.false1992 cond.true1989

BASIC BLOCK cond.true1989
%6294:	getelementptr	 %3884 XXX
%6295:	load	 %6294
%6296:	sext	 %6295
%6297:	br	 cond.end1994

BASIC BLOCK cond.false1992
%6298:	load	 %3922
%6299:	sext	 %6298
%6300:	br	 cond.end1994

BASIC BLOCK cond.end1994
%6301:	phi	 %6296 %6299
%6302:	br	 cond.end1996

BASIC BLOCK cond.end1996
%6303:	phi	 %6289 %6301
%6304:	sext	 %6303
%6305:	getelementptr	 re_syntax_table XXX %6304
%6306:	load	 %6305
%6307:	sext	 %6306
%6308:	icmp	 %6307 XXX
%6309:	zext	 %6308
%6310:	icmp	 %6285 %6309
%6311:	br	 %6310 if.end2006 if.then2005

BASIC BLOCK if.then2005
%6312:	br	 sw.epilog2314

BASIC BLOCK if.end2006
%6313:	br	 fail

BASIC BLOCK sw.bb2007
%6314:	icmp	 %3881 XXX
%6315:	br	 %6314 cond.false2010 cond.true2009

BASIC BLOCK cond.true2009
%6316:	br	 cond.end2011

BASIC BLOCK cond.false2010
%6317:	br	 cond.end2011

BASIC BLOCK cond.end2011
%6318:	phi	 %3882 %3880
%6319:	icmp	 %3922 %6318
%6320:	br	 %6319 lor.lhs.false2015 if.then2070

BASIC BLOCK lor.lhs.false2015
%6321:	icmp	 %3879 XXX
%6322:	br	 %6321 if.then2070 lor.lhs.false2017

BASIC BLOCK lor.lhs.false2017
%6323:	icmp	 %3922 %3886
%6324:	br	 %6323 lor.lhs.false2020 if.then2070

BASIC BLOCK lor.lhs.false2020
%6325:	getelementptr	 %3922 XXX
%6326:	icmp	 %6325 %3884
%6327:	br	 %6326 cond.false2026 cond.true2024

BASIC BLOCK cond.true2024
%6328:	load	 %3880
%6329:	sext	 %6328
%6330:	br	 cond.end2039

BASIC BLOCK cond.false2026
%6331:	getelementptr	 %3922 XXX
%6332:	getelementptr	 %3880 XXX
%6333:	icmp	 %6331 %6332
%6334:	br	 %6333 cond.false2034 cond.true2031

BASIC BLOCK cond.true2031
%6335:	getelementptr	 %3884 XXX
%6336:	load	 %6335
%6337:	sext	 %6336
%6338:	br	 cond.end2037

BASIC BLOCK cond.false2034
%6339:	getelementptr	 %3922 XXX
%6340:	load	 %6339
%6341:	sext	 %6340
%6342:	br	 cond.end2037

BASIC BLOCK cond.end2037
%6343:	phi	 %6337 %6341
%6344:	br	 cond.end2039

BASIC BLOCK cond.end2039
%6345:	phi	 %6329 %6343
%6346:	sext	 %6345
%6347:	getelementptr	 re_syntax_table XXX %6346
%6348:	load	 %6347
%6349:	sext	 %6348
%6350:	icmp	 %6349 XXX
%6351:	zext	 %6350
%6352:	icmp	 %3922 %3884
%6353:	br	 %6352 cond.false2050 cond.true2048

BASIC BLOCK cond.true2048
%6354:	load	 %3880
%6355:	sext	 %6354
%6356:	br	 cond.end2061

BASIC BLOCK cond.false2050
%6357:	getelementptr	 %3880 XXX
%6358:	icmp	 %3922 %6357
%6359:	br	 %6358 cond.false2057 cond.true2054

BASIC BLOCK cond.true2054
%6360:	getelementptr	 %3884 XXX
%6361:	load	 %6360
%6362:	sext	 %6361
%6363:	br	 cond.end2059

BASIC BLOCK cond.false2057
%6364:	load	 %3922
%6365:	sext	 %6364
%6366:	br	 cond.end2059

BASIC BLOCK cond.end2059
%6367:	phi	 %6362 %6365
%6368:	br	 cond.end2061

BASIC BLOCK cond.end2061
%6369:	phi	 %6355 %6367
%6370:	sext	 %6369
%6371:	getelementptr	 re_syntax_table XXX %6370
%6372:	load	 %6371
%6373:	sext	 %6372
%6374:	icmp	 %6373 XXX
%6375:	zext	 %6374
%6376:	icmp	 %6351 %6375
%6377:	br	 %6376 if.end2071 if.then2070

BASIC BLOCK if.then2070
%6378:	br	 fail

BASIC BLOCK if.end2071
%6379:	br	 sw.epilog2314

BASIC BLOCK sw.bb2072
%6380:	icmp	 %3922 %3884
%6381:	br	 %6380 cond.false2077 cond.true2075

BASIC BLOCK cond.true2075
%6382:	load	 %3880
%6383:	sext	 %6382
%6384:	br	 cond.end2088

BASIC BLOCK cond.false2077
%6385:	getelementptr	 %3880 XXX
%6386:	icmp	 %3922 %6385
%6387:	br	 %6386 cond.false2084 cond.true2081

BASIC BLOCK cond.true2081
%6388:	getelementptr	 %3884 XXX
%6389:	load	 %6388
%6390:	sext	 %6389
%6391:	br	 cond.end2086

BASIC BLOCK cond.false2084
%6392:	load	 %3922
%6393:	sext	 %6392
%6394:	br	 cond.end2086

BASIC BLOCK cond.end2086
%6395:	phi	 %6390 %6393
%6396:	br	 cond.end2088

BASIC BLOCK cond.end2088
%6397:	phi	 %6383 %6395
%6398:	sext	 %6397
%6399:	getelementptr	 re_syntax_table XXX %6398
%6400:	load	 %6399
%6401:	sext	 %6400
%6402:	icmp	 %6401 XXX
%6403:	br	 %6402 if.end2132 land.lhs.true2095

BASIC BLOCK land.lhs.true2095
%6404:	icmp	 %3881 XXX
%6405:	br	 %6404 cond.false2098 cond.true2097

BASIC BLOCK cond.true2097
%6406:	br	 cond.end2099

BASIC BLOCK cond.false2098
%6407:	br	 cond.end2099

BASIC BLOCK cond.end2099
%6408:	phi	 %3882 %3880
%6409:	icmp	 %3922 %6408
%6410:	br	 %6409 lor.lhs.false2103 if.then2131

BASIC BLOCK lor.lhs.false2103
%6411:	icmp	 %3879 XXX
%6412:	br	 %6411 if.then2131 lor.lhs.false2105

BASIC BLOCK lor.lhs.false2105
%6413:	getelementptr	 %3922 XXX
%6414:	icmp	 %6413 %3884
%6415:	br	 %6414 cond.false2111 cond.true2109

BASIC BLOCK cond.true2109
%6416:	load	 %3880
%6417:	sext	 %6416
%6418:	br	 cond.end2124

BASIC BLOCK cond.false2111
%6419:	getelementptr	 %3922 XXX
%6420:	getelementptr	 %3880 XXX
%6421:	icmp	 %6419 %6420
%6422:	br	 %6421 cond.false2119 cond.true2116

BASIC BLOCK cond.true2116
%6423:	getelementptr	 %3884 XXX
%6424:	load	 %6423
%6425:	sext	 %6424
%6426:	br	 cond.end2122

BASIC BLOCK cond.false2119
%6427:	getelementptr	 %3922 XXX
%6428:	load	 %6427
%6429:	sext	 %6428
%6430:	br	 cond.end2122

BASIC BLOCK cond.end2122
%6431:	phi	 %6425 %6429
%6432:	br	 cond.end2124

BASIC BLOCK cond.end2124
%6433:	phi	 %6417 %6431
%6434:	sext	 %6433
%6435:	getelementptr	 re_syntax_table XXX %6434
%6436:	load	 %6435
%6437:	sext	 %6436
%6438:	icmp	 %6437 XXX
%6439:	br	 %6438 if.then2131 if.end2132

BASIC BLOCK if.then2131
%6440:	br	 sw.epilog2314

BASIC BLOCK if.end2132
%6441:	br	 fail

BASIC BLOCK sw.bb2133
%6442:	icmp	 %3881 XXX
%6443:	br	 %6442 cond.false2136 cond.true2135

BASIC BLOCK cond.true2135
%6444:	br	 cond.end2137

BASIC BLOCK cond.false2136
%6445:	br	 cond.end2137

BASIC BLOCK cond.end2137
%6446:	phi	 %3882 %3880
%6447:	icmp	 %3922 %6446
%6448:	br	 %6447 lor.lhs.false2141 if.end2196

BASIC BLOCK lor.lhs.false2141
%6449:	icmp	 %3879 XXX
%6450:	br	 %6449 if.end2196 land.lhs.true2143

BASIC BLOCK land.lhs.true2143
%6451:	getelementptr	 %3922 XXX
%6452:	icmp	 %6451 %3884
%6453:	br	 %6452 cond.false2149 cond.true2147

BASIC BLOCK cond.true2147
%6454:	load	 %3880
%6455:	sext	 %6454
%6456:	br	 cond.end2162

BASIC BLOCK cond.false2149
%6457:	getelementptr	 %3922 XXX
%6458:	getelementptr	 %3880 XXX
%6459:	icmp	 %6457 %6458
%6460:	br	 %6459 cond.false2157 cond.true2154

BASIC BLOCK cond.true2154
%6461:	getelementptr	 %3884 XXX
%6462:	load	 %6461
%6463:	sext	 %6462
%6464:	br	 cond.end2160

BASIC BLOCK cond.false2157
%6465:	getelementptr	 %3922 XXX
%6466:	load	 %6465
%6467:	sext	 %6466
%6468:	br	 cond.end2160

BASIC BLOCK cond.end2160
%6469:	phi	 %6463 %6467
%6470:	br	 cond.end2162

BASIC BLOCK cond.end2162
%6471:	phi	 %6455 %6469
%6472:	sext	 %6471
%6473:	getelementptr	 re_syntax_table XXX %6472
%6474:	load	 %6473
%6475:	sext	 %6474
%6476:	icmp	 %6475 XXX
%6477:	br	 %6476 if.end2196 land.lhs.true2169

BASIC BLOCK land.lhs.true2169
%6478:	icmp	 %3922 %3884
%6479:	br	 %6478 cond.false2174 cond.true2172

BASIC BLOCK cond.true2172
%6480:	load	 %3880
%6481:	sext	 %6480
%6482:	br	 cond.end2185

BASIC BLOCK cond.false2174
%6483:	getelementptr	 %3880 XXX
%6484:	icmp	 %3922 %6483
%6485:	br	 %6484 cond.false2181 cond.true2178

BASIC BLOCK cond.true2178
%6486:	getelementptr	 %3884 XXX
%6487:	load	 %6486
%6488:	sext	 %6487
%6489:	br	 cond.end2183

BASIC BLOCK cond.false2181
%6490:	load	 %3922
%6491:	sext	 %6490
%6492:	br	 cond.end2183

BASIC BLOCK cond.end2183
%6493:	phi	 %6488 %6491
%6494:	br	 cond.end2185

BASIC BLOCK cond.end2185
%6495:	phi	 %6481 %6493
%6496:	sext	 %6495
%6497:	getelementptr	 re_syntax_table XXX %6496
%6498:	load	 %6497
%6499:	sext	 %6498
%6500:	icmp	 %6499 XXX
%6501:	br	 %6500 if.then2195 lor.lhs.false2192

BASIC BLOCK lor.lhs.false2192
%6502:	icmp	 %3922 %3886
%6503:	br	 %6502 if.end2196 if.then2195

BASIC BLOCK if.then2195
%6504:	br	 sw.epilog2314

BASIC BLOCK if.end2196
%6505:	br	 fail

BASIC BLOCK sw.bb2197
%6506:	br	 while.cond2198

BASIC BLOCK while.cond2198
%6507:	phi	 %3921 %3898
%6508:	phi	 %3922 %3880
%6509:	icmp	 %6508 %6507
%6510:	br	 %6509 while.end2206 while.body2201

BASIC BLOCK while.body2201
%6511:	icmp	 %6507 %3898
%6512:	br	 %6511 if.end2205 if.then2204

BASIC BLOCK if.then2204
%6513:	br	 fail

BASIC BLOCK if.end2205
%6514:	br	 while.cond2198

BASIC BLOCK while.end2206
%6515:	icmp	 %6508 %3884
%6516:	br	 %6515 cond.false2211 cond.true2209

BASIC BLOCK cond.true2209
%6517:	load	 %3880
%6518:	sext	 %6517
%6519:	br	 cond.end2222

BASIC BLOCK cond.false2211
%6520:	getelementptr	 %3880 XXX
%6521:	icmp	 %6508 %6520
%6522:	br	 %6521 cond.false2218 cond.true2215

BASIC BLOCK cond.true2215
%6523:	getelementptr	 %3884 XXX
%6524:	load	 %6523
%6525:	sext	 %6524
%6526:	br	 cond.end2220

BASIC BLOCK cond.false2218
%6527:	load	 %6508
%6528:	sext	 %6527
%6529:	br	 cond.end2220

BASIC BLOCK cond.end2220
%6530:	phi	 %6525 %6528
%6531:	br	 cond.end2222

BASIC BLOCK cond.end2222
%6532:	phi	 %6518 %6530
%6533:	sext	 %6532
%6534:	getelementptr	 re_syntax_table XXX %6533
%6535:	load	 %6534
%6536:	sext	 %6535
%6537:	icmp	 %6536 XXX
%6538:	br	 %6537 if.then2229 if.end2230

BASIC BLOCK if.then2229
%6539:	br	 fail

BASIC BLOCK if.end2230
%6540:	br	 do.body2231

BASIC BLOCK do.body2231
%6541:	br	 for.cond2233

BASIC BLOCK for.cond2233
%6542:	phi	 %3919 %6562
%6543:	icmp	 %6542 %3918
%6544:	br	 %6543 for.end2251 for.body2236

BASIC BLOCK for.body2236
%6545:	zext	 %6542
%6546:	getelementptr	 %3814 %6545
%6547:	bitcast	 %6546
%6548:	bitcast	 %6547
%6549:	load	 %6548
%6550:	and	 %6549 XXX
%6551:	or	 %6550 XXX
%6552:	store	 %6551 %6548
%6553:	zext	 %6542
%6554:	getelementptr	 %3814 %6553
%6555:	bitcast	 %6554
%6556:	bitcast	 %6555
%6557:	load	 %6556
%6558:	and	 %6557 XXX
%6559:	or	 %6558 XXX
%6560:	store	 %6559 %6556
%6561:	br	 for.inc2249

BASIC BLOCK for.inc2249
%6562:	add	 %6542 XXX
%6563:	br	 for.cond2233

BASIC BLOCK for.end2251
%6564:	br	 do.end2253

BASIC BLOCK do.end2253
%6565:	getelementptr	 %6508 XXX
%6566:	br	 sw.epilog2314

BASIC BLOCK sw.bb2255
%6567:	br	 while.cond2256

BASIC BLOCK while.cond2256
%6568:	phi	 %3921 %3898
%6569:	phi	 %3922 %3880
%6570:	icmp	 %6569 %6568
%6571:	br	 %6570 while.end2264 while.body2259

BASIC BLOCK while.body2259
%6572:	icmp	 %6568 %3898
%6573:	br	 %6572 if.end2263 if.then2262

BASIC BLOCK if.then2262
%6574:	br	 fail

BASIC BLOCK if.end2263
%6575:	br	 while.cond2256

BASIC BLOCK while.end2264
%6576:	icmp	 %6569 %3884
%6577:	br	 %6576 cond.false2269 cond.true2267

BASIC BLOCK cond.true2267
%6578:	load	 %3880
%6579:	sext	 %6578
%6580:	br	 cond.end2280

BASIC BLOCK cond.false2269
%6581:	getelementptr	 %3880 XXX
%6582:	icmp	 %6569 %6581
%6583:	br	 %6582 cond.false2276 cond.true2273

BASIC BLOCK cond.true2273
%6584:	getelementptr	 %3884 XXX
%6585:	load	 %6584
%6586:	sext	 %6585
%6587:	br	 cond.end2278

BASIC BLOCK cond.false2276
%6588:	load	 %6569
%6589:	sext	 %6588
%6590:	br	 cond.end2278

BASIC BLOCK cond.end2278
%6591:	phi	 %6586 %6589
%6592:	br	 cond.end2280

BASIC BLOCK cond.end2280
%6593:	phi	 %6579 %6591
%6594:	sext	 %6593
%6595:	getelementptr	 re_syntax_table XXX %6594
%6596:	load	 %6595
%6597:	sext	 %6596
%6598:	icmp	 %6597 XXX
%6599:	br	 %6598 if.end2288 if.then2287

BASIC BLOCK if.then2287
%6600:	br	 fail

BASIC BLOCK if.end2288
%6601:	br	 do.body2289

BASIC BLOCK do.body2289
%6602:	br	 for.cond2291

BASIC BLOCK for.cond2291
%6603:	phi	 %3919 %6623
%6604:	icmp	 %6603 %3918
%6605:	br	 %6604 for.end2309 for.body2294

BASIC BLOCK for.body2294
%6606:	zext	 %6603
%6607:	getelementptr	 %3814 %6606
%6608:	bitcast	 %6607
%6609:	bitcast	 %6608
%6610:	load	 %6609
%6611:	and	 %6610 XXX
%6612:	or	 %6611 XXX
%6613:	store	 %6612 %6609
%6614:	zext	 %6603
%6615:	getelementptr	 %3814 %6614
%6616:	bitcast	 %6615
%6617:	bitcast	 %6616
%6618:	load	 %6617
%6619:	and	 %6618 XXX
%6620:	or	 %6619 XXX
%6621:	store	 %6620 %6617
%6622:	br	 for.inc2307

BASIC BLOCK for.inc2307
%6623:	add	 %6603 XXX
%6624:	br	 for.cond2291

BASIC BLOCK for.end2309
%6625:	br	 do.end2311

BASIC BLOCK do.end2311
%6626:	getelementptr	 %6569 XXX
%6627:	br	 sw.epilog2314

BASIC BLOCK sw.default2313
%6628:	call	 abort
%6629:	unreachable	

BASIC BLOCK sw.epilog2314
%6630:	phi	 %3918 %3918 %3918 %3918 %3918 %3918 %3918 %3918 %3918 %3918 %5454 %3918 %3918 %3918 %3918 %3918 %3918 %3918 %3918 %3918 %4733 %4642 %3918 %3918 %3918 %3918
%6631:	phi	 %3919 %3919 %3919 %3919 %3919 %3919 %3919 %3919 %3919 %3919 %5455 %3919 %3919 %3919 %3919 %3919 %3919 %3919 %3919 %3919 %4734 %4648 %3919 %3919 %3919 %3919
%6632:	phi	 %4299 %4299 %4299 %4299 %4299 %4299 %6233 %5850 %6203 %6173 %5410 %4299 %5253 %4299 %4299 %4299 %4299 %4299 %4299 %5040 %5038 %4649 %4529 %4299 %4368 %4299
%6633:	phi	 %6568 %6507 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %5100 %3921 %3921 %4479 %4398 %4369 %3921
%6634:	phi	 %6626 %6565 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %5101 %3922 %3922 %4558 %4470 %4370 %3922
%6635:	br	 for.cond109

BASIC BLOCK fail
%6636:	phi	 %3977 %6636 %6636 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916 %3916
%6637:	phi	 %3978 %6637 %6637 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917 %3917
%6638:	phi	 %3921 %6638 %6638 %6568 %6568 %6507 %6507 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %3921 %5124 %5124 %3921 %4479 %4479 %4398 %4398 %4315 %4315 %4346 %4346
%6639:	phi	 %3922 %6656 %6656 %6569 %6569 %6508 %6508 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %3922 %5125 %5125 %3922 %4480 %4480 %4399 %4399 %4316 %4323 %4347 %4354
%6640:	getelementptr	 %3722 XXX XXX
%6641:	load	 %6640
%6642:	icmp	 %6641 XXX
%6643:	br	 %6642 if.then2318 if.else2424

BASIC BLOCK if.then2318
%6644:	getelementptr	 %3722 XXX XXX
%6645:	load	 %6644
%6646:	add	 %6645 XXX
%6647:	store	 %6646 %6644
%6648:	zext	 %6646
%6649:	getelementptr	 %3722 XXX XXX
%6650:	load	 %6649
%6651:	getelementptr	 %6650 %6648
%6652:	load	 %6651
%6653:	icmp	 %6652 XXX
%6654:	br	 %6653 if.end2329 if.then2328

BASIC BLOCK if.then2328
%6655:	br	 if.end2329

BASIC BLOCK if.end2329
%6656:	phi	 %6652 %6639
%6657:	getelementptr	 %3722 XXX XXX
%6658:	load	 %6657
%6659:	add	 %6658 XXX
%6660:	store	 %6659 %6657
%6661:	zext	 %6659
%6662:	getelementptr	 %3722 XXX XXX
%6663:	load	 %6662
%6664:	getelementptr	 %6663 %6661
%6665:	load	 %6664
%6666:	getelementptr	 %3722 XXX XXX
%6667:	load	 %6666
%6668:	add	 %6667 XXX
%6669:	store	 %6668 %6666
%6670:	zext	 %6668
%6671:	getelementptr	 %3722 XXX XXX
%6672:	load	 %6671
%6673:	getelementptr	 %6672 %6670
%6674:	load	 %6673
%6675:	ptrtoint	 %6674
%6676:	getelementptr	 %3722 XXX XXX
%6677:	load	 %6676
%6678:	add	 %6677 XXX
%6679:	store	 %6678 %6676
%6680:	zext	 %6678
%6681:	getelementptr	 %3722 XXX XXX
%6682:	load	 %6681
%6683:	getelementptr	 %6682 %6680
%6684:	load	 %6683
%6685:	ptrtoint	 %6684
%6686:	br	 for.cond2345

BASIC BLOCK for.cond2345
%6687:	phi	 %6675 %6728
%6688:	icmp	 %6687 %6685
%6689:	br	 %6688 for.end2373 for.body2348

BASIC BLOCK for.body2348
%6690:	getelementptr	 %3722 XXX XXX
%6691:	load	 %6690
%6692:	add	 %6691 XXX
%6693:	store	 %6692 %6690
%6694:	zext	 %6692
%6695:	getelementptr	 %3722 XXX XXX
%6696:	load	 %6695
%6697:	getelementptr	 %6696 %6694
%6698:	load	 %6697
%6699:	sext	 %6687
%6700:	getelementptr	 %3814 %6699
%6701:	bitcast	 %6700
%6702:	store	 %6698 %6701
%6703:	getelementptr	 %3722 XXX XXX
%6704:	load	 %6703
%6705:	add	 %6704 XXX
%6706:	store	 %6705 %6703
%6707:	zext	 %6705
%6708:	getelementptr	 %3722 XXX XXX
%6709:	load	 %6708
%6710:	getelementptr	 %6709 %6707
%6711:	load	 %6710
%6712:	sext	 %6687
%6713:	getelementptr	 %3817 %6712
%6714:	store	 %6711 %6713
%6715:	getelementptr	 %3722 XXX XXX
%6716:	load	 %6715
%6717:	add	 %6716 XXX
%6718:	store	 %6717 %6715
%6719:	zext	 %6717
%6720:	getelementptr	 %3722 XXX XXX
%6721:	load	 %6720
%6722:	getelementptr	 %6721 %6719
%6723:	load	 %6722
%6724:	sext	 %6687
%6725:	getelementptr	 %3818 %6724
%6726:	store	 %6723 %6725
%6727:	br	 for.inc2371

BASIC BLOCK for.inc2371
%6728:	add	 %6687 XXX
%6729:	br	 for.cond2345

BASIC BLOCK for.end2373
%6730:	icmp	 %6665 XXX
%6731:	br	 %6730 if.then2375 if.end2376

BASIC BLOCK if.then2375
%6732:	br	 fail

BASIC BLOCK if.end2376
%6733:	icmp	 %6665 %3727
%6734:	br	 %6733 if.end2416 if.then2379

BASIC BLOCK if.then2379
%6735:	load	 %6665
%6736:	zext	 %6735
%6737:	switch	 %6736 sw.default2414 XXX sw.bb2382 XXX sw.bb2383 XXX sw.bb2383 XXX sw.bb2383

BASIC BLOCK sw.bb2382
%6738:	br	 sw.bb2383

BASIC BLOCK sw.bb2383
%6739:	phi	 XXX XXX XXX XXX
%6740:	getelementptr	 %6665 XXX
%6741:	store	 %6740 %3721
%6742:	br	 do.body2385

BASIC BLOCK do.body2385
%6743:	br	 do.body2386

BASIC BLOCK do.body2386
%6744:	load	 %3721
%6745:	load	 %6744
%6746:	zext	 %6745
%6747:	and	 %6746 XXX
%6748:	load	 %3721
%6749:	getelementptr	 %6748 XXX
%6750:	load	 %6749
%6751:	sext	 %6750
%6752:	shl	 %6751 XXX
%6753:	add	 %6747 %6752
%6754:	br	 do.end2394

BASIC BLOCK do.end2394
%6755:	load	 %3721
%6756:	getelementptr	 %6755 XXX
%6757:	store	 %6756 %3721
%6758:	br	 do.end2397

BASIC BLOCK do.end2397
%6759:	load	 %3721
%6760:	sext	 %6753
%6761:	getelementptr	 %6759 %6760
%6762:	store	 %6761 %3721
%6763:	sext	 %6739
%6764:	icmp	 %6763 XXX
%6765:	br	 %6764 lor.lhs.false2406 land.lhs.true2402

BASIC BLOCK land.lhs.true2402
%6766:	load	 %3721
%6767:	load	 %6766
%6768:	zext	 %6767
%6769:	icmp	 %6768 XXX
%6770:	br	 %6769 lor.lhs.false2406 if.then2412

BASIC BLOCK lor.lhs.false2406
%6771:	icmp	 %6739 XXX
%6772:	br	 %6771 land.lhs.true2408 if.end2413

BASIC BLOCK land.lhs.true2408
%6773:	load	 %3721
%6774:	load	 %6773
%6775:	zext	 %6774
%6776:	icmp	 %6775 XXX
%6777:	br	 %6776 if.end2413 if.then2412

BASIC BLOCK if.then2412
%6778:	br	 fail

BASIC BLOCK if.end2413
%6779:	br	 sw.epilog2415

BASIC BLOCK sw.default2414
%6780:	br	 sw.epilog2415

BASIC BLOCK sw.epilog2415
%6781:	br	 if.end2416

BASIC BLOCK if.end2416
%6782:	icmp	 %6656 %3882
%6783:	br	 %6782 if.end2423 land.lhs.true2419

BASIC BLOCK land.lhs.true2419
%6784:	icmp	 %6656 %3884
%6785:	br	 %6784 if.end2423 if.then2422

BASIC BLOCK if.then2422
%6786:	br	 if.end2423

BASIC BLOCK if.end2423
%6787:	phi	 %3899 %6638 %6638
%6788:	br	 if.end2425

BASIC BLOCK if.else2424
%6789:	br	 for.end2426

BASIC BLOCK if.end2425
%6790:	br	 for.cond109

BASIC BLOCK for.end2426
%6791:	icmp	 %6637 XXX
%6792:	br	 %6791 if.end2429 if.then2428

BASIC BLOCK if.then2428
%6793:	br	 restore_best_regs

BASIC BLOCK if.end2429
%6794:	alloca	 XXX
%6795:	br	 return

BASIC BLOCK return
%6796:	phi	 XXX XXX %4297 XXX XXX XXX XXX XXX XXX XXX XXX XXX
%6797:	ret	 %6796

FUNCTION re_match

BASIC BLOCK entry
%6798:	call	 bufp XXX XXX string size pos regs size re_match_2
%6799:	ret	 %6798

FUNCTION regex_compile

BASIC BLOCK entry
%6800:	alloca	 XXX
%6801:	alloca	 XXX
%6802:	alloca	 XXX
%6803:	store	 pattern %6801
%6804:	sext	 size
%6805:	getelementptr	 pattern %6804
%6806:	getelementptr	 bufp XXX XXX
%6807:	load	 %6806
%6808:	call	 XXX malloc
%6809:	bitcast	 %6808
%6810:	getelementptr	 %6800 XXX XXX
%6811:	store	 %6809 %6810
%6812:	getelementptr	 %6800 XXX XXX
%6813:	load	 %6812
%6814:	icmp	 %6813 XXX
%6815:	br	 %6814 if.end if.then

BASIC BLOCK if.then
%6816:	br	 return

BASIC BLOCK if.end
%6817:	getelementptr	 %6800 XXX XXX
%6818:	store	 XXX %6817
%6819:	getelementptr	 %6800 XXX XXX
%6820:	store	 XXX %6819
%6821:	getelementptr	 bufp XXX XXX
%6822:	store	 syntax %6821
%6823:	getelementptr	 bufp XXX XXX
%6824:	load	 %6823
%6825:	and	 %6824 XXX
%6826:	store	 %6825 %6823
%6827:	getelementptr	 bufp XXX XXX
%6828:	load	 %6827
%6829:	and	 %6828 XXX
%6830:	store	 %6829 %6827
%6831:	getelementptr	 bufp XXX XXX
%6832:	load	 %6831
%6833:	and	 %6832 XXX
%6834:	store	 %6833 %6831
%6835:	getelementptr	 bufp XXX XXX
%6836:	store	 XXX %6835
%6837:	getelementptr	 bufp XXX XXX
%6838:	store	 XXX %6837
%6839:	call	 init_syntax_once
%6840:	getelementptr	 bufp XXX XXX
%6841:	load	 %6840
%6842:	icmp	 %6841 XXX
%6843:	br	 %6842 if.end23 if.then10

BASIC BLOCK if.then10
%6844:	getelementptr	 bufp XXX XXX
%6845:	load	 %6844
%6846:	icmp	 %6845 XXX
%6847:	br	 %6846 if.else if.then11

BASIC BLOCK if.then11
%6848:	getelementptr	 bufp XXX XXX
%6849:	load	 %6848
%6850:	call	 %6849 XXX realloc
%6851:	getelementptr	 bufp XXX XXX
%6852:	store	 %6850 %6851
%6853:	br	 if.end17

BASIC BLOCK if.else
%6854:	call	 XXX malloc
%6855:	getelementptr	 bufp XXX XXX
%6856:	store	 %6854 %6855
%6857:	br	 if.end17

BASIC BLOCK if.end17
%6858:	getelementptr	 bufp XXX XXX
%6859:	load	 %6858
%6860:	icmp	 %6859 XXX
%6861:	br	 %6860 if.then20 if.end21

BASIC BLOCK if.then20
%6862:	br	 return

BASIC BLOCK if.end21
%6863:	getelementptr	 bufp XXX XXX
%6864:	store	 XXX %6863
%6865:	br	 if.end23

BASIC BLOCK if.end23
%6866:	getelementptr	 bufp XXX XXX
%6867:	load	 %6866
%6868:	br	 while.cond

BASIC BLOCK while.cond
%6869:	phi	 XXX %11451
%6870:	phi	 XXX %11452
%6871:	phi	 %6867 %11453
%6872:	phi	 XXX %11454
%6873:	phi	 XXX %11455
%6874:	phi	 %6867 %11456
%6875:	load	 %6801
%6876:	icmp	 %6875 %6805
%6877:	br	 %6876 while.end3581 while.body

BASIC BLOCK while.body
%6878:	br	 do.body

BASIC BLOCK do.body
%6879:	load	 %6801
%6880:	icmp	 %6879 %6805
%6881:	br	 %6880 if.end28 if.then27

BASIC BLOCK if.then27
%6882:	br	 return

BASIC BLOCK if.end28
%6883:	load	 %6801
%6884:	getelementptr	 %6883 XXX
%6885:	store	 %6884 %6801
%6886:	load	 %6883
%6887:	icmp	 %6807 XXX
%6888:	br	 %6887 if.end31 if.then30

BASIC BLOCK if.then30
%6889:	zext	 %6886
%6890:	getelementptr	 %6807 %6889
%6891:	load	 %6890
%6892:	br	 if.end31

BASIC BLOCK if.end31
%6893:	phi	 %6891 %6886
%6894:	br	 do.end

BASIC BLOCK do.end
%6895:	zext	 %6893
%6896:	switch	 %6895 sw.default3351 XXX sw.bb XXX sw.bb115 XXX sw.bb207 XXX sw.bb207 XXX sw.bb215 XXX sw.bb616 XXX sw.bb696 XXX sw.bb1538 XXX sw.bb1543 XXX sw.bb1548 XXX sw.bb1553 XXX sw.bb1558 XXX sw.bb1566

BASIC BLOCK sw.bb
%6897:	load	 %6801
%6898:	getelementptr	 pattern XXX
%6899:	icmp	 %6897 %6898
%6900:	br	 %6899 lor.lhs.false if.then40

BASIC BLOCK lor.lhs.false
%6901:	and	 syntax XXX
%6902:	icmp	 %6901 XXX
%6903:	br	 %6902 lor.lhs.false36 if.then40

BASIC BLOCK lor.lhs.false36
%6904:	load	 %6801
%6905:	call	 pattern %6904 syntax at_begline_loc_p
%6906:	sext	 %6905
%6907:	icmp	 %6906 XXX
%6908:	br	 %6907 if.else113 if.then40

BASIC BLOCK if.then40
%6909:	br	 do.body41

BASIC BLOCK do.body41
%6910:	br	 while.cond42

BASIC BLOCK while.cond42
%6911:	phi	 %6870 %7004
%6912:	phi	 %6871 %7005
%6913:	phi	 %6872 %7006
%6914:	phi	 %6873 %7007
%6915:	phi	 %6874 %7008
%6916:	getelementptr	 bufp XXX XXX
%6917:	load	 %6916
%6918:	ptrtoint	 %6915
%6919:	ptrtoint	 %6917
%6920:	sub	 %6918 %6919
%6921:	add	 %6920 XXX
%6922:	getelementptr	 bufp XXX XXX
%6923:	load	 %6922
%6924:	icmp	 %6921 %6923
%6925:	br	 %6924 while.end while.body47

BASIC BLOCK while.body47
%6926:	br	 do.body48

BASIC BLOCK do.body48
%6927:	getelementptr	 bufp XXX XXX
%6928:	load	 %6927
%6929:	getelementptr	 bufp XXX XXX
%6930:	load	 %6929
%6931:	icmp	 %6930 XXX
%6932:	br	 %6931 if.end54 if.then53

BASIC BLOCK if.then53
%6933:	br	 return

BASIC BLOCK if.end54
%6934:	getelementptr	 bufp XXX XXX
%6935:	load	 %6934
%6936:	shl	 %6935 XXX
%6937:	store	 %6936 %6934
%6938:	getelementptr	 bufp XXX XXX
%6939:	load	 %6938
%6940:	icmp	 %6939 XXX
%6941:	br	 %6940 if.end61 if.then59

BASIC BLOCK if.then59
%6942:	getelementptr	 bufp XXX XXX
%6943:	store	 XXX %6942
%6944:	br	 if.end61

BASIC BLOCK if.end61
%6945:	getelementptr	 bufp XXX XXX
%6946:	load	 %6945
%6947:	getelementptr	 bufp XXX XXX
%6948:	load	 %6947
%6949:	call	 %6946 %6948 realloc
%6950:	getelementptr	 bufp XXX XXX
%6951:	store	 %6949 %6950
%6952:	getelementptr	 bufp XXX XXX
%6953:	load	 %6952
%6954:	icmp	 %6953 XXX
%6955:	br	 %6954 if.end70 if.then69

BASIC BLOCK if.then69
%6956:	br	 return

BASIC BLOCK if.end70
%6957:	getelementptr	 bufp XXX XXX
%6958:	load	 %6957
%6959:	icmp	 %6928 %6958
%6960:	br	 %6959 if.end109 if.then74

BASIC BLOCK if.then74
%6961:	ptrtoint	 %6915
%6962:	ptrtoint	 %6928
%6963:	sub	 %6961 %6962
%6964:	getelementptr	 bufp XXX XXX
%6965:	load	 %6964
%6966:	getelementptr	 %6965 %6963
%6967:	ptrtoint	 %6912
%6968:	ptrtoint	 %6928
%6969:	sub	 %6967 %6968
%6970:	getelementptr	 bufp XXX XXX
%6971:	load	 %6970
%6972:	getelementptr	 %6971 %6969
%6973:	icmp	 %6911 XXX
%6974:	br	 %6973 if.end92 if.then86

BASIC BLOCK if.then86
%6975:	ptrtoint	 %6911
%6976:	ptrtoint	 %6928
%6977:	sub	 %6975 %6976
%6978:	getelementptr	 bufp XXX XXX
%6979:	load	 %6978
%6980:	getelementptr	 %6979 %6977
%6981:	br	 if.end92

BASIC BLOCK if.end92
%6982:	phi	 %6980 %6911
%6983:	icmp	 %6913 XXX
%6984:	br	 %6983 if.end100 if.then94

BASIC BLOCK if.then94
%6985:	ptrtoint	 %6913
%6986:	ptrtoint	 %6928
%6987:	sub	 %6985 %6986
%6988:	getelementptr	 bufp XXX XXX
%6989:	load	 %6988
%6990:	getelementptr	 %6989 %6987
%6991:	br	 if.end100

BASIC BLOCK if.end100
%6992:	phi	 %6990 %6913
%6993:	icmp	 %6914 XXX
%6994:	br	 %6993 if.end108 if.then102

BASIC BLOCK if.then102
%6995:	ptrtoint	 %6914
%6996:	ptrtoint	 %6928
%6997:	sub	 %6995 %6996
%6998:	getelementptr	 bufp XXX XXX
%6999:	load	 %6998
%7000:	getelementptr	 %6999 %6997
%7001:	br	 if.end108

BASIC BLOCK if.end108
%7002:	phi	 %7000 %6914
%7003:	br	 if.end109

BASIC BLOCK if.end109
%7004:	phi	 %6982 %6911
%7005:	phi	 %6972 %6912
%7006:	phi	 %6992 %6913
%7007:	phi	 %7002 %6914
%7008:	phi	 %6966 %6915
%7009:	br	 do.end110

BASIC BLOCK do.end110
%7010:	br	 while.cond42

BASIC BLOCK while.end
%7011:	getelementptr	 %6915 XXX
%7012:	store	 XXX %6915
%7013:	br	 do.end112

BASIC BLOCK do.end112
%7014:	br	 if.end114

BASIC BLOCK if.else113
%7015:	br	 normal_char

BASIC BLOCK if.end114
%7016:	br	 sw.epilog3580

BASIC BLOCK sw.bb115
%7017:	load	 %6801
%7018:	icmp	 %7017 %6805
%7019:	br	 %7018 lor.lhs.false118 if.then125

BASIC BLOCK lor.lhs.false118
%7020:	and	 syntax XXX
%7021:	icmp	 %7020 XXX
%7022:	br	 %7021 lor.lhs.false121 if.then125

BASIC BLOCK lor.lhs.false121
%7023:	load	 %6801
%7024:	call	 %7023 %6805 syntax at_endline_loc_p
%7025:	sext	 %7024
%7026:	icmp	 %7025 XXX
%7027:	br	 %7026 if.else205 if.then125

BASIC BLOCK if.then125
%7028:	br	 do.body126

BASIC BLOCK do.body126
%7029:	br	 while.cond127

BASIC BLOCK while.cond127
%7030:	phi	 %6870 %7123
%7031:	phi	 %6871 %7124
%7032:	phi	 %6872 %7125
%7033:	phi	 %6873 %7126
%7034:	phi	 %6874 %7127
%7035:	getelementptr	 bufp XXX XXX
%7036:	load	 %7035
%7037:	ptrtoint	 %7034
%7038:	ptrtoint	 %7036
%7039:	sub	 %7037 %7038
%7040:	add	 %7039 XXX
%7041:	getelementptr	 bufp XXX XXX
%7042:	load	 %7041
%7043:	icmp	 %7040 %7042
%7044:	br	 %7043 while.end202 while.body136

BASIC BLOCK while.body136
%7045:	br	 do.body137

BASIC BLOCK do.body137
%7046:	getelementptr	 bufp XXX XXX
%7047:	load	 %7046
%7048:	getelementptr	 bufp XXX XXX
%7049:	load	 %7048
%7050:	icmp	 %7049 XXX
%7051:	br	 %7050 if.end144 if.then143

BASIC BLOCK if.then143
%7052:	br	 return

BASIC BLOCK if.end144
%7053:	getelementptr	 bufp XXX XXX
%7054:	load	 %7053
%7055:	shl	 %7054 XXX
%7056:	store	 %7055 %7053
%7057:	getelementptr	 bufp XXX XXX
%7058:	load	 %7057
%7059:	icmp	 %7058 XXX
%7060:	br	 %7059 if.end152 if.then150

BASIC BLOCK if.then150
%7061:	getelementptr	 bufp XXX XXX
%7062:	store	 XXX %7061
%7063:	br	 if.end152

BASIC BLOCK if.end152
%7064:	getelementptr	 bufp XXX XXX
%7065:	load	 %7064
%7066:	getelementptr	 bufp XXX XXX
%7067:	load	 %7066
%7068:	call	 %7065 %7067 realloc
%7069:	getelementptr	 bufp XXX XXX
%7070:	store	 %7068 %7069
%7071:	getelementptr	 bufp XXX XXX
%7072:	load	 %7071
%7073:	icmp	 %7072 XXX
%7074:	br	 %7073 if.end161 if.then160

BASIC BLOCK if.then160
%7075:	br	 return

BASIC BLOCK if.end161
%7076:	getelementptr	 bufp XXX XXX
%7077:	load	 %7076
%7078:	icmp	 %7047 %7077
%7079:	br	 %7078 if.end200 if.then165

BASIC BLOCK if.then165
%7080:	ptrtoint	 %7034
%7081:	ptrtoint	 %7047
%7082:	sub	 %7080 %7081
%7083:	getelementptr	 bufp XXX XXX
%7084:	load	 %7083
%7085:	getelementptr	 %7084 %7082
%7086:	ptrtoint	 %7031
%7087:	ptrtoint	 %7047
%7088:	sub	 %7086 %7087
%7089:	getelementptr	 bufp XXX XXX
%7090:	load	 %7089
%7091:	getelementptr	 %7090 %7088
%7092:	icmp	 %7030 XXX
%7093:	br	 %7092 if.end183 if.then177

BASIC BLOCK if.then177
%7094:	ptrtoint	 %7030
%7095:	ptrtoint	 %7047
%7096:	sub	 %7094 %7095
%7097:	getelementptr	 bufp XXX XXX
%7098:	load	 %7097
%7099:	getelementptr	 %7098 %7096
%7100:	br	 if.end183

BASIC BLOCK if.end183
%7101:	phi	 %7099 %7030
%7102:	icmp	 %7032 XXX
%7103:	br	 %7102 if.end191 if.then185

BASIC BLOCK if.then185
%7104:	ptrtoint	 %7032
%7105:	ptrtoint	 %7047
%7106:	sub	 %7104 %7105
%7107:	getelementptr	 bufp XXX XXX
%7108:	load	 %7107
%7109:	getelementptr	 %7108 %7106
%7110:	br	 if.end191

BASIC BLOCK if.end191
%7111:	phi	 %7109 %7032
%7112:	icmp	 %7033 XXX
%7113:	br	 %7112 if.end199 if.then193

BASIC BLOCK if.then193
%7114:	ptrtoint	 %7033
%7115:	ptrtoint	 %7047
%7116:	sub	 %7114 %7115
%7117:	getelementptr	 bufp XXX XXX
%7118:	load	 %7117
%7119:	getelementptr	 %7118 %7116
%7120:	br	 if.end199

BASIC BLOCK if.end199
%7121:	phi	 %7119 %7033
%7122:	br	 if.end200

BASIC BLOCK if.end200
%7123:	phi	 %7101 %7030
%7124:	phi	 %7091 %7031
%7125:	phi	 %7111 %7032
%7126:	phi	 %7121 %7033
%7127:	phi	 %7085 %7034
%7128:	br	 do.end201

BASIC BLOCK do.end201
%7129:	br	 while.cond127

BASIC BLOCK while.end202
%7130:	getelementptr	 %7034 XXX
%7131:	store	 XXX %7034
%7132:	br	 do.end204

BASIC BLOCK do.end204
%7133:	br	 if.end206

BASIC BLOCK if.else205
%7134:	br	 normal_char

BASIC BLOCK if.end206
%7135:	br	 sw.epilog3580

BASIC BLOCK sw.bb207
%7136:	and	 syntax XXX
%7137:	icmp	 %7136 XXX
%7138:	br	 %7137 lor.lhs.false210 if.then213

BASIC BLOCK lor.lhs.false210
%7139:	and	 syntax XXX
%7140:	icmp	 %7139 XXX
%7141:	br	 %7140 if.end214 if.then213

BASIC BLOCK if.then213
%7142:	br	 normal_char

BASIC BLOCK if.end214
%7143:	br	 handle_plus

BASIC BLOCK handle_plus
%7144:	phi	 %8804 %6893
%7145:	br	 sw.bb215

BASIC BLOCK sw.bb215
%7146:	phi	 %7144 %6893
%7147:	icmp	 %6872 XXX
%7148:	br	 %7147 if.then217 if.end227

BASIC BLOCK if.then217
%7149:	and	 syntax XXX
%7150:	icmp	 %7149 XXX
%7151:	br	 %7150 if.else221 if.then220

BASIC BLOCK if.then220
%7152:	br	 return

BASIC BLOCK if.else221
%7153:	and	 syntax XXX
%7154:	icmp	 %7153 XXX
%7155:	br	 %7154 if.then224 if.end225

BASIC BLOCK if.then224
%7156:	br	 normal_char

BASIC BLOCK if.end225
%7157:	br	 if.end226

BASIC BLOCK if.end226
%7158:	br	 if.end227

BASIC BLOCK if.end227
%7159:	br	 for.cond

BASIC BLOCK for.cond
%7160:	phi	 XXX %7168
%7161:	phi	 XXX %7174
%7162:	phi	 %7146 %7255
%7163:	zext	 %7162
%7164:	icmp	 %7163 XXX
%7165:	zext	 %7164
%7166:	sext	 %7160
%7167:	or	 %7166 %7165
%7168:	trunc	 %7167
%7169:	zext	 %7162
%7170:	icmp	 %7169 XXX
%7171:	zext	 %7170
%7172:	sext	 %7161
%7173:	or	 %7172 %7171
%7174:	trunc	 %7173
%7175:	load	 %6801
%7176:	icmp	 %7175 %6805
%7177:	br	 %7176 if.end242 if.then241

BASIC BLOCK if.then241
%7178:	br	 for.end

BASIC BLOCK if.end242
%7179:	br	 do.body243

BASIC BLOCK do.body243
%7180:	load	 %6801
%7181:	icmp	 %7180 %6805
%7182:	br	 %7181 if.end247 if.then246

BASIC BLOCK if.then246
%7183:	br	 return

BASIC BLOCK if.end247
%7184:	load	 %6801
%7185:	getelementptr	 %7184 XXX
%7186:	store	 %7185 %6801
%7187:	load	 %7184
%7188:	icmp	 %6807 XXX
%7189:	br	 %7188 if.end253 if.then250

BASIC BLOCK if.then250
%7190:	zext	 %7187
%7191:	getelementptr	 %6807 %7190
%7192:	load	 %7191
%7193:	br	 if.end253

BASIC BLOCK if.end253
%7194:	phi	 %7192 %7187
%7195:	br	 do.end254

BASIC BLOCK do.end254
%7196:	zext	 %7194
%7197:	icmp	 %7196 XXX
%7198:	br	 %7197 lor.lhs.false258 if.then268

BASIC BLOCK lor.lhs.false258
%7199:	and	 syntax XXX
%7200:	icmp	 %7199 XXX
%7201:	br	 %7200 land.lhs.true if.else269

BASIC BLOCK land.lhs.true
%7202:	zext	 %7194
%7203:	icmp	 %7202 XXX
%7204:	br	 %7203 lor.lhs.false264 if.then268

BASIC BLOCK lor.lhs.false264
%7205:	zext	 %7194
%7206:	icmp	 %7205 XXX
%7207:	br	 %7206 if.else269 if.then268

BASIC BLOCK if.then268
%7208:	br	 if.end307

BASIC BLOCK if.else269
%7209:	and	 syntax XXX
%7210:	icmp	 %7209 XXX
%7211:	br	 %7210 if.else304 land.lhs.true272

BASIC BLOCK land.lhs.true272
%7212:	zext	 %7194
%7213:	icmp	 %7212 XXX
%7214:	br	 %7213 if.else304 if.then276

BASIC BLOCK if.then276
%7215:	load	 %6801
%7216:	icmp	 %7215 %6805
%7217:	br	 %7216 if.end280 if.then279

BASIC BLOCK if.then279
%7218:	br	 return

BASIC BLOCK if.end280
%7219:	br	 do.body281

BASIC BLOCK do.body281
%7220:	load	 %6801
%7221:	icmp	 %7220 %6805
%7222:	br	 %7221 if.end285 if.then284

BASIC BLOCK if.then284
%7223:	br	 return

BASIC BLOCK if.end285
%7224:	load	 %6801
%7225:	getelementptr	 %7224 XXX
%7226:	store	 %7225 %6801
%7227:	load	 %7224
%7228:	icmp	 %6807 XXX
%7229:	br	 %7228 if.end291 if.then288

BASIC BLOCK if.then288
%7230:	zext	 %7227
%7231:	getelementptr	 %6807 %7230
%7232:	load	 %7231
%7233:	br	 if.end291

BASIC BLOCK if.end291
%7234:	phi	 %7232 %7227
%7235:	br	 do.end292

BASIC BLOCK do.end292
%7236:	zext	 %7234
%7237:	icmp	 %7236 XXX
%7238:	br	 %7237 lor.lhs.false296 if.end303

BASIC BLOCK lor.lhs.false296
%7239:	zext	 %7234
%7240:	icmp	 %7239 XXX
%7241:	br	 %7240 if.then300 if.end303

BASIC BLOCK if.then300
%7242:	load	 %6801
%7243:	getelementptr	 %7242 XXX
%7244:	store	 %7243 %6801
%7245:	load	 %6801
%7246:	getelementptr	 %7245 XXX
%7247:	store	 %7246 %6801
%7248:	br	 for.end

BASIC BLOCK if.end303
%7249:	br	 if.end306

BASIC BLOCK if.else304
%7250:	load	 %6801
%7251:	getelementptr	 %7250 XXX
%7252:	store	 %7251 %6801
%7253:	br	 for.end

BASIC BLOCK if.end306
%7254:	br	 if.end307

BASIC BLOCK if.end307
%7255:	phi	 %7194 %7234
%7256:	br	 for.cond

BASIC BLOCK for.end
%7257:	icmp	 %6872 XXX
%7258:	br	 %7257 if.then309 if.end310

BASIC BLOCK if.then309
%7259:	br	 sw.epilog3580

BASIC BLOCK if.end310
%7260:	icmp	 %7174 XXX
%7261:	br	 %7260 if.end445 if.then312

BASIC BLOCK if.then312
%7262:	br	 while.cond313

BASIC BLOCK while.cond313
%7263:	phi	 %6870 %7356
%7264:	phi	 %6871 %7357
%7265:	phi	 %6872 %7358
%7266:	phi	 %6873 %7359
%7267:	phi	 %6874 %7360
%7268:	getelementptr	 bufp XXX XXX
%7269:	load	 %7268
%7270:	ptrtoint	 %7267
%7271:	ptrtoint	 %7269
%7272:	sub	 %7270 %7271
%7273:	add	 %7272 XXX
%7274:	getelementptr	 bufp XXX XXX
%7275:	load	 %7274
%7276:	icmp	 %7273 %7275
%7277:	br	 %7276 while.end388 while.body322

BASIC BLOCK while.body322
%7278:	br	 do.body323

BASIC BLOCK do.body323
%7279:	getelementptr	 bufp XXX XXX
%7280:	load	 %7279
%7281:	getelementptr	 bufp XXX XXX
%7282:	load	 %7281
%7283:	icmp	 %7282 XXX
%7284:	br	 %7283 if.end330 if.then329

BASIC BLOCK if.then329
%7285:	br	 return

BASIC BLOCK if.end330
%7286:	getelementptr	 bufp XXX XXX
%7287:	load	 %7286
%7288:	shl	 %7287 XXX
%7289:	store	 %7288 %7286
%7290:	getelementptr	 bufp XXX XXX
%7291:	load	 %7290
%7292:	icmp	 %7291 XXX
%7293:	br	 %7292 if.end338 if.then336

BASIC BLOCK if.then336
%7294:	getelementptr	 bufp XXX XXX
%7295:	store	 XXX %7294
%7296:	br	 if.end338

BASIC BLOCK if.end338
%7297:	getelementptr	 bufp XXX XXX
%7298:	load	 %7297
%7299:	getelementptr	 bufp XXX XXX
%7300:	load	 %7299
%7301:	call	 %7298 %7300 realloc
%7302:	getelementptr	 bufp XXX XXX
%7303:	store	 %7301 %7302
%7304:	getelementptr	 bufp XXX XXX
%7305:	load	 %7304
%7306:	icmp	 %7305 XXX
%7307:	br	 %7306 if.end347 if.then346

BASIC BLOCK if.then346
%7308:	br	 return

BASIC BLOCK if.end347
%7309:	getelementptr	 bufp XXX XXX
%7310:	load	 %7309
%7311:	icmp	 %7280 %7310
%7312:	br	 %7311 if.end386 if.then351

BASIC BLOCK if.then351
%7313:	ptrtoint	 %7267
%7314:	ptrtoint	 %7280
%7315:	sub	 %7313 %7314
%7316:	getelementptr	 bufp XXX XXX
%7317:	load	 %7316
%7318:	getelementptr	 %7317 %7315
%7319:	ptrtoint	 %7264
%7320:	ptrtoint	 %7280
%7321:	sub	 %7319 %7320
%7322:	getelementptr	 bufp XXX XXX
%7323:	load	 %7322
%7324:	getelementptr	 %7323 %7321
%7325:	icmp	 %7263 XXX
%7326:	br	 %7325 if.end369 if.then363

BASIC BLOCK if.then363
%7327:	ptrtoint	 %7263
%7328:	ptrtoint	 %7280
%7329:	sub	 %7327 %7328
%7330:	getelementptr	 bufp XXX XXX
%7331:	load	 %7330
%7332:	getelementptr	 %7331 %7329
%7333:	br	 if.end369

BASIC BLOCK if.end369
%7334:	phi	 %7332 %7263
%7335:	icmp	 %7265 XXX
%7336:	br	 %7335 if.end377 if.then371

BASIC BLOCK if.then371
%7337:	ptrtoint	 %7265
%7338:	ptrtoint	 %7280
%7339:	sub	 %7337 %7338
%7340:	getelementptr	 bufp XXX XXX
%7341:	load	 %7340
%7342:	getelementptr	 %7341 %7339
%7343:	br	 if.end377

BASIC BLOCK if.end377
%7344:	phi	 %7342 %7265
%7345:	icmp	 %7266 XXX
%7346:	br	 %7345 if.end385 if.then379

BASIC BLOCK if.then379
%7347:	ptrtoint	 %7266
%7348:	ptrtoint	 %7280
%7349:	sub	 %7347 %7348
%7350:	getelementptr	 bufp XXX XXX
%7351:	load	 %7350
%7352:	getelementptr	 %7351 %7349
%7353:	br	 if.end385

BASIC BLOCK if.end385
%7354:	phi	 %7352 %7266
%7355:	br	 if.end386

BASIC BLOCK if.end386
%7356:	phi	 %7334 %7263
%7357:	phi	 %7324 %7264
%7358:	phi	 %7344 %7265
%7359:	phi	 %7354 %7266
%7360:	phi	 %7318 %7267
%7361:	br	 do.end387

BASIC BLOCK do.end387
%7362:	br	 while.cond313

BASIC BLOCK while.end388
%7363:	icmp	 %6807 XXX
%7364:	br	 %7363 cond.false cond.true

BASIC BLOCK cond.true
%7365:	load	 %6801
%7366:	getelementptr	 %7365 XXX
%7367:	load	 %7366
%7368:	zext	 %7367
%7369:	getelementptr	 %6807 %7368
%7370:	load	 %7369
%7371:	sext	 %7370
%7372:	br	 cond.end

BASIC BLOCK cond.false
%7373:	load	 %6801
%7374:	getelementptr	 %7373 XXX
%7375:	load	 %7374
%7376:	sext	 %7375
%7377:	br	 cond.end

BASIC BLOCK cond.end
%7378:	phi	 %7371 %7376
%7379:	icmp	 %6807 XXX
%7380:	br	 %7379 cond.false400 cond.true397

BASIC BLOCK cond.true397
%7381:	getelementptr	 %6807 XXX
%7382:	load	 %7381
%7383:	sext	 %7382
%7384:	br	 cond.end401

BASIC BLOCK cond.false400
%7385:	br	 cond.end401

BASIC BLOCK cond.end401
%7386:	phi	 %7383 XXX
%7387:	icmp	 %7378 %7386
%7388:	br	 %7387 if.else437 land.lhs.true405

BASIC BLOCK land.lhs.true405
%7389:	sext	 %7168
%7390:	icmp	 %7389 XXX
%7391:	br	 %7390 if.else437 land.lhs.true408

BASIC BLOCK land.lhs.true408
%7392:	load	 %6801
%7393:	icmp	 %7392 %6805
%7394:	br	 %7393 if.else437 land.lhs.true411

BASIC BLOCK land.lhs.true411
%7395:	icmp	 %6807 XXX
%7396:	br	 %7395 cond.false417 cond.true413

BASIC BLOCK cond.true413
%7397:	load	 %6801
%7398:	load	 %7397
%7399:	zext	 %7398
%7400:	getelementptr	 %6807 %7399
%7401:	load	 %7400
%7402:	sext	 %7401
%7403:	br	 cond.end419

BASIC BLOCK cond.false417
%7404:	load	 %6801
%7405:	load	 %7404
%7406:	sext	 %7405
%7407:	br	 cond.end419

BASIC BLOCK cond.end419
%7408:	phi	 %7402 %7406
%7409:	icmp	 %6807 XXX
%7410:	br	 %7409 cond.false425 cond.true422

BASIC BLOCK cond.true422
%7411:	getelementptr	 %6807 XXX
%7412:	load	 %7411
%7413:	sext	 %7412
%7414:	br	 cond.end426

BASIC BLOCK cond.false425
%7415:	br	 cond.end426

BASIC BLOCK cond.end426
%7416:	phi	 %7413 XXX
%7417:	icmp	 %7408 %7416
%7418:	br	 %7417 if.else437 land.lhs.true430

BASIC BLOCK land.lhs.true430
%7419:	and	 syntax XXX
%7420:	icmp	 %7419 XXX
%7421:	br	 %7420 if.then433 if.else437

BASIC BLOCK if.then433
%7422:	ptrtoint	 %7265
%7423:	ptrtoint	 %7267
%7424:	sub	 %7422 %7423
%7425:	sub	 %7424 XXX
%7426:	call	 XXX %7267 %7425 XXX
%7427:	br	 if.end443

BASIC BLOCK if.else437
%7428:	getelementptr	 %7265 XXX
%7429:	ptrtoint	 %7428
%7430:	ptrtoint	 %7267
%7431:	sub	 %7429 %7430
%7432:	sub	 %7431 XXX
%7433:	call	 XXX %7267 %7432 XXX
%7434:	br	 if.end443

BASIC BLOCK if.end443
%7435:	phi	 XXX XXX
%7436:	getelementptr	 %7267 XXX
%7437:	br	 if.end445

BASIC BLOCK if.end445
%7438:	phi	 %7263 %6870
%7439:	phi	 %7264 %6871
%7440:	phi	 %7265 %6872
%7441:	phi	 %7266 %6873
%7442:	phi	 %7435 XXX
%7443:	phi	 %7436 %6874
%7444:	br	 while.cond446

BASIC BLOCK while.cond446
%7445:	phi	 %7438 %7538
%7446:	phi	 %7439 %7539
%7447:	phi	 %7440 %7540
%7448:	phi	 %7441 %7541
%7449:	phi	 %7443 %7542
%7450:	getelementptr	 bufp XXX XXX
%7451:	load	 %7450
%7452:	ptrtoint	 %7449
%7453:	ptrtoint	 %7451
%7454:	sub	 %7452 %7453
%7455:	add	 %7454 XXX
%7456:	getelementptr	 bufp XXX XXX
%7457:	load	 %7456
%7458:	icmp	 %7455 %7457
%7459:	br	 %7458 while.end521 while.body455

BASIC BLOCK while.body455
%7460:	br	 do.body456

BASIC BLOCK do.body456
%7461:	getelementptr	 bufp XXX XXX
%7462:	load	 %7461
%7463:	getelementptr	 bufp XXX XXX
%7464:	load	 %7463
%7465:	icmp	 %7464 XXX
%7466:	br	 %7465 if.end463 if.then462

BASIC BLOCK if.then462
%7467:	br	 return

BASIC BLOCK if.end463
%7468:	getelementptr	 bufp XXX XXX
%7469:	load	 %7468
%7470:	shl	 %7469 XXX
%7471:	store	 %7470 %7468
%7472:	getelementptr	 bufp XXX XXX
%7473:	load	 %7472
%7474:	icmp	 %7473 XXX
%7475:	br	 %7474 if.end471 if.then469

BASIC BLOCK if.then469
%7476:	getelementptr	 bufp XXX XXX
%7477:	store	 XXX %7476
%7478:	br	 if.end471

BASIC BLOCK if.end471
%7479:	getelementptr	 bufp XXX XXX
%7480:	load	 %7479
%7481:	getelementptr	 bufp XXX XXX
%7482:	load	 %7481
%7483:	call	 %7480 %7482 realloc
%7484:	getelementptr	 bufp XXX XXX
%7485:	store	 %7483 %7484
%7486:	getelementptr	 bufp XXX XXX
%7487:	load	 %7486
%7488:	icmp	 %7487 XXX
%7489:	br	 %7488 if.end480 if.then479

BASIC BLOCK if.then479
%7490:	br	 return

BASIC BLOCK if.end480
%7491:	getelementptr	 bufp XXX XXX
%7492:	load	 %7491
%7493:	icmp	 %7462 %7492
%7494:	br	 %7493 if.end519 if.then484

BASIC BLOCK if.then484
%7495:	ptrtoint	 %7449
%7496:	ptrtoint	 %7462
%7497:	sub	 %7495 %7496
%7498:	getelementptr	 bufp XXX XXX
%7499:	load	 %7498
%7500:	getelementptr	 %7499 %7497
%7501:	ptrtoint	 %7446
%7502:	ptrtoint	 %7462
%7503:	sub	 %7501 %7502
%7504:	getelementptr	 bufp XXX XXX
%7505:	load	 %7504
%7506:	getelementptr	 %7505 %7503
%7507:	icmp	 %7445 XXX
%7508:	br	 %7507 if.end502 if.then496

BASIC BLOCK if.then496
%7509:	ptrtoint	 %7445
%7510:	ptrtoint	 %7462
%7511:	sub	 %7509 %7510
%7512:	getelementptr	 bufp XXX XXX
%7513:	load	 %7512
%7514:	getelementptr	 %7513 %7511
%7515:	br	 if.end502

BASIC BLOCK if.end502
%7516:	phi	 %7514 %7445
%7517:	icmp	 %7447 XXX
%7518:	br	 %7517 if.end510 if.then504

BASIC BLOCK if.then504
%7519:	ptrtoint	 %7447
%7520:	ptrtoint	 %7462
%7521:	sub	 %7519 %7520
%7522:	getelementptr	 bufp XXX XXX
%7523:	load	 %7522
%7524:	getelementptr	 %7523 %7521
%7525:	br	 if.end510

BASIC BLOCK if.end510
%7526:	phi	 %7524 %7447
%7527:	icmp	 %7448 XXX
%7528:	br	 %7527 if.end518 if.then512

BASIC BLOCK if.then512
%7529:	ptrtoint	 %7448
%7530:	ptrtoint	 %7462
%7531:	sub	 %7529 %7530
%7532:	getelementptr	 bufp XXX XXX
%7533:	load	 %7532
%7534:	getelementptr	 %7533 %7531
%7535:	br	 if.end518

BASIC BLOCK if.end518
%7536:	phi	 %7534 %7448
%7537:	br	 if.end519

BASIC BLOCK if.end519
%7538:	phi	 %7516 %7445
%7539:	phi	 %7506 %7446
%7540:	phi	 %7526 %7447
%7541:	phi	 %7536 %7448
%7542:	phi	 %7500 %7449
%7543:	br	 do.end520

BASIC BLOCK do.end520
%7544:	br	 while.cond446

BASIC BLOCK while.end521
%7545:	sext	 %7442
%7546:	icmp	 %7545 XXX
%7547:	select	 %7546 XXX XXX
%7548:	getelementptr	 %7449 XXX
%7549:	ptrtoint	 %7548
%7550:	ptrtoint	 %7447
%7551:	sub	 %7549 %7550
%7552:	sub	 %7551 XXX
%7553:	call	 %7547 %7447 %7552 %7449 XXX
%7554:	getelementptr	 %7449 XXX
%7555:	icmp	 %7168 XXX
%7556:	br	 %7555 if.then532 if.end615

BASIC BLOCK if.then532
%7557:	br	 while.cond533

BASIC BLOCK while.cond533
%7558:	phi	 %7445 %7651
%7559:	phi	 %7446 %7652
%7560:	phi	 %7447 %7653
%7561:	phi	 XXX %7654
%7562:	phi	 %7554 %7655
%7563:	getelementptr	 bufp XXX XXX
%7564:	load	 %7563
%7565:	ptrtoint	 %7562
%7566:	ptrtoint	 %7564
%7567:	sub	 %7565 %7566
%7568:	add	 %7567 XXX
%7569:	getelementptr	 bufp XXX XXX
%7570:	load	 %7569
%7571:	icmp	 %7568 %7570
%7572:	br	 %7571 while.end608 while.body542

BASIC BLOCK while.body542
%7573:	br	 do.body543

BASIC BLOCK do.body543
%7574:	getelementptr	 bufp XXX XXX
%7575:	load	 %7574
%7576:	getelementptr	 bufp XXX XXX
%7577:	load	 %7576
%7578:	icmp	 %7577 XXX
%7579:	br	 %7578 if.end550 if.then549

BASIC BLOCK if.then549
%7580:	br	 return

BASIC BLOCK if.end550
%7581:	getelementptr	 bufp XXX XXX
%7582:	load	 %7581
%7583:	shl	 %7582 XXX
%7584:	store	 %7583 %7581
%7585:	getelementptr	 bufp XXX XXX
%7586:	load	 %7585
%7587:	icmp	 %7586 XXX
%7588:	br	 %7587 if.end558 if.then556

BASIC BLOCK if.then556
%7589:	getelementptr	 bufp XXX XXX
%7590:	store	 XXX %7589
%7591:	br	 if.end558

BASIC BLOCK if.end558
%7592:	getelementptr	 bufp XXX XXX
%7593:	load	 %7592
%7594:	getelementptr	 bufp XXX XXX
%7595:	load	 %7594
%7596:	call	 %7593 %7595 realloc
%7597:	getelementptr	 bufp XXX XXX
%7598:	store	 %7596 %7597
%7599:	getelementptr	 bufp XXX XXX
%7600:	load	 %7599
%7601:	icmp	 %7600 XXX
%7602:	br	 %7601 if.end567 if.then566

BASIC BLOCK if.then566
%7603:	br	 return

BASIC BLOCK if.end567
%7604:	getelementptr	 bufp XXX XXX
%7605:	load	 %7604
%7606:	icmp	 %7575 %7605
%7607:	br	 %7606 if.end606 if.then571

BASIC BLOCK if.then571
%7608:	ptrtoint	 %7562
%7609:	ptrtoint	 %7575
%7610:	sub	 %7608 %7609
%7611:	getelementptr	 bufp XXX XXX
%7612:	load	 %7611
%7613:	getelementptr	 %7612 %7610
%7614:	ptrtoint	 %7559
%7615:	ptrtoint	 %7575
%7616:	sub	 %7614 %7615
%7617:	getelementptr	 bufp XXX XXX
%7618:	load	 %7617
%7619:	getelementptr	 %7618 %7616
%7620:	icmp	 %7558 XXX
%7621:	br	 %7620 if.end589 if.then583

BASIC BLOCK if.then583
%7622:	ptrtoint	 %7558
%7623:	ptrtoint	 %7575
%7624:	sub	 %7622 %7623
%7625:	getelementptr	 bufp XXX XXX
%7626:	load	 %7625
%7627:	getelementptr	 %7626 %7624
%7628:	br	 if.end589

BASIC BLOCK if.end589
%7629:	phi	 %7627 %7558
%7630:	icmp	 %7560 XXX
%7631:	br	 %7630 if.end597 if.then591

BASIC BLOCK if.then591
%7632:	ptrtoint	 %7560
%7633:	ptrtoint	 %7575
%7634:	sub	 %7632 %7633
%7635:	getelementptr	 bufp XXX XXX
%7636:	load	 %7635
%7637:	getelementptr	 %7636 %7634
%7638:	br	 if.end597

BASIC BLOCK if.end597
%7639:	phi	 %7637 %7560
%7640:	icmp	 %7561 XXX
%7641:	br	 %7640 if.end605 if.then599

BASIC BLOCK if.then599
%7642:	ptrtoint	 %7561
%7643:	ptrtoint	 %7575
%7644:	sub	 %7642 %7643
%7645:	getelementptr	 bufp XXX XXX
%7646:	load	 %7645
%7647:	getelementptr	 %7646 %7644
%7648:	br	 if.end605

BASIC BLOCK if.end605
%7649:	phi	 %7647 %7561
%7650:	br	 if.end606

BASIC BLOCK if.end606
%7651:	phi	 %7629 %7558
%7652:	phi	 %7619 %7559
%7653:	phi	 %7639 %7560
%7654:	phi	 %7649 %7561
%7655:	phi	 %7613 %7562
%7656:	br	 do.end607

BASIC BLOCK do.end607
%7657:	br	 while.cond533

BASIC BLOCK while.end608
%7658:	getelementptr	 %7560 XXX
%7659:	ptrtoint	 %7658
%7660:	ptrtoint	 %7560
%7661:	sub	 %7659 %7660
%7662:	sub	 %7661 XXX
%7663:	call	 XXX %7560 %7662 %7562 XXX
%7664:	getelementptr	 %7562 XXX
%7665:	br	 if.end615

BASIC BLOCK if.end615
%7666:	phi	 %7445 %7558
%7667:	phi	 %7446 %7559
%7668:	phi	 %7447 %7560
%7669:	phi	 XXX %7561
%7670:	phi	 %7554 %7664
%7671:	br	 sw.epilog3580

BASIC BLOCK sw.bb616
%7672:	br	 do.body617

BASIC BLOCK do.body617
%7673:	br	 while.cond618

BASIC BLOCK while.cond618
%7674:	phi	 %6870 %7767
%7675:	phi	 %6871 %7768
%7676:	phi	 %6874 %7769
%7677:	phi	 %6873 %7770
%7678:	phi	 %6874 %7771
%7679:	getelementptr	 bufp XXX XXX
%7680:	load	 %7679
%7681:	ptrtoint	 %7678
%7682:	ptrtoint	 %7680
%7683:	sub	 %7681 %7682
%7684:	add	 %7683 XXX
%7685:	getelementptr	 bufp XXX XXX
%7686:	load	 %7685
%7687:	icmp	 %7684 %7686
%7688:	br	 %7687 while.end693 while.body627

BASIC BLOCK while.body627
%7689:	br	 do.body628

BASIC BLOCK do.body628
%7690:	getelementptr	 bufp XXX XXX
%7691:	load	 %7690
%7692:	getelementptr	 bufp XXX XXX
%7693:	load	 %7692
%7694:	icmp	 %7693 XXX
%7695:	br	 %7694 if.end635 if.then634

BASIC BLOCK if.then634
%7696:	br	 return

BASIC BLOCK if.end635
%7697:	getelementptr	 bufp XXX XXX
%7698:	load	 %7697
%7699:	shl	 %7698 XXX
%7700:	store	 %7699 %7697
%7701:	getelementptr	 bufp XXX XXX
%7702:	load	 %7701
%7703:	icmp	 %7702 XXX
%7704:	br	 %7703 if.end643 if.then641

BASIC BLOCK if.then641
%7705:	getelementptr	 bufp XXX XXX
%7706:	store	 XXX %7705
%7707:	br	 if.end643

BASIC BLOCK if.end643
%7708:	getelementptr	 bufp XXX XXX
%7709:	load	 %7708
%7710:	getelementptr	 bufp XXX XXX
%7711:	load	 %7710
%7712:	call	 %7709 %7711 realloc
%7713:	getelementptr	 bufp XXX XXX
%7714:	store	 %7712 %7713
%7715:	getelementptr	 bufp XXX XXX
%7716:	load	 %7715
%7717:	icmp	 %7716 XXX
%7718:	br	 %7717 if.end652 if.then651

BASIC BLOCK if.then651
%7719:	br	 return

BASIC BLOCK if.end652
%7720:	getelementptr	 bufp XXX XXX
%7721:	load	 %7720
%7722:	icmp	 %7691 %7721
%7723:	br	 %7722 if.end691 if.then656

BASIC BLOCK if.then656
%7724:	ptrtoint	 %7678
%7725:	ptrtoint	 %7691
%7726:	sub	 %7724 %7725
%7727:	getelementptr	 bufp XXX XXX
%7728:	load	 %7727
%7729:	getelementptr	 %7728 %7726
%7730:	ptrtoint	 %7675
%7731:	ptrtoint	 %7691
%7732:	sub	 %7730 %7731
%7733:	getelementptr	 bufp XXX XXX
%7734:	load	 %7733
%7735:	getelementptr	 %7734 %7732
%7736:	icmp	 %7674 XXX
%7737:	br	 %7736 if.end674 if.then668

BASIC BLOCK if.then668
%7738:	ptrtoint	 %7674
%7739:	ptrtoint	 %7691
%7740:	sub	 %7738 %7739
%7741:	getelementptr	 bufp XXX XXX
%7742:	load	 %7741
%7743:	getelementptr	 %7742 %7740
%7744:	br	 if.end674

BASIC BLOCK if.end674
%7745:	phi	 %7743 %7674
%7746:	icmp	 %7676 XXX
%7747:	br	 %7746 if.end682 if.then676

BASIC BLOCK if.then676
%7748:	ptrtoint	 %7676
%7749:	ptrtoint	 %7691
%7750:	sub	 %7748 %7749
%7751:	getelementptr	 bufp XXX XXX
%7752:	load	 %7751
%7753:	getelementptr	 %7752 %7750
%7754:	br	 if.end682

BASIC BLOCK if.end682
%7755:	phi	 %7753 %7676
%7756:	icmp	 %7677 XXX
%7757:	br	 %7756 if.end690 if.then684

BASIC BLOCK if.then684
%7758:	ptrtoint	 %7677
%7759:	ptrtoint	 %7691
%7760:	sub	 %7758 %7759
%7761:	getelementptr	 bufp XXX XXX
%7762:	load	 %7761
%7763:	getelementptr	 %7762 %7760
%7764:	br	 if.end690

BASIC BLOCK if.end690
%7765:	phi	 %7763 %7677
%7766:	br	 if.end691

BASIC BLOCK if.end691
%7767:	phi	 %7745 %7674
%7768:	phi	 %7735 %7675
%7769:	phi	 %7755 %7676
%7770:	phi	 %7765 %7677
%7771:	phi	 %7729 %7678
%7772:	br	 do.end692

BASIC BLOCK do.end692
%7773:	br	 while.cond618

BASIC BLOCK while.end693
%7774:	getelementptr	 %7678 XXX
%7775:	store	 XXX %7678
%7776:	br	 do.end695

BASIC BLOCK do.end695
%7777:	br	 sw.epilog3580

BASIC BLOCK sw.bb696
%7778:	load	 %6801
%7779:	icmp	 %7778 %6805
%7780:	br	 %7779 if.end700 if.then699

BASIC BLOCK if.then699
%7781:	br	 return

BASIC BLOCK if.end700
%7782:	br	 while.cond701

BASIC BLOCK while.cond701
%7783:	phi	 %6870 %7876
%7784:	phi	 %6871 %7877
%7785:	phi	 %6872 %7878
%7786:	phi	 %6873 %7879
%7787:	phi	 %6874 %7880
%7788:	getelementptr	 bufp XXX XXX
%7789:	load	 %7788
%7790:	ptrtoint	 %7787
%7791:	ptrtoint	 %7789
%7792:	sub	 %7790 %7791
%7793:	add	 %7792 XXX
%7794:	getelementptr	 bufp XXX XXX
%7795:	load	 %7794
%7796:	icmp	 %7793 %7795
%7797:	br	 %7796 while.end776 while.body710

BASIC BLOCK while.body710
%7798:	br	 do.body711

BASIC BLOCK do.body711
%7799:	getelementptr	 bufp XXX XXX
%7800:	load	 %7799
%7801:	getelementptr	 bufp XXX XXX
%7802:	load	 %7801
%7803:	icmp	 %7802 XXX
%7804:	br	 %7803 if.end718 if.then717

BASIC BLOCK if.then717
%7805:	br	 return

BASIC BLOCK if.end718
%7806:	getelementptr	 bufp XXX XXX
%7807:	load	 %7806
%7808:	shl	 %7807 XXX
%7809:	store	 %7808 %7806
%7810:	getelementptr	 bufp XXX XXX
%7811:	load	 %7810
%7812:	icmp	 %7811 XXX
%7813:	br	 %7812 if.end726 if.then724

BASIC BLOCK if.then724
%7814:	getelementptr	 bufp XXX XXX
%7815:	store	 XXX %7814
%7816:	br	 if.end726

BASIC BLOCK if.end726
%7817:	getelementptr	 bufp XXX XXX
%7818:	load	 %7817
%7819:	getelementptr	 bufp XXX XXX
%7820:	load	 %7819
%7821:	call	 %7818 %7820 realloc
%7822:	getelementptr	 bufp XXX XXX
%7823:	store	 %7821 %7822
%7824:	getelementptr	 bufp XXX XXX
%7825:	load	 %7824
%7826:	icmp	 %7825 XXX
%7827:	br	 %7826 if.end735 if.then734

BASIC BLOCK if.then734
%7828:	br	 return

BASIC BLOCK if.end735
%7829:	getelementptr	 bufp XXX XXX
%7830:	load	 %7829
%7831:	icmp	 %7800 %7830
%7832:	br	 %7831 if.end774 if.then739

BASIC BLOCK if.then739
%7833:	ptrtoint	 %7787
%7834:	ptrtoint	 %7800
%7835:	sub	 %7833 %7834
%7836:	getelementptr	 bufp XXX XXX
%7837:	load	 %7836
%7838:	getelementptr	 %7837 %7835
%7839:	ptrtoint	 %7784
%7840:	ptrtoint	 %7800
%7841:	sub	 %7839 %7840
%7842:	getelementptr	 bufp XXX XXX
%7843:	load	 %7842
%7844:	getelementptr	 %7843 %7841
%7845:	icmp	 %7783 XXX
%7846:	br	 %7845 if.end757 if.then751

BASIC BLOCK if.then751
%7847:	ptrtoint	 %7783
%7848:	ptrtoint	 %7800
%7849:	sub	 %7847 %7848
%7850:	getelementptr	 bufp XXX XXX
%7851:	load	 %7850
%7852:	getelementptr	 %7851 %7849
%7853:	br	 if.end757

BASIC BLOCK if.end757
%7854:	phi	 %7852 %7783
%7855:	icmp	 %7785 XXX
%7856:	br	 %7855 if.end765 if.then759

BASIC BLOCK if.then759
%7857:	ptrtoint	 %7785
%7858:	ptrtoint	 %7800
%7859:	sub	 %7857 %7858
%7860:	getelementptr	 bufp XXX XXX
%7861:	load	 %7860
%7862:	getelementptr	 %7861 %7859
%7863:	br	 if.end765

BASIC BLOCK if.end765
%7864:	phi	 %7862 %7785
%7865:	icmp	 %7786 XXX
%7866:	br	 %7865 if.end773 if.then767

BASIC BLOCK if.then767
%7867:	ptrtoint	 %7786
%7868:	ptrtoint	 %7800
%7869:	sub	 %7867 %7868
%7870:	getelementptr	 bufp XXX XXX
%7871:	load	 %7870
%7872:	getelementptr	 %7871 %7869
%7873:	br	 if.end773

BASIC BLOCK if.end773
%7874:	phi	 %7872 %7786
%7875:	br	 if.end774

BASIC BLOCK if.end774
%7876:	phi	 %7854 %7783
%7877:	phi	 %7844 %7784
%7878:	phi	 %7864 %7785
%7879:	phi	 %7874 %7786
%7880:	phi	 %7838 %7787
%7881:	br	 do.end775

BASIC BLOCK do.end775
%7882:	br	 while.cond701

BASIC BLOCK while.end776
%7883:	br	 do.body777

BASIC BLOCK do.body777
%7884:	br	 while.cond778

BASIC BLOCK while.cond778
%7885:	phi	 %7783 %7978
%7886:	phi	 %7784 %7979
%7887:	phi	 %7787 %7980
%7888:	phi	 %7786 %7981
%7889:	phi	 %7787 %7982
%7890:	getelementptr	 bufp XXX XXX
%7891:	load	 %7890
%7892:	ptrtoint	 %7889
%7893:	ptrtoint	 %7891
%7894:	sub	 %7892 %7893
%7895:	add	 %7894 XXX
%7896:	getelementptr	 bufp XXX XXX
%7897:	load	 %7896
%7898:	icmp	 %7895 %7897
%7899:	br	 %7898 while.end853 while.body787

BASIC BLOCK while.body787
%7900:	br	 do.body788

BASIC BLOCK do.body788
%7901:	getelementptr	 bufp XXX XXX
%7902:	load	 %7901
%7903:	getelementptr	 bufp XXX XXX
%7904:	load	 %7903
%7905:	icmp	 %7904 XXX
%7906:	br	 %7905 if.end795 if.then794

BASIC BLOCK if.then794
%7907:	br	 return

BASIC BLOCK if.end795
%7908:	getelementptr	 bufp XXX XXX
%7909:	load	 %7908
%7910:	shl	 %7909 XXX
%7911:	store	 %7910 %7908
%7912:	getelementptr	 bufp XXX XXX
%7913:	load	 %7912
%7914:	icmp	 %7913 XXX
%7915:	br	 %7914 if.end803 if.then801

BASIC BLOCK if.then801
%7916:	getelementptr	 bufp XXX XXX
%7917:	store	 XXX %7916
%7918:	br	 if.end803

BASIC BLOCK if.end803
%7919:	getelementptr	 bufp XXX XXX
%7920:	load	 %7919
%7921:	getelementptr	 bufp XXX XXX
%7922:	load	 %7921
%7923:	call	 %7920 %7922 realloc
%7924:	getelementptr	 bufp XXX XXX
%7925:	store	 %7923 %7924
%7926:	getelementptr	 bufp XXX XXX
%7927:	load	 %7926
%7928:	icmp	 %7927 XXX
%7929:	br	 %7928 if.end812 if.then811

BASIC BLOCK if.then811
%7930:	br	 return

BASIC BLOCK if.end812
%7931:	getelementptr	 bufp XXX XXX
%7932:	load	 %7931
%7933:	icmp	 %7902 %7932
%7934:	br	 %7933 if.end851 if.then816

BASIC BLOCK if.then816
%7935:	ptrtoint	 %7889
%7936:	ptrtoint	 %7902
%7937:	sub	 %7935 %7936
%7938:	getelementptr	 bufp XXX XXX
%7939:	load	 %7938
%7940:	getelementptr	 %7939 %7937
%7941:	ptrtoint	 %7886
%7942:	ptrtoint	 %7902
%7943:	sub	 %7941 %7942
%7944:	getelementptr	 bufp XXX XXX
%7945:	load	 %7944
%7946:	getelementptr	 %7945 %7943
%7947:	icmp	 %7885 XXX
%7948:	br	 %7947 if.end834 if.then828

BASIC BLOCK if.then828
%7949:	ptrtoint	 %7885
%7950:	ptrtoint	 %7902
%7951:	sub	 %7949 %7950
%7952:	getelementptr	 bufp XXX XXX
%7953:	load	 %7952
%7954:	getelementptr	 %7953 %7951
%7955:	br	 if.end834

BASIC BLOCK if.end834
%7956:	phi	 %7954 %7885
%7957:	icmp	 %7887 XXX
%7958:	br	 %7957 if.end842 if.then836

BASIC BLOCK if.then836
%7959:	ptrtoint	 %7887
%7960:	ptrtoint	 %7902
%7961:	sub	 %7959 %7960
%7962:	getelementptr	 bufp XXX XXX
%7963:	load	 %7962
%7964:	getelementptr	 %7963 %7961
%7965:	br	 if.end842

BASIC BLOCK if.end842
%7966:	phi	 %7964 %7887
%7967:	icmp	 %7888 XXX
%7968:	br	 %7967 if.end850 if.then844

BASIC BLOCK if.then844
%7969:	ptrtoint	 %7888
%7970:	ptrtoint	 %7902
%7971:	sub	 %7969 %7970
%7972:	getelementptr	 bufp XXX XXX
%7973:	load	 %7972
%7974:	getelementptr	 %7973 %7971
%7975:	br	 if.end850

BASIC BLOCK if.end850
%7976:	phi	 %7974 %7888
%7977:	br	 if.end851

BASIC BLOCK if.end851
%7978:	phi	 %7956 %7885
%7979:	phi	 %7946 %7886
%7980:	phi	 %7966 %7887
%7981:	phi	 %7976 %7888
%7982:	phi	 %7940 %7889
%7983:	br	 do.end852

BASIC BLOCK do.end852
%7984:	br	 while.cond778

BASIC BLOCK while.end853
%7985:	load	 %6801
%7986:	load	 %7985
%7987:	sext	 %7986
%7988:	icmp	 %7987 XXX
%7989:	select	 %7988 XXX XXX
%7990:	trunc	 %7989
%7991:	getelementptr	 %7889 XXX
%7992:	store	 %7990 %7889
%7993:	br	 do.end860

BASIC BLOCK do.end860
%7994:	load	 %6801
%7995:	load	 %7994
%7996:	sext	 %7995
%7997:	icmp	 %7996 XXX
%7998:	br	 %7997 if.end866 if.then864

BASIC BLOCK if.then864
%7999:	load	 %6801
%8000:	getelementptr	 %7999 XXX
%8001:	store	 %8000 %6801
%8002:	br	 if.end866

BASIC BLOCK if.end866
%8003:	load	 %6801
%8004:	br	 do.body867

BASIC BLOCK do.body867
%8005:	br	 while.cond868

BASIC BLOCK while.cond868
%8006:	phi	 %7885 %8099
%8007:	phi	 %7886 %8100
%8008:	phi	 %7887 %8101
%8009:	phi	 %7888 %8102
%8010:	phi	 %7991 %8103
%8011:	getelementptr	 bufp XXX XXX
%8012:	load	 %8011
%8013:	ptrtoint	 %8010
%8014:	ptrtoint	 %8012
%8015:	sub	 %8013 %8014
%8016:	add	 %8015 XXX
%8017:	getelementptr	 bufp XXX XXX
%8018:	load	 %8017
%8019:	icmp	 %8016 %8018
%8020:	br	 %8019 while.end943 while.body877

BASIC BLOCK while.body877
%8021:	br	 do.body878

BASIC BLOCK do.body878
%8022:	getelementptr	 bufp XXX XXX
%8023:	load	 %8022
%8024:	getelementptr	 bufp XXX XXX
%8025:	load	 %8024
%8026:	icmp	 %8025 XXX
%8027:	br	 %8026 if.end885 if.then884

BASIC BLOCK if.then884
%8028:	br	 return

BASIC BLOCK if.end885
%8029:	getelementptr	 bufp XXX XXX
%8030:	load	 %8029
%8031:	shl	 %8030 XXX
%8032:	store	 %8031 %8029
%8033:	getelementptr	 bufp XXX XXX
%8034:	load	 %8033
%8035:	icmp	 %8034 XXX
%8036:	br	 %8035 if.end893 if.then891

BASIC BLOCK if.then891
%8037:	getelementptr	 bufp XXX XXX
%8038:	store	 XXX %8037
%8039:	br	 if.end893

BASIC BLOCK if.end893
%8040:	getelementptr	 bufp XXX XXX
%8041:	load	 %8040
%8042:	getelementptr	 bufp XXX XXX
%8043:	load	 %8042
%8044:	call	 %8041 %8043 realloc
%8045:	getelementptr	 bufp XXX XXX
%8046:	store	 %8044 %8045
%8047:	getelementptr	 bufp XXX XXX
%8048:	load	 %8047
%8049:	icmp	 %8048 XXX
%8050:	br	 %8049 if.end902 if.then901

BASIC BLOCK if.then901
%8051:	br	 return

BASIC BLOCK if.end902
%8052:	getelementptr	 bufp XXX XXX
%8053:	load	 %8052
%8054:	icmp	 %8023 %8053
%8055:	br	 %8054 if.end941 if.then906

BASIC BLOCK if.then906
%8056:	ptrtoint	 %8010
%8057:	ptrtoint	 %8023
%8058:	sub	 %8056 %8057
%8059:	getelementptr	 bufp XXX XXX
%8060:	load	 %8059
%8061:	getelementptr	 %8060 %8058
%8062:	ptrtoint	 %8007
%8063:	ptrtoint	 %8023
%8064:	sub	 %8062 %8063
%8065:	getelementptr	 bufp XXX XXX
%8066:	load	 %8065
%8067:	getelementptr	 %8066 %8064
%8068:	icmp	 %8006 XXX
%8069:	br	 %8068 if.end924 if.then918

BASIC BLOCK if.then918
%8070:	ptrtoint	 %8006
%8071:	ptrtoint	 %8023
%8072:	sub	 %8070 %8071
%8073:	getelementptr	 bufp XXX XXX
%8074:	load	 %8073
%8075:	getelementptr	 %8074 %8072
%8076:	br	 if.end924

BASIC BLOCK if.end924
%8077:	phi	 %8075 %8006
%8078:	icmp	 %8008 XXX
%8079:	br	 %8078 if.end932 if.then926

BASIC BLOCK if.then926
%8080:	ptrtoint	 %8008
%8081:	ptrtoint	 %8023
%8082:	sub	 %8080 %8081
%8083:	getelementptr	 bufp XXX XXX
%8084:	load	 %8083
%8085:	getelementptr	 %8084 %8082
%8086:	br	 if.end932

BASIC BLOCK if.end932
%8087:	phi	 %8085 %8008
%8088:	icmp	 %8009 XXX
%8089:	br	 %8088 if.end940 if.then934

BASIC BLOCK if.then934
%8090:	ptrtoint	 %8009
%8091:	ptrtoint	 %8023
%8092:	sub	 %8090 %8091
%8093:	getelementptr	 bufp XXX XXX
%8094:	load	 %8093
%8095:	getelementptr	 %8094 %8092
%8096:	br	 if.end940

BASIC BLOCK if.end940
%8097:	phi	 %8095 %8009
%8098:	br	 if.end941

BASIC BLOCK if.end941
%8099:	phi	 %8077 %8006
%8100:	phi	 %8067 %8007
%8101:	phi	 %8087 %8008
%8102:	phi	 %8097 %8009
%8103:	phi	 %8061 %8010
%8104:	br	 do.end942

BASIC BLOCK do.end942
%8105:	br	 while.cond868

BASIC BLOCK while.end943
%8106:	getelementptr	 %8010 XXX
%8107:	store	 XXX %8010
%8108:	br	 do.end945

BASIC BLOCK do.end945
%8109:	call	 %8106 XXX XXX XXX XXX llvm.memset.p0i8.i64
%8110:	getelementptr	 %8106 XXX
%8111:	load	 %8110
%8112:	zext	 %8111
%8113:	icmp	 %8112 XXX
%8114:	br	 %8113 if.end958 land.lhs.true950

BASIC BLOCK land.lhs.true950
%8115:	and	 syntax XXX
%8116:	icmp	 %8115 XXX
%8117:	br	 %8116 if.end958 if.then953

BASIC BLOCK if.then953
%8118:	getelementptr	 %8106 XXX
%8119:	load	 %8118
%8120:	zext	 %8119
%8121:	or	 %8120 XXX
%8122:	trunc	 %8121
%8123:	store	 %8122 %8118
%8124:	br	 if.end958

BASIC BLOCK if.end958
%8125:	br	 for.cond959

BASIC BLOCK for.cond959
%8126:	phi	 XXX %8126 %8733
%8127:	load	 %6801
%8128:	icmp	 %8127 %6805
%8129:	br	 %8128 if.end963 if.then962

BASIC BLOCK if.then962
%8130:	br	 return

BASIC BLOCK if.end963
%8131:	br	 do.body964

BASIC BLOCK do.body964
%8132:	load	 %6801
%8133:	icmp	 %8132 %6805
%8134:	br	 %8133 if.end968 if.then967

BASIC BLOCK if.then967
%8135:	br	 return

BASIC BLOCK if.end968
%8136:	load	 %6801
%8137:	getelementptr	 %8136 XXX
%8138:	store	 %8137 %6801
%8139:	load	 %8136
%8140:	icmp	 %6807 XXX
%8141:	br	 %8140 if.end974 if.then971

BASIC BLOCK if.then971
%8142:	zext	 %8139
%8143:	getelementptr	 %6807 %8142
%8144:	load	 %8143
%8145:	br	 if.end974

BASIC BLOCK if.end974
%8146:	phi	 %8144 %8139
%8147:	br	 do.end975

BASIC BLOCK do.end975
%8148:	and	 syntax XXX
%8149:	icmp	 %8148 XXX
%8150:	br	 %8149 if.end1007 land.lhs.true978

BASIC BLOCK land.lhs.true978
%8151:	zext	 %8146
%8152:	icmp	 %8151 XXX
%8153:	br	 %8152 if.end1007 if.then982

BASIC BLOCK if.then982
%8154:	load	 %6801
%8155:	icmp	 %8154 %6805
%8156:	br	 %8155 if.end986 if.then985

BASIC BLOCK if.then985
%8157:	br	 return

BASIC BLOCK if.end986
%8158:	br	 do.body987

BASIC BLOCK do.body987
%8159:	load	 %6801
%8160:	icmp	 %8159 %6805
%8161:	br	 %8160 if.end991 if.then990

BASIC BLOCK if.then990
%8162:	br	 return

BASIC BLOCK if.end991
%8163:	load	 %6801
%8164:	getelementptr	 %8163 XXX
%8165:	store	 %8164 %6801
%8166:	load	 %8163
%8167:	icmp	 %6807 XXX
%8168:	br	 %8167 if.end997 if.then994

BASIC BLOCK if.then994
%8169:	zext	 %8166
%8170:	getelementptr	 %6807 %8169
%8171:	load	 %8170
%8172:	br	 if.end997

BASIC BLOCK if.end997
%8173:	phi	 %8171 %8166
%8174:	br	 do.end998

BASIC BLOCK do.end998
%8175:	zext	 %8173
%8176:	srem	 %8175 XXX
%8177:	shl	 XXX %8176
%8178:	zext	 %8173
%8179:	sdiv	 %8178 XXX
%8180:	sext	 %8179
%8181:	getelementptr	 %8106 %8180
%8182:	load	 %8181
%8183:	zext	 %8182
%8184:	or	 %8183 %8177
%8185:	trunc	 %8184
%8186:	store	 %8185 %8181
%8187:	br	 for.cond959

BASIC BLOCK if.end1007
%8188:	zext	 %8146
%8189:	icmp	 %8188 XXX
%8190:	br	 %8189 if.end1016 land.lhs.true1011

BASIC BLOCK land.lhs.true1011
%8191:	load	 %6801
%8192:	getelementptr	 %8003 XXX
%8193:	icmp	 %8191 %8192
%8194:	br	 %8193 if.end1016 if.then1015

BASIC BLOCK if.then1015
%8195:	br	 for.end1516

BASIC BLOCK if.end1016
%8196:	sext	 %8126
%8197:	icmp	 %8196 XXX
%8198:	br	 %8197 if.end1028 land.lhs.true1019

BASIC BLOCK land.lhs.true1019
%8199:	zext	 %8146
%8200:	icmp	 %8199 XXX
%8201:	br	 %8200 if.end1028 land.lhs.true1023

BASIC BLOCK land.lhs.true1023
%8202:	load	 %6801
%8203:	load	 %8202
%8204:	sext	 %8203
%8205:	icmp	 %8204 XXX
%8206:	br	 %8205 if.end1028 if.then1027

BASIC BLOCK if.then1027
%8207:	br	 return

BASIC BLOCK if.end1028
%8208:	zext	 %8146
%8209:	icmp	 %8208 XXX
%8210:	br	 %8209 if.else1065 land.lhs.true1032

BASIC BLOCK land.lhs.true1032
%8211:	load	 %6801
%8212:	getelementptr	 %8211 XXX
%8213:	icmp	 %8212 pattern
%8214:	br	 %8213 land.lhs.true1041 land.lhs.true1036

BASIC BLOCK land.lhs.true1036
%8215:	load	 %6801
%8216:	getelementptr	 %8215 XXX
%8217:	load	 %8216
%8218:	sext	 %8217
%8219:	icmp	 %8218 XXX
%8220:	br	 %8219 land.lhs.true1041 if.else1065

BASIC BLOCK land.lhs.true1041
%8221:	load	 %6801
%8222:	getelementptr	 %8221 XXX
%8223:	icmp	 %8222 pattern
%8224:	br	 %8223 land.lhs.true1055 land.lhs.true1045

BASIC BLOCK land.lhs.true1045
%8225:	load	 %6801
%8226:	getelementptr	 %8225 XXX
%8227:	load	 %8226
%8228:	sext	 %8227
%8229:	icmp	 %8228 XXX
%8230:	br	 %8229 land.lhs.true1055 land.lhs.true1050

BASIC BLOCK land.lhs.true1050
%8231:	load	 %6801
%8232:	getelementptr	 %8231 XXX
%8233:	load	 %8232
%8234:	sext	 %8233
%8235:	icmp	 %8234 XXX
%8236:	br	 %8235 land.lhs.true1055 if.else1065

BASIC BLOCK land.lhs.true1055
%8237:	load	 %6801
%8238:	load	 %8237
%8239:	sext	 %8238
%8240:	icmp	 %8239 XXX
%8241:	br	 %8240 if.else1065 if.then1059

BASIC BLOCK if.then1059
%8242:	call	 %6801 %6805 %6807 syntax %8106 compile_range
%8243:	icmp	 %8242 XXX
%8244:	br	 %8243 if.end1064 if.then1063

BASIC BLOCK if.then1063
%8245:	br	 return

BASIC BLOCK if.end1064
%8246:	br	 if.end1515

BASIC BLOCK if.else1065
%8247:	load	 %6801
%8248:	getelementptr	 %8247 XXX
%8249:	load	 %8248
%8250:	sext	 %8249
%8251:	icmp	 %8250 XXX
%8252:	br	 %8251 if.else1094 land.lhs.true1070

BASIC BLOCK land.lhs.true1070
%8253:	load	 %6801
%8254:	getelementptr	 %8253 XXX
%8255:	load	 %8254
%8256:	sext	 %8255
%8257:	icmp	 %8256 XXX
%8258:	br	 %8257 if.else1094 if.then1075

BASIC BLOCK if.then1075
%8259:	br	 do.body1077

BASIC BLOCK do.body1077
%8260:	load	 %6801
%8261:	icmp	 %8260 %6805
%8262:	br	 %8261 if.end1081 if.then1080

BASIC BLOCK if.then1080
%8263:	br	 return

BASIC BLOCK if.end1081
%8264:	load	 %6801
%8265:	getelementptr	 %8264 XXX
%8266:	store	 %8265 %6801
%8267:	load	 %8264
%8268:	icmp	 %6807 XXX
%8269:	br	 %8268 if.end1087 if.then1084

BASIC BLOCK if.then1084
%8270:	zext	 %8267
%8271:	getelementptr	 %6807 %8270
%8272:	load	 %8271
%8273:	br	 if.end1087

BASIC BLOCK if.end1087
%8274:	br	 do.end1088

BASIC BLOCK do.end1088
%8275:	call	 %6801 %6805 %6807 syntax %8106 compile_range
%8276:	icmp	 %8275 XXX
%8277:	br	 %8276 if.end1093 if.then1092

BASIC BLOCK if.then1092
%8278:	br	 return

BASIC BLOCK if.end1093
%8279:	br	 if.end1514

BASIC BLOCK if.else1094
%8280:	and	 syntax XXX
%8281:	icmp	 %8280 XXX
%8282:	br	 %8281 if.else1502 land.lhs.true1097

BASIC BLOCK land.lhs.true1097
%8283:	zext	 %8146
%8284:	icmp	 %8283 XXX
%8285:	br	 %8284 if.else1502 land.lhs.true1101

BASIC BLOCK land.lhs.true1101
%8286:	load	 %6801
%8287:	load	 %8286
%8288:	sext	 %8287
%8289:	icmp	 %8288 XXX
%8290:	br	 %8289 if.else1502 if.then1105

BASIC BLOCK if.then1105
%8291:	br	 do.body1106

BASIC BLOCK do.body1106
%8292:	load	 %6801
%8293:	icmp	 %8292 %6805
%8294:	br	 %8293 if.end1110 if.then1109

BASIC BLOCK if.then1109
%8295:	br	 return

BASIC BLOCK if.end1110
%8296:	load	 %6801
%8297:	getelementptr	 %8296 XXX
%8298:	store	 %8297 %6801
%8299:	load	 %8296
%8300:	icmp	 %6807 XXX
%8301:	br	 %8300 if.end1116 if.then1113

BASIC BLOCK if.then1113
%8302:	zext	 %8299
%8303:	getelementptr	 %6807 %8302
%8304:	load	 %8303
%8305:	br	 if.end1116

BASIC BLOCK if.end1116
%8306:	br	 do.end1117

BASIC BLOCK do.end1117
%8307:	load	 %6801
%8308:	icmp	 %8307 %6805
%8309:	br	 %8308 if.end1121 if.then1120

BASIC BLOCK if.then1120
%8310:	br	 return

BASIC BLOCK if.end1121
%8311:	br	 for.cond1122

BASIC BLOCK for.cond1122
%8312:	phi	 XXX %8343
%8313:	br	 do.body1123

BASIC BLOCK do.body1123
%8314:	load	 %6801
%8315:	icmp	 %8314 %6805
%8316:	br	 %8315 if.end1127 if.then1126

BASIC BLOCK if.then1126
%8317:	br	 return

BASIC BLOCK if.end1127
%8318:	load	 %6801
%8319:	getelementptr	 %8318 XXX
%8320:	store	 %8319 %6801
%8321:	load	 %8318
%8322:	icmp	 %6807 XXX
%8323:	br	 %8322 if.end1133 if.then1130

BASIC BLOCK if.then1130
%8324:	zext	 %8321
%8325:	getelementptr	 %6807 %8324
%8326:	load	 %8325
%8327:	br	 if.end1133

BASIC BLOCK if.end1133
%8328:	phi	 %8326 %8321
%8329:	br	 do.end1134

BASIC BLOCK do.end1134
%8330:	zext	 %8328
%8331:	icmp	 %8330 XXX
%8332:	br	 %8331 lor.lhs.false1138 if.then1149

BASIC BLOCK lor.lhs.false1138
%8333:	zext	 %8328
%8334:	icmp	 %8333 XXX
%8335:	br	 %8334 lor.lhs.false1142 if.then1149

BASIC BLOCK lor.lhs.false1142
%8336:	load	 %6801
%8337:	icmp	 %8336 %6805
%8338:	br	 %8337 lor.lhs.false1145 if.then1149

BASIC BLOCK lor.lhs.false1145
%8339:	zext	 %8312
%8340:	icmp	 %8339 XXX
%8341:	br	 %8340 if.end1150 if.then1149

BASIC BLOCK if.then1149
%8342:	br	 for.end1153

BASIC BLOCK if.end1150
%8343:	add	 %8312 XXX
%8344:	zext	 %8312
%8345:	getelementptr	 %6802 XXX %8344
%8346:	store	 %8328 %8345
%8347:	br	 for.cond1122

BASIC BLOCK for.end1153
%8348:	zext	 %8312
%8349:	getelementptr	 %6802 XXX %8348
%8350:	store	 XXX %8349
%8351:	zext	 %8328
%8352:	icmp	 %8351 XXX
%8353:	br	 %8352 if.else1486 land.lhs.true1159

BASIC BLOCK land.lhs.true1159
%8354:	load	 %6801
%8355:	load	 %8354
%8356:	sext	 %8355
%8357:	icmp	 %8356 XXX
%8358:	br	 %8357 if.else1486 if.then1163

BASIC BLOCK if.then1163
%8359:	getelementptr	 %6802 XXX XXX
%8360:	call	 %8359 XXX strcmp
%8361:	icmp	 %8360 XXX
%8362:	zext	 %8361
%8363:	trunc	 %8362
%8364:	getelementptr	 %6802 XXX XXX
%8365:	call	 %8364 XXX strcmp
%8366:	icmp	 %8365 XXX
%8367:	zext	 %8366
%8368:	trunc	 %8367
%8369:	getelementptr	 %6802 XXX XXX
%8370:	call	 %8369 XXX strcmp
%8371:	icmp	 %8370 XXX
%8372:	zext	 %8371
%8373:	trunc	 %8372
%8374:	getelementptr	 %6802 XXX XXX
%8375:	call	 %8374 XXX strcmp
%8376:	icmp	 %8375 XXX
%8377:	zext	 %8376
%8378:	trunc	 %8377
%8379:	getelementptr	 %6802 XXX XXX
%8380:	call	 %8379 XXX strcmp
%8381:	icmp	 %8380 XXX
%8382:	zext	 %8381
%8383:	trunc	 %8382
%8384:	getelementptr	 %6802 XXX XXX
%8385:	call	 %8384 XXX strcmp
%8386:	icmp	 %8385 XXX
%8387:	zext	 %8386
%8388:	trunc	 %8387
%8389:	getelementptr	 %6802 XXX XXX
%8390:	call	 %8389 XXX strcmp
%8391:	icmp	 %8390 XXX
%8392:	zext	 %8391
%8393:	trunc	 %8392
%8394:	getelementptr	 %6802 XXX XXX
%8395:	call	 %8394 XXX strcmp
%8396:	icmp	 %8395 XXX
%8397:	zext	 %8396
%8398:	trunc	 %8397
%8399:	getelementptr	 %6802 XXX XXX
%8400:	call	 %8399 XXX strcmp
%8401:	icmp	 %8400 XXX
%8402:	zext	 %8401
%8403:	trunc	 %8402
%8404:	getelementptr	 %6802 XXX XXX
%8405:	call	 %8404 XXX strcmp
%8406:	icmp	 %8405 XXX
%8407:	zext	 %8406
%8408:	trunc	 %8407
%8409:	getelementptr	 %6802 XXX XXX
%8410:	call	 %8409 XXX strcmp
%8411:	icmp	 %8410 XXX
%8412:	zext	 %8411
%8413:	trunc	 %8412
%8414:	getelementptr	 %6802 XXX XXX
%8415:	call	 %8414 XXX strcmp
%8416:	icmp	 %8415 XXX
%8417:	zext	 %8416
%8418:	trunc	 %8417
%8419:	getelementptr	 %6802 XXX XXX
%8420:	call	 %8419 XXX strcmp
%8421:	icmp	 %8420 XXX
%8422:	br	 %8421 lor.lhs.false1227 if.end1283

BASIC BLOCK lor.lhs.false1227
%8423:	getelementptr	 %6802 XXX XXX
%8424:	call	 %8423 XXX strcmp
%8425:	icmp	 %8424 XXX
%8426:	br	 %8425 lor.lhs.false1232 if.end1283

BASIC BLOCK lor.lhs.false1232
%8427:	getelementptr	 %6802 XXX XXX
%8428:	call	 %8427 XXX strcmp
%8429:	icmp	 %8428 XXX
%8430:	br	 %8429 lor.lhs.false1237 if.end1283

BASIC BLOCK lor.lhs.false1237
%8431:	getelementptr	 %6802 XXX XXX
%8432:	call	 %8431 XXX strcmp
%8433:	icmp	 %8432 XXX
%8434:	br	 %8433 lor.lhs.false1242 if.end1283

BASIC BLOCK lor.lhs.false1242
%8435:	getelementptr	 %6802 XXX XXX
%8436:	call	 %8435 XXX strcmp
%8437:	icmp	 %8436 XXX
%8438:	br	 %8437 lor.lhs.false1247 if.end1283

BASIC BLOCK lor.lhs.false1247
%8439:	getelementptr	 %6802 XXX XXX
%8440:	call	 %8439 XXX strcmp
%8441:	icmp	 %8440 XXX
%8442:	br	 %8441 lor.lhs.false1252 if.end1283

BASIC BLOCK lor.lhs.false1252
%8443:	getelementptr	 %6802 XXX XXX
%8444:	call	 %8443 XXX strcmp
%8445:	icmp	 %8444 XXX
%8446:	br	 %8445 lor.lhs.false1257 if.end1283

BASIC BLOCK lor.lhs.false1257
%8447:	getelementptr	 %6802 XXX XXX
%8448:	call	 %8447 XXX strcmp
%8449:	icmp	 %8448 XXX
%8450:	br	 %8449 lor.lhs.false1262 if.end1283

BASIC BLOCK lor.lhs.false1262
%8451:	getelementptr	 %6802 XXX XXX
%8452:	call	 %8451 XXX strcmp
%8453:	icmp	 %8452 XXX
%8454:	br	 %8453 lor.lhs.false1267 if.end1283

BASIC BLOCK lor.lhs.false1267
%8455:	getelementptr	 %6802 XXX XXX
%8456:	call	 %8455 XXX strcmp
%8457:	icmp	 %8456 XXX
%8458:	br	 %8457 lor.lhs.false1272 if.end1283

BASIC BLOCK lor.lhs.false1272
%8459:	getelementptr	 %6802 XXX XXX
%8460:	call	 %8459 XXX strcmp
%8461:	icmp	 %8460 XXX
%8462:	br	 %8461 lor.lhs.false1277 if.end1283

BASIC BLOCK lor.lhs.false1277
%8463:	getelementptr	 %6802 XXX XXX
%8464:	call	 %8463 XXX strcmp
%8465:	icmp	 %8464 XXX
%8466:	br	 %8465 if.then1282 if.end1283

BASIC BLOCK if.then1282
%8467:	br	 return

BASIC BLOCK if.end1283
%8468:	br	 do.body1284

BASIC BLOCK do.body1284
%8469:	load	 %6801
%8470:	icmp	 %8469 %6805
%8471:	br	 %8470 if.end1288 if.then1287

BASIC BLOCK if.then1287
%8472:	br	 return

BASIC BLOCK if.end1288
%8473:	load	 %6801
%8474:	getelementptr	 %8473 XXX
%8475:	store	 %8474 %6801
%8476:	load	 %8473
%8477:	icmp	 %6807 XXX
%8478:	br	 %8477 if.end1294 if.then1291

BASIC BLOCK if.then1291
%8479:	zext	 %8476
%8480:	getelementptr	 %6807 %8479
%8481:	load	 %8480
%8482:	br	 if.end1294

BASIC BLOCK if.end1294
%8483:	br	 do.end1295

BASIC BLOCK do.end1295
%8484:	load	 %6801
%8485:	icmp	 %8484 %6805
%8486:	br	 %8485 if.end1299 if.then1298

BASIC BLOCK if.then1298
%8487:	br	 return

BASIC BLOCK if.end1299
%8488:	br	 for.cond1300

BASIC BLOCK for.cond1300
%8489:	phi	 XXX %8688
%8490:	icmp	 %8489 XXX
%8491:	br	 %8490 for.end1485 for.body

BASIC BLOCK for.body
%8492:	sext	 %8363
%8493:	icmp	 %8492 XXX
%8494:	br	 %8493 lor.lhs.false1316 land.lhs.true1305

BASIC BLOCK land.lhs.true1305
%8495:	and	 %8489 XXX
%8496:	icmp	 %8495 XXX
%8497:	br	 %8496 lor.lhs.false1316 land.lhs.true1309

BASIC BLOCK land.lhs.true1309
%8498:	sext	 %8489
%8499:	call	 __ctype_b_loc
%8500:	load	 %8499
%8501:	getelementptr	 %8500 %8498
%8502:	load	 %8501
%8503:	zext	 %8502
%8504:	and	 %8503 XXX
%8505:	icmp	 %8504 XXX
%8506:	br	 %8505 lor.lhs.false1316 if.then1470

BASIC BLOCK lor.lhs.false1316
%8507:	sext	 %8368
%8508:	icmp	 %8507 XXX
%8509:	br	 %8508 lor.lhs.false1330 land.lhs.true1319

BASIC BLOCK land.lhs.true1319
%8510:	and	 %8489 XXX
%8511:	icmp	 %8510 XXX
%8512:	br	 %8511 lor.lhs.false1330 land.lhs.true1323

BASIC BLOCK land.lhs.true1323
%8513:	sext	 %8489
%8514:	call	 __ctype_b_loc
%8515:	load	 %8514
%8516:	getelementptr	 %8515 %8513
%8517:	load	 %8516
%8518:	zext	 %8517
%8519:	and	 %8518 XXX
%8520:	icmp	 %8519 XXX
%8521:	br	 %8520 lor.lhs.false1330 if.then1470

BASIC BLOCK lor.lhs.false1330
%8522:	sext	 %8373
%8523:	icmp	 %8522 XXX
%8524:	br	 %8523 lor.lhs.false1344 land.lhs.true1333

BASIC BLOCK land.lhs.true1333
%8525:	and	 %8489 XXX
%8526:	icmp	 %8525 XXX
%8527:	br	 %8526 lor.lhs.false1344 land.lhs.true1337

BASIC BLOCK land.lhs.true1337
%8528:	sext	 %8489
%8529:	call	 __ctype_b_loc
%8530:	load	 %8529
%8531:	getelementptr	 %8530 %8528
%8532:	load	 %8531
%8533:	zext	 %8532
%8534:	and	 %8533 XXX
%8535:	icmp	 %8534 XXX
%8536:	br	 %8535 lor.lhs.false1344 if.then1470

BASIC BLOCK lor.lhs.false1344
%8537:	sext	 %8378
%8538:	icmp	 %8537 XXX
%8539:	br	 %8538 lor.lhs.false1358 land.lhs.true1347

BASIC BLOCK land.lhs.true1347
%8540:	and	 %8489 XXX
%8541:	icmp	 %8540 XXX
%8542:	br	 %8541 lor.lhs.false1358 land.lhs.true1351

BASIC BLOCK land.lhs.true1351
%8543:	sext	 %8489
%8544:	call	 __ctype_b_loc
%8545:	load	 %8544
%8546:	getelementptr	 %8545 %8543
%8547:	load	 %8546
%8548:	zext	 %8547
%8549:	and	 %8548 XXX
%8550:	icmp	 %8549 XXX
%8551:	br	 %8550 lor.lhs.false1358 if.then1470

BASIC BLOCK lor.lhs.false1358
%8552:	sext	 %8383
%8553:	icmp	 %8552 XXX
%8554:	br	 %8553 lor.lhs.false1372 land.lhs.true1361

BASIC BLOCK land.lhs.true1361
%8555:	and	 %8489 XXX
%8556:	icmp	 %8555 XXX
%8557:	br	 %8556 lor.lhs.false1372 land.lhs.true1365

BASIC BLOCK land.lhs.true1365
%8558:	sext	 %8489
%8559:	call	 __ctype_b_loc
%8560:	load	 %8559
%8561:	getelementptr	 %8560 %8558
%8562:	load	 %8561
%8563:	zext	 %8562
%8564:	and	 %8563 XXX
%8565:	icmp	 %8564 XXX
%8566:	br	 %8565 lor.lhs.false1372 if.then1470

BASIC BLOCK lor.lhs.false1372
%8567:	sext	 %8388
%8568:	icmp	 %8567 XXX
%8569:	br	 %8568 lor.lhs.false1386 land.lhs.true1375

BASIC BLOCK land.lhs.true1375
%8570:	and	 %8489 XXX
%8571:	icmp	 %8570 XXX
%8572:	br	 %8571 lor.lhs.false1386 land.lhs.true1379

BASIC BLOCK land.lhs.true1379
%8573:	sext	 %8489
%8574:	call	 __ctype_b_loc
%8575:	load	 %8574
%8576:	getelementptr	 %8575 %8573
%8577:	load	 %8576
%8578:	zext	 %8577
%8579:	and	 %8578 XXX
%8580:	icmp	 %8579 XXX
%8581:	br	 %8580 lor.lhs.false1386 if.then1470

BASIC BLOCK lor.lhs.false1386
%8582:	sext	 %8393
%8583:	icmp	 %8582 XXX
%8584:	br	 %8583 lor.lhs.false1400 land.lhs.true1389

BASIC BLOCK land.lhs.true1389
%8585:	and	 %8489 XXX
%8586:	icmp	 %8585 XXX
%8587:	br	 %8586 lor.lhs.false1400 land.lhs.true1393

BASIC BLOCK land.lhs.true1393
%8588:	sext	 %8489
%8589:	call	 __ctype_b_loc
%8590:	load	 %8589
%8591:	getelementptr	 %8590 %8588
%8592:	load	 %8591
%8593:	zext	 %8592
%8594:	and	 %8593 XXX
%8595:	icmp	 %8594 XXX
%8596:	br	 %8595 lor.lhs.false1400 if.then1470

BASIC BLOCK lor.lhs.false1400
%8597:	sext	 %8398
%8598:	icmp	 %8597 XXX
%8599:	br	 %8598 lor.lhs.false1414 land.lhs.true1403

BASIC BLOCK land.lhs.true1403
%8600:	and	 %8489 XXX
%8601:	icmp	 %8600 XXX
%8602:	br	 %8601 lor.lhs.false1414 land.lhs.true1407

BASIC BLOCK land.lhs.true1407
%8603:	sext	 %8489
%8604:	call	 __ctype_b_loc
%8605:	load	 %8604
%8606:	getelementptr	 %8605 %8603
%8607:	load	 %8606
%8608:	zext	 %8607
%8609:	and	 %8608 XXX
%8610:	icmp	 %8609 XXX
%8611:	br	 %8610 lor.lhs.false1414 if.then1470

BASIC BLOCK lor.lhs.false1414
%8612:	sext	 %8403
%8613:	icmp	 %8612 XXX
%8614:	br	 %8613 lor.lhs.false1428 land.lhs.true1417

BASIC BLOCK land.lhs.true1417
%8615:	and	 %8489 XXX
%8616:	icmp	 %8615 XXX
%8617:	br	 %8616 lor.lhs.false1428 land.lhs.true1421

BASIC BLOCK land.lhs.true1421
%8618:	sext	 %8489
%8619:	call	 __ctype_b_loc
%8620:	load	 %8619
%8621:	getelementptr	 %8620 %8618
%8622:	load	 %8621
%8623:	zext	 %8622
%8624:	and	 %8623 XXX
%8625:	icmp	 %8624 XXX
%8626:	br	 %8625 lor.lhs.false1428 if.then1470

BASIC BLOCK lor.lhs.false1428
%8627:	sext	 %8408
%8628:	icmp	 %8627 XXX
%8629:	br	 %8628 lor.lhs.false1442 land.lhs.true1431

BASIC BLOCK land.lhs.true1431
%8630:	and	 %8489 XXX
%8631:	icmp	 %8630 XXX
%8632:	br	 %8631 lor.lhs.false1442 land.lhs.true1435

BASIC BLOCK land.lhs.true1435
%8633:	sext	 %8489
%8634:	call	 __ctype_b_loc
%8635:	load	 %8634
%8636:	getelementptr	 %8635 %8633
%8637:	load	 %8636
%8638:	zext	 %8637
%8639:	and	 %8638 XXX
%8640:	icmp	 %8639 XXX
%8641:	br	 %8640 lor.lhs.false1442 if.then1470

BASIC BLOCK lor.lhs.false1442
%8642:	sext	 %8413
%8643:	icmp	 %8642 XXX
%8644:	br	 %8643 lor.lhs.false1456 land.lhs.true1445

BASIC BLOCK land.lhs.true1445
%8645:	and	 %8489 XXX
%8646:	icmp	 %8645 XXX
%8647:	br	 %8646 lor.lhs.false1456 land.lhs.true1449

BASIC BLOCK land.lhs.true1449
%8648:	sext	 %8489
%8649:	call	 __ctype_b_loc
%8650:	load	 %8649
%8651:	getelementptr	 %8650 %8648
%8652:	load	 %8651
%8653:	zext	 %8652
%8654:	and	 %8653 XXX
%8655:	icmp	 %8654 XXX
%8656:	br	 %8655 lor.lhs.false1456 if.then1470

BASIC BLOCK lor.lhs.false1456
%8657:	sext	 %8418
%8658:	icmp	 %8657 XXX
%8659:	br	 %8658 if.end1483 land.lhs.true1459

BASIC BLOCK land.lhs.true1459
%8660:	and	 %8489 XXX
%8661:	icmp	 %8660 XXX
%8662:	br	 %8661 if.end1483 land.lhs.true1463

BASIC BLOCK land.lhs.true1463
%8663:	sext	 %8489
%8664:	call	 __ctype_b_loc
%8665:	load	 %8664
%8666:	getelementptr	 %8665 %8663
%8667:	load	 %8666
%8668:	zext	 %8667
%8669:	and	 %8668 XXX
%8670:	icmp	 %8669 XXX
%8671:	br	 %8670 if.end1483 if.then1470

BASIC BLOCK if.then1470
%8672:	trunc	 %8489
%8673:	zext	 %8672
%8674:	srem	 %8673 XXX
%8675:	shl	 XXX %8674
%8676:	trunc	 %8489
%8677:	zext	 %8676
%8678:	sdiv	 %8677 XXX
%8679:	sext	 %8678
%8680:	getelementptr	 %8106 %8679
%8681:	load	 %8680
%8682:	zext	 %8681
%8683:	or	 %8682 %8675
%8684:	trunc	 %8683
%8685:	store	 %8684 %8680
%8686:	br	 if.end1483

BASIC BLOCK if.end1483
%8687:	br	 for.inc

BASIC BLOCK for.inc
%8688:	add	 %8489 XXX
%8689:	br	 for.cond1300

BASIC BLOCK for.end1485
%8690:	br	 if.end1501

BASIC BLOCK if.else1486
%8691:	add	 %8312 XXX
%8692:	br	 while.cond1488

BASIC BLOCK while.cond1488
%8693:	phi	 %8691 %8694
%8694:	add	 %8693 XXX
%8695:	icmp	 %8693 XXX
%8696:	br	 %8695 while.end1492 while.body1490

BASIC BLOCK while.body1490
%8697:	load	 %6801
%8698:	getelementptr	 %8697 XXX
%8699:	store	 %8698 %6801
%8700:	br	 while.cond1488

BASIC BLOCK while.end1492
%8701:	getelementptr	 %8106 XXX
%8702:	load	 %8701
%8703:	zext	 %8702
%8704:	or	 %8703 XXX
%8705:	trunc	 %8704
%8706:	store	 %8705 %8701
%8707:	getelementptr	 %8106 XXX
%8708:	load	 %8707
%8709:	zext	 %8708
%8710:	or	 %8709 XXX
%8711:	trunc	 %8710
%8712:	store	 %8711 %8707
%8713:	br	 if.end1501

BASIC BLOCK if.end1501
%8714:	phi	 XXX XXX
%8715:	br	 if.end1513

BASIC BLOCK if.else1502
%8716:	zext	 %8146
%8717:	srem	 %8716 XXX
%8718:	shl	 XXX %8717
%8719:	zext	 %8146
%8720:	sdiv	 %8719 XXX
%8721:	sext	 %8720
%8722:	getelementptr	 %8106 %8721
%8723:	load	 %8722
%8724:	zext	 %8723
%8725:	or	 %8724 %8718
%8726:	trunc	 %8725
%8727:	store	 %8726 %8722
%8728:	br	 if.end1513

BASIC BLOCK if.end1513
%8729:	phi	 %8714 XXX
%8730:	br	 if.end1514

BASIC BLOCK if.end1514
%8731:	phi	 %8126 %8729
%8732:	br	 if.end1515

BASIC BLOCK if.end1515
%8733:	phi	 %8731 %8126
%8734:	br	 for.cond959

BASIC BLOCK for.end1516
%8735:	br	 while.cond1517

BASIC BLOCK while.cond1517
%8736:	getelementptr	 %8106 XXX
%8737:	load	 %8736
%8738:	zext	 %8737
%8739:	icmp	 %8738 XXX
%8740:	br	 %8739 land.end land.rhs

BASIC BLOCK land.rhs
%8741:	getelementptr	 %8106 XXX
%8742:	load	 %8741
%8743:	zext	 %8742
%8744:	sub	 %8743 XXX
%8745:	sext	 %8744
%8746:	getelementptr	 %8106 %8745
%8747:	load	 %8746
%8748:	zext	 %8747
%8749:	icmp	 %8748 XXX
%8750:	br	 land.end

BASIC BLOCK land.end
%8751:	phi	 XXX %8749
%8752:	br	 %8751 while.end1533 while.body1530

BASIC BLOCK while.body1530
%8753:	getelementptr	 %8106 XXX
%8754:	load	 %8753
%8755:	add	 %8754 XXX
%8756:	store	 %8755 %8753
%8757:	br	 while.cond1517

BASIC BLOCK while.end1533
%8758:	getelementptr	 %8106 XXX
%8759:	load	 %8758
%8760:	zext	 %8759
%8761:	sext	 %8760
%8762:	getelementptr	 %8106 %8761
%8763:	br	 sw.epilog3580

BASIC BLOCK sw.bb1538
%8764:	and	 syntax XXX
%8765:	icmp	 %8764 XXX
%8766:	br	 %8765 if.else1542 if.then1541

BASIC BLOCK if.then1541
%8767:	br	 handle_open

BASIC BLOCK if.else1542
%8768:	br	 normal_char

BASIC BLOCK sw.bb1543
%8769:	and	 syntax XXX
%8770:	icmp	 %8769 XXX
%8771:	br	 %8770 if.else1547 if.then1546

BASIC BLOCK if.then1546
%8772:	br	 handle_close

BASIC BLOCK if.else1547
%8773:	br	 normal_char

BASIC BLOCK sw.bb1548
%8774:	and	 syntax XXX
%8775:	icmp	 %8774 XXX
%8776:	br	 %8775 if.else1552 if.then1551

BASIC BLOCK if.then1551
%8777:	br	 handle_alt

BASIC BLOCK if.else1552
%8778:	br	 normal_char

BASIC BLOCK sw.bb1553
%8779:	and	 syntax XXX
%8780:	icmp	 %8779 XXX
%8781:	br	 %8780 if.else1557 if.then1556

BASIC BLOCK if.then1556
%8782:	br	 handle_alt

BASIC BLOCK if.else1557
%8783:	br	 normal_char

BASIC BLOCK sw.bb1558
%8784:	and	 syntax XXX
%8785:	icmp	 %8784 XXX
%8786:	br	 %8785 if.else1565 land.lhs.true1561

BASIC BLOCK land.lhs.true1561
%8787:	and	 syntax XXX
%8788:	icmp	 %8787 XXX
%8789:	br	 %8788 if.else1565 if.then1564

BASIC BLOCK if.then1564
%8790:	br	 handle_interval

BASIC BLOCK if.else1565
%8791:	br	 normal_char

BASIC BLOCK sw.bb1566
%8792:	load	 %6801
%8793:	icmp	 %8792 %6805
%8794:	br	 %8793 if.end1570 if.then1569

BASIC BLOCK if.then1569
%8795:	br	 return

BASIC BLOCK if.end1570
%8796:	br	 do.body1571

BASIC BLOCK do.body1571
%8797:	load	 %6801
%8798:	icmp	 %8797 %6805
%8799:	br	 %8798 if.end1575 if.then1574

BASIC BLOCK if.then1574
%8800:	br	 return

BASIC BLOCK if.end1575
%8801:	load	 %6801
%8802:	getelementptr	 %8801 XXX
%8803:	store	 %8802 %6801
%8804:	load	 %8801
%8805:	br	 do.end1577

BASIC BLOCK do.end1577
%8806:	zext	 %8804
%8807:	switch	 %8806 sw.default XXX sw.bb1579 XXX sw.bb1743 XXX sw.bb1993 XXX sw.bb2171 XXX sw.bb2598 XXX sw.bb2678 XXX sw.bb2758 XXX sw.bb2838 XXX sw.bb2918 XXX sw.bb2998 XXX sw.bb3078 XXX sw.bb3158 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3238 XXX sw.bb3336 XXX sw.bb3336

BASIC BLOCK sw.bb1579
%8808:	and	 syntax XXX
%8809:	icmp	 %8808 XXX
%8810:	br	 %8809 if.end1583 if.then1582

BASIC BLOCK if.then1582
%8811:	br	 normal_backslash

BASIC BLOCK if.end1583
%8812:	br	 handle_open

BASIC BLOCK handle_open
%8813:	getelementptr	 bufp XXX XXX
%8814:	load	 %8813
%8815:	add	 %8814 XXX
%8816:	store	 %8815 %8813
%8817:	add	 %6869 XXX
%8818:	getelementptr	 %6800 XXX XXX
%8819:	load	 %8818
%8820:	getelementptr	 %6800 XXX XXX
%8821:	load	 %8820
%8822:	icmp	 %8819 %8821
%8823:	br	 %8822 if.end1605 if.then1591

BASIC BLOCK if.then1591
%8824:	getelementptr	 %6800 XXX XXX
%8825:	load	 %8824
%8826:	bitcast	 %8825
%8827:	getelementptr	 %6800 XXX XXX
%8828:	load	 %8827
%8829:	shl	 %8828 XXX
%8830:	zext	 %8829
%8831:	mul	 %8830 XXX
%8832:	call	 %8826 %8831 realloc
%8833:	bitcast	 %8832
%8834:	getelementptr	 %6800 XXX XXX
%8835:	store	 %8833 %8834
%8836:	getelementptr	 %6800 XXX XXX
%8837:	load	 %8836
%8838:	icmp	 %8837 XXX
%8839:	br	 %8838 if.end1602 if.then1601

BASIC BLOCK if.then1601
%8840:	br	 return

BASIC BLOCK if.end1602
%8841:	getelementptr	 %6800 XXX XXX
%8842:	load	 %8841
%8843:	shl	 %8842 XXX
%8844:	store	 %8843 %8841
%8845:	br	 if.end1605

BASIC BLOCK if.end1605
%8846:	getelementptr	 bufp XXX XXX
%8847:	load	 %8846
%8848:	ptrtoint	 %6871
%8849:	ptrtoint	 %8847
%8850:	sub	 %8848 %8849
%8851:	trunc	 %8850
%8852:	getelementptr	 %6800 XXX XXX
%8853:	load	 %8852
%8854:	zext	 %8853
%8855:	getelementptr	 %6800 XXX XXX
%8856:	load	 %8855
%8857:	getelementptr	 %8856 %8854
%8858:	getelementptr	 %8857 XXX XXX
%8859:	store	 %8851 %8858
%8860:	icmp	 %6870 XXX
%8861:	br	 %8860 cond.false1622 cond.true1616

BASIC BLOCK cond.true1616
%8862:	getelementptr	 bufp XXX XXX
%8863:	load	 %8862
%8864:	ptrtoint	 %6870
%8865:	ptrtoint	 %8863
%8866:	sub	 %8864 %8865
%8867:	add	 %8866 XXX
%8868:	br	 cond.end1623

BASIC BLOCK cond.false1622
%8869:	br	 cond.end1623

BASIC BLOCK cond.end1623
%8870:	phi	 %8867 XXX
%8871:	trunc	 %8870
%8872:	getelementptr	 %6800 XXX XXX
%8873:	load	 %8872
%8874:	zext	 %8873
%8875:	getelementptr	 %6800 XXX XXX
%8876:	load	 %8875
%8877:	getelementptr	 %8876 %8874
%8878:	getelementptr	 %8877 XXX XXX
%8879:	store	 %8871 %8878
%8880:	getelementptr	 bufp XXX XXX
%8881:	load	 %8880
%8882:	ptrtoint	 %6874
%8883:	ptrtoint	 %8881
%8884:	sub	 %8882 %8883
%8885:	trunc	 %8884
%8886:	getelementptr	 %6800 XXX XXX
%8887:	load	 %8886
%8888:	zext	 %8887
%8889:	getelementptr	 %6800 XXX XXX
%8890:	load	 %8889
%8891:	getelementptr	 %8890 %8888
%8892:	getelementptr	 %8891 XXX XXX
%8893:	store	 %8885 %8892
%8894:	getelementptr	 %6800 XXX XXX
%8895:	load	 %8894
%8896:	zext	 %8895
%8897:	getelementptr	 %6800 XXX XXX
%8898:	load	 %8897
%8899:	getelementptr	 %8898 %8896
%8900:	getelementptr	 %8899 XXX XXX
%8901:	store	 %8817 %8900
%8902:	icmp	 %8817 XXX
%8903:	br	 %8902 if.end1740 if.then1647

BASIC BLOCK if.then1647
%8904:	getelementptr	 bufp XXX XXX
%8905:	load	 %8904
%8906:	ptrtoint	 %6874
%8907:	ptrtoint	 %8905
%8908:	sub	 %8906 %8907
%8909:	add	 %8908 XXX
%8910:	trunc	 %8909
%8911:	getelementptr	 %6800 XXX XXX
%8912:	load	 %8911
%8913:	zext	 %8912
%8914:	getelementptr	 %6800 XXX XXX
%8915:	load	 %8914
%8916:	getelementptr	 %8915 %8913
%8917:	getelementptr	 %8916 XXX XXX
%8918:	store	 %8910 %8917
%8919:	br	 do.body1658

BASIC BLOCK do.body1658
%8920:	br	 while.cond1659

BASIC BLOCK while.cond1659
%8921:	phi	 %6870 %9014
%8922:	phi	 %6871 %9015
%8923:	phi	 %6872 %9016
%8924:	phi	 %6873 %9017
%8925:	phi	 %6874 %9018
%8926:	getelementptr	 bufp XXX XXX
%8927:	load	 %8926
%8928:	ptrtoint	 %8925
%8929:	ptrtoint	 %8927
%8930:	sub	 %8928 %8929
%8931:	add	 %8930 XXX
%8932:	getelementptr	 bufp XXX XXX
%8933:	load	 %8932
%8934:	icmp	 %8931 %8933
%8935:	br	 %8934 while.end1734 while.body1668

BASIC BLOCK while.body1668
%8936:	br	 do.body1669

BASIC BLOCK do.body1669
%8937:	getelementptr	 bufp XXX XXX
%8938:	load	 %8937
%8939:	getelementptr	 bufp XXX XXX
%8940:	load	 %8939
%8941:	icmp	 %8940 XXX
%8942:	br	 %8941 if.end1676 if.then1675

BASIC BLOCK if.then1675
%8943:	br	 return

BASIC BLOCK if.end1676
%8944:	getelementptr	 bufp XXX XXX
%8945:	load	 %8944
%8946:	shl	 %8945 XXX
%8947:	store	 %8946 %8944
%8948:	getelementptr	 bufp XXX XXX
%8949:	load	 %8948
%8950:	icmp	 %8949 XXX
%8951:	br	 %8950 if.end1684 if.then1682

BASIC BLOCK if.then1682
%8952:	getelementptr	 bufp XXX XXX
%8953:	store	 XXX %8952
%8954:	br	 if.end1684

BASIC BLOCK if.end1684
%8955:	getelementptr	 bufp XXX XXX
%8956:	load	 %8955
%8957:	getelementptr	 bufp XXX XXX
%8958:	load	 %8957
%8959:	call	 %8956 %8958 realloc
%8960:	getelementptr	 bufp XXX XXX
%8961:	store	 %8959 %8960
%8962:	getelementptr	 bufp XXX XXX
%8963:	load	 %8962
%8964:	icmp	 %8963 XXX
%8965:	br	 %8964 if.end1693 if.then1692

BASIC BLOCK if.then1692
%8966:	br	 return

BASIC BLOCK if.end1693
%8967:	getelementptr	 bufp XXX XXX
%8968:	load	 %8967
%8969:	icmp	 %8938 %8968
%8970:	br	 %8969 if.end1732 if.then1697

BASIC BLOCK if.then1697
%8971:	ptrtoint	 %8925
%8972:	ptrtoint	 %8938
%8973:	sub	 %8971 %8972
%8974:	getelementptr	 bufp XXX XXX
%8975:	load	 %8974
%8976:	getelementptr	 %8975 %8973
%8977:	ptrtoint	 %8922
%8978:	ptrtoint	 %8938
%8979:	sub	 %8977 %8978
%8980:	getelementptr	 bufp XXX XXX
%8981:	load	 %8980
%8982:	getelementptr	 %8981 %8979
%8983:	icmp	 %8921 XXX
%8984:	br	 %8983 if.end1715 if.then1709

BASIC BLOCK if.then1709
%8985:	ptrtoint	 %8921
%8986:	ptrtoint	 %8938
%8987:	sub	 %8985 %8986
%8988:	getelementptr	 bufp XXX XXX
%8989:	load	 %8988
%8990:	getelementptr	 %8989 %8987
%8991:	br	 if.end1715

BASIC BLOCK if.end1715
%8992:	phi	 %8990 %8921
%8993:	icmp	 %8923 XXX
%8994:	br	 %8993 if.end1723 if.then1717

BASIC BLOCK if.then1717
%8995:	ptrtoint	 %8923
%8996:	ptrtoint	 %8938
%8997:	sub	 %8995 %8996
%8998:	getelementptr	 bufp XXX XXX
%8999:	load	 %8998
%9000:	getelementptr	 %8999 %8997
%9001:	br	 if.end1723

BASIC BLOCK if.end1723
%9002:	phi	 %9000 %8923
%9003:	icmp	 %8924 XXX
%9004:	br	 %9003 if.end1731 if.then1725

BASIC BLOCK if.then1725
%9005:	ptrtoint	 %8924
%9006:	ptrtoint	 %8938
%9007:	sub	 %9005 %9006
%9008:	getelementptr	 bufp XXX XXX
%9009:	load	 %9008
%9010:	getelementptr	 %9009 %9007
%9011:	br	 if.end1731

BASIC BLOCK if.end1731
%9012:	phi	 %9010 %8924
%9013:	br	 if.end1732

BASIC BLOCK if.end1732
%9014:	phi	 %8992 %8921
%9015:	phi	 %8982 %8922
%9016:	phi	 %9002 %8923
%9017:	phi	 %9012 %8924
%9018:	phi	 %8976 %8925
%9019:	br	 do.end1733

BASIC BLOCK do.end1733
%9020:	br	 while.cond1659

BASIC BLOCK while.end1734
%9021:	getelementptr	 %8925 XXX
%9022:	store	 XXX %8925
%9023:	trunc	 %8817
%9024:	getelementptr	 %9021 XXX
%9025:	store	 %9023 %9021
%9026:	getelementptr	 %9024 XXX
%9027:	store	 XXX %9024
%9028:	br	 do.end1739

BASIC BLOCK do.end1739
%9029:	br	 if.end1740

BASIC BLOCK if.end1740
%9030:	phi	 %9026 %6874
%9031:	getelementptr	 %6800 XXX XXX
%9032:	load	 %9031
%9033:	add	 %9032 XXX
%9034:	store	 %9033 %9031
%9035:	br	 sw.epilog

BASIC BLOCK sw.bb1743
%9036:	and	 syntax XXX
%9037:	icmp	 %9036 XXX
%9038:	br	 %9037 if.end1747 if.then1746

BASIC BLOCK if.then1746
%9039:	br	 normal_backslash

BASIC BLOCK if.end1747
%9040:	getelementptr	 %6800 XXX XXX
%9041:	load	 %9040
%9042:	icmp	 %9041 XXX
%9043:	br	 %9042 if.end1756 if.then1751

BASIC BLOCK if.then1751
%9044:	and	 syntax XXX
%9045:	icmp	 %9044 XXX
%9046:	br	 %9045 if.else1755 if.then1754

BASIC BLOCK if.then1754
%9047:	br	 normal_backslash

BASIC BLOCK if.else1755
%9048:	br	 return

BASIC BLOCK if.end1756
%9049:	br	 handle_close

BASIC BLOCK handle_close
%9050:	phi	 %8804 %6893
%9051:	icmp	 %6870 XXX
%9052:	br	 %9051 if.end1843 if.then1758

BASIC BLOCK if.then1758
%9053:	br	 do.body1759

BASIC BLOCK do.body1759
%9054:	br	 while.cond1760

BASIC BLOCK while.cond1760
%9055:	phi	 %6870 %9148
%9056:	phi	 %6871 %9149
%9057:	phi	 %6872 %9150
%9058:	phi	 %6873 %9151
%9059:	phi	 %6874 %9152
%9060:	getelementptr	 bufp XXX XXX
%9061:	load	 %9060
%9062:	ptrtoint	 %9059
%9063:	ptrtoint	 %9061
%9064:	sub	 %9062 %9063
%9065:	add	 %9064 XXX
%9066:	getelementptr	 bufp XXX XXX
%9067:	load	 %9066
%9068:	icmp	 %9065 %9067
%9069:	br	 %9068 while.end1835 while.body1769

BASIC BLOCK while.body1769
%9070:	br	 do.body1770

BASIC BLOCK do.body1770
%9071:	getelementptr	 bufp XXX XXX
%9072:	load	 %9071
%9073:	getelementptr	 bufp XXX XXX
%9074:	load	 %9073
%9075:	icmp	 %9074 XXX
%9076:	br	 %9075 if.end1777 if.then1776

BASIC BLOCK if.then1776
%9077:	br	 return

BASIC BLOCK if.end1777
%9078:	getelementptr	 bufp XXX XXX
%9079:	load	 %9078
%9080:	shl	 %9079 XXX
%9081:	store	 %9080 %9078
%9082:	getelementptr	 bufp XXX XXX
%9083:	load	 %9082
%9084:	icmp	 %9083 XXX
%9085:	br	 %9084 if.end1785 if.then1783

BASIC BLOCK if.then1783
%9086:	getelementptr	 bufp XXX XXX
%9087:	store	 XXX %9086
%9088:	br	 if.end1785

BASIC BLOCK if.end1785
%9089:	getelementptr	 bufp XXX XXX
%9090:	load	 %9089
%9091:	getelementptr	 bufp XXX XXX
%9092:	load	 %9091
%9093:	call	 %9090 %9092 realloc
%9094:	getelementptr	 bufp XXX XXX
%9095:	store	 %9093 %9094
%9096:	getelementptr	 bufp XXX XXX
%9097:	load	 %9096
%9098:	icmp	 %9097 XXX
%9099:	br	 %9098 if.end1794 if.then1793

BASIC BLOCK if.then1793
%9100:	br	 return

BASIC BLOCK if.end1794
%9101:	getelementptr	 bufp XXX XXX
%9102:	load	 %9101
%9103:	icmp	 %9072 %9102
%9104:	br	 %9103 if.end1833 if.then1798

BASIC BLOCK if.then1798
%9105:	ptrtoint	 %9059
%9106:	ptrtoint	 %9072
%9107:	sub	 %9105 %9106
%9108:	getelementptr	 bufp XXX XXX
%9109:	load	 %9108
%9110:	getelementptr	 %9109 %9107
%9111:	ptrtoint	 %9056
%9112:	ptrtoint	 %9072
%9113:	sub	 %9111 %9112
%9114:	getelementptr	 bufp XXX XXX
%9115:	load	 %9114
%9116:	getelementptr	 %9115 %9113
%9117:	icmp	 %9055 XXX
%9118:	br	 %9117 if.end1816 if.then1810

BASIC BLOCK if.then1810
%9119:	ptrtoint	 %9055
%9120:	ptrtoint	 %9072
%9121:	sub	 %9119 %9120
%9122:	getelementptr	 bufp XXX XXX
%9123:	load	 %9122
%9124:	getelementptr	 %9123 %9121
%9125:	br	 if.end1816

BASIC BLOCK if.end1816
%9126:	phi	 %9124 %9055
%9127:	icmp	 %9057 XXX
%9128:	br	 %9127 if.end1824 if.then1818

BASIC BLOCK if.then1818
%9129:	ptrtoint	 %9057
%9130:	ptrtoint	 %9072
%9131:	sub	 %9129 %9130
%9132:	getelementptr	 bufp XXX XXX
%9133:	load	 %9132
%9134:	getelementptr	 %9133 %9131
%9135:	br	 if.end1824

BASIC BLOCK if.end1824
%9136:	phi	 %9134 %9057
%9137:	icmp	 %9058 XXX
%9138:	br	 %9137 if.end1832 if.then1826

BASIC BLOCK if.then1826
%9139:	ptrtoint	 %9058
%9140:	ptrtoint	 %9072
%9141:	sub	 %9139 %9140
%9142:	getelementptr	 bufp XXX XXX
%9143:	load	 %9142
%9144:	getelementptr	 %9143 %9141
%9145:	br	 if.end1832

BASIC BLOCK if.end1832
%9146:	phi	 %9144 %9058
%9147:	br	 if.end1833

BASIC BLOCK if.end1833
%9148:	phi	 %9126 %9055
%9149:	phi	 %9116 %9056
%9150:	phi	 %9136 %9057
%9151:	phi	 %9146 %9058
%9152:	phi	 %9110 %9059
%9153:	br	 do.end1834

BASIC BLOCK do.end1834
%9154:	br	 while.cond1760

BASIC BLOCK while.end1835
%9155:	getelementptr	 %9059 XXX
%9156:	store	 XXX %9059
%9157:	br	 do.end1837

BASIC BLOCK do.end1837
%9158:	getelementptr	 %9155 XXX
%9159:	ptrtoint	 %9158
%9160:	ptrtoint	 %9055
%9161:	sub	 %9159 %9160
%9162:	sub	 %9161 XXX
%9163:	call	 XXX %9055 %9162 XXX
%9164:	br	 if.end1843

BASIC BLOCK if.end1843
%9165:	phi	 %9055 %6870
%9166:	phi	 %9056 %6871
%9167:	phi	 %9057 %6872
%9168:	phi	 %9058 %6873
%9169:	phi	 %9155 %6874
%9170:	getelementptr	 %6800 XXX XXX
%9171:	load	 %9170
%9172:	icmp	 %9171 XXX
%9173:	br	 %9172 if.end1852 if.then1847

BASIC BLOCK if.then1847
%9174:	and	 syntax XXX
%9175:	icmp	 %9174 XXX
%9176:	br	 %9175 if.else1851 if.then1850

BASIC BLOCK if.then1850
%9177:	br	 normal_char

BASIC BLOCK if.else1851
%9178:	br	 return

BASIC BLOCK if.end1852
%9179:	getelementptr	 %6800 XXX XXX
%9180:	load	 %9179
%9181:	add	 %9180 XXX
%9182:	store	 %9181 %9179
%9183:	getelementptr	 bufp XXX XXX
%9184:	load	 %9183
%9185:	getelementptr	 %6800 XXX XXX
%9186:	load	 %9185
%9187:	zext	 %9186
%9188:	getelementptr	 %6800 XXX XXX
%9189:	load	 %9188
%9190:	getelementptr	 %9189 %9187
%9191:	getelementptr	 %9190 XXX XXX
%9192:	load	 %9191
%9193:	sext	 %9192
%9194:	getelementptr	 %9184 %9193
%9195:	getelementptr	 %6800 XXX XXX
%9196:	load	 %9195
%9197:	zext	 %9196
%9198:	getelementptr	 %6800 XXX XXX
%9199:	load	 %9198
%9200:	getelementptr	 %9199 %9197
%9201:	getelementptr	 %9200 XXX XXX
%9202:	load	 %9201
%9203:	icmp	 %9202 XXX
%9204:	br	 %9203 cond.false1879 cond.true1869

BASIC BLOCK cond.true1869
%9205:	getelementptr	 bufp XXX XXX
%9206:	load	 %9205
%9207:	getelementptr	 %6800 XXX XXX
%9208:	load	 %9207
%9209:	zext	 %9208
%9210:	getelementptr	 %6800 XXX XXX
%9211:	load	 %9210
%9212:	getelementptr	 %9211 %9209
%9213:	getelementptr	 %9212 XXX XXX
%9214:	load	 %9213
%9215:	sext	 %9214
%9216:	getelementptr	 %9206 %9215
%9217:	getelementptr	 %9216 XXX
%9218:	br	 cond.end1880

BASIC BLOCK cond.false1879
%9219:	br	 cond.end1880

BASIC BLOCK cond.end1880
%9220:	phi	 %9217 XXX
%9221:	getelementptr	 bufp XXX XXX
%9222:	load	 %9221
%9223:	getelementptr	 %6800 XXX XXX
%9224:	load	 %9223
%9225:	zext	 %9224
%9226:	getelementptr	 %6800 XXX XXX
%9227:	load	 %9226
%9228:	getelementptr	 %9227 %9225
%9229:	getelementptr	 %9228 XXX XXX
%9230:	load	 %9229
%9231:	sext	 %9230
%9232:	getelementptr	 %9222 %9231
%9233:	getelementptr	 %6800 XXX XXX
%9234:	load	 %9233
%9235:	zext	 %9234
%9236:	getelementptr	 %6800 XXX XXX
%9237:	load	 %9236
%9238:	getelementptr	 %9237 %9235
%9239:	getelementptr	 %9238 XXX XXX
%9240:	load	 %9239
%9241:	icmp	 %9240 XXX
%9242:	br	 %9241 if.end1992 if.then1897

BASIC BLOCK if.then1897
%9243:	getelementptr	 bufp XXX XXX
%9244:	load	 %9243
%9245:	getelementptr	 %6800 XXX XXX
%9246:	load	 %9245
%9247:	zext	 %9246
%9248:	getelementptr	 %6800 XXX XXX
%9249:	load	 %9248
%9250:	getelementptr	 %9249 %9247
%9251:	getelementptr	 %9250 XXX XXX
%9252:	load	 %9251
%9253:	sext	 %9252
%9254:	getelementptr	 %9244 %9253
%9255:	sub	 %6869 %9240
%9256:	trunc	 %9255
%9257:	store	 %9256 %9254
%9258:	br	 do.body1908

BASIC BLOCK do.body1908
%9259:	br	 while.cond1909

BASIC BLOCK while.cond1909
%9260:	phi	 %9220 %9353
%9261:	phi	 %9194 %9354
%9262:	phi	 %9232 %9355
%9263:	phi	 XXX %9356
%9264:	phi	 %9169 %9357
%9265:	getelementptr	 bufp XXX XXX
%9266:	load	 %9265
%9267:	ptrtoint	 %9264
%9268:	ptrtoint	 %9266
%9269:	sub	 %9267 %9268
%9270:	add	 %9269 XXX
%9271:	getelementptr	 bufp XXX XXX
%9272:	load	 %9271
%9273:	icmp	 %9270 %9272
%9274:	br	 %9273 while.end1984 while.body1918

BASIC BLOCK while.body1918
%9275:	br	 do.body1919

BASIC BLOCK do.body1919
%9276:	getelementptr	 bufp XXX XXX
%9277:	load	 %9276
%9278:	getelementptr	 bufp XXX XXX
%9279:	load	 %9278
%9280:	icmp	 %9279 XXX
%9281:	br	 %9280 if.end1926 if.then1925

BASIC BLOCK if.then1925
%9282:	br	 return

BASIC BLOCK if.end1926
%9283:	getelementptr	 bufp XXX XXX
%9284:	load	 %9283
%9285:	shl	 %9284 XXX
%9286:	store	 %9285 %9283
%9287:	getelementptr	 bufp XXX XXX
%9288:	load	 %9287
%9289:	icmp	 %9288 XXX
%9290:	br	 %9289 if.end1934 if.then1932

BASIC BLOCK if.then1932
%9291:	getelementptr	 bufp XXX XXX
%9292:	store	 XXX %9291
%9293:	br	 if.end1934

BASIC BLOCK if.end1934
%9294:	getelementptr	 bufp XXX XXX
%9295:	load	 %9294
%9296:	getelementptr	 bufp XXX XXX
%9297:	load	 %9296
%9298:	call	 %9295 %9297 realloc
%9299:	getelementptr	 bufp XXX XXX
%9300:	store	 %9298 %9299
%9301:	getelementptr	 bufp XXX XXX
%9302:	load	 %9301
%9303:	icmp	 %9302 XXX
%9304:	br	 %9303 if.end1943 if.then1942

BASIC BLOCK if.then1942
%9305:	br	 return

BASIC BLOCK if.end1943
%9306:	getelementptr	 bufp XXX XXX
%9307:	load	 %9306
%9308:	icmp	 %9277 %9307
%9309:	br	 %9308 if.end1982 if.then1947

BASIC BLOCK if.then1947
%9310:	ptrtoint	 %9264
%9311:	ptrtoint	 %9277
%9312:	sub	 %9310 %9311
%9313:	getelementptr	 bufp XXX XXX
%9314:	load	 %9313
%9315:	getelementptr	 %9314 %9312
%9316:	ptrtoint	 %9261
%9317:	ptrtoint	 %9277
%9318:	sub	 %9316 %9317
%9319:	getelementptr	 bufp XXX XXX
%9320:	load	 %9319
%9321:	getelementptr	 %9320 %9318
%9322:	icmp	 %9260 XXX
%9323:	br	 %9322 if.end1965 if.then1959

BASIC BLOCK if.then1959
%9324:	ptrtoint	 %9260
%9325:	ptrtoint	 %9277
%9326:	sub	 %9324 %9325
%9327:	getelementptr	 bufp XXX XXX
%9328:	load	 %9327
%9329:	getelementptr	 %9328 %9326
%9330:	br	 if.end1965

BASIC BLOCK if.end1965
%9331:	phi	 %9329 %9260
%9332:	icmp	 %9262 XXX
%9333:	br	 %9332 if.end1973 if.then1967

BASIC BLOCK if.then1967
%9334:	ptrtoint	 %9262
%9335:	ptrtoint	 %9277
%9336:	sub	 %9334 %9335
%9337:	getelementptr	 bufp XXX XXX
%9338:	load	 %9337
%9339:	getelementptr	 %9338 %9336
%9340:	br	 if.end1973

BASIC BLOCK if.end1973
%9341:	phi	 %9339 %9262
%9342:	icmp	 %9263 XXX
%9343:	br	 %9342 if.end1981 if.then1975

BASIC BLOCK if.then1975
%9344:	ptrtoint	 %9263
%9345:	ptrtoint	 %9277
%9346:	sub	 %9344 %9345
%9347:	getelementptr	 bufp XXX XXX
%9348:	load	 %9347
%9349:	getelementptr	 %9348 %9346
%9350:	br	 if.end1981

BASIC BLOCK if.end1981
%9351:	phi	 %9349 %9263
%9352:	br	 if.end1982

BASIC BLOCK if.end1982
%9353:	phi	 %9331 %9260
%9354:	phi	 %9321 %9261
%9355:	phi	 %9341 %9262
%9356:	phi	 %9351 %9263
%9357:	phi	 %9315 %9264
%9358:	br	 do.end1983

BASIC BLOCK do.end1983
%9359:	br	 while.cond1909

BASIC BLOCK while.end1984
%9360:	getelementptr	 %9264 XXX
%9361:	store	 XXX %9264
%9362:	trunc	 %9240
%9363:	getelementptr	 %9360 XXX
%9364:	store	 %9362 %9360
%9365:	sub	 %6869 %9240
%9366:	trunc	 %9365
%9367:	getelementptr	 %9363 XXX
%9368:	store	 %9366 %9363
%9369:	br	 do.end1991

BASIC BLOCK do.end1991
%9370:	br	 if.end1992

BASIC BLOCK if.end1992
%9371:	phi	 %9260 %9220
%9372:	phi	 %9261 %9194
%9373:	phi	 %9262 %9232
%9374:	phi	 %9263 XXX
%9375:	phi	 %9367 %9169
%9376:	br	 sw.epilog

BASIC BLOCK sw.bb1993
%9377:	and	 syntax XXX
%9378:	icmp	 %9377 XXX
%9379:	br	 %9378 lor.lhs.false1996 if.then1999

BASIC BLOCK lor.lhs.false1996
%9380:	and	 syntax XXX
%9381:	icmp	 %9380 XXX
%9382:	br	 %9381 if.end2000 if.then1999

BASIC BLOCK if.then1999
%9383:	br	 normal_backslash

BASIC BLOCK if.end2000
%9384:	br	 handle_alt

BASIC BLOCK handle_alt
%9385:	phi	 %8804 %6893 %6893
%9386:	and	 syntax XXX
%9387:	icmp	 %9386 XXX
%9388:	br	 %9387 if.end2004 if.then2003

BASIC BLOCK if.then2003
%9389:	br	 normal_char

BASIC BLOCK if.end2004
%9390:	br	 while.cond2005

BASIC BLOCK while.cond2005
%9391:	phi	 %6870 %9484
%9392:	phi	 %6871 %9485
%9393:	phi	 %6872 %9486
%9394:	phi	 %6873 %9487
%9395:	phi	 %6874 %9488
%9396:	getelementptr	 bufp XXX XXX
%9397:	load	 %9396
%9398:	ptrtoint	 %9395
%9399:	ptrtoint	 %9397
%9400:	sub	 %9398 %9399
%9401:	add	 %9400 XXX
%9402:	getelementptr	 bufp XXX XXX
%9403:	load	 %9402
%9404:	icmp	 %9401 %9403
%9405:	br	 %9404 while.end2080 while.body2014

BASIC BLOCK while.body2014
%9406:	br	 do.body2015

BASIC BLOCK do.body2015
%9407:	getelementptr	 bufp XXX XXX
%9408:	load	 %9407
%9409:	getelementptr	 bufp XXX XXX
%9410:	load	 %9409
%9411:	icmp	 %9410 XXX
%9412:	br	 %9411 if.end2022 if.then2021

BASIC BLOCK if.then2021
%9413:	br	 return

BASIC BLOCK if.end2022
%9414:	getelementptr	 bufp XXX XXX
%9415:	load	 %9414
%9416:	shl	 %9415 XXX
%9417:	store	 %9416 %9414
%9418:	getelementptr	 bufp XXX XXX
%9419:	load	 %9418
%9420:	icmp	 %9419 XXX
%9421:	br	 %9420 if.end2030 if.then2028

BASIC BLOCK if.then2028
%9422:	getelementptr	 bufp XXX XXX
%9423:	store	 XXX %9422
%9424:	br	 if.end2030

BASIC BLOCK if.end2030
%9425:	getelementptr	 bufp XXX XXX
%9426:	load	 %9425
%9427:	getelementptr	 bufp XXX XXX
%9428:	load	 %9427
%9429:	call	 %9426 %9428 realloc
%9430:	getelementptr	 bufp XXX XXX
%9431:	store	 %9429 %9430
%9432:	getelementptr	 bufp XXX XXX
%9433:	load	 %9432
%9434:	icmp	 %9433 XXX
%9435:	br	 %9434 if.end2039 if.then2038

BASIC BLOCK if.then2038
%9436:	br	 return

BASIC BLOCK if.end2039
%9437:	getelementptr	 bufp XXX XXX
%9438:	load	 %9437
%9439:	icmp	 %9408 %9438
%9440:	br	 %9439 if.end2078 if.then2043

BASIC BLOCK if.then2043
%9441:	ptrtoint	 %9395
%9442:	ptrtoint	 %9408
%9443:	sub	 %9441 %9442
%9444:	getelementptr	 bufp XXX XXX
%9445:	load	 %9444
%9446:	getelementptr	 %9445 %9443
%9447:	ptrtoint	 %9392
%9448:	ptrtoint	 %9408
%9449:	sub	 %9447 %9448
%9450:	getelementptr	 bufp XXX XXX
%9451:	load	 %9450
%9452:	getelementptr	 %9451 %9449
%9453:	icmp	 %9391 XXX
%9454:	br	 %9453 if.end2061 if.then2055

BASIC BLOCK if.then2055
%9455:	ptrtoint	 %9391
%9456:	ptrtoint	 %9408
%9457:	sub	 %9455 %9456
%9458:	getelementptr	 bufp XXX XXX
%9459:	load	 %9458
%9460:	getelementptr	 %9459 %9457
%9461:	br	 if.end2061

BASIC BLOCK if.end2061
%9462:	phi	 %9460 %9391
%9463:	icmp	 %9393 XXX
%9464:	br	 %9463 if.end2069 if.then2063

BASIC BLOCK if.then2063
%9465:	ptrtoint	 %9393
%9466:	ptrtoint	 %9408
%9467:	sub	 %9465 %9466
%9468:	getelementptr	 bufp XXX XXX
%9469:	load	 %9468
%9470:	getelementptr	 %9469 %9467
%9471:	br	 if.end2069

BASIC BLOCK if.end2069
%9472:	phi	 %9470 %9393
%9473:	icmp	 %9394 XXX
%9474:	br	 %9473 if.end2077 if.then2071

BASIC BLOCK if.then2071
%9475:	ptrtoint	 %9394
%9476:	ptrtoint	 %9408
%9477:	sub	 %9475 %9476
%9478:	getelementptr	 bufp XXX XXX
%9479:	load	 %9478
%9480:	getelementptr	 %9479 %9477
%9481:	br	 if.end2077

BASIC BLOCK if.end2077
%9482:	phi	 %9480 %9394
%9483:	br	 if.end2078

BASIC BLOCK if.end2078
%9484:	phi	 %9462 %9391
%9485:	phi	 %9452 %9392
%9486:	phi	 %9472 %9393
%9487:	phi	 %9482 %9394
%9488:	phi	 %9446 %9395
%9489:	br	 do.end2079

BASIC BLOCK do.end2079
%9490:	br	 while.cond2005

BASIC BLOCK while.end2080
%9491:	getelementptr	 %9395 XXX
%9492:	ptrtoint	 %9491
%9493:	ptrtoint	 %9392
%9494:	sub	 %9492 %9493
%9495:	sub	 %9494 XXX
%9496:	call	 XXX %9392 %9495 %9395 XXX
%9497:	getelementptr	 %9395 XXX
%9498:	icmp	 %9391 XXX
%9499:	br	 %9498 if.end2093 if.then2088

BASIC BLOCK if.then2088
%9500:	ptrtoint	 %9497
%9501:	ptrtoint	 %9391
%9502:	sub	 %9500 %9501
%9503:	sub	 %9502 XXX
%9504:	call	 XXX %9391 %9503 XXX
%9505:	br	 if.end2093

BASIC BLOCK if.end2093
%9506:	br	 while.cond2094

BASIC BLOCK while.cond2094
%9507:	phi	 %9497 %9600
%9508:	phi	 %9392 %9601
%9509:	phi	 %9393 %9602
%9510:	phi	 XXX %9603
%9511:	phi	 %9497 %9604
%9512:	getelementptr	 bufp XXX XXX
%9513:	load	 %9512
%9514:	ptrtoint	 %9511
%9515:	ptrtoint	 %9513
%9516:	sub	 %9514 %9515
%9517:	add	 %9516 XXX
%9518:	getelementptr	 bufp XXX XXX
%9519:	load	 %9518
%9520:	icmp	 %9517 %9519
%9521:	br	 %9520 while.end2169 while.body2103

BASIC BLOCK while.body2103
%9522:	br	 do.body2104

BASIC BLOCK do.body2104
%9523:	getelementptr	 bufp XXX XXX
%9524:	load	 %9523
%9525:	getelementptr	 bufp XXX XXX
%9526:	load	 %9525
%9527:	icmp	 %9526 XXX
%9528:	br	 %9527 if.end2111 if.then2110

BASIC BLOCK if.then2110
%9529:	br	 return

BASIC BLOCK if.end2111
%9530:	getelementptr	 bufp XXX XXX
%9531:	load	 %9530
%9532:	shl	 %9531 XXX
%9533:	store	 %9532 %9530
%9534:	getelementptr	 bufp XXX XXX
%9535:	load	 %9534
%9536:	icmp	 %9535 XXX
%9537:	br	 %9536 if.end2119 if.then2117

BASIC BLOCK if.then2117
%9538:	getelementptr	 bufp XXX XXX
%9539:	store	 XXX %9538
%9540:	br	 if.end2119

BASIC BLOCK if.end2119
%9541:	getelementptr	 bufp XXX XXX
%9542:	load	 %9541
%9543:	getelementptr	 bufp XXX XXX
%9544:	load	 %9543
%9545:	call	 %9542 %9544 realloc
%9546:	getelementptr	 bufp XXX XXX
%9547:	store	 %9545 %9546
%9548:	getelementptr	 bufp XXX XXX
%9549:	load	 %9548
%9550:	icmp	 %9549 XXX
%9551:	br	 %9550 if.end2128 if.then2127

BASIC BLOCK if.then2127
%9552:	br	 return

BASIC BLOCK if.end2128
%9553:	getelementptr	 bufp XXX XXX
%9554:	load	 %9553
%9555:	icmp	 %9524 %9554
%9556:	br	 %9555 if.end2167 if.then2132

BASIC BLOCK if.then2132
%9557:	ptrtoint	 %9511
%9558:	ptrtoint	 %9524
%9559:	sub	 %9557 %9558
%9560:	getelementptr	 bufp XXX XXX
%9561:	load	 %9560
%9562:	getelementptr	 %9561 %9559
%9563:	ptrtoint	 %9508
%9564:	ptrtoint	 %9524
%9565:	sub	 %9563 %9564
%9566:	getelementptr	 bufp XXX XXX
%9567:	load	 %9566
%9568:	getelementptr	 %9567 %9565
%9569:	icmp	 %9507 XXX
%9570:	br	 %9569 if.end2150 if.then2144

BASIC BLOCK if.then2144
%9571:	ptrtoint	 %9507
%9572:	ptrtoint	 %9524
%9573:	sub	 %9571 %9572
%9574:	getelementptr	 bufp XXX XXX
%9575:	load	 %9574
%9576:	getelementptr	 %9575 %9573
%9577:	br	 if.end2150

BASIC BLOCK if.end2150
%9578:	phi	 %9576 %9507
%9579:	icmp	 %9509 XXX
%9580:	br	 %9579 if.end2158 if.then2152

BASIC BLOCK if.then2152
%9581:	ptrtoint	 %9509
%9582:	ptrtoint	 %9524
%9583:	sub	 %9581 %9582
%9584:	getelementptr	 bufp XXX XXX
%9585:	load	 %9584
%9586:	getelementptr	 %9585 %9583
%9587:	br	 if.end2158

BASIC BLOCK if.end2158
%9588:	phi	 %9586 %9509
%9589:	icmp	 %9510 XXX
%9590:	br	 %9589 if.end2166 if.then2160

BASIC BLOCK if.then2160
%9591:	ptrtoint	 %9510
%9592:	ptrtoint	 %9524
%9593:	sub	 %9591 %9592
%9594:	getelementptr	 bufp XXX XXX
%9595:	load	 %9594
%9596:	getelementptr	 %9595 %9593
%9597:	br	 if.end2166

BASIC BLOCK if.end2166
%9598:	phi	 %9596 %9510
%9599:	br	 if.end2167

BASIC BLOCK if.end2167
%9600:	phi	 %9578 %9507
%9601:	phi	 %9568 %9508
%9602:	phi	 %9588 %9509
%9603:	phi	 %9598 %9510
%9604:	phi	 %9562 %9511
%9605:	br	 do.end2168

BASIC BLOCK do.end2168
%9606:	br	 while.cond2094

BASIC BLOCK while.end2169
%9607:	getelementptr	 %9511 XXX
%9608:	br	 sw.epilog

BASIC BLOCK sw.bb2171
%9609:	and	 syntax XXX
%9610:	icmp	 %9609 XXX
%9611:	br	 %9610 if.then2187 lor.lhs.false2174

BASIC BLOCK lor.lhs.false2174
%9612:	and	 syntax XXX
%9613:	icmp	 %9612 XXX
%9614:	br	 %9613 lor.lhs.false2180 land.lhs.true2177

BASIC BLOCK land.lhs.true2177
%9615:	and	 syntax XXX
%9616:	icmp	 %9615 XXX
%9617:	br	 %9616 lor.lhs.false2180 if.then2187

BASIC BLOCK lor.lhs.false2180
%9618:	load	 %6801
%9619:	getelementptr	 %9618 XXX
%9620:	icmp	 %9619 pattern
%9621:	br	 %9620 if.end2188 land.lhs.true2184

BASIC BLOCK land.lhs.true2184
%9622:	load	 %6801
%9623:	icmp	 %9622 %6805
%9624:	br	 %9623 if.end2188 if.then2187

BASIC BLOCK if.then2187
%9625:	br	 normal_backslash

BASIC BLOCK if.end2188
%9626:	br	 handle_interval

BASIC BLOCK handle_interval
%9627:	phi	 %8804 %6893
%9628:	load	 %6801
%9629:	getelementptr	 %9628 XXX
%9630:	load	 %6801
%9631:	icmp	 %9630 %6805
%9632:	br	 %9631 if.end2197 if.then2192

BASIC BLOCK if.then2192
%9633:	and	 syntax XXX
%9634:	icmp	 %9633 XXX
%9635:	br	 %9634 if.else2196 if.then2195

BASIC BLOCK if.then2195
%9636:	br	 unfetch_interval

BASIC BLOCK if.else2196
%9637:	br	 return

BASIC BLOCK if.end2197
%9638:	load	 %6801
%9639:	icmp	 %9638 %6805
%9640:	br	 %9639 if.end2253 if.then2200

BASIC BLOCK if.then2200
%9641:	br	 do.body2201

BASIC BLOCK do.body2201
%9642:	load	 %6801
%9643:	icmp	 %9642 %6805
%9644:	br	 %9643 if.end2205 if.then2204

BASIC BLOCK if.then2204
%9645:	br	 return

BASIC BLOCK if.end2205
%9646:	load	 %6801
%9647:	getelementptr	 %9646 XXX
%9648:	store	 %9647 %6801
%9649:	load	 %9646
%9650:	icmp	 %6807 XXX
%9651:	br	 %9650 if.end2211 if.then2208

BASIC BLOCK if.then2208
%9652:	zext	 %9649
%9653:	getelementptr	 %6807 %9652
%9654:	load	 %9653
%9655:	br	 if.end2211

BASIC BLOCK if.end2211
%9656:	phi	 %9654 %9649
%9657:	br	 do.end2212

BASIC BLOCK do.end2212
%9658:	br	 while.cond2213

BASIC BLOCK while.cond2213
%9659:	phi	 %9656 %9704
%9660:	phi	 XXX %9684
%9661:	zext	 %9659
%9662:	and	 %9661 XXX
%9663:	icmp	 %9662 XXX
%9664:	br	 %9663 land.end2226 land.rhs2218

BASIC BLOCK land.rhs2218
%9665:	zext	 %9659
%9666:	sext	 %9665
%9667:	call	 __ctype_b_loc
%9668:	load	 %9667
%9669:	getelementptr	 %9668 %9666
%9670:	load	 %9669
%9671:	zext	 %9670
%9672:	and	 %9671 XXX
%9673:	icmp	 %9672 XXX
%9674:	br	 land.end2226

BASIC BLOCK land.end2226
%9675:	phi	 XXX %9673
%9676:	br	 %9675 while.end2252 while.body2227

BASIC BLOCK while.body2227
%9677:	icmp	 %9660 XXX
%9678:	br	 %9677 if.end2231 if.then2230

BASIC BLOCK if.then2230
%9679:	br	 if.end2231

BASIC BLOCK if.end2231
%9680:	phi	 XXX %9660
%9681:	mul	 %9680 XXX
%9682:	zext	 %9659
%9683:	add	 %9681 %9682
%9684:	sub	 %9683 XXX
%9685:	load	 %6801
%9686:	icmp	 %9685 %6805
%9687:	br	 %9686 if.end2239 if.then2238

BASIC BLOCK if.then2238
%9688:	br	 while.end2252

BASIC BLOCK if.end2239
%9689:	br	 do.body2240

BASIC BLOCK do.body2240
%9690:	load	 %6801
%9691:	icmp	 %9690 %6805
%9692:	br	 %9691 if.end2244 if.then2243

BASIC BLOCK if.then2243
%9693:	br	 return

BASIC BLOCK if.end2244
%9694:	load	 %6801
%9695:	getelementptr	 %9694 XXX
%9696:	store	 %9695 %6801
%9697:	load	 %9694
%9698:	icmp	 %6807 XXX
%9699:	br	 %9698 if.end2250 if.then2247

BASIC BLOCK if.then2247
%9700:	zext	 %9697
%9701:	getelementptr	 %6807 %9700
%9702:	load	 %9701
%9703:	br	 if.end2250

BASIC BLOCK if.end2250
%9704:	phi	 %9702 %9697
%9705:	br	 do.end2251

BASIC BLOCK do.end2251
%9706:	br	 while.cond2213

BASIC BLOCK while.end2252
%9707:	phi	 %9684 %9660
%9708:	br	 if.end2253

BASIC BLOCK if.end2253
%9709:	phi	 %9659 %9627
%9710:	phi	 %9707 XXX
%9711:	zext	 %9709
%9712:	icmp	 %9711 XXX
%9713:	br	 %9712 if.else2318 if.then2257

BASIC BLOCK if.then2257
%9714:	load	 %6801
%9715:	icmp	 %9714 %6805
%9716:	br	 %9715 if.end2313 if.then2260

BASIC BLOCK if.then2260
%9717:	br	 do.body2261

BASIC BLOCK do.body2261
%9718:	load	 %6801
%9719:	icmp	 %9718 %6805
%9720:	br	 %9719 if.end2265 if.then2264

BASIC BLOCK if.then2264
%9721:	br	 return

BASIC BLOCK if.end2265
%9722:	load	 %6801
%9723:	getelementptr	 %9722 XXX
%9724:	store	 %9723 %6801
%9725:	load	 %9722
%9726:	icmp	 %6807 XXX
%9727:	br	 %9726 if.end2271 if.then2268

BASIC BLOCK if.then2268
%9728:	zext	 %9725
%9729:	getelementptr	 %6807 %9728
%9730:	load	 %9729
%9731:	br	 if.end2271

BASIC BLOCK if.end2271
%9732:	phi	 %9730 %9725
%9733:	br	 do.end2272

BASIC BLOCK do.end2272
%9734:	br	 while.cond2273

BASIC BLOCK while.cond2273
%9735:	phi	 %9732 %9780
%9736:	phi	 XXX %9760
%9737:	zext	 %9735
%9738:	and	 %9737 XXX
%9739:	icmp	 %9738 XXX
%9740:	br	 %9739 land.end2286 land.rhs2278

BASIC BLOCK land.rhs2278
%9741:	zext	 %9735
%9742:	sext	 %9741
%9743:	call	 __ctype_b_loc
%9744:	load	 %9743
%9745:	getelementptr	 %9744 %9742
%9746:	load	 %9745
%9747:	zext	 %9746
%9748:	and	 %9747 XXX
%9749:	icmp	 %9748 XXX
%9750:	br	 land.end2286

BASIC BLOCK land.end2286
%9751:	phi	 XXX %9749
%9752:	br	 %9751 while.end2312 while.body2287

BASIC BLOCK while.body2287
%9753:	icmp	 %9736 XXX
%9754:	br	 %9753 if.end2291 if.then2290

BASIC BLOCK if.then2290
%9755:	br	 if.end2291

BASIC BLOCK if.end2291
%9756:	phi	 XXX %9736
%9757:	mul	 %9756 XXX
%9758:	zext	 %9735
%9759:	add	 %9757 %9758
%9760:	sub	 %9759 XXX
%9761:	load	 %6801
%9762:	icmp	 %9761 %6805
%9763:	br	 %9762 if.end2299 if.then2298

BASIC BLOCK if.then2298
%9764:	br	 while.end2312

BASIC BLOCK if.end2299
%9765:	br	 do.body2300

BASIC BLOCK do.body2300
%9766:	load	 %6801
%9767:	icmp	 %9766 %6805
%9768:	br	 %9767 if.end2304 if.then2303

BASIC BLOCK if.then2303
%9769:	br	 return

BASIC BLOCK if.end2304
%9770:	load	 %6801
%9771:	getelementptr	 %9770 XXX
%9772:	store	 %9771 %6801
%9773:	load	 %9770
%9774:	icmp	 %6807 XXX
%9775:	br	 %9774 if.end2310 if.then2307

BASIC BLOCK if.then2307
%9776:	zext	 %9773
%9777:	getelementptr	 %6807 %9776
%9778:	load	 %9777
%9779:	br	 if.end2310

BASIC BLOCK if.end2310
%9780:	phi	 %9778 %9773
%9781:	br	 do.end2311

BASIC BLOCK do.end2311
%9782:	br	 while.cond2273

BASIC BLOCK while.end2312
%9783:	phi	 %9760 %9736
%9784:	br	 if.end2313

BASIC BLOCK if.end2313
%9785:	phi	 %9735 %9709
%9786:	phi	 %9783 XXX
%9787:	icmp	 %9786 XXX
%9788:	br	 %9787 if.end2317 if.then2316

BASIC BLOCK if.then2316
%9789:	br	 if.end2317

BASIC BLOCK if.end2317
%9790:	phi	 XXX %9786
%9791:	br	 if.end2319

BASIC BLOCK if.else2318
%9792:	br	 if.end2319

BASIC BLOCK if.end2319
%9793:	phi	 %9785 %9709
%9794:	phi	 %9790 %9710
%9795:	icmp	 %9710 XXX
%9796:	br	 %9795 lor.lhs.false2322 if.then2328

BASIC BLOCK lor.lhs.false2322
%9797:	icmp	 %9794 XXX
%9798:	br	 %9797 lor.lhs.false2325 if.then2328

BASIC BLOCK lor.lhs.false2325
%9799:	icmp	 %9710 %9794
%9800:	br	 %9799 if.end2333 if.then2328

BASIC BLOCK if.then2328
%9801:	and	 syntax XXX
%9802:	icmp	 %9801 XXX
%9803:	br	 %9802 if.else2332 if.then2331

BASIC BLOCK if.then2331
%9804:	br	 unfetch_interval

BASIC BLOCK if.else2332
%9805:	br	 return

BASIC BLOCK if.end2333
%9806:	and	 syntax XXX
%9807:	icmp	 %9806 XXX
%9808:	br	 %9807 if.then2336 if.end2354

BASIC BLOCK if.then2336
%9809:	zext	 %9793
%9810:	icmp	 %9809 XXX
%9811:	br	 %9810 if.end2341 if.then2340

BASIC BLOCK if.then2340
%9812:	br	 return

BASIC BLOCK if.end2341
%9813:	br	 do.body2342

BASIC BLOCK do.body2342
%9814:	load	 %6801
%9815:	icmp	 %9814 %6805
%9816:	br	 %9815 if.end2346 if.then2345

BASIC BLOCK if.then2345
%9817:	br	 return

BASIC BLOCK if.end2346
%9818:	load	 %6801
%9819:	getelementptr	 %9818 XXX
%9820:	store	 %9819 %6801
%9821:	load	 %9818
%9822:	icmp	 %6807 XXX
%9823:	br	 %9822 if.end2352 if.then2349

BASIC BLOCK if.then2349
%9824:	zext	 %9821
%9825:	getelementptr	 %6807 %9824
%9826:	load	 %9825
%9827:	br	 if.end2352

BASIC BLOCK if.end2352
%9828:	phi	 %9826 %9821
%9829:	br	 do.end2353

BASIC BLOCK do.end2353
%9830:	br	 if.end2354

BASIC BLOCK if.end2354
%9831:	phi	 %9793 %9828
%9832:	zext	 %9831
%9833:	icmp	 %9832 XXX
%9834:	br	 %9833 if.end2363 if.then2358

BASIC BLOCK if.then2358
%9835:	and	 syntax XXX
%9836:	icmp	 %9835 XXX
%9837:	br	 %9836 if.else2362 if.then2361

BASIC BLOCK if.then2361
%9838:	br	 unfetch_interval

BASIC BLOCK if.else2362
%9839:	br	 return

BASIC BLOCK if.end2363
%9840:	icmp	 %6872 XXX
%9841:	br	 %9840 if.then2365 if.end2376

BASIC BLOCK if.then2365
%9842:	and	 syntax XXX
%9843:	icmp	 %9842 XXX
%9844:	br	 %9843 if.else2369 if.then2368

BASIC BLOCK if.then2368
%9845:	br	 return

BASIC BLOCK if.else2369
%9846:	and	 syntax XXX
%9847:	icmp	 %9846 XXX
%9848:	br	 %9847 if.else2373 if.then2372

BASIC BLOCK if.then2372
%9849:	br	 if.end2374

BASIC BLOCK if.else2373
%9850:	br	 unfetch_interval

BASIC BLOCK if.end2374
%9851:	br	 if.end2375

BASIC BLOCK if.end2375
%9852:	br	 if.end2376

BASIC BLOCK if.end2376
%9853:	phi	 %6872 %6874
%9854:	icmp	 %9794 XXX
%9855:	br	 %9854 if.else2462 if.then2379

BASIC BLOCK if.then2379
%9856:	br	 while.cond2380

BASIC BLOCK while.cond2380
%9857:	phi	 %6870 %9950
%9858:	phi	 %6871 %9951
%9859:	phi	 %9853 %9952
%9860:	phi	 %6873 %9953
%9861:	phi	 %6874 %9954
%9862:	getelementptr	 bufp XXX XXX
%9863:	load	 %9862
%9864:	ptrtoint	 %9861
%9865:	ptrtoint	 %9863
%9866:	sub	 %9864 %9865
%9867:	add	 %9866 XXX
%9868:	getelementptr	 bufp XXX XXX
%9869:	load	 %9868
%9870:	icmp	 %9867 %9869
%9871:	br	 %9870 while.end2455 while.body2389

BASIC BLOCK while.body2389
%9872:	br	 do.body2390

BASIC BLOCK do.body2390
%9873:	getelementptr	 bufp XXX XXX
%9874:	load	 %9873
%9875:	getelementptr	 bufp XXX XXX
%9876:	load	 %9875
%9877:	icmp	 %9876 XXX
%9878:	br	 %9877 if.end2397 if.then2396

BASIC BLOCK if.then2396
%9879:	br	 return

BASIC BLOCK if.end2397
%9880:	getelementptr	 bufp XXX XXX
%9881:	load	 %9880
%9882:	shl	 %9881 XXX
%9883:	store	 %9882 %9880
%9884:	getelementptr	 bufp XXX XXX
%9885:	load	 %9884
%9886:	icmp	 %9885 XXX
%9887:	br	 %9886 if.end2405 if.then2403

BASIC BLOCK if.then2403
%9888:	getelementptr	 bufp XXX XXX
%9889:	store	 XXX %9888
%9890:	br	 if.end2405

BASIC BLOCK if.end2405
%9891:	getelementptr	 bufp XXX XXX
%9892:	load	 %9891
%9893:	getelementptr	 bufp XXX XXX
%9894:	load	 %9893
%9895:	call	 %9892 %9894 realloc
%9896:	getelementptr	 bufp XXX XXX
%9897:	store	 %9895 %9896
%9898:	getelementptr	 bufp XXX XXX
%9899:	load	 %9898
%9900:	icmp	 %9899 XXX
%9901:	br	 %9900 if.end2414 if.then2413

BASIC BLOCK if.then2413
%9902:	br	 return

BASIC BLOCK if.end2414
%9903:	getelementptr	 bufp XXX XXX
%9904:	load	 %9903
%9905:	icmp	 %9874 %9904
%9906:	br	 %9905 if.end2453 if.then2418

BASIC BLOCK if.then2418
%9907:	ptrtoint	 %9861
%9908:	ptrtoint	 %9874
%9909:	sub	 %9907 %9908
%9910:	getelementptr	 bufp XXX XXX
%9911:	load	 %9910
%9912:	getelementptr	 %9911 %9909
%9913:	ptrtoint	 %9858
%9914:	ptrtoint	 %9874
%9915:	sub	 %9913 %9914
%9916:	getelementptr	 bufp XXX XXX
%9917:	load	 %9916
%9918:	getelementptr	 %9917 %9915
%9919:	icmp	 %9857 XXX
%9920:	br	 %9919 if.end2436 if.then2430

BASIC BLOCK if.then2430
%9921:	ptrtoint	 %9857
%9922:	ptrtoint	 %9874
%9923:	sub	 %9921 %9922
%9924:	getelementptr	 bufp XXX XXX
%9925:	load	 %9924
%9926:	getelementptr	 %9925 %9923
%9927:	br	 if.end2436

BASIC BLOCK if.end2436
%9928:	phi	 %9926 %9857
%9929:	icmp	 %9859 XXX
%9930:	br	 %9929 if.end2444 if.then2438

BASIC BLOCK if.then2438
%9931:	ptrtoint	 %9859
%9932:	ptrtoint	 %9874
%9933:	sub	 %9931 %9932
%9934:	getelementptr	 bufp XXX XXX
%9935:	load	 %9934
%9936:	getelementptr	 %9935 %9933
%9937:	br	 if.end2444

BASIC BLOCK if.end2444
%9938:	phi	 %9936 %9859
%9939:	icmp	 %9860 XXX
%9940:	br	 %9939 if.end2452 if.then2446

BASIC BLOCK if.then2446
%9941:	ptrtoint	 %9860
%9942:	ptrtoint	 %9874
%9943:	sub	 %9941 %9942
%9944:	getelementptr	 bufp XXX XXX
%9945:	load	 %9944
%9946:	getelementptr	 %9945 %9943
%9947:	br	 if.end2452

BASIC BLOCK if.end2452
%9948:	phi	 %9946 %9860
%9949:	br	 if.end2453

BASIC BLOCK if.end2453
%9950:	phi	 %9928 %9857
%9951:	phi	 %9918 %9858
%9952:	phi	 %9938 %9859
%9953:	phi	 %9948 %9860
%9954:	phi	 %9912 %9861
%9955:	br	 do.end2454

BASIC BLOCK do.end2454
%9956:	br	 while.cond2380

BASIC BLOCK while.end2455
%9957:	getelementptr	 %9861 XXX
%9958:	ptrtoint	 %9957
%9959:	ptrtoint	 %9859
%9960:	sub	 %9958 %9959
%9961:	sub	 %9960 XXX
%9962:	call	 XXX %9859 %9961 %9861 XXX
%9963:	getelementptr	 %9861 XXX
%9964:	br	 if.end2572

BASIC BLOCK if.else2462
%9965:	icmp	 %9794 XXX
%9966:	zext	 %9965
%9967:	mul	 %9966 XXX
%9968:	add	 XXX %9967
%9969:	br	 while.cond2467

BASIC BLOCK while.cond2467
%9970:	phi	 %6870 %10064
%9971:	phi	 %6871 %10065
%9972:	phi	 %9853 %10066
%9973:	phi	 %6873 %10067
%9974:	phi	 %6874 %10068
%9975:	getelementptr	 bufp XXX XXX
%9976:	load	 %9975
%9977:	ptrtoint	 %9974
%9978:	ptrtoint	 %9976
%9979:	sub	 %9977 %9978
%9980:	zext	 %9968
%9981:	add	 %9979 %9980
%9982:	getelementptr	 bufp XXX XXX
%9983:	load	 %9982
%9984:	icmp	 %9981 %9983
%9985:	br	 %9984 while.end2543 while.body2477

BASIC BLOCK while.body2477
%9986:	br	 do.body2478

BASIC BLOCK do.body2478
%9987:	getelementptr	 bufp XXX XXX
%9988:	load	 %9987
%9989:	getelementptr	 bufp XXX XXX
%9990:	load	 %9989
%9991:	icmp	 %9990 XXX
%9992:	br	 %9991 if.end2485 if.then2484

BASIC BLOCK if.then2484
%9993:	br	 return

BASIC BLOCK if.end2485
%9994:	getelementptr	 bufp XXX XXX
%9995:	load	 %9994
%9996:	shl	 %9995 XXX
%9997:	store	 %9996 %9994
%9998:	getelementptr	 bufp XXX XXX
%9999:	load	 %9998
%10000:	icmp	 %9999 XXX
%10001:	br	 %10000 if.end2493 if.then2491

BASIC BLOCK if.then2491
%10002:	getelementptr	 bufp XXX XXX
%10003:	store	 XXX %10002
%10004:	br	 if.end2493

BASIC BLOCK if.end2493
%10005:	getelementptr	 bufp XXX XXX
%10006:	load	 %10005
%10007:	getelementptr	 bufp XXX XXX
%10008:	load	 %10007
%10009:	call	 %10006 %10008 realloc
%10010:	getelementptr	 bufp XXX XXX
%10011:	store	 %10009 %10010
%10012:	getelementptr	 bufp XXX XXX
%10013:	load	 %10012
%10014:	icmp	 %10013 XXX
%10015:	br	 %10014 if.end2502 if.then2501

BASIC BLOCK if.then2501
%10016:	br	 return

BASIC BLOCK if.end2502
%10017:	getelementptr	 bufp XXX XXX
%10018:	load	 %10017
%10019:	icmp	 %9988 %10018
%10020:	br	 %10019 if.end2541 if.then2506

BASIC BLOCK if.then2506
%10021:	ptrtoint	 %9974
%10022:	ptrtoint	 %9988
%10023:	sub	 %10021 %10022
%10024:	getelementptr	 bufp XXX XXX
%10025:	load	 %10024
%10026:	getelementptr	 %10025 %10023
%10027:	ptrtoint	 %9971
%10028:	ptrtoint	 %9988
%10029:	sub	 %10027 %10028
%10030:	getelementptr	 bufp XXX XXX
%10031:	load	 %10030
%10032:	getelementptr	 %10031 %10029
%10033:	icmp	 %9970 XXX
%10034:	br	 %10033 if.end2524 if.then2518

BASIC BLOCK if.then2518
%10035:	ptrtoint	 %9970
%10036:	ptrtoint	 %9988
%10037:	sub	 %10035 %10036
%10038:	getelementptr	 bufp XXX XXX
%10039:	load	 %10038
%10040:	getelementptr	 %10039 %10037
%10041:	br	 if.end2524

BASIC BLOCK if.end2524
%10042:	phi	 %10040 %9970
%10043:	icmp	 %9972 XXX
%10044:	br	 %10043 if.end2532 if.then2526

BASIC BLOCK if.then2526
%10045:	ptrtoint	 %9972
%10046:	ptrtoint	 %9988
%10047:	sub	 %10045 %10046
%10048:	getelementptr	 bufp XXX XXX
%10049:	load	 %10048
%10050:	getelementptr	 %10049 %10047
%10051:	br	 if.end2532

BASIC BLOCK if.end2532
%10052:	phi	 %10050 %9972
%10053:	icmp	 %9973 XXX
%10054:	br	 %10053 if.end2540 if.then2534

BASIC BLOCK if.then2534
%10055:	ptrtoint	 %9973
%10056:	ptrtoint	 %9988
%10057:	sub	 %10055 %10056
%10058:	getelementptr	 bufp XXX XXX
%10059:	load	 %10058
%10060:	getelementptr	 %10059 %10057
%10061:	br	 if.end2540

BASIC BLOCK if.end2540
%10062:	phi	 %10060 %9973
%10063:	br	 if.end2541

BASIC BLOCK if.end2541
%10064:	phi	 %10042 %9970
%10065:	phi	 %10032 %9971
%10066:	phi	 %10052 %9972
%10067:	phi	 %10062 %9973
%10068:	phi	 %10026 %9974
%10069:	br	 do.end2542

BASIC BLOCK do.end2542
%10070:	br	 while.cond2467

BASIC BLOCK while.end2543
%10071:	getelementptr	 %9974 XXX
%10072:	icmp	 %9794 XXX
%10073:	zext	 %10072
%10074:	mul	 %10073 XXX
%10075:	sext	 %10074
%10076:	getelementptr	 %10071 %10075
%10077:	ptrtoint	 %10076
%10078:	ptrtoint	 %9972
%10079:	sub	 %10077 %10078
%10080:	sub	 %10079 XXX
%10081:	call	 XXX %9972 %10080 %9710 %9974 XXX
%10082:	getelementptr	 %9974 XXX
%10083:	call	 XXX %9972 XXX %9710 %10082 insert_op2
%10084:	getelementptr	 %10082 XXX
%10085:	icmp	 %9794 XXX
%10086:	br	 %10085 if.end2571 if.then2558

BASIC BLOCK if.then2558
%10087:	getelementptr	 %9972 XXX
%10088:	ptrtoint	 %10087
%10089:	ptrtoint	 %10084
%10090:	sub	 %10088 %10089
%10091:	sub	 %10090 XXX
%10092:	sub	 %9794 XXX
%10093:	call	 XXX %10084 %10091 %10092 XXX
%10094:	getelementptr	 %10084 XXX
%10095:	ptrtoint	 %10094
%10096:	ptrtoint	 %9972
%10097:	sub	 %10095 %10096
%10098:	sub	 %9794 XXX
%10099:	call	 XXX %9972 %10097 %10098 %10094 XXX
%10100:	getelementptr	 %10094 XXX
%10101:	br	 if.end2571

BASIC BLOCK if.end2571
%10102:	phi	 %10100 %10084
%10103:	br	 if.end2572

BASIC BLOCK if.end2572
%10104:	phi	 %9857 %9970
%10105:	phi	 %9858 %9971
%10106:	phi	 %9859 %9972
%10107:	phi	 %9963 %10102
%10108:	br	 sw.epilog

BASIC BLOCK unfetch_interval
%10109:	store	 %9629 %6801
%10110:	br	 do.body2573

BASIC BLOCK do.body2573
%10111:	load	 %6801
%10112:	icmp	 %10111 %6805
%10113:	br	 %10112 if.end2577 if.then2576

BASIC BLOCK if.then2576
%10114:	br	 return

BASIC BLOCK if.end2577
%10115:	load	 %6801
%10116:	getelementptr	 %10115 XXX
%10117:	store	 %10116 %6801
%10118:	load	 %10115
%10119:	icmp	 %6807 XXX
%10120:	br	 %10119 if.end2583 if.then2580

BASIC BLOCK if.then2580
%10121:	zext	 %10118
%10122:	getelementptr	 %6807 %10121
%10123:	load	 %10122
%10124:	br	 if.end2583

BASIC BLOCK if.end2583
%10125:	phi	 %10123 %10118
%10126:	br	 do.end2584

BASIC BLOCK do.end2584
%10127:	and	 syntax XXX
%10128:	icmp	 %10127 XXX
%10129:	br	 %10128 if.then2587 if.end2597

BASIC BLOCK if.then2587
%10130:	load	 %6801
%10131:	icmp	 %10130 pattern
%10132:	br	 %10131 if.end2596 land.lhs.true2590

BASIC BLOCK land.lhs.true2590
%10133:	load	 %6801
%10134:	getelementptr	 %10133 XXX
%10135:	load	 %10134
%10136:	sext	 %10135
%10137:	icmp	 %10136 XXX
%10138:	br	 %10137 if.end2596 if.then2595

BASIC BLOCK if.then2595
%10139:	br	 normal_backslash

BASIC BLOCK if.end2596
%10140:	br	 if.end2597

BASIC BLOCK if.end2597
%10141:	br	 normal_char

BASIC BLOCK sw.bb2598
%10142:	br	 do.body2599

BASIC BLOCK do.body2599
%10143:	br	 while.cond2600

BASIC BLOCK while.cond2600
%10144:	phi	 %6870 %10237
%10145:	phi	 %6871 %10238
%10146:	phi	 %6874 %10239
%10147:	phi	 %6873 %10240
%10148:	phi	 %6874 %10241
%10149:	getelementptr	 bufp XXX XXX
%10150:	load	 %10149
%10151:	ptrtoint	 %10148
%10152:	ptrtoint	 %10150
%10153:	sub	 %10151 %10152
%10154:	add	 %10153 XXX
%10155:	getelementptr	 bufp XXX XXX
%10156:	load	 %10155
%10157:	icmp	 %10154 %10156
%10158:	br	 %10157 while.end2675 while.body2609

BASIC BLOCK while.body2609
%10159:	br	 do.body2610

BASIC BLOCK do.body2610
%10160:	getelementptr	 bufp XXX XXX
%10161:	load	 %10160
%10162:	getelementptr	 bufp XXX XXX
%10163:	load	 %10162
%10164:	icmp	 %10163 XXX
%10165:	br	 %10164 if.end2617 if.then2616

BASIC BLOCK if.then2616
%10166:	br	 return

BASIC BLOCK if.end2617
%10167:	getelementptr	 bufp XXX XXX
%10168:	load	 %10167
%10169:	shl	 %10168 XXX
%10170:	store	 %10169 %10167
%10171:	getelementptr	 bufp XXX XXX
%10172:	load	 %10171
%10173:	icmp	 %10172 XXX
%10174:	br	 %10173 if.end2625 if.then2623

BASIC BLOCK if.then2623
%10175:	getelementptr	 bufp XXX XXX
%10176:	store	 XXX %10175
%10177:	br	 if.end2625

BASIC BLOCK if.end2625
%10178:	getelementptr	 bufp XXX XXX
%10179:	load	 %10178
%10180:	getelementptr	 bufp XXX XXX
%10181:	load	 %10180
%10182:	call	 %10179 %10181 realloc
%10183:	getelementptr	 bufp XXX XXX
%10184:	store	 %10182 %10183
%10185:	getelementptr	 bufp XXX XXX
%10186:	load	 %10185
%10187:	icmp	 %10186 XXX
%10188:	br	 %10187 if.end2634 if.then2633

BASIC BLOCK if.then2633
%10189:	br	 return

BASIC BLOCK if.end2634
%10190:	getelementptr	 bufp XXX XXX
%10191:	load	 %10190
%10192:	icmp	 %10161 %10191
%10193:	br	 %10192 if.end2673 if.then2638

BASIC BLOCK if.then2638
%10194:	ptrtoint	 %10148
%10195:	ptrtoint	 %10161
%10196:	sub	 %10194 %10195
%10197:	getelementptr	 bufp XXX XXX
%10198:	load	 %10197
%10199:	getelementptr	 %10198 %10196
%10200:	ptrtoint	 %10145
%10201:	ptrtoint	 %10161
%10202:	sub	 %10200 %10201
%10203:	getelementptr	 bufp XXX XXX
%10204:	load	 %10203
%10205:	getelementptr	 %10204 %10202
%10206:	icmp	 %10144 XXX
%10207:	br	 %10206 if.end2656 if.then2650

BASIC BLOCK if.then2650
%10208:	ptrtoint	 %10144
%10209:	ptrtoint	 %10161
%10210:	sub	 %10208 %10209
%10211:	getelementptr	 bufp XXX XXX
%10212:	load	 %10211
%10213:	getelementptr	 %10212 %10210
%10214:	br	 if.end2656

BASIC BLOCK if.end2656
%10215:	phi	 %10213 %10144
%10216:	icmp	 %10146 XXX
%10217:	br	 %10216 if.end2664 if.then2658

BASIC BLOCK if.then2658
%10218:	ptrtoint	 %10146
%10219:	ptrtoint	 %10161
%10220:	sub	 %10218 %10219
%10221:	getelementptr	 bufp XXX XXX
%10222:	load	 %10221
%10223:	getelementptr	 %10222 %10220
%10224:	br	 if.end2664

BASIC BLOCK if.end2664
%10225:	phi	 %10223 %10146
%10226:	icmp	 %10147 XXX
%10227:	br	 %10226 if.end2672 if.then2666

BASIC BLOCK if.then2666
%10228:	ptrtoint	 %10147
%10229:	ptrtoint	 %10161
%10230:	sub	 %10228 %10229
%10231:	getelementptr	 bufp XXX XXX
%10232:	load	 %10231
%10233:	getelementptr	 %10232 %10230
%10234:	br	 if.end2672

BASIC BLOCK if.end2672
%10235:	phi	 %10233 %10147
%10236:	br	 if.end2673

BASIC BLOCK if.end2673
%10237:	phi	 %10215 %10144
%10238:	phi	 %10205 %10145
%10239:	phi	 %10225 %10146
%10240:	phi	 %10235 %10147
%10241:	phi	 %10199 %10148
%10242:	br	 do.end2674

BASIC BLOCK do.end2674
%10243:	br	 while.cond2600

BASIC BLOCK while.end2675
%10244:	getelementptr	 %10148 XXX
%10245:	store	 XXX %10148
%10246:	br	 do.end2677

BASIC BLOCK do.end2677
%10247:	br	 sw.epilog

BASIC BLOCK sw.bb2678
%10248:	br	 do.body2679

BASIC BLOCK do.body2679
%10249:	br	 while.cond2680

BASIC BLOCK while.cond2680
%10250:	phi	 %6870 %10343
%10251:	phi	 %6871 %10344
%10252:	phi	 %6874 %10345
%10253:	phi	 %6873 %10346
%10254:	phi	 %6874 %10347
%10255:	getelementptr	 bufp XXX XXX
%10256:	load	 %10255
%10257:	ptrtoint	 %10254
%10258:	ptrtoint	 %10256
%10259:	sub	 %10257 %10258
%10260:	add	 %10259 XXX
%10261:	getelementptr	 bufp XXX XXX
%10262:	load	 %10261
%10263:	icmp	 %10260 %10262
%10264:	br	 %10263 while.end2755 while.body2689

BASIC BLOCK while.body2689
%10265:	br	 do.body2690

BASIC BLOCK do.body2690
%10266:	getelementptr	 bufp XXX XXX
%10267:	load	 %10266
%10268:	getelementptr	 bufp XXX XXX
%10269:	load	 %10268
%10270:	icmp	 %10269 XXX
%10271:	br	 %10270 if.end2697 if.then2696

BASIC BLOCK if.then2696
%10272:	br	 return

BASIC BLOCK if.end2697
%10273:	getelementptr	 bufp XXX XXX
%10274:	load	 %10273
%10275:	shl	 %10274 XXX
%10276:	store	 %10275 %10273
%10277:	getelementptr	 bufp XXX XXX
%10278:	load	 %10277
%10279:	icmp	 %10278 XXX
%10280:	br	 %10279 if.end2705 if.then2703

BASIC BLOCK if.then2703
%10281:	getelementptr	 bufp XXX XXX
%10282:	store	 XXX %10281
%10283:	br	 if.end2705

BASIC BLOCK if.end2705
%10284:	getelementptr	 bufp XXX XXX
%10285:	load	 %10284
%10286:	getelementptr	 bufp XXX XXX
%10287:	load	 %10286
%10288:	call	 %10285 %10287 realloc
%10289:	getelementptr	 bufp XXX XXX
%10290:	store	 %10288 %10289
%10291:	getelementptr	 bufp XXX XXX
%10292:	load	 %10291
%10293:	icmp	 %10292 XXX
%10294:	br	 %10293 if.end2714 if.then2713

BASIC BLOCK if.then2713
%10295:	br	 return

BASIC BLOCK if.end2714
%10296:	getelementptr	 bufp XXX XXX
%10297:	load	 %10296
%10298:	icmp	 %10267 %10297
%10299:	br	 %10298 if.end2753 if.then2718

BASIC BLOCK if.then2718
%10300:	ptrtoint	 %10254
%10301:	ptrtoint	 %10267
%10302:	sub	 %10300 %10301
%10303:	getelementptr	 bufp XXX XXX
%10304:	load	 %10303
%10305:	getelementptr	 %10304 %10302
%10306:	ptrtoint	 %10251
%10307:	ptrtoint	 %10267
%10308:	sub	 %10306 %10307
%10309:	getelementptr	 bufp XXX XXX
%10310:	load	 %10309
%10311:	getelementptr	 %10310 %10308
%10312:	icmp	 %10250 XXX
%10313:	br	 %10312 if.end2736 if.then2730

BASIC BLOCK if.then2730
%10314:	ptrtoint	 %10250
%10315:	ptrtoint	 %10267
%10316:	sub	 %10314 %10315
%10317:	getelementptr	 bufp XXX XXX
%10318:	load	 %10317
%10319:	getelementptr	 %10318 %10316
%10320:	br	 if.end2736

BASIC BLOCK if.end2736
%10321:	phi	 %10319 %10250
%10322:	icmp	 %10252 XXX
%10323:	br	 %10322 if.end2744 if.then2738

BASIC BLOCK if.then2738
%10324:	ptrtoint	 %10252
%10325:	ptrtoint	 %10267
%10326:	sub	 %10324 %10325
%10327:	getelementptr	 bufp XXX XXX
%10328:	load	 %10327
%10329:	getelementptr	 %10328 %10326
%10330:	br	 if.end2744

BASIC BLOCK if.end2744
%10331:	phi	 %10329 %10252
%10332:	icmp	 %10253 XXX
%10333:	br	 %10332 if.end2752 if.then2746

BASIC BLOCK if.then2746
%10334:	ptrtoint	 %10253
%10335:	ptrtoint	 %10267
%10336:	sub	 %10334 %10335
%10337:	getelementptr	 bufp XXX XXX
%10338:	load	 %10337
%10339:	getelementptr	 %10338 %10336
%10340:	br	 if.end2752

BASIC BLOCK if.end2752
%10341:	phi	 %10339 %10253
%10342:	br	 if.end2753

BASIC BLOCK if.end2753
%10343:	phi	 %10321 %10250
%10344:	phi	 %10311 %10251
%10345:	phi	 %10331 %10252
%10346:	phi	 %10341 %10253
%10347:	phi	 %10305 %10254
%10348:	br	 do.end2754

BASIC BLOCK do.end2754
%10349:	br	 while.cond2680

BASIC BLOCK while.end2755
%10350:	getelementptr	 %10254 XXX
%10351:	store	 XXX %10254
%10352:	br	 do.end2757

BASIC BLOCK do.end2757
%10353:	br	 sw.epilog

BASIC BLOCK sw.bb2758
%10354:	br	 do.body2759

BASIC BLOCK do.body2759
%10355:	br	 while.cond2760

BASIC BLOCK while.cond2760
%10356:	phi	 %6870 %10449
%10357:	phi	 %6871 %10450
%10358:	phi	 %6872 %10451
%10359:	phi	 %6873 %10452
%10360:	phi	 %6874 %10453
%10361:	getelementptr	 bufp XXX XXX
%10362:	load	 %10361
%10363:	ptrtoint	 %10360
%10364:	ptrtoint	 %10362
%10365:	sub	 %10363 %10364
%10366:	add	 %10365 XXX
%10367:	getelementptr	 bufp XXX XXX
%10368:	load	 %10367
%10369:	icmp	 %10366 %10368
%10370:	br	 %10369 while.end2835 while.body2769

BASIC BLOCK while.body2769
%10371:	br	 do.body2770

BASIC BLOCK do.body2770
%10372:	getelementptr	 bufp XXX XXX
%10373:	load	 %10372
%10374:	getelementptr	 bufp XXX XXX
%10375:	load	 %10374
%10376:	icmp	 %10375 XXX
%10377:	br	 %10376 if.end2777 if.then2776

BASIC BLOCK if.then2776
%10378:	br	 return

BASIC BLOCK if.end2777
%10379:	getelementptr	 bufp XXX XXX
%10380:	load	 %10379
%10381:	shl	 %10380 XXX
%10382:	store	 %10381 %10379
%10383:	getelementptr	 bufp XXX XXX
%10384:	load	 %10383
%10385:	icmp	 %10384 XXX
%10386:	br	 %10385 if.end2785 if.then2783

BASIC BLOCK if.then2783
%10387:	getelementptr	 bufp XXX XXX
%10388:	store	 XXX %10387
%10389:	br	 if.end2785

BASIC BLOCK if.end2785
%10390:	getelementptr	 bufp XXX XXX
%10391:	load	 %10390
%10392:	getelementptr	 bufp XXX XXX
%10393:	load	 %10392
%10394:	call	 %10391 %10393 realloc
%10395:	getelementptr	 bufp XXX XXX
%10396:	store	 %10394 %10395
%10397:	getelementptr	 bufp XXX XXX
%10398:	load	 %10397
%10399:	icmp	 %10398 XXX
%10400:	br	 %10399 if.end2794 if.then2793

BASIC BLOCK if.then2793
%10401:	br	 return

BASIC BLOCK if.end2794
%10402:	getelementptr	 bufp XXX XXX
%10403:	load	 %10402
%10404:	icmp	 %10373 %10403
%10405:	br	 %10404 if.end2833 if.then2798

BASIC BLOCK if.then2798
%10406:	ptrtoint	 %10360
%10407:	ptrtoint	 %10373
%10408:	sub	 %10406 %10407
%10409:	getelementptr	 bufp XXX XXX
%10410:	load	 %10409
%10411:	getelementptr	 %10410 %10408
%10412:	ptrtoint	 %10357
%10413:	ptrtoint	 %10373
%10414:	sub	 %10412 %10413
%10415:	getelementptr	 bufp XXX XXX
%10416:	load	 %10415
%10417:	getelementptr	 %10416 %10414
%10418:	icmp	 %10356 XXX
%10419:	br	 %10418 if.end2816 if.then2810

BASIC BLOCK if.then2810
%10420:	ptrtoint	 %10356
%10421:	ptrtoint	 %10373
%10422:	sub	 %10420 %10421
%10423:	getelementptr	 bufp XXX XXX
%10424:	load	 %10423
%10425:	getelementptr	 %10424 %10422
%10426:	br	 if.end2816

BASIC BLOCK if.end2816
%10427:	phi	 %10425 %10356
%10428:	icmp	 %10358 XXX
%10429:	br	 %10428 if.end2824 if.then2818

BASIC BLOCK if.then2818
%10430:	ptrtoint	 %10358
%10431:	ptrtoint	 %10373
%10432:	sub	 %10430 %10431
%10433:	getelementptr	 bufp XXX XXX
%10434:	load	 %10433
%10435:	getelementptr	 %10434 %10432
%10436:	br	 if.end2824

BASIC BLOCK if.end2824
%10437:	phi	 %10435 %10358
%10438:	icmp	 %10359 XXX
%10439:	br	 %10438 if.end2832 if.then2826

BASIC BLOCK if.then2826
%10440:	ptrtoint	 %10359
%10441:	ptrtoint	 %10373
%10442:	sub	 %10440 %10441
%10443:	getelementptr	 bufp XXX XXX
%10444:	load	 %10443
%10445:	getelementptr	 %10444 %10442
%10446:	br	 if.end2832

BASIC BLOCK if.end2832
%10447:	phi	 %10445 %10359
%10448:	br	 if.end2833

BASIC BLOCK if.end2833
%10449:	phi	 %10427 %10356
%10450:	phi	 %10417 %10357
%10451:	phi	 %10437 %10358
%10452:	phi	 %10447 %10359
%10453:	phi	 %10411 %10360
%10454:	br	 do.end2834

BASIC BLOCK do.end2834
%10455:	br	 while.cond2760

BASIC BLOCK while.end2835
%10456:	getelementptr	 %10360 XXX
%10457:	store	 XXX %10360
%10458:	br	 do.end2837

BASIC BLOCK do.end2837
%10459:	br	 sw.epilog

BASIC BLOCK sw.bb2838
%10460:	br	 do.body2839

BASIC BLOCK do.body2839
%10461:	br	 while.cond2840

BASIC BLOCK while.cond2840
%10462:	phi	 %6870 %10555
%10463:	phi	 %6871 %10556
%10464:	phi	 %6872 %10557
%10465:	phi	 %6873 %10558
%10466:	phi	 %6874 %10559
%10467:	getelementptr	 bufp XXX XXX
%10468:	load	 %10467
%10469:	ptrtoint	 %10466
%10470:	ptrtoint	 %10468
%10471:	sub	 %10469 %10470
%10472:	add	 %10471 XXX
%10473:	getelementptr	 bufp XXX XXX
%10474:	load	 %10473
%10475:	icmp	 %10472 %10474
%10476:	br	 %10475 while.end2915 while.body2849

BASIC BLOCK while.body2849
%10477:	br	 do.body2850

BASIC BLOCK do.body2850
%10478:	getelementptr	 bufp XXX XXX
%10479:	load	 %10478
%10480:	getelementptr	 bufp XXX XXX
%10481:	load	 %10480
%10482:	icmp	 %10481 XXX
%10483:	br	 %10482 if.end2857 if.then2856

BASIC BLOCK if.then2856
%10484:	br	 return

BASIC BLOCK if.end2857
%10485:	getelementptr	 bufp XXX XXX
%10486:	load	 %10485
%10487:	shl	 %10486 XXX
%10488:	store	 %10487 %10485
%10489:	getelementptr	 bufp XXX XXX
%10490:	load	 %10489
%10491:	icmp	 %10490 XXX
%10492:	br	 %10491 if.end2865 if.then2863

BASIC BLOCK if.then2863
%10493:	getelementptr	 bufp XXX XXX
%10494:	store	 XXX %10493
%10495:	br	 if.end2865

BASIC BLOCK if.end2865
%10496:	getelementptr	 bufp XXX XXX
%10497:	load	 %10496
%10498:	getelementptr	 bufp XXX XXX
%10499:	load	 %10498
%10500:	call	 %10497 %10499 realloc
%10501:	getelementptr	 bufp XXX XXX
%10502:	store	 %10500 %10501
%10503:	getelementptr	 bufp XXX XXX
%10504:	load	 %10503
%10505:	icmp	 %10504 XXX
%10506:	br	 %10505 if.end2874 if.then2873

BASIC BLOCK if.then2873
%10507:	br	 return

BASIC BLOCK if.end2874
%10508:	getelementptr	 bufp XXX XXX
%10509:	load	 %10508
%10510:	icmp	 %10479 %10509
%10511:	br	 %10510 if.end2913 if.then2878

BASIC BLOCK if.then2878
%10512:	ptrtoint	 %10466
%10513:	ptrtoint	 %10479
%10514:	sub	 %10512 %10513
%10515:	getelementptr	 bufp XXX XXX
%10516:	load	 %10515
%10517:	getelementptr	 %10516 %10514
%10518:	ptrtoint	 %10463
%10519:	ptrtoint	 %10479
%10520:	sub	 %10518 %10519
%10521:	getelementptr	 bufp XXX XXX
%10522:	load	 %10521
%10523:	getelementptr	 %10522 %10520
%10524:	icmp	 %10462 XXX
%10525:	br	 %10524 if.end2896 if.then2890

BASIC BLOCK if.then2890
%10526:	ptrtoint	 %10462
%10527:	ptrtoint	 %10479
%10528:	sub	 %10526 %10527
%10529:	getelementptr	 bufp XXX XXX
%10530:	load	 %10529
%10531:	getelementptr	 %10530 %10528
%10532:	br	 if.end2896

BASIC BLOCK if.end2896
%10533:	phi	 %10531 %10462
%10534:	icmp	 %10464 XXX
%10535:	br	 %10534 if.end2904 if.then2898

BASIC BLOCK if.then2898
%10536:	ptrtoint	 %10464
%10537:	ptrtoint	 %10479
%10538:	sub	 %10536 %10537
%10539:	getelementptr	 bufp XXX XXX
%10540:	load	 %10539
%10541:	getelementptr	 %10540 %10538
%10542:	br	 if.end2904

BASIC BLOCK if.end2904
%10543:	phi	 %10541 %10464
%10544:	icmp	 %10465 XXX
%10545:	br	 %10544 if.end2912 if.then2906

BASIC BLOCK if.then2906
%10546:	ptrtoint	 %10465
%10547:	ptrtoint	 %10479
%10548:	sub	 %10546 %10547
%10549:	getelementptr	 bufp XXX XXX
%10550:	load	 %10549
%10551:	getelementptr	 %10550 %10548
%10552:	br	 if.end2912

BASIC BLOCK if.end2912
%10553:	phi	 %10551 %10465
%10554:	br	 if.end2913

BASIC BLOCK if.end2913
%10555:	phi	 %10533 %10462
%10556:	phi	 %10523 %10463
%10557:	phi	 %10543 %10464
%10558:	phi	 %10553 %10465
%10559:	phi	 %10517 %10466
%10560:	br	 do.end2914

BASIC BLOCK do.end2914
%10561:	br	 while.cond2840

BASIC BLOCK while.end2915
%10562:	getelementptr	 %10466 XXX
%10563:	store	 XXX %10466
%10564:	br	 do.end2917

BASIC BLOCK do.end2917
%10565:	br	 sw.epilog

BASIC BLOCK sw.bb2918
%10566:	br	 do.body2919

BASIC BLOCK do.body2919
%10567:	br	 while.cond2920

BASIC BLOCK while.cond2920
%10568:	phi	 %6870 %10661
%10569:	phi	 %6871 %10662
%10570:	phi	 %6872 %10663
%10571:	phi	 %6873 %10664
%10572:	phi	 %6874 %10665
%10573:	getelementptr	 bufp XXX XXX
%10574:	load	 %10573
%10575:	ptrtoint	 %10572
%10576:	ptrtoint	 %10574
%10577:	sub	 %10575 %10576
%10578:	add	 %10577 XXX
%10579:	getelementptr	 bufp XXX XXX
%10580:	load	 %10579
%10581:	icmp	 %10578 %10580
%10582:	br	 %10581 while.end2995 while.body2929

BASIC BLOCK while.body2929
%10583:	br	 do.body2930

BASIC BLOCK do.body2930
%10584:	getelementptr	 bufp XXX XXX
%10585:	load	 %10584
%10586:	getelementptr	 bufp XXX XXX
%10587:	load	 %10586
%10588:	icmp	 %10587 XXX
%10589:	br	 %10588 if.end2937 if.then2936

BASIC BLOCK if.then2936
%10590:	br	 return

BASIC BLOCK if.end2937
%10591:	getelementptr	 bufp XXX XXX
%10592:	load	 %10591
%10593:	shl	 %10592 XXX
%10594:	store	 %10593 %10591
%10595:	getelementptr	 bufp XXX XXX
%10596:	load	 %10595
%10597:	icmp	 %10596 XXX
%10598:	br	 %10597 if.end2945 if.then2943

BASIC BLOCK if.then2943
%10599:	getelementptr	 bufp XXX XXX
%10600:	store	 XXX %10599
%10601:	br	 if.end2945

BASIC BLOCK if.end2945
%10602:	getelementptr	 bufp XXX XXX
%10603:	load	 %10602
%10604:	getelementptr	 bufp XXX XXX
%10605:	load	 %10604
%10606:	call	 %10603 %10605 realloc
%10607:	getelementptr	 bufp XXX XXX
%10608:	store	 %10606 %10607
%10609:	getelementptr	 bufp XXX XXX
%10610:	load	 %10609
%10611:	icmp	 %10610 XXX
%10612:	br	 %10611 if.end2954 if.then2953

BASIC BLOCK if.then2953
%10613:	br	 return

BASIC BLOCK if.end2954
%10614:	getelementptr	 bufp XXX XXX
%10615:	load	 %10614
%10616:	icmp	 %10585 %10615
%10617:	br	 %10616 if.end2993 if.then2958

BASIC BLOCK if.then2958
%10618:	ptrtoint	 %10572
%10619:	ptrtoint	 %10585
%10620:	sub	 %10618 %10619
%10621:	getelementptr	 bufp XXX XXX
%10622:	load	 %10621
%10623:	getelementptr	 %10622 %10620
%10624:	ptrtoint	 %10569
%10625:	ptrtoint	 %10585
%10626:	sub	 %10624 %10625
%10627:	getelementptr	 bufp XXX XXX
%10628:	load	 %10627
%10629:	getelementptr	 %10628 %10626
%10630:	icmp	 %10568 XXX
%10631:	br	 %10630 if.end2976 if.then2970

BASIC BLOCK if.then2970
%10632:	ptrtoint	 %10568
%10633:	ptrtoint	 %10585
%10634:	sub	 %10632 %10633
%10635:	getelementptr	 bufp XXX XXX
%10636:	load	 %10635
%10637:	getelementptr	 %10636 %10634
%10638:	br	 if.end2976

BASIC BLOCK if.end2976
%10639:	phi	 %10637 %10568
%10640:	icmp	 %10570 XXX
%10641:	br	 %10640 if.end2984 if.then2978

BASIC BLOCK if.then2978
%10642:	ptrtoint	 %10570
%10643:	ptrtoint	 %10585
%10644:	sub	 %10642 %10643
%10645:	getelementptr	 bufp XXX XXX
%10646:	load	 %10645
%10647:	getelementptr	 %10646 %10644
%10648:	br	 if.end2984

BASIC BLOCK if.end2984
%10649:	phi	 %10647 %10570
%10650:	icmp	 %10571 XXX
%10651:	br	 %10650 if.end2992 if.then2986

BASIC BLOCK if.then2986
%10652:	ptrtoint	 %10571
%10653:	ptrtoint	 %10585
%10654:	sub	 %10652 %10653
%10655:	getelementptr	 bufp XXX XXX
%10656:	load	 %10655
%10657:	getelementptr	 %10656 %10654
%10658:	br	 if.end2992

BASIC BLOCK if.end2992
%10659:	phi	 %10657 %10571
%10660:	br	 if.end2993

BASIC BLOCK if.end2993
%10661:	phi	 %10639 %10568
%10662:	phi	 %10629 %10569
%10663:	phi	 %10649 %10570
%10664:	phi	 %10659 %10571
%10665:	phi	 %10623 %10572
%10666:	br	 do.end2994

BASIC BLOCK do.end2994
%10667:	br	 while.cond2920

BASIC BLOCK while.end2995
%10668:	getelementptr	 %10572 XXX
%10669:	store	 XXX %10572
%10670:	br	 do.end2997

BASIC BLOCK do.end2997
%10671:	br	 sw.epilog

BASIC BLOCK sw.bb2998
%10672:	br	 do.body2999

BASIC BLOCK do.body2999
%10673:	br	 while.cond3000

BASIC BLOCK while.cond3000
%10674:	phi	 %6870 %10767
%10675:	phi	 %6871 %10768
%10676:	phi	 %6872 %10769
%10677:	phi	 %6873 %10770
%10678:	phi	 %6874 %10771
%10679:	getelementptr	 bufp XXX XXX
%10680:	load	 %10679
%10681:	ptrtoint	 %10678
%10682:	ptrtoint	 %10680
%10683:	sub	 %10681 %10682
%10684:	add	 %10683 XXX
%10685:	getelementptr	 bufp XXX XXX
%10686:	load	 %10685
%10687:	icmp	 %10684 %10686
%10688:	br	 %10687 while.end3075 while.body3009

BASIC BLOCK while.body3009
%10689:	br	 do.body3010

BASIC BLOCK do.body3010
%10690:	getelementptr	 bufp XXX XXX
%10691:	load	 %10690
%10692:	getelementptr	 bufp XXX XXX
%10693:	load	 %10692
%10694:	icmp	 %10693 XXX
%10695:	br	 %10694 if.end3017 if.then3016

BASIC BLOCK if.then3016
%10696:	br	 return

BASIC BLOCK if.end3017
%10697:	getelementptr	 bufp XXX XXX
%10698:	load	 %10697
%10699:	shl	 %10698 XXX
%10700:	store	 %10699 %10697
%10701:	getelementptr	 bufp XXX XXX
%10702:	load	 %10701
%10703:	icmp	 %10702 XXX
%10704:	br	 %10703 if.end3025 if.then3023

BASIC BLOCK if.then3023
%10705:	getelementptr	 bufp XXX XXX
%10706:	store	 XXX %10705
%10707:	br	 if.end3025

BASIC BLOCK if.end3025
%10708:	getelementptr	 bufp XXX XXX
%10709:	load	 %10708
%10710:	getelementptr	 bufp XXX XXX
%10711:	load	 %10710
%10712:	call	 %10709 %10711 realloc
%10713:	getelementptr	 bufp XXX XXX
%10714:	store	 %10712 %10713
%10715:	getelementptr	 bufp XXX XXX
%10716:	load	 %10715
%10717:	icmp	 %10716 XXX
%10718:	br	 %10717 if.end3034 if.then3033

BASIC BLOCK if.then3033
%10719:	br	 return

BASIC BLOCK if.end3034
%10720:	getelementptr	 bufp XXX XXX
%10721:	load	 %10720
%10722:	icmp	 %10691 %10721
%10723:	br	 %10722 if.end3073 if.then3038

BASIC BLOCK if.then3038
%10724:	ptrtoint	 %10678
%10725:	ptrtoint	 %10691
%10726:	sub	 %10724 %10725
%10727:	getelementptr	 bufp XXX XXX
%10728:	load	 %10727
%10729:	getelementptr	 %10728 %10726
%10730:	ptrtoint	 %10675
%10731:	ptrtoint	 %10691
%10732:	sub	 %10730 %10731
%10733:	getelementptr	 bufp XXX XXX
%10734:	load	 %10733
%10735:	getelementptr	 %10734 %10732
%10736:	icmp	 %10674 XXX
%10737:	br	 %10736 if.end3056 if.then3050

BASIC BLOCK if.then3050
%10738:	ptrtoint	 %10674
%10739:	ptrtoint	 %10691
%10740:	sub	 %10738 %10739
%10741:	getelementptr	 bufp XXX XXX
%10742:	load	 %10741
%10743:	getelementptr	 %10742 %10740
%10744:	br	 if.end3056

BASIC BLOCK if.end3056
%10745:	phi	 %10743 %10674
%10746:	icmp	 %10676 XXX
%10747:	br	 %10746 if.end3064 if.then3058

BASIC BLOCK if.then3058
%10748:	ptrtoint	 %10676
%10749:	ptrtoint	 %10691
%10750:	sub	 %10748 %10749
%10751:	getelementptr	 bufp XXX XXX
%10752:	load	 %10751
%10753:	getelementptr	 %10752 %10750
%10754:	br	 if.end3064

BASIC BLOCK if.end3064
%10755:	phi	 %10753 %10676
%10756:	icmp	 %10677 XXX
%10757:	br	 %10756 if.end3072 if.then3066

BASIC BLOCK if.then3066
%10758:	ptrtoint	 %10677
%10759:	ptrtoint	 %10691
%10760:	sub	 %10758 %10759
%10761:	getelementptr	 bufp XXX XXX
%10762:	load	 %10761
%10763:	getelementptr	 %10762 %10760
%10764:	br	 if.end3072

BASIC BLOCK if.end3072
%10765:	phi	 %10763 %10677
%10766:	br	 if.end3073

BASIC BLOCK if.end3073
%10767:	phi	 %10745 %10674
%10768:	phi	 %10735 %10675
%10769:	phi	 %10755 %10676
%10770:	phi	 %10765 %10677
%10771:	phi	 %10729 %10678
%10772:	br	 do.end3074

BASIC BLOCK do.end3074
%10773:	br	 while.cond3000

BASIC BLOCK while.end3075
%10774:	getelementptr	 %10678 XXX
%10775:	store	 XXX %10678
%10776:	br	 do.end3077

BASIC BLOCK do.end3077
%10777:	br	 sw.epilog

BASIC BLOCK sw.bb3078
%10778:	br	 do.body3079

BASIC BLOCK do.body3079
%10779:	br	 while.cond3080

BASIC BLOCK while.cond3080
%10780:	phi	 %6870 %10873
%10781:	phi	 %6871 %10874
%10782:	phi	 %6872 %10875
%10783:	phi	 %6873 %10876
%10784:	phi	 %6874 %10877
%10785:	getelementptr	 bufp XXX XXX
%10786:	load	 %10785
%10787:	ptrtoint	 %10784
%10788:	ptrtoint	 %10786
%10789:	sub	 %10787 %10788
%10790:	add	 %10789 XXX
%10791:	getelementptr	 bufp XXX XXX
%10792:	load	 %10791
%10793:	icmp	 %10790 %10792
%10794:	br	 %10793 while.end3155 while.body3089

BASIC BLOCK while.body3089
%10795:	br	 do.body3090

BASIC BLOCK do.body3090
%10796:	getelementptr	 bufp XXX XXX
%10797:	load	 %10796
%10798:	getelementptr	 bufp XXX XXX
%10799:	load	 %10798
%10800:	icmp	 %10799 XXX
%10801:	br	 %10800 if.end3097 if.then3096

BASIC BLOCK if.then3096
%10802:	br	 return

BASIC BLOCK if.end3097
%10803:	getelementptr	 bufp XXX XXX
%10804:	load	 %10803
%10805:	shl	 %10804 XXX
%10806:	store	 %10805 %10803
%10807:	getelementptr	 bufp XXX XXX
%10808:	load	 %10807
%10809:	icmp	 %10808 XXX
%10810:	br	 %10809 if.end3105 if.then3103

BASIC BLOCK if.then3103
%10811:	getelementptr	 bufp XXX XXX
%10812:	store	 XXX %10811
%10813:	br	 if.end3105

BASIC BLOCK if.end3105
%10814:	getelementptr	 bufp XXX XXX
%10815:	load	 %10814
%10816:	getelementptr	 bufp XXX XXX
%10817:	load	 %10816
%10818:	call	 %10815 %10817 realloc
%10819:	getelementptr	 bufp XXX XXX
%10820:	store	 %10818 %10819
%10821:	getelementptr	 bufp XXX XXX
%10822:	load	 %10821
%10823:	icmp	 %10822 XXX
%10824:	br	 %10823 if.end3114 if.then3113

BASIC BLOCK if.then3113
%10825:	br	 return

BASIC BLOCK if.end3114
%10826:	getelementptr	 bufp XXX XXX
%10827:	load	 %10826
%10828:	icmp	 %10797 %10827
%10829:	br	 %10828 if.end3153 if.then3118

BASIC BLOCK if.then3118
%10830:	ptrtoint	 %10784
%10831:	ptrtoint	 %10797
%10832:	sub	 %10830 %10831
%10833:	getelementptr	 bufp XXX XXX
%10834:	load	 %10833
%10835:	getelementptr	 %10834 %10832
%10836:	ptrtoint	 %10781
%10837:	ptrtoint	 %10797
%10838:	sub	 %10836 %10837
%10839:	getelementptr	 bufp XXX XXX
%10840:	load	 %10839
%10841:	getelementptr	 %10840 %10838
%10842:	icmp	 %10780 XXX
%10843:	br	 %10842 if.end3136 if.then3130

BASIC BLOCK if.then3130
%10844:	ptrtoint	 %10780
%10845:	ptrtoint	 %10797
%10846:	sub	 %10844 %10845
%10847:	getelementptr	 bufp XXX XXX
%10848:	load	 %10847
%10849:	getelementptr	 %10848 %10846
%10850:	br	 if.end3136

BASIC BLOCK if.end3136
%10851:	phi	 %10849 %10780
%10852:	icmp	 %10782 XXX
%10853:	br	 %10852 if.end3144 if.then3138

BASIC BLOCK if.then3138
%10854:	ptrtoint	 %10782
%10855:	ptrtoint	 %10797
%10856:	sub	 %10854 %10855
%10857:	getelementptr	 bufp XXX XXX
%10858:	load	 %10857
%10859:	getelementptr	 %10858 %10856
%10860:	br	 if.end3144

BASIC BLOCK if.end3144
%10861:	phi	 %10859 %10782
%10862:	icmp	 %10783 XXX
%10863:	br	 %10862 if.end3152 if.then3146

BASIC BLOCK if.then3146
%10864:	ptrtoint	 %10783
%10865:	ptrtoint	 %10797
%10866:	sub	 %10864 %10865
%10867:	getelementptr	 bufp XXX XXX
%10868:	load	 %10867
%10869:	getelementptr	 %10868 %10866
%10870:	br	 if.end3152

BASIC BLOCK if.end3152
%10871:	phi	 %10869 %10783
%10872:	br	 if.end3153

BASIC BLOCK if.end3153
%10873:	phi	 %10851 %10780
%10874:	phi	 %10841 %10781
%10875:	phi	 %10861 %10782
%10876:	phi	 %10871 %10783
%10877:	phi	 %10835 %10784
%10878:	br	 do.end3154

BASIC BLOCK do.end3154
%10879:	br	 while.cond3080

BASIC BLOCK while.end3155
%10880:	getelementptr	 %10784 XXX
%10881:	store	 XXX %10784
%10882:	br	 do.end3157

BASIC BLOCK do.end3157
%10883:	br	 sw.epilog

BASIC BLOCK sw.bb3158
%10884:	br	 do.body3159

BASIC BLOCK do.body3159
%10885:	br	 while.cond3160

BASIC BLOCK while.cond3160
%10886:	phi	 %6870 %10979
%10887:	phi	 %6871 %10980
%10888:	phi	 %6872 %10981
%10889:	phi	 %6873 %10982
%10890:	phi	 %6874 %10983
%10891:	getelementptr	 bufp XXX XXX
%10892:	load	 %10891
%10893:	ptrtoint	 %10890
%10894:	ptrtoint	 %10892
%10895:	sub	 %10893 %10894
%10896:	add	 %10895 XXX
%10897:	getelementptr	 bufp XXX XXX
%10898:	load	 %10897
%10899:	icmp	 %10896 %10898
%10900:	br	 %10899 while.end3235 while.body3169

BASIC BLOCK while.body3169
%10901:	br	 do.body3170

BASIC BLOCK do.body3170
%10902:	getelementptr	 bufp XXX XXX
%10903:	load	 %10902
%10904:	getelementptr	 bufp XXX XXX
%10905:	load	 %10904
%10906:	icmp	 %10905 XXX
%10907:	br	 %10906 if.end3177 if.then3176

BASIC BLOCK if.then3176
%10908:	br	 return

BASIC BLOCK if.end3177
%10909:	getelementptr	 bufp XXX XXX
%10910:	load	 %10909
%10911:	shl	 %10910 XXX
%10912:	store	 %10911 %10909
%10913:	getelementptr	 bufp XXX XXX
%10914:	load	 %10913
%10915:	icmp	 %10914 XXX
%10916:	br	 %10915 if.end3185 if.then3183

BASIC BLOCK if.then3183
%10917:	getelementptr	 bufp XXX XXX
%10918:	store	 XXX %10917
%10919:	br	 if.end3185

BASIC BLOCK if.end3185
%10920:	getelementptr	 bufp XXX XXX
%10921:	load	 %10920
%10922:	getelementptr	 bufp XXX XXX
%10923:	load	 %10922
%10924:	call	 %10921 %10923 realloc
%10925:	getelementptr	 bufp XXX XXX
%10926:	store	 %10924 %10925
%10927:	getelementptr	 bufp XXX XXX
%10928:	load	 %10927
%10929:	icmp	 %10928 XXX
%10930:	br	 %10929 if.end3194 if.then3193

BASIC BLOCK if.then3193
%10931:	br	 return

BASIC BLOCK if.end3194
%10932:	getelementptr	 bufp XXX XXX
%10933:	load	 %10932
%10934:	icmp	 %10903 %10933
%10935:	br	 %10934 if.end3233 if.then3198

BASIC BLOCK if.then3198
%10936:	ptrtoint	 %10890
%10937:	ptrtoint	 %10903
%10938:	sub	 %10936 %10937
%10939:	getelementptr	 bufp XXX XXX
%10940:	load	 %10939
%10941:	getelementptr	 %10940 %10938
%10942:	ptrtoint	 %10887
%10943:	ptrtoint	 %10903
%10944:	sub	 %10942 %10943
%10945:	getelementptr	 bufp XXX XXX
%10946:	load	 %10945
%10947:	getelementptr	 %10946 %10944
%10948:	icmp	 %10886 XXX
%10949:	br	 %10948 if.end3216 if.then3210

BASIC BLOCK if.then3210
%10950:	ptrtoint	 %10886
%10951:	ptrtoint	 %10903
%10952:	sub	 %10950 %10951
%10953:	getelementptr	 bufp XXX XXX
%10954:	load	 %10953
%10955:	getelementptr	 %10954 %10952
%10956:	br	 if.end3216

BASIC BLOCK if.end3216
%10957:	phi	 %10955 %10886
%10958:	icmp	 %10888 XXX
%10959:	br	 %10958 if.end3224 if.then3218

BASIC BLOCK if.then3218
%10960:	ptrtoint	 %10888
%10961:	ptrtoint	 %10903
%10962:	sub	 %10960 %10961
%10963:	getelementptr	 bufp XXX XXX
%10964:	load	 %10963
%10965:	getelementptr	 %10964 %10962
%10966:	br	 if.end3224

BASIC BLOCK if.end3224
%10967:	phi	 %10965 %10888
%10968:	icmp	 %10889 XXX
%10969:	br	 %10968 if.end3232 if.then3226

BASIC BLOCK if.then3226
%10970:	ptrtoint	 %10889
%10971:	ptrtoint	 %10903
%10972:	sub	 %10970 %10971
%10973:	getelementptr	 bufp XXX XXX
%10974:	load	 %10973
%10975:	getelementptr	 %10974 %10972
%10976:	br	 if.end3232

BASIC BLOCK if.end3232
%10977:	phi	 %10975 %10889
%10978:	br	 if.end3233

BASIC BLOCK if.end3233
%10979:	phi	 %10957 %10886
%10980:	phi	 %10947 %10887
%10981:	phi	 %10967 %10888
%10982:	phi	 %10977 %10889
%10983:	phi	 %10941 %10890
%10984:	br	 do.end3234

BASIC BLOCK do.end3234
%10985:	br	 while.cond3160

BASIC BLOCK while.end3235
%10986:	getelementptr	 %10890 XXX
%10987:	store	 XXX %10890
%10988:	br	 do.end3237

BASIC BLOCK do.end3237
%10989:	br	 sw.epilog

BASIC BLOCK sw.bb3238
%10990:	and	 syntax XXX
%10991:	icmp	 %10990 XXX
%10992:	br	 %10991 if.end3242 if.then3241

BASIC BLOCK if.then3241
%10993:	br	 normal_char

BASIC BLOCK if.end3242
%10994:	zext	 %8804
%10995:	sub	 %10994 XXX
%10996:	trunc	 %10995
%10997:	zext	 %10996
%10998:	icmp	 %10997 %6869
%10999:	br	 %10998 if.end3250 if.then3249

BASIC BLOCK if.then3249
%11000:	br	 return

BASIC BLOCK if.end3250
%11001:	zext	 %10996
%11002:	bitcast	 %6800
%11003:	getelementptr	 %11002 XXX XXX
%11004:	load	 %11003
%11005:	getelementptr	 %11002 XXX XXX
%11006:	load	 %11005
%11007:	call	 %11004 %11006 %11001 group_in_compile_stack
%11008:	icmp	 %11007 XXX
%11009:	br	 %11008 if.end3255 if.then3254

BASIC BLOCK if.then3254
%11010:	br	 normal_char

BASIC BLOCK if.end3255
%11011:	br	 do.body3256

BASIC BLOCK do.body3256
%11012:	br	 while.cond3257

BASIC BLOCK while.cond3257
%11013:	phi	 %6870 %11106
%11014:	phi	 %6871 %11107
%11015:	phi	 %6874 %11108
%11016:	phi	 %6873 %11109
%11017:	phi	 %6874 %11110
%11018:	getelementptr	 bufp XXX XXX
%11019:	load	 %11018
%11020:	ptrtoint	 %11017
%11021:	ptrtoint	 %11019
%11022:	sub	 %11020 %11021
%11023:	add	 %11022 XXX
%11024:	getelementptr	 bufp XXX XXX
%11025:	load	 %11024
%11026:	icmp	 %11023 %11025
%11027:	br	 %11026 while.end3332 while.body3266

BASIC BLOCK while.body3266
%11028:	br	 do.body3267

BASIC BLOCK do.body3267
%11029:	getelementptr	 bufp XXX XXX
%11030:	load	 %11029
%11031:	getelementptr	 bufp XXX XXX
%11032:	load	 %11031
%11033:	icmp	 %11032 XXX
%11034:	br	 %11033 if.end3274 if.then3273

BASIC BLOCK if.then3273
%11035:	br	 return

BASIC BLOCK if.end3274
%11036:	getelementptr	 bufp XXX XXX
%11037:	load	 %11036
%11038:	shl	 %11037 XXX
%11039:	store	 %11038 %11036
%11040:	getelementptr	 bufp XXX XXX
%11041:	load	 %11040
%11042:	icmp	 %11041 XXX
%11043:	br	 %11042 if.end3282 if.then3280

BASIC BLOCK if.then3280
%11044:	getelementptr	 bufp XXX XXX
%11045:	store	 XXX %11044
%11046:	br	 if.end3282

BASIC BLOCK if.end3282
%11047:	getelementptr	 bufp XXX XXX
%11048:	load	 %11047
%11049:	getelementptr	 bufp XXX XXX
%11050:	load	 %11049
%11051:	call	 %11048 %11050 realloc
%11052:	getelementptr	 bufp XXX XXX
%11053:	store	 %11051 %11052
%11054:	getelementptr	 bufp XXX XXX
%11055:	load	 %11054
%11056:	icmp	 %11055 XXX
%11057:	br	 %11056 if.end3291 if.then3290

BASIC BLOCK if.then3290
%11058:	br	 return

BASIC BLOCK if.end3291
%11059:	getelementptr	 bufp XXX XXX
%11060:	load	 %11059
%11061:	icmp	 %11030 %11060
%11062:	br	 %11061 if.end3330 if.then3295

BASIC BLOCK if.then3295
%11063:	ptrtoint	 %11017
%11064:	ptrtoint	 %11030
%11065:	sub	 %11063 %11064
%11066:	getelementptr	 bufp XXX XXX
%11067:	load	 %11066
%11068:	getelementptr	 %11067 %11065
%11069:	ptrtoint	 %11014
%11070:	ptrtoint	 %11030
%11071:	sub	 %11069 %11070
%11072:	getelementptr	 bufp XXX XXX
%11073:	load	 %11072
%11074:	getelementptr	 %11073 %11071
%11075:	icmp	 %11013 XXX
%11076:	br	 %11075 if.end3313 if.then3307

BASIC BLOCK if.then3307
%11077:	ptrtoint	 %11013
%11078:	ptrtoint	 %11030
%11079:	sub	 %11077 %11078
%11080:	getelementptr	 bufp XXX XXX
%11081:	load	 %11080
%11082:	getelementptr	 %11081 %11079
%11083:	br	 if.end3313

BASIC BLOCK if.end3313
%11084:	phi	 %11082 %11013
%11085:	icmp	 %11015 XXX
%11086:	br	 %11085 if.end3321 if.then3315

BASIC BLOCK if.then3315
%11087:	ptrtoint	 %11015
%11088:	ptrtoint	 %11030
%11089:	sub	 %11087 %11088
%11090:	getelementptr	 bufp XXX XXX
%11091:	load	 %11090
%11092:	getelementptr	 %11091 %11089
%11093:	br	 if.end3321

BASIC BLOCK if.end3321
%11094:	phi	 %11092 %11015
%11095:	icmp	 %11016 XXX
%11096:	br	 %11095 if.end3329 if.then3323

BASIC BLOCK if.then3323
%11097:	ptrtoint	 %11016
%11098:	ptrtoint	 %11030
%11099:	sub	 %11097 %11098
%11100:	getelementptr	 bufp XXX XXX
%11101:	load	 %11100
%11102:	getelementptr	 %11101 %11099
%11103:	br	 if.end3329

BASIC BLOCK if.end3329
%11104:	phi	 %11102 %11016
%11105:	br	 if.end3330

BASIC BLOCK if.end3330
%11106:	phi	 %11084 %11013
%11107:	phi	 %11074 %11014
%11108:	phi	 %11094 %11015
%11109:	phi	 %11104 %11016
%11110:	phi	 %11068 %11017
%11111:	br	 do.end3331

BASIC BLOCK do.end3331
%11112:	br	 while.cond3257

BASIC BLOCK while.end3332
%11113:	getelementptr	 %11017 XXX
%11114:	store	 XXX %11017
%11115:	getelementptr	 %11113 XXX
%11116:	store	 %10996 %11113
%11117:	br	 do.end3335

BASIC BLOCK do.end3335
%11118:	br	 sw.epilog

BASIC BLOCK sw.bb3336
%11119:	and	 syntax XXX
%11120:	icmp	 %11119 XXX
%11121:	br	 %11120 if.else3340 if.then3339

BASIC BLOCK if.then3339
%11122:	br	 handle_plus

BASIC BLOCK if.else3340
%11123:	br	 normal_backslash

BASIC BLOCK sw.default
%11124:	br	 normal_backslash

BASIC BLOCK normal_backslash
%11125:	phi	 %8804 %8804 %8804 %10125 %8804 %8804 %8804 %8804
%11126:	icmp	 %6807 XXX
%11127:	br	 %11126 cond.false3346 cond.true3342

BASIC BLOCK cond.true3342
%11128:	zext	 %11125
%11129:	getelementptr	 %6807 %11128
%11130:	load	 %11129
%11131:	sext	 %11130
%11132:	br	 cond.end3348

BASIC BLOCK cond.false3346
%11133:	zext	 %11125
%11134:	br	 cond.end3348

BASIC BLOCK cond.end3348
%11135:	phi	 %11131 %11133
%11136:	trunc	 %11135
%11137:	br	 normal_char

BASIC BLOCK sw.epilog
%11138:	phi	 %6869 %6869 %6869 %6869 %6869 %6869 %6869 %6869 %6869 %6869 %6869 %6869 %8817
%11139:	phi	 %11013 %10886 %10780 %10674 %10568 %10462 %10356 %10250 %10144 %10104 %9507 %9371 XXX
%11140:	phi	 %11014 %10887 %10781 %10675 %10569 %10463 %10357 %10251 %10145 %10105 %9607 %9372 %9030
%11141:	phi	 %11015 %10888 %10782 %10676 %10570 %10464 %10358 %10252 %10146 %10106 XXX %9373 XXX
%11142:	phi	 %11016 %10889 %10783 %10677 %10571 %10465 %10359 %10253 %10147 XXX %9510 %9374 XXX
%11143:	phi	 %11115 %10986 %10880 %10774 %10668 %10562 %10456 %10350 %10244 %10107 %9607 %9375 %9030
%11144:	br	 sw.epilog3580

BASIC BLOCK sw.default3351
%11145:	br	 normal_char

BASIC BLOCK normal_char
%11146:	phi	 %6870 %6870 %6870 %6870 %6870 %6870 %6870 %9165 %6870 %6870 %6870 %6870 %6870 %6870 %6870 %6870
%11147:	phi	 %6871 %6871 %6871 %6871 %6871 %6871 %6871 %9166 %6871 %6871 %6871 %6871 %6871 %6871 %6871 %6871
%11148:	phi	 %6872 %6872 %6872 %6872 %6872 %6872 %6872 %9167 %6872 %6872 %6872 %6872 %6872 %6872 %6872 %6872
%11149:	phi	 %6873 %6873 %6873 %6873 %6873 %6873 %6873 %9168 %6873 %6873 %6873 %6873 %6873 %6873 %6873 %6873
%11150:	phi	 %6874 %6874 %6874 %6874 %6874 %6874 %6874 %9169 %6874 %6874 %6874 %6874 %6874 %6874 %6874 %6874
%11151:	phi	 %6893 %11136 %7146 %8804 %8804 %10125 %9385 %9050 %6893 %6893 %6893 %6893 %6893 %6893 %6893 %6893
%11152:	icmp	 %11149 XXX
%11153:	br	 %11152 if.then3417 lor.lhs.false3353

BASIC BLOCK lor.lhs.false3353
%11154:	load	 %11149
%11155:	zext	 %11154
%11156:	sext	 %11155
%11157:	getelementptr	 %11149 %11156
%11158:	getelementptr	 %11157 XXX
%11159:	icmp	 %11158 %11150
%11160:	br	 %11159 lor.lhs.false3360 if.then3417

BASIC BLOCK lor.lhs.false3360
%11161:	load	 %11149
%11162:	zext	 %11161
%11163:	icmp	 %11162 XXX
%11164:	br	 %11163 lor.lhs.false3364 if.then3417

BASIC BLOCK lor.lhs.false3364
%11165:	load	 %6801
%11166:	load	 %11165
%11167:	sext	 %11166
%11168:	icmp	 %11167 XXX
%11169:	br	 %11168 lor.lhs.false3368 if.then3417

BASIC BLOCK lor.lhs.false3368
%11170:	load	 %6801
%11171:	load	 %11170
%11172:	sext	 %11171
%11173:	icmp	 %11172 XXX
%11174:	br	 %11173 lor.lhs.false3372 if.then3417

BASIC BLOCK lor.lhs.false3372
%11175:	and	 syntax XXX
%11176:	icmp	 %11175 XXX
%11177:	br	 %11176 cond.false3389 cond.true3375

BASIC BLOCK cond.true3375
%11178:	load	 %6801
%11179:	load	 %11178
%11180:	sext	 %11179
%11181:	icmp	 %11180 XXX
%11182:	br	 %11181 lor.lhs.false3397 land.lhs.true3379

BASIC BLOCK land.lhs.true3379
%11183:	load	 %6801
%11184:	getelementptr	 %11183 XXX
%11185:	load	 %11184
%11186:	sext	 %11185
%11187:	icmp	 %11186 XXX
%11188:	br	 %11187 lor.lhs.false3384 if.then3417

BASIC BLOCK lor.lhs.false3384
%11189:	load	 %6801
%11190:	getelementptr	 %11189 XXX
%11191:	load	 %11190
%11192:	sext	 %11191
%11193:	icmp	 %11192 XXX
%11194:	br	 %11193 lor.lhs.false3397 if.then3417

BASIC BLOCK cond.false3389
%11195:	load	 %6801
%11196:	load	 %11195
%11197:	sext	 %11196
%11198:	icmp	 %11197 XXX
%11199:	br	 %11198 lor.lhs.false3393 if.then3417

BASIC BLOCK lor.lhs.false3393
%11200:	load	 %6801
%11201:	load	 %11200
%11202:	sext	 %11201
%11203:	icmp	 %11202 XXX
%11204:	br	 %11203 lor.lhs.false3397 if.then3417

BASIC BLOCK lor.lhs.false3397
%11205:	and	 syntax XXX
%11206:	icmp	 %11205 XXX
%11207:	br	 %11206 if.end3499 land.lhs.true3400

BASIC BLOCK land.lhs.true3400
%11208:	and	 syntax XXX
%11209:	icmp	 %11208 XXX
%11210:	br	 %11209 cond.false3407 cond.true3403

BASIC BLOCK cond.true3403
%11211:	load	 %6801
%11212:	load	 %11211
%11213:	sext	 %11212
%11214:	icmp	 %11213 XXX
%11215:	br	 %11214 if.end3499 if.then3417

BASIC BLOCK cond.false3407
%11216:	load	 %6801
%11217:	getelementptr	 %11216 XXX
%11218:	load	 %11217
%11219:	sext	 %11218
%11220:	icmp	 %11219 XXX
%11221:	br	 %11220 if.end3499 land.lhs.true3412

BASIC BLOCK land.lhs.true3412
%11222:	load	 %6801
%11223:	getelementptr	 %11222 XXX
%11224:	load	 %11223
%11225:	sext	 %11224
%11226:	icmp	 %11225 XXX
%11227:	br	 %11226 if.end3499 if.then3417

BASIC BLOCK if.then3417
%11228:	br	 do.body3418

BASIC BLOCK do.body3418
%11229:	br	 while.cond3419

BASIC BLOCK while.cond3419
%11230:	phi	 %11146 %11323
%11231:	phi	 %11147 %11324
%11232:	phi	 %11150 %11325
%11233:	phi	 %11149 %11326
%11234:	phi	 %11150 %11327
%11235:	getelementptr	 bufp XXX XXX
%11236:	load	 %11235
%11237:	ptrtoint	 %11234
%11238:	ptrtoint	 %11236
%11239:	sub	 %11237 %11238
%11240:	add	 %11239 XXX
%11241:	getelementptr	 bufp XXX XXX
%11242:	load	 %11241
%11243:	icmp	 %11240 %11242
%11244:	br	 %11243 while.end3494 while.body3428

BASIC BLOCK while.body3428
%11245:	br	 do.body3429

BASIC BLOCK do.body3429
%11246:	getelementptr	 bufp XXX XXX
%11247:	load	 %11246
%11248:	getelementptr	 bufp XXX XXX
%11249:	load	 %11248
%11250:	icmp	 %11249 XXX
%11251:	br	 %11250 if.end3436 if.then3435

BASIC BLOCK if.then3435
%11252:	br	 return

BASIC BLOCK if.end3436
%11253:	getelementptr	 bufp XXX XXX
%11254:	load	 %11253
%11255:	shl	 %11254 XXX
%11256:	store	 %11255 %11253
%11257:	getelementptr	 bufp XXX XXX
%11258:	load	 %11257
%11259:	icmp	 %11258 XXX
%11260:	br	 %11259 if.end3444 if.then3442

BASIC BLOCK if.then3442
%11261:	getelementptr	 bufp XXX XXX
%11262:	store	 XXX %11261
%11263:	br	 if.end3444

BASIC BLOCK if.end3444
%11264:	getelementptr	 bufp XXX XXX
%11265:	load	 %11264
%11266:	getelementptr	 bufp XXX XXX
%11267:	load	 %11266
%11268:	call	 %11265 %11267 realloc
%11269:	getelementptr	 bufp XXX XXX
%11270:	store	 %11268 %11269
%11271:	getelementptr	 bufp XXX XXX
%11272:	load	 %11271
%11273:	icmp	 %11272 XXX
%11274:	br	 %11273 if.end3453 if.then3452

BASIC BLOCK if.then3452
%11275:	br	 return

BASIC BLOCK if.end3453
%11276:	getelementptr	 bufp XXX XXX
%11277:	load	 %11276
%11278:	icmp	 %11247 %11277
%11279:	br	 %11278 if.end3492 if.then3457

BASIC BLOCK if.then3457
%11280:	ptrtoint	 %11234
%11281:	ptrtoint	 %11247
%11282:	sub	 %11280 %11281
%11283:	getelementptr	 bufp XXX XXX
%11284:	load	 %11283
%11285:	getelementptr	 %11284 %11282
%11286:	ptrtoint	 %11231
%11287:	ptrtoint	 %11247
%11288:	sub	 %11286 %11287
%11289:	getelementptr	 bufp XXX XXX
%11290:	load	 %11289
%11291:	getelementptr	 %11290 %11288
%11292:	icmp	 %11230 XXX
%11293:	br	 %11292 if.end3475 if.then3469

BASIC BLOCK if.then3469
%11294:	ptrtoint	 %11230
%11295:	ptrtoint	 %11247
%11296:	sub	 %11294 %11295
%11297:	getelementptr	 bufp XXX XXX
%11298:	load	 %11297
%11299:	getelementptr	 %11298 %11296
%11300:	br	 if.end3475

BASIC BLOCK if.end3475
%11301:	phi	 %11299 %11230
%11302:	icmp	 %11232 XXX
%11303:	br	 %11302 if.end3483 if.then3477

BASIC BLOCK if.then3477
%11304:	ptrtoint	 %11232
%11305:	ptrtoint	 %11247
%11306:	sub	 %11304 %11305
%11307:	getelementptr	 bufp XXX XXX
%11308:	load	 %11307
%11309:	getelementptr	 %11308 %11306
%11310:	br	 if.end3483

BASIC BLOCK if.end3483
%11311:	phi	 %11309 %11232
%11312:	icmp	 %11233 XXX
%11313:	br	 %11312 if.end3491 if.then3485

BASIC BLOCK if.then3485
%11314:	ptrtoint	 %11233
%11315:	ptrtoint	 %11247
%11316:	sub	 %11314 %11315
%11317:	getelementptr	 bufp XXX XXX
%11318:	load	 %11317
%11319:	getelementptr	 %11318 %11316
%11320:	br	 if.end3491

BASIC BLOCK if.end3491
%11321:	phi	 %11319 %11233
%11322:	br	 if.end3492

BASIC BLOCK if.end3492
%11323:	phi	 %11301 %11230
%11324:	phi	 %11291 %11231
%11325:	phi	 %11311 %11232
%11326:	phi	 %11321 %11233
%11327:	phi	 %11285 %11234
%11328:	br	 do.end3493

BASIC BLOCK do.end3493
%11329:	br	 while.cond3419

BASIC BLOCK while.end3494
%11330:	getelementptr	 %11234 XXX
%11331:	store	 XXX %11234
%11332:	getelementptr	 %11330 XXX
%11333:	store	 XXX %11330
%11334:	br	 do.end3497

BASIC BLOCK do.end3497
%11335:	getelementptr	 %11332 XXX
%11336:	br	 if.end3499

BASIC BLOCK if.end3499
%11337:	phi	 %11230 %11146 %11146 %11146 %11146
%11338:	phi	 %11231 %11147 %11147 %11147 %11147
%11339:	phi	 %11232 %11148 %11148 %11148 %11148
%11340:	phi	 %11335 %11149 %11149 %11149 %11149
%11341:	phi	 %11332 %11150 %11150 %11150 %11150
%11342:	br	 do.body3500

BASIC BLOCK do.body3500
%11343:	br	 while.cond3501

BASIC BLOCK while.cond3501
%11344:	phi	 %11337 %11437
%11345:	phi	 %11338 %11438
%11346:	phi	 %11339 %11439
%11347:	phi	 %11340 %11440
%11348:	phi	 %11341 %11441
%11349:	getelementptr	 bufp XXX XXX
%11350:	load	 %11349
%11351:	ptrtoint	 %11348
%11352:	ptrtoint	 %11350
%11353:	sub	 %11351 %11352
%11354:	add	 %11353 XXX
%11355:	getelementptr	 bufp XXX XXX
%11356:	load	 %11355
%11357:	icmp	 %11354 %11356
%11358:	br	 %11357 while.end3576 while.body3510

BASIC BLOCK while.body3510
%11359:	br	 do.body3511

BASIC BLOCK do.body3511
%11360:	getelementptr	 bufp XXX XXX
%11361:	load	 %11360
%11362:	getelementptr	 bufp XXX XXX
%11363:	load	 %11362
%11364:	icmp	 %11363 XXX
%11365:	br	 %11364 if.end3518 if.then3517

BASIC BLOCK if.then3517
%11366:	br	 return

BASIC BLOCK if.end3518
%11367:	getelementptr	 bufp XXX XXX
%11368:	load	 %11367
%11369:	shl	 %11368 XXX
%11370:	store	 %11369 %11367
%11371:	getelementptr	 bufp XXX XXX
%11372:	load	 %11371
%11373:	icmp	 %11372 XXX
%11374:	br	 %11373 if.end3526 if.then3524

BASIC BLOCK if.then3524
%11375:	getelementptr	 bufp XXX XXX
%11376:	store	 XXX %11375
%11377:	br	 if.end3526

BASIC BLOCK if.end3526
%11378:	getelementptr	 bufp XXX XXX
%11379:	load	 %11378
%11380:	getelementptr	 bufp XXX XXX
%11381:	load	 %11380
%11382:	call	 %11379 %11381 realloc
%11383:	getelementptr	 bufp XXX XXX
%11384:	store	 %11382 %11383
%11385:	getelementptr	 bufp XXX XXX
%11386:	load	 %11385
%11387:	icmp	 %11386 XXX
%11388:	br	 %11387 if.end3535 if.then3534

BASIC BLOCK if.then3534
%11389:	br	 return

BASIC BLOCK if.end3535
%11390:	getelementptr	 bufp XXX XXX
%11391:	load	 %11390
%11392:	icmp	 %11361 %11391
%11393:	br	 %11392 if.end3574 if.then3539

BASIC BLOCK if.then3539
%11394:	ptrtoint	 %11348
%11395:	ptrtoint	 %11361
%11396:	sub	 %11394 %11395
%11397:	getelementptr	 bufp XXX XXX
%11398:	load	 %11397
%11399:	getelementptr	 %11398 %11396
%11400:	ptrtoint	 %11345
%11401:	ptrtoint	 %11361
%11402:	sub	 %11400 %11401
%11403:	getelementptr	 bufp XXX XXX
%11404:	load	 %11403
%11405:	getelementptr	 %11404 %11402
%11406:	icmp	 %11344 XXX
%11407:	br	 %11406 if.end3557 if.then3551

BASIC BLOCK if.then3551
%11408:	ptrtoint	 %11344
%11409:	ptrtoint	 %11361
%11410:	sub	 %11408 %11409
%11411:	getelementptr	 bufp XXX XXX
%11412:	load	 %11411
%11413:	getelementptr	 %11412 %11410
%11414:	br	 if.end3557

BASIC BLOCK if.end3557
%11415:	phi	 %11413 %11344
%11416:	icmp	 %11346 XXX
%11417:	br	 %11416 if.end3565 if.then3559

BASIC BLOCK if.then3559
%11418:	ptrtoint	 %11346
%11419:	ptrtoint	 %11361
%11420:	sub	 %11418 %11419
%11421:	getelementptr	 bufp XXX XXX
%11422:	load	 %11421
%11423:	getelementptr	 %11422 %11420
%11424:	br	 if.end3565

BASIC BLOCK if.end3565
%11425:	phi	 %11423 %11346
%11426:	icmp	 %11347 XXX
%11427:	br	 %11426 if.end3573 if.then3567

BASIC BLOCK if.then3567
%11428:	ptrtoint	 %11347
%11429:	ptrtoint	 %11361
%11430:	sub	 %11428 %11429
%11431:	getelementptr	 bufp XXX XXX
%11432:	load	 %11431
%11433:	getelementptr	 %11432 %11430
%11434:	br	 if.end3573

BASIC BLOCK if.end3573
%11435:	phi	 %11433 %11347
%11436:	br	 if.end3574

BASIC BLOCK if.end3574
%11437:	phi	 %11415 %11344
%11438:	phi	 %11405 %11345
%11439:	phi	 %11425 %11346
%11440:	phi	 %11435 %11347
%11441:	phi	 %11399 %11348
%11442:	br	 do.end3575

BASIC BLOCK do.end3575
%11443:	br	 while.cond3501

BASIC BLOCK while.end3576
%11444:	getelementptr	 %11348 XXX
%11445:	store	 %11151 %11348
%11446:	br	 do.end3578

BASIC BLOCK do.end3578
%11447:	load	 %11347
%11448:	add	 %11447 XXX
%11449:	store	 %11448 %11347
%11450:	br	 sw.epilog3580

BASIC BLOCK sw.epilog3580
%11451:	phi	 %6869 %6869 %6869 %11138 %6869 %6869 %6869 %6869
%11452:	phi	 %11344 %7666 %6870 %11139 %8006 %7674 %7030 %6911
%11453:	phi	 %11345 %7667 %6871 %11140 %8007 %7675 %7031 %6912
%11454:	phi	 %11346 %7668 %6872 %11141 %8008 %7676 %7032 %6913
%11455:	phi	 %11347 %7669 %6873 %11142 %8009 %7677 %7033 %6914
%11456:	phi	 %11444 %7670 %6874 %11143 %8762 %7774 %7130 %7011
%11457:	br	 while.cond

BASIC BLOCK while.end3581
%11458:	icmp	 %6870 XXX
%11459:	br	 %11458 if.end3588 if.then3583

BASIC BLOCK if.then3583
%11460:	ptrtoint	 %6874
%11461:	ptrtoint	 %6870
%11462:	sub	 %11460 %11461
%11463:	sub	 %11462 XXX
%11464:	call	 XXX %6870 %11463 XXX
%11465:	br	 if.end3588

BASIC BLOCK if.end3588
%11466:	getelementptr	 %6800 XXX XXX
%11467:	load	 %11466
%11468:	icmp	 %11467 XXX
%11469:	br	 %11468 if.then3592 if.end3593

BASIC BLOCK if.then3592
%11470:	br	 return

BASIC BLOCK if.end3593
%11471:	getelementptr	 %6800 XXX XXX
%11472:	load	 %11471
%11473:	bitcast	 %11472
%11474:	call	 %11473 free
%11475:	getelementptr	 bufp XXX XXX
%11476:	load	 %11475
%11477:	ptrtoint	 %6874
%11478:	ptrtoint	 %11476
%11479:	sub	 %11477 %11478
%11480:	getelementptr	 bufp XXX XXX
%11481:	store	 %11479 %11480
%11482:	br	 return

BASIC BLOCK return
%11483:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX %8275 XXX XXX XXX XXX XXX XXX %8242 XXX XXX XXX XXX XXX XXX XXX XXX XXX
%11484:	ret	 %11483

FUNCTION regcomp

BASIC BLOCK entry
%11485:	and	 cflags XXX
%11486:	icmp	 %11485 XXX
%11487:	select	 %11486 XXX XXX
%11488:	getelementptr	 preg XXX XXX
%11489:	store	 XXX %11488
%11490:	getelementptr	 preg XXX XXX
%11491:	store	 XXX %11490
%11492:	getelementptr	 preg XXX XXX
%11493:	store	 XXX %11492
%11494:	and	 cflags XXX
%11495:	icmp	 %11494 XXX
%11496:	br	 %11495 if.else if.then

BASIC BLOCK if.then
%11497:	call	 XXX malloc
%11498:	getelementptr	 preg XXX XXX
%11499:	store	 %11497 %11498
%11500:	getelementptr	 preg XXX XXX
%11501:	load	 %11500
%11502:	icmp	 %11501 XXX
%11503:	br	 %11502 if.end if.then4

BASIC BLOCK if.then4
%11504:	br	 return

BASIC BLOCK if.end
%11505:	br	 for.cond

BASIC BLOCK for.cond
%11506:	phi	 XXX %11532
%11507:	icmp	 %11506 XXX
%11508:	br	 %11507 for.end for.body

BASIC BLOCK for.body
%11509:	and	 %11506 XXX
%11510:	icmp	 %11509 XXX
%11511:	br	 %11510 cond.false land.lhs.true

BASIC BLOCK land.lhs.true
%11512:	sext	 %11506
%11513:	call	 __ctype_b_loc
%11514:	load	 %11513
%11515:	getelementptr	 %11514 %11512
%11516:	load	 %11515
%11517:	zext	 %11516
%11518:	and	 %11517 XXX
%11519:	icmp	 %11518 XXX
%11520:	br	 %11519 cond.false cond.true

BASIC BLOCK cond.true
%11521:	call	 %11506 tolower
%11522:	br	 cond.end

BASIC BLOCK cond.false
%11523:	br	 cond.end

BASIC BLOCK cond.end
%11524:	phi	 %11521 %11506
%11525:	trunc	 %11524
%11526:	zext	 %11506
%11527:	getelementptr	 preg XXX XXX
%11528:	load	 %11527
%11529:	getelementptr	 %11528 %11526
%11530:	store	 %11525 %11529
%11531:	br	 for.inc

BASIC BLOCK for.inc
%11532:	add	 %11506 XXX
%11533:	br	 for.cond

BASIC BLOCK for.end
%11534:	br	 if.end18

BASIC BLOCK if.else
%11535:	getelementptr	 preg XXX XXX
%11536:	store	 XXX %11535
%11537:	br	 if.end18

BASIC BLOCK if.end18
%11538:	and	 cflags XXX
%11539:	icmp	 %11538 XXX
%11540:	br	 %11539 if.else23 if.then21

BASIC BLOCK if.then21
%11541:	and	 %11487 XXX
%11542:	or	 %11541 XXX
%11543:	getelementptr	 preg XXX XXX
%11544:	load	 %11543
%11545:	and	 %11544 XXX
%11546:	or	 %11545 XXX
%11547:	store	 %11546 %11543
%11548:	br	 if.end27

BASIC BLOCK if.else23
%11549:	getelementptr	 preg XXX XXX
%11550:	load	 %11549
%11551:	and	 %11550 XXX
%11552:	store	 %11551 %11549
%11553:	br	 if.end27

BASIC BLOCK if.end27
%11554:	phi	 %11542 %11487
%11555:	and	 cflags XXX
%11556:	icmp	 %11555 XXX
%11557:	xor	 %11556 XXX
%11558:	xor	 %11557 XXX
%11559:	zext	 %11558
%11560:	getelementptr	 preg XXX XXX
%11561:	trunc	 %11559
%11562:	load	 %11560
%11563:	and	 %11561 XXX
%11564:	shl	 %11563 XXX
%11565:	and	 %11562 XXX
%11566:	or	 %11565 %11564
%11567:	store	 %11566 %11560
%11568:	zext	 %11563
%11569:	call	 pattern strlen
%11570:	trunc	 %11569
%11571:	call	 pattern %11570 %11554 preg regex_compile
%11572:	icmp	 %11571 XXX
%11573:	br	 %11572 if.end40 if.then39

BASIC BLOCK if.then39
%11574:	br	 if.end40

BASIC BLOCK if.end40
%11575:	phi	 XXX %11571
%11576:	br	 return

BASIC BLOCK return
%11577:	phi	 XXX %11575
%11578:	ret	 %11577

FUNCTION regexec

BASIC BLOCK entry
%11579:	alloca	 XXX
%11580:	alloca	 XXX
%11581:	call	 string strlen
%11582:	trunc	 %11581
%11583:	getelementptr	 preg XXX XXX
%11584:	load	 %11583
%11585:	lshr	 %11584 XXX
%11586:	and	 %11585 XXX
%11587:	zext	 %11586
%11588:	icmp	 %11587 XXX
%11589:	br	 %11588 land.rhs land.end

BASIC BLOCK land.rhs
%11590:	icmp	 nmatch XXX
%11591:	br	 land.end

BASIC BLOCK land.end
%11592:	phi	 XXX %11590
%11593:	zext	 %11592
%11594:	trunc	 %11593
%11595:	bitcast	 %11580
%11596:	bitcast	 preg
%11597:	call	 %11595 %11596 XXX XXX XXX llvm.memcpy.p0i8.p0i8.i64
%11598:	and	 eflags XXX
%11599:	icmp	 %11598 XXX
%11600:	xor	 %11599 XXX
%11601:	xor	 %11600 XXX
%11602:	zext	 %11601
%11603:	getelementptr	 %11580 XXX XXX
%11604:	trunc	 %11602
%11605:	load	 %11603
%11606:	and	 %11604 XXX
%11607:	shl	 %11606 XXX
%11608:	and	 %11605 XXX
%11609:	or	 %11608 %11607
%11610:	store	 %11609 %11603
%11611:	zext	 %11606
%11612:	and	 eflags XXX
%11613:	icmp	 %11612 XXX
%11614:	xor	 %11613 XXX
%11615:	xor	 %11614 XXX
%11616:	zext	 %11615
%11617:	getelementptr	 %11580 XXX XXX
%11618:	trunc	 %11616
%11619:	load	 %11617
%11620:	and	 %11618 XXX
%11621:	shl	 %11620 XXX
%11622:	and	 %11619 XXX
%11623:	or	 %11622 %11621
%11624:	store	 %11623 %11617
%11625:	zext	 %11620
%11626:	getelementptr	 %11580 XXX XXX
%11627:	load	 %11626
%11628:	and	 %11627 XXX
%11629:	or	 %11628 XXX
%11630:	store	 %11629 %11626
%11631:	icmp	 %11594 XXX
%11632:	br	 %11631 if.end34 if.then

BASIC BLOCK if.then
%11633:	trunc	 nmatch
%11634:	getelementptr	 %11579 XXX XXX
%11635:	store	 %11633 %11634
%11636:	mul	 nmatch XXX
%11637:	call	 %11636 malloc
%11638:	bitcast	 %11637
%11639:	getelementptr	 %11579 XXX XXX
%11640:	store	 %11638 %11639
%11641:	mul	 nmatch XXX
%11642:	call	 %11641 malloc
%11643:	bitcast	 %11642
%11644:	getelementptr	 %11579 XXX XXX
%11645:	store	 %11643 %11644
%11646:	getelementptr	 %11579 XXX XXX
%11647:	load	 %11646
%11648:	icmp	 %11647 XXX
%11649:	br	 %11648 lor.lhs.false if.then33

BASIC BLOCK lor.lhs.false
%11650:	getelementptr	 %11579 XXX XXX
%11651:	load	 %11650
%11652:	icmp	 %11651 XXX
%11653:	br	 %11652 if.end if.then33

BASIC BLOCK if.then33
%11654:	br	 return

BASIC BLOCK if.end
%11655:	br	 if.end34

BASIC BLOCK if.end34
%11656:	sext	 %11594
%11657:	icmp	 %11656 XXX
%11658:	br	 %11657 cond.false cond.true

BASIC BLOCK cond.true
%11659:	br	 cond.end

BASIC BLOCK cond.false
%11660:	br	 cond.end

BASIC BLOCK cond.end
%11661:	phi	 %11579 XXX
%11662:	call	 %11580 string %11582 XXX %11582 %11661 re_search
%11663:	icmp	 %11594 XXX
%11664:	br	 %11663 if.end57 if.then39

BASIC BLOCK if.then39
%11665:	icmp	 %11662 XXX
%11666:	br	 %11665 if.end54 if.then42

BASIC BLOCK if.then42
%11667:	br	 for.cond

BASIC BLOCK for.cond
%11668:	phi	 XXX %11691
%11669:	zext	 %11668
%11670:	icmp	 %11669 nmatch
%11671:	br	 %11670 for.end for.body

BASIC BLOCK for.body
%11672:	zext	 %11668
%11673:	getelementptr	 %11579 XXX XXX
%11674:	load	 %11673
%11675:	getelementptr	 %11674 %11672
%11676:	load	 %11675
%11677:	zext	 %11668
%11678:	getelementptr	 pmatch %11677
%11679:	getelementptr	 %11678 XXX XXX
%11680:	store	 %11676 %11679
%11681:	zext	 %11668
%11682:	getelementptr	 %11579 XXX XXX
%11683:	load	 %11682
%11684:	getelementptr	 %11683 %11681
%11685:	load	 %11684
%11686:	zext	 %11668
%11687:	getelementptr	 pmatch %11686
%11688:	getelementptr	 %11687 XXX XXX
%11689:	store	 %11685 %11688
%11690:	br	 for.inc

BASIC BLOCK for.inc
%11691:	add	 %11668 XXX
%11692:	br	 for.cond

BASIC BLOCK for.end
%11693:	br	 if.end54

BASIC BLOCK if.end54
%11694:	getelementptr	 %11579 XXX XXX
%11695:	load	 %11694
%11696:	bitcast	 %11695
%11697:	call	 %11696 free
%11698:	getelementptr	 %11579 XXX XXX
%11699:	load	 %11698
%11700:	bitcast	 %11699
%11701:	call	 %11700 free
%11702:	br	 if.end57

BASIC BLOCK if.end57
%11703:	icmp	 %11662 XXX
%11704:	select	 %11703 XXX XXX
%11705:	br	 return

BASIC BLOCK return
%11706:	phi	 XXX %11704
%11707:	ret	 %11706

FUNCTION regerror

BASIC BLOCK entry
%11708:	icmp	 errcode XXX
%11709:	br	 %11708 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%11710:	sext	 errcode
%11711:	icmp	 %11710 XXX
%11712:	br	 %11711 if.end if.then

BASIC BLOCK if.then
%11713:	call	 abort
%11714:	unreachable	

BASIC BLOCK if.end
%11715:	sext	 errcode
%11716:	getelementptr	 re_error_msg XXX %11715
%11717:	load	 %11716
%11718:	icmp	 %11717 XXX
%11719:	br	 %11718 if.then3 if.end4

BASIC BLOCK if.then3
%11720:	br	 if.end4

BASIC BLOCK if.end4
%11721:	phi	 %11717 XXX
%11722:	call	 %11721 strlen
%11723:	add	 %11722 XXX
%11724:	icmp	 errbuf_size XXX
%11725:	br	 %11724 if.end16 if.then7

BASIC BLOCK if.then7
%11726:	icmp	 %11723 errbuf_size
%11727:	br	 %11726 if.else if.then10

BASIC BLOCK if.then10
%11728:	sub	 errbuf_size XXX
%11729:	call	 errbuf %11721 %11728 strncpy
%11730:	sub	 errbuf_size XXX
%11731:	getelementptr	 errbuf %11730
%11732:	store	 XXX %11731
%11733:	br	 if.end15

BASIC BLOCK if.else
%11734:	call	 errbuf %11721 strcpy
%11735:	br	 if.end15

BASIC BLOCK if.end15
%11736:	br	 if.end16

BASIC BLOCK if.end16
%11737:	ret	 %11723

FUNCTION regfree

BASIC BLOCK entry
%11738:	getelementptr	 preg XXX XXX
%11739:	load	 %11738
%11740:	icmp	 %11739 XXX
%11741:	br	 %11740 if.end if.then

BASIC BLOCK if.then
%11742:	getelementptr	 preg XXX XXX
%11743:	load	 %11742
%11744:	call	 %11743 free
%11745:	br	 if.end

BASIC BLOCK if.end
%11746:	getelementptr	 preg XXX XXX
%11747:	store	 XXX %11746
%11748:	getelementptr	 preg XXX XXX
%11749:	store	 XXX %11748
%11750:	getelementptr	 preg XXX XXX
%11751:	store	 XXX %11750
%11752:	getelementptr	 preg XXX XXX
%11753:	load	 %11752
%11754:	icmp	 %11753 XXX
%11755:	br	 %11754 if.end6 if.then4

BASIC BLOCK if.then4
%11756:	getelementptr	 preg XXX XXX
%11757:	load	 %11756
%11758:	call	 %11757 free
%11759:	br	 if.end6

BASIC BLOCK if.end6
%11760:	getelementptr	 preg XXX XXX
%11761:	store	 XXX %11760
%11762:	getelementptr	 preg XXX XXX
%11763:	load	 %11762
%11764:	and	 %11763 XXX
%11765:	store	 %11764 %11762
%11766:	getelementptr	 preg XXX XXX
%11767:	load	 %11766
%11768:	icmp	 %11767 XXX
%11769:	br	 %11768 if.end11 if.then9

BASIC BLOCK if.then9
%11770:	getelementptr	 preg XXX XXX
%11771:	load	 %11770
%11772:	call	 %11771 free
%11773:	br	 if.end11

BASIC BLOCK if.end11
%11774:	getelementptr	 preg XXX XXX
%11775:	store	 XXX %11774
%11776:	ret	

FUNCTION group_in_compile_stack

BASIC BLOCK entry
%11777:	alloca	 XXX
%11778:	bitcast	 %11777
%11779:	getelementptr	 %11778 XXX XXX
%11780:	store	 compile_stack.coerce0 %11779
%11781:	getelementptr	 %11778 XXX XXX
%11782:	store	 compile_stack.coerce1 %11781
%11783:	getelementptr	 %11777 XXX XXX
%11784:	load	 %11783
%11785:	sub	 %11784 XXX
%11786:	br	 for.cond

BASIC BLOCK for.cond
%11787:	phi	 %11785 %11800
%11788:	icmp	 %11787 XXX
%11789:	br	 %11788 for.end for.body

BASIC BLOCK for.body
%11790:	sext	 %11787
%11791:	getelementptr	 %11777 XXX XXX
%11792:	load	 %11791
%11793:	getelementptr	 %11792 %11790
%11794:	getelementptr	 %11793 XXX XXX
%11795:	load	 %11794
%11796:	icmp	 %11795 regnum
%11797:	br	 %11796 if.end if.then

BASIC BLOCK if.then
%11798:	br	 return

BASIC BLOCK if.end
%11799:	br	 for.inc

BASIC BLOCK for.inc
%11800:	add	 %11787 XXX
%11801:	br	 for.cond

BASIC BLOCK for.end
%11802:	br	 return

BASIC BLOCK return
%11803:	phi	 XXX XXX
%11804:	ret	 %11803

FUNCTION store_op2

BASIC BLOCK entry
%11805:	trunc	 op
%11806:	store	 %11805 loc
%11807:	br	 do.body

BASIC BLOCK do.body
%11808:	and	 arg1 XXX
%11809:	trunc	 %11808
%11810:	getelementptr	 loc XXX
%11811:	getelementptr	 %11810 XXX
%11812:	store	 %11809 %11811
%11813:	ashr	 arg1 XXX
%11814:	trunc	 %11813
%11815:	getelementptr	 loc XXX
%11816:	getelementptr	 %11815 XXX
%11817:	store	 %11814 %11816
%11818:	br	 do.end

BASIC BLOCK do.end
%11819:	br	 do.body5

BASIC BLOCK do.body5
%11820:	and	 arg2 XXX
%11821:	trunc	 %11820
%11822:	getelementptr	 loc XXX
%11823:	getelementptr	 %11822 XXX
%11824:	store	 %11821 %11823
%11825:	ashr	 arg2 XXX
%11826:	trunc	 %11825
%11827:	getelementptr	 loc XXX
%11828:	getelementptr	 %11827 XXX
%11829:	store	 %11826 %11828
%11830:	br	 do.end14

BASIC BLOCK do.end14
%11831:	ret	

FUNCTION insert_op2

BASIC BLOCK entry
%11832:	getelementptr	 end XXX
%11833:	br	 while.cond

BASIC BLOCK while.cond
%11834:	phi	 end %11838
%11835:	phi	 %11832 %11840
%11836:	icmp	 %11834 loc
%11837:	br	 %11836 while.end while.body

BASIC BLOCK while.body
%11838:	getelementptr	 %11834 XXX
%11839:	load	 %11838
%11840:	getelementptr	 %11835 XXX
%11841:	store	 %11839 %11840
%11842:	br	 while.cond

BASIC BLOCK while.end
%11843:	call	 op loc arg1 arg2 store_op2
%11844:	ret	

FUNCTION compile_range

BASIC BLOCK entry
%11845:	load	 p_ptr
%11846:	icmp	 %11845 pend
%11847:	br	 %11846 if.end if.then

BASIC BLOCK if.then
%11848:	br	 return

BASIC BLOCK if.end
%11849:	getelementptr	 %11845 XXX
%11850:	load	 %11849
%11851:	zext	 %11850
%11852:	getelementptr	 %11845 XXX
%11853:	load	 %11852
%11854:	zext	 %11853
%11855:	load	 p_ptr
%11856:	getelementptr	 %11855 XXX
%11857:	store	 %11856 p_ptr
%11858:	icmp	 %11851 %11854
%11859:	br	 %11858 if.end6 if.then5

BASIC BLOCK if.then5
%11860:	and	 syntax XXX
%11861:	icmp	 %11860 XXX
%11862:	select	 %11861 XXX XXX
%11863:	br	 return

BASIC BLOCK if.end6
%11864:	br	 for.cond

BASIC BLOCK for.cond
%11865:	phi	 %11851 %11903
%11866:	icmp	 %11865 %11854
%11867:	br	 %11866 for.end for.body

BASIC BLOCK for.body
%11868:	icmp	 translate XXX
%11869:	br	 %11868 cond.false cond.true

BASIC BLOCK cond.true
%11870:	trunc	 %11865
%11871:	zext	 %11870
%11872:	getelementptr	 translate %11871
%11873:	load	 %11872
%11874:	sext	 %11873
%11875:	br	 cond.end

BASIC BLOCK cond.false
%11876:	br	 cond.end

BASIC BLOCK cond.end
%11877:	phi	 %11874 %11865
%11878:	trunc	 %11877
%11879:	zext	 %11878
%11880:	srem	 %11879 XXX
%11881:	shl	 XXX %11880
%11882:	icmp	 translate XXX
%11883:	br	 %11882 cond.false22 cond.true17

BASIC BLOCK cond.true17
%11884:	trunc	 %11865
%11885:	zext	 %11884
%11886:	getelementptr	 translate %11885
%11887:	load	 %11886
%11888:	sext	 %11887
%11889:	br	 cond.end23

BASIC BLOCK cond.false22
%11890:	br	 cond.end23

BASIC BLOCK cond.end23
%11891:	phi	 %11888 %11865
%11892:	trunc	 %11891
%11893:	zext	 %11892
%11894:	sdiv	 %11893 XXX
%11895:	sext	 %11894
%11896:	getelementptr	 b %11895
%11897:	load	 %11896
%11898:	zext	 %11897
%11899:	or	 %11898 %11881
%11900:	trunc	 %11899
%11901:	store	 %11900 %11896
%11902:	br	 for.inc

BASIC BLOCK for.inc
%11903:	add	 %11865 XXX
%11904:	br	 for.cond

BASIC BLOCK for.end
%11905:	br	 return

BASIC BLOCK return
%11906:	phi	 XXX %11862 XXX
%11907:	ret	 %11906

FUNCTION insert_op1

BASIC BLOCK entry
%11908:	getelementptr	 end XXX
%11909:	br	 while.cond

BASIC BLOCK while.cond
%11910:	phi	 end %11914
%11911:	phi	 %11908 %11916
%11912:	icmp	 %11910 loc
%11913:	br	 %11912 while.end while.body

BASIC BLOCK while.body
%11914:	getelementptr	 %11910 XXX
%11915:	load	 %11914
%11916:	getelementptr	 %11911 XXX
%11917:	store	 %11915 %11916
%11918:	br	 while.cond

BASIC BLOCK while.end
%11919:	call	 op loc arg store_op1
%11920:	ret	

FUNCTION store_op1

BASIC BLOCK entry
%11921:	trunc	 op
%11922:	store	 %11921 loc
%11923:	br	 do.body

BASIC BLOCK do.body
%11924:	and	 arg XXX
%11925:	trunc	 %11924
%11926:	getelementptr	 loc XXX
%11927:	getelementptr	 %11926 XXX
%11928:	store	 %11925 %11927
%11929:	ashr	 arg XXX
%11930:	trunc	 %11929
%11931:	getelementptr	 loc XXX
%11932:	getelementptr	 %11931 XXX
%11933:	store	 %11930 %11932
%11934:	br	 do.end

BASIC BLOCK do.end
%11935:	ret	

FUNCTION at_endline_loc_p

BASIC BLOCK entry
%11936:	load	 p
%11937:	sext	 %11936
%11938:	icmp	 %11937 XXX
%11939:	zext	 %11938
%11940:	trunc	 %11939
%11941:	getelementptr	 p XXX
%11942:	icmp	 %11941 pend
%11943:	br	 %11942 cond.false cond.true

BASIC BLOCK cond.true
%11944:	getelementptr	 p XXX
%11945:	br	 cond.end

BASIC BLOCK cond.false
%11946:	br	 cond.end

BASIC BLOCK cond.end
%11947:	phi	 %11944 XXX
%11948:	and	 syntax XXX
%11949:	icmp	 %11948 XXX
%11950:	br	 %11949 cond.false10 cond.true6

BASIC BLOCK cond.true6
%11951:	load	 p
%11952:	sext	 %11951
%11953:	icmp	 %11952 XXX
%11954:	br	 %11953 lor.rhs lor.end

BASIC BLOCK cond.false10
%11955:	sext	 %11940
%11956:	icmp	 %11955 XXX
%11957:	br	 %11956 lor.rhs land.lhs.true

BASIC BLOCK land.lhs.true
%11958:	icmp	 %11947 XXX
%11959:	br	 %11958 lor.rhs land.lhs.true14

BASIC BLOCK land.lhs.true14
%11960:	load	 %11947
%11961:	sext	 %11960
%11962:	icmp	 %11961 XXX
%11963:	br	 %11962 lor.rhs lor.end

BASIC BLOCK lor.rhs
%11964:	and	 syntax XXX
%11965:	icmp	 %11964 XXX
%11966:	br	 %11965 cond.false24 cond.true20

BASIC BLOCK cond.true20
%11967:	load	 p
%11968:	sext	 %11967
%11969:	icmp	 %11968 XXX
%11970:	zext	 %11969
%11971:	br	 cond.end32

BASIC BLOCK cond.false24
%11972:	sext	 %11940
%11973:	icmp	 %11972 XXX
%11974:	br	 %11973 land.end land.lhs.true27

BASIC BLOCK land.lhs.true27
%11975:	icmp	 %11947 XXX
%11976:	br	 %11975 land.end land.rhs

BASIC BLOCK land.rhs
%11977:	load	 %11947
%11978:	sext	 %11977
%11979:	icmp	 %11978 XXX
%11980:	br	 land.end

BASIC BLOCK land.end
%11981:	phi	 XXX XXX %11979
%11982:	zext	 %11981
%11983:	br	 cond.end32

BASIC BLOCK cond.end32
%11984:	phi	 %11970 %11982
%11985:	icmp	 %11984 XXX
%11986:	br	 lor.end

BASIC BLOCK lor.end
%11987:	phi	 XXX XXX %11985
%11988:	zext	 %11987
%11989:	trunc	 %11988
%11990:	ret	 %11989

FUNCTION at_begline_loc_p

BASIC BLOCK entry
%11991:	getelementptr	 p XXX
%11992:	icmp	 %11991 pattern
%11993:	br	 %11992 land.end land.rhs

BASIC BLOCK land.rhs
%11994:	getelementptr	 %11991 XXX
%11995:	load	 %11994
%11996:	sext	 %11995
%11997:	icmp	 %11996 XXX
%11998:	br	 land.end

BASIC BLOCK land.end
%11999:	phi	 XXX %11997
%12000:	zext	 %11999
%12001:	trunc	 %12000
%12002:	load	 %11991
%12003:	sext	 %12002
%12004:	icmp	 %12003 XXX
%12005:	br	 %12004 lor.rhs land.lhs.true

BASIC BLOCK land.lhs.true
%12006:	and	 syntax XXX
%12007:	icmp	 %12006 XXX
%12008:	br	 %12007 lor.lhs.false lor.end20

BASIC BLOCK lor.lhs.false
%12009:	sext	 %12001
%12010:	icmp	 %12009 XXX
%12011:	br	 %12010 lor.rhs lor.end20

BASIC BLOCK lor.rhs
%12012:	load	 %11991
%12013:	sext	 %12012
%12014:	icmp	 %12013 XXX
%12015:	br	 %12014 land.end18 land.rhs12

BASIC BLOCK land.rhs12
%12016:	and	 syntax XXX
%12017:	icmp	 %12016 XXX
%12018:	br	 %12017 lor.rhs15 lor.end

BASIC BLOCK lor.rhs15
%12019:	sext	 %12001
%12020:	icmp	 %12019 XXX
%12021:	br	 lor.end

BASIC BLOCK lor.end
%12022:	phi	 XXX %12020
%12023:	br	 land.end18

BASIC BLOCK land.end18
%12024:	phi	 XXX %12022
%12025:	br	 lor.end20

BASIC BLOCK lor.end20
%12026:	phi	 XXX XXX %12024
%12027:	zext	 %12026
%12028:	trunc	 %12027
%12029:	ret	 %12028

FUNCTION init_syntax_once

BASIC BLOCK entry
%12030:	load	 init_syntax_once.done
%12031:	icmp	 %12030 XXX
%12032:	br	 %12031 if.end if.then

BASIC BLOCK if.then
%12033:	br	 return

BASIC BLOCK if.end
%12034:	call	 XXX XXX XXX XXX XXX llvm.memset.p0i8.i64
%12035:	br	 for.cond

BASIC BLOCK for.cond
%12036:	phi	 XXX %12043
%12037:	icmp	 %12036 XXX
%12038:	br	 %12037 for.end for.body

BASIC BLOCK for.body
%12039:	sext	 %12036
%12040:	getelementptr	 re_syntax_table XXX %12039
%12041:	store	 XXX %12040
%12042:	br	 for.inc

BASIC BLOCK for.inc
%12043:	add	 %12036 XXX
%12044:	br	 for.cond

BASIC BLOCK for.end
%12045:	br	 for.cond1

BASIC BLOCK for.cond1
%12046:	phi	 XXX %12053
%12047:	icmp	 %12046 XXX
%12048:	br	 %12047 for.end8 for.body3

BASIC BLOCK for.body3
%12049:	sext	 %12046
%12050:	getelementptr	 re_syntax_table XXX %12049
%12051:	store	 XXX %12050
%12052:	br	 for.inc6

BASIC BLOCK for.inc6
%12053:	add	 %12046 XXX
%12054:	br	 for.cond1

BASIC BLOCK for.end8
%12055:	br	 for.cond9

BASIC BLOCK for.cond9
%12056:	phi	 XXX %12063
%12057:	icmp	 %12056 XXX
%12058:	br	 %12057 for.end16 for.body11

BASIC BLOCK for.body11
%12059:	sext	 %12056
%12060:	getelementptr	 re_syntax_table XXX %12059
%12061:	store	 XXX %12060
%12062:	br	 for.inc14

BASIC BLOCK for.inc14
%12063:	add	 %12056 XXX
%12064:	br	 for.cond9

BASIC BLOCK for.end16
%12065:	store	 XXX XXX
%12066:	store	 XXX init_syntax_once.done
%12067:	br	 return

BASIC BLOCK return
%12068:	ret	

FUNCTION bcmp_translate

BASIC BLOCK entry
%12069:	br	 while.cond

BASIC BLOCK while.cond
%12070:	phi	 len %12090
%12071:	phi	 s1 %12075
%12072:	phi	 s2 %12081
%12073:	icmp	 %12070 XXX
%12074:	br	 %12073 while.end while.body

BASIC BLOCK while.body
%12075:	getelementptr	 %12071 XXX
%12076:	load	 %12071
%12077:	zext	 %12076
%12078:	getelementptr	 translate %12077
%12079:	load	 %12078
%12080:	sext	 %12079
%12081:	getelementptr	 %12072 XXX
%12082:	load	 %12072
%12083:	zext	 %12082
%12084:	getelementptr	 translate %12083
%12085:	load	 %12084
%12086:	sext	 %12085
%12087:	icmp	 %12080 %12086
%12088:	br	 %12087 if.end if.then

BASIC BLOCK if.then
%12089:	br	 return

BASIC BLOCK if.end
%12090:	add	 %12070 XXX
%12091:	br	 while.cond

BASIC BLOCK while.end
%12092:	br	 return

BASIC BLOCK return
%12093:	phi	 XXX XXX
%12094:	ret	 %12093

FUNCTION group_match_null_string_p

BASIC BLOCK entry
%12095:	alloca	 XXX
%12096:	load	 p
%12097:	getelementptr	 %12096 XXX
%12098:	store	 %12097 %12095
%12099:	br	 while.cond

BASIC BLOCK while.cond
%12100:	load	 %12095
%12101:	icmp	 %12100 end
%12102:	br	 %12101 while.end70 while.body

BASIC BLOCK while.body
%12103:	load	 %12095
%12104:	load	 %12103
%12105:	zext	 %12104
%12106:	switch	 %12105 sw.default XXX sw.bb XXX sw.bb64

BASIC BLOCK sw.bb
%12107:	load	 %12095
%12108:	getelementptr	 %12107 XXX
%12109:	store	 %12108 %12095
%12110:	br	 do.body

BASIC BLOCK do.body
%12111:	br	 do.body1

BASIC BLOCK do.body1
%12112:	load	 %12095
%12113:	load	 %12112
%12114:	zext	 %12113
%12115:	and	 %12114 XXX
%12116:	load	 %12095
%12117:	getelementptr	 %12116 XXX
%12118:	load	 %12117
%12119:	sext	 %12118
%12120:	shl	 %12119 XXX
%12121:	add	 %12115 %12120
%12122:	br	 do.end

BASIC BLOCK do.end
%12123:	load	 %12095
%12124:	getelementptr	 %12123 XXX
%12125:	store	 %12124 %12095
%12126:	br	 do.end6

BASIC BLOCK do.end6
%12127:	icmp	 %12121 XXX
%12128:	br	 %12127 if.end63 if.then

BASIC BLOCK if.then
%12129:	br	 while.cond9

BASIC BLOCK while.cond9
%12130:	phi	 %12121 %12172
%12131:	sub	 %12130 XXX
%12132:	sext	 %12131
%12133:	load	 %12095
%12134:	getelementptr	 %12133 %12132
%12135:	load	 %12134
%12136:	zext	 %12135
%12137:	icmp	 %12136 XXX
%12138:	br	 %12137 while.end while.body13

BASIC BLOCK while.body13
%12139:	load	 %12095
%12140:	load	 %12095
%12141:	sext	 %12130
%12142:	getelementptr	 %12140 %12141
%12143:	getelementptr	 %12142 XXX
%12144:	call	 %12139 %12143 reg_info alt_match_null_string_p
%12145:	icmp	 %12144 XXX
%12146:	br	 %12145 if.then16 if.end

BASIC BLOCK if.then16
%12147:	br	 return

BASIC BLOCK if.end
%12148:	load	 %12095
%12149:	sext	 %12130
%12150:	getelementptr	 %12148 %12149
%12151:	store	 %12150 %12095
%12152:	load	 %12095
%12153:	load	 %12152
%12154:	zext	 %12153
%12155:	icmp	 %12154 XXX
%12156:	br	 %12155 if.end23 if.then22

BASIC BLOCK if.then22
%12157:	br	 while.end

BASIC BLOCK if.end23
%12158:	load	 %12095
%12159:	getelementptr	 %12158 XXX
%12160:	store	 %12159 %12095
%12161:	br	 do.body25

BASIC BLOCK do.body25
%12162:	br	 do.body26

BASIC BLOCK do.body26
%12163:	load	 %12095
%12164:	load	 %12163
%12165:	zext	 %12164
%12166:	and	 %12165 XXX
%12167:	load	 %12095
%12168:	getelementptr	 %12167 XXX
%12169:	load	 %12168
%12170:	sext	 %12169
%12171:	shl	 %12170 XXX
%12172:	add	 %12166 %12171
%12173:	br	 do.end33

BASIC BLOCK do.end33
%12174:	load	 %12095
%12175:	getelementptr	 %12174 XXX
%12176:	store	 %12175 %12095
%12177:	br	 do.end35

BASIC BLOCK do.end35
%12178:	sub	 %12172 XXX
%12179:	sext	 %12178
%12180:	load	 %12095
%12181:	getelementptr	 %12180 %12179
%12182:	load	 %12181
%12183:	zext	 %12182
%12184:	icmp	 %12183 XXX
%12185:	br	 %12184 if.end44 if.then42

BASIC BLOCK if.then42
%12186:	load	 %12095
%12187:	getelementptr	 %12186 XXX
%12188:	store	 %12187 %12095
%12189:	br	 while.end

BASIC BLOCK if.end44
%12190:	br	 while.cond9

BASIC BLOCK while.end
%12191:	br	 do.body45

BASIC BLOCK do.body45
%12192:	load	 %12095
%12193:	getelementptr	 %12192 XXX
%12194:	load	 %12193
%12195:	zext	 %12194
%12196:	and	 %12195 XXX
%12197:	load	 %12095
%12198:	getelementptr	 %12197 XXX
%12199:	getelementptr	 %12198 XXX
%12200:	load	 %12199
%12201:	sext	 %12200
%12202:	shl	 %12201 XXX
%12203:	add	 %12196 %12202
%12204:	br	 do.end54

BASIC BLOCK do.end54
%12205:	load	 %12095
%12206:	load	 %12095
%12207:	sext	 %12203
%12208:	getelementptr	 %12206 %12207
%12209:	call	 %12205 %12208 reg_info alt_match_null_string_p
%12210:	icmp	 %12209 XXX
%12211:	br	 %12210 if.then59 if.end60

BASIC BLOCK if.then59
%12212:	br	 return

BASIC BLOCK if.end60
%12213:	load	 %12095
%12214:	sext	 %12203
%12215:	getelementptr	 %12213 %12214
%12216:	store	 %12215 %12095
%12217:	br	 if.end63

BASIC BLOCK if.end63
%12218:	br	 sw.epilog

BASIC BLOCK sw.bb64
%12219:	load	 %12095
%12220:	getelementptr	 %12219 XXX
%12221:	store	 %12220 p
%12222:	br	 return

BASIC BLOCK sw.default
%12223:	call	 %12095 end reg_info common_op_match_null_string_p
%12224:	icmp	 %12223 XXX
%12225:	br	 %12224 if.then68 if.end69

BASIC BLOCK if.then68
%12226:	br	 return

BASIC BLOCK if.end69
%12227:	br	 sw.epilog

BASIC BLOCK sw.epilog
%12228:	br	 while.cond

BASIC BLOCK while.end70
%12229:	br	 return

BASIC BLOCK return
%12230:	phi	 XXX XXX XXX XXX XXX
%12231:	ret	 %12230

FUNCTION common_op_match_null_string_p

BASIC BLOCK entry
%12232:	alloca	 XXX
%12233:	load	 p
%12234:	store	 %12233 %12232
%12235:	load	 %12232
%12236:	getelementptr	 %12235 XXX
%12237:	store	 %12236 %12232
%12238:	load	 %12235
%12239:	zext	 %12238
%12240:	switch	 %12239 sw.default XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb1 XXX sw.bb12 XXX sw.bb23 XXX sw.bb55 XXX sw.bb65

BASIC BLOCK sw.bb
%12241:	br	 sw.epilog

BASIC BLOCK sw.bb1
%12242:	load	 %12232
%12243:	load	 %12242
%12244:	zext	 %12243
%12245:	call	 %12232 end reg_info group_match_null_string_p
%12246:	sext	 %12244
%12247:	getelementptr	 reg_info %12246
%12248:	bitcast	 %12247
%12249:	bitcast	 %12248
%12250:	load	 %12249
%12251:	and	 %12250 XXX
%12252:	zext	 %12251
%12253:	icmp	 %12252 XXX
%12254:	br	 %12253 if.end if.then

BASIC BLOCK if.then
%12255:	sext	 %12245
%12256:	sext	 %12244
%12257:	getelementptr	 reg_info %12256
%12258:	bitcast	 %12257
%12259:	bitcast	 %12258
%12260:	trunc	 %12255
%12261:	load	 %12259
%12262:	and	 %12260 XXX
%12263:	and	 %12261 XXX
%12264:	or	 %12263 %12262
%12265:	store	 %12264 %12259
%12266:	zext	 %12262
%12267:	br	 if.end

BASIC BLOCK if.end
%12268:	icmp	 %12245 XXX
%12269:	br	 %12268 if.then10 if.end11

BASIC BLOCK if.then10
%12270:	br	 return

BASIC BLOCK if.end11
%12271:	br	 sw.epilog

BASIC BLOCK sw.bb12
%12272:	br	 do.body

BASIC BLOCK do.body
%12273:	br	 do.body13

BASIC BLOCK do.body13
%12274:	load	 %12232
%12275:	load	 %12274
%12276:	zext	 %12275
%12277:	and	 %12276 XXX
%12278:	load	 %12232
%12279:	getelementptr	 %12278 XXX
%12280:	load	 %12279
%12281:	sext	 %12280
%12282:	shl	 %12281 XXX
%12283:	add	 %12277 %12282
%12284:	br	 do.end

BASIC BLOCK do.end
%12285:	load	 %12232
%12286:	getelementptr	 %12285 XXX
%12287:	store	 %12286 %12232
%12288:	br	 do.end17

BASIC BLOCK do.end17
%12289:	icmp	 %12283 XXX
%12290:	br	 %12289 if.else if.then20

BASIC BLOCK if.then20
%12291:	load	 %12232
%12292:	sext	 %12283
%12293:	getelementptr	 %12291 %12292
%12294:	store	 %12293 %12232
%12295:	br	 if.end22

BASIC BLOCK if.else
%12296:	br	 return

BASIC BLOCK if.end22
%12297:	br	 sw.epilog

BASIC BLOCK sw.bb23
%12298:	load	 %12232
%12299:	getelementptr	 %12298 XXX
%12300:	store	 %12299 %12232
%12301:	br	 do.body25

BASIC BLOCK do.body25
%12302:	br	 do.body26

BASIC BLOCK do.body26
%12303:	load	 %12232
%12304:	load	 %12303
%12305:	zext	 %12304
%12306:	and	 %12305 XXX
%12307:	load	 %12232
%12308:	getelementptr	 %12307 XXX
%12309:	load	 %12308
%12310:	sext	 %12309
%12311:	shl	 %12310 XXX
%12312:	add	 %12306 %12311
%12313:	br	 do.end33

BASIC BLOCK do.end33
%12314:	load	 %12232
%12315:	getelementptr	 %12314 XXX
%12316:	store	 %12315 %12232
%12317:	br	 do.end35

BASIC BLOCK do.end35
%12318:	icmp	 %12312 XXX
%12319:	br	 %12318 if.else53 if.then38

BASIC BLOCK if.then38
%12320:	load	 %12232
%12321:	getelementptr	 %12320 XXX
%12322:	store	 %12321 %12232
%12323:	br	 do.body40

BASIC BLOCK do.body40
%12324:	br	 do.body41

BASIC BLOCK do.body41
%12325:	load	 %12232
%12326:	load	 %12325
%12327:	zext	 %12326
%12328:	and	 %12327 XXX
%12329:	load	 %12232
%12330:	getelementptr	 %12329 XXX
%12331:	load	 %12330
%12332:	sext	 %12331
%12333:	shl	 %12332 XXX
%12334:	add	 %12328 %12333
%12335:	br	 do.end48

BASIC BLOCK do.end48
%12336:	load	 %12232
%12337:	getelementptr	 %12336 XXX
%12338:	store	 %12337 %12232
%12339:	br	 do.end50

BASIC BLOCK do.end50
%12340:	load	 %12232
%12341:	sext	 %12334
%12342:	getelementptr	 %12340 %12341
%12343:	store	 %12342 %12232
%12344:	br	 if.end54

BASIC BLOCK if.else53
%12345:	br	 return

BASIC BLOCK if.end54
%12346:	br	 sw.epilog

BASIC BLOCK sw.bb55
%12347:	load	 %12232
%12348:	load	 %12347
%12349:	zext	 %12348
%12350:	getelementptr	 reg_info %12349
%12351:	bitcast	 %12350
%12352:	bitcast	 %12351
%12353:	load	 %12352
%12354:	and	 %12353 XXX
%12355:	zext	 %12354
%12356:	icmp	 %12355 XXX
%12357:	br	 %12356 if.then63 if.end64

BASIC BLOCK if.then63
%12358:	br	 return

BASIC BLOCK if.end64
%12359:	br	 sw.epilog

BASIC BLOCK sw.bb65
%12360:	load	 %12232
%12361:	getelementptr	 %12360 XXX
%12362:	store	 %12361 %12232
%12363:	br	 sw.default

BASIC BLOCK sw.default
%12364:	br	 return

BASIC BLOCK sw.epilog
%12365:	load	 %12232
%12366:	store	 %12365 p
%12367:	br	 return

BASIC BLOCK return
%12368:	phi	 XXX XXX XXX XXX XXX XXX
%12369:	ret	 %12368

FUNCTION alt_match_null_string_p

BASIC BLOCK entry
%12370:	alloca	 XXX
%12371:	store	 p %12370
%12372:	br	 while.cond

BASIC BLOCK while.cond
%12373:	load	 %12370
%12374:	icmp	 %12373 end
%12375:	br	 %12374 while.end while.body

BASIC BLOCK while.body
%12376:	load	 %12370
%12377:	load	 %12376
%12378:	zext	 %12377
%12379:	switch	 %12378 sw.default XXX sw.bb

BASIC BLOCK sw.bb
%12380:	load	 %12370
%12381:	getelementptr	 %12380 XXX
%12382:	store	 %12381 %12370
%12383:	br	 do.body

BASIC BLOCK do.body
%12384:	br	 do.body1

BASIC BLOCK do.body1
%12385:	load	 %12370
%12386:	load	 %12385
%12387:	zext	 %12386
%12388:	and	 %12387 XXX
%12389:	load	 %12370
%12390:	getelementptr	 %12389 XXX
%12391:	load	 %12390
%12392:	sext	 %12391
%12393:	shl	 %12392 XXX
%12394:	add	 %12388 %12393
%12395:	br	 do.end

BASIC BLOCK do.end
%12396:	load	 %12370
%12397:	getelementptr	 %12396 XXX
%12398:	store	 %12397 %12370
%12399:	br	 do.end5

BASIC BLOCK do.end5
%12400:	load	 %12370
%12401:	sext	 %12394
%12402:	getelementptr	 %12400 %12401
%12403:	store	 %12402 %12370
%12404:	br	 sw.epilog

BASIC BLOCK sw.default
%12405:	call	 %12370 end reg_info common_op_match_null_string_p
%12406:	icmp	 %12405 XXX
%12407:	br	 %12406 if.then if.end

BASIC BLOCK if.then
%12408:	br	 return

BASIC BLOCK if.end
%12409:	br	 sw.epilog

BASIC BLOCK sw.epilog
%12410:	br	 while.cond

BASIC BLOCK while.end
%12411:	br	 return

BASIC BLOCK return
%12412:	phi	 XXX XXX
%12413:	ret	 %12412
