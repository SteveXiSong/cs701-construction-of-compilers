
FUNCTION gnu_dev_major

BASIC BLOCK entry
%1:	lshr	 __dev XXX
%2:	and	 %1 XXX
%3:	lshr	 __dev XXX
%4:	trunc	 %3
%5:	and	 %4 XXX
%6:	zext	 %5
%7:	or	 %2 %6
%8:	trunc	 %7
%9:	ret	 %8

FUNCTION gnu_dev_minor

BASIC BLOCK entry
%10:	and	 __dev XXX
%11:	lshr	 __dev XXX
%12:	trunc	 %11
%13:	and	 %12 XXX
%14:	zext	 %13
%15:	or	 %10 %14
%16:	trunc	 %15
%17:	ret	 %16

FUNCTION gnu_dev_makedev

BASIC BLOCK entry
%18:	and	 __minor XXX
%19:	and	 __major XXX
%20:	shl	 %19 XXX
%21:	or	 %18 %20
%22:	zext	 %21
%23:	and	 __minor XXX
%24:	zext	 %23
%25:	shl	 %24 XXX
%26:	or	 %22 %25
%27:	and	 __major XXX
%28:	zext	 %27
%29:	shl	 %28 XXX
%30:	or	 %26 %29
%31:	ret	 %30

FUNCTION main

BASIC BLOCK entry
%32:	add	 argc XXX
%33:	icmp	 %32 XXX
%34:	br	 %33 if.end if.then

BASIC BLOCK if.then
%35:	getelementptr	 argv XXX
%36:	load	 %35
%37:	call	 %36 XXX fopen
%38:	store	 %37 err
%39:	getelementptr	 %35 XXX
%40:	add	 %32 XXX
%41:	br	 if.end

BASIC BLOCK if.end
%42:	phi	 %39 argv
%43:	phi	 %40 %32
%44:	call	 %43 %42 flexinit
%45:	call	 readin
%46:	call	 ntod
%47:	br	 for.cond

BASIC BLOCK for.cond
%48:	phi	 XXX %68
%49:	load	 num_rules
%50:	icmp	 %48 %49
%51:	br	 %50 for.end for.body

BASIC BLOCK for.body
%52:	sext	 %48
%53:	load	 rule_useful
%54:	getelementptr	 %53 %52
%55:	load	 %54
%56:	icmp	 %55 XXX
%57:	br	 %56 land.lhs.true if.end7

BASIC BLOCK land.lhs.true
%58:	load	 default_rule
%59:	icmp	 %48 %58
%60:	br	 %59 if.end7 if.then4

BASIC BLOCK if.then4
%61:	sext	 %48
%62:	load	 rule_linenum
%63:	getelementptr	 %62 %61
%64:	load	 %63
%65:	call	 XXX %64 line_warning
%66:	br	 if.end7

BASIC BLOCK if.end7
%67:	br	 for.inc

BASIC BLOCK for.inc
%68:	add	 %48 XXX
%69:	br	 for.cond

BASIC BLOCK for.end
%70:	load	 spprdflt
%71:	icmp	 %70 XXX
%72:	br	 %71 if.end19 land.lhs.true10

BASIC BLOCK land.lhs.true10
%73:	load	 reject
%74:	icmp	 %73 XXX
%75:	br	 %74 land.lhs.true12 if.end19

BASIC BLOCK land.lhs.true12
%76:	load	 default_rule
%77:	sext	 %76
%78:	load	 rule_useful
%79:	getelementptr	 %78 %77
%80:	load	 %79
%81:	icmp	 %80 XXX
%82:	br	 %81 if.end19 if.then16

BASIC BLOCK if.then16
%83:	load	 default_rule
%84:	sext	 %83
%85:	load	 rule_linenum
%86:	getelementptr	 %85 %84
%87:	load	 %86
%88:	call	 XXX %87 line_warning
%89:	br	 if.end19

BASIC BLOCK if.end19
%90:	call	 make_tables
%91:	call	 XXX flexend
%92:	ret	 XXX

FUNCTION flexinit

BASIC BLOCK entry
%93:	store	 XXX caseins
%94:	store	 XXX spprdflt
%95:	store	 XXX trace
%96:	store	 XXX syntaxerror
%97:	store	 XXX printstats
%98:	store	 XXX lex_compat
%99:	store	 XXX fullspd
%100:	store	 XXX fulltbl
%101:	store	 XXX ddebug
%102:	store	 XXX backing_up_report
%103:	store	 XXX C_plus_plus
%104:	store	 XXX reject
%105:	store	 XXX continued_action
%106:	store	 XXX yymore_used
%107:	store	 XXX nowarn
%108:	store	 XXX long_align
%109:	store	 XXX reject_really_used
%110:	store	 XXX yymore_really_used
%111:	store	 XXX yytext_is_array
%112:	store	 XXX useecs
%113:	store	 XXX usemecs
%114:	store	 XXX gen_line_dirs
%115:	store	 XXX performance_report
%116:	store	 XXX use_stdout
%117:	store	 XXX use_read
%118:	store	 XXX action_size
%119:	load	 action_size
%120:	call	 %119 XXX allocate_array
%121:	store	 %120 action_array
%122:	store	 XXX action_index
%123:	store	 XXX action_offset
%124:	store	 XXX prolog_offset
%125:	store	 XXX defs1_offset
%126:	load	 action_array
%127:	getelementptr	 %126 XXX
%128:	store	 XXX %127
%129:	store	 XXX program_name
%130:	load	 program_name
%131:	getelementptr	 %130 XXX
%132:	load	 %131
%133:	sext	 %132
%134:	icmp	 %133 XXX
%135:	br	 %134 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%136:	load	 program_name
%137:	call	 %136 strlen
%138:	sub	 %137 XXX
%139:	load	 program_name
%140:	getelementptr	 %139 %138
%141:	load	 %140
%142:	sext	 %141
%143:	icmp	 %142 XXX
%144:	br	 %143 if.end if.then

BASIC BLOCK if.then
%145:	store	 XXX C_plus_plus
%146:	br	 if.end

BASIC BLOCK if.end
%147:	getelementptr	 argv XXX
%148:	add	 argc XXX
%149:	add	 %148 XXX
%150:	getelementptr	 %147 XXX
%151:	br	 for.cond

BASIC BLOCK for.cond
%152:	phi	 XXX %177
%153:	phi	 XXX %178
%154:	phi	 XXX %329
%155:	phi	 %150 %332
%156:	phi	 %149 %331
%157:	icmp	 %156 XXX
%158:	br	 %157 for.end110 for.body

BASIC BLOCK for.body
%159:	getelementptr	 %155 XXX
%160:	load	 %159
%161:	getelementptr	 %160 XXX
%162:	load	 %161
%163:	sext	 %162
%164:	icmp	 %163 XXX
%165:	br	 %164 lor.lhs.false if.then20

BASIC BLOCK lor.lhs.false
%166:	getelementptr	 %155 XXX
%167:	load	 %166
%168:	getelementptr	 %167 XXX
%169:	load	 %168
%170:	sext	 %169
%171:	icmp	 %170 XXX
%172:	br	 %171 if.end21 if.then20

BASIC BLOCK if.then20
%173:	br	 for.end110

BASIC BLOCK if.end21
%174:	getelementptr	 %155 XXX
%175:	load	 %174
%176:	br	 for.cond23

BASIC BLOCK for.cond23
%177:	phi	 %152 %323
%178:	phi	 %153 %324
%179:	phi	 XXX %326
%180:	sext	 %179
%181:	getelementptr	 %175 %180
%182:	load	 %181
%183:	sext	 %182
%184:	icmp	 %183 XXX
%185:	br	 %184 for.end106 for.body28

BASIC BLOCK for.body28
%186:	sext	 %179
%187:	getelementptr	 %175 %186
%188:	load	 %187
%189:	sext	 %188
%190:	switch	 %189 sw.default98 XXX sw.bb XXX sw.bb32 XXX sw.bb33 XXX sw.bb34 XXX sw.bb36 XXX sw.bb64 XXX sw.bb65 XXX sw.bb66 XXX sw.bb67 XXX sw.bb68 XXX sw.bb69 XXX sw.bb70 XXX sw.bb71 XXX sw.bb72 XXX sw.bb73 XXX sw.bb79 XXX sw.bb81 XXX sw.bb89 XXX sw.bb90 XXX sw.bb91 XXX sw.bb92 XXX sw.bb93 XXX sw.bb95 XXX sw.bb96 XXX sw.bb97

BASIC BLOCK sw.bb
%191:	store	 XXX C_plus_plus
%192:	br	 sw.epilog103

BASIC BLOCK sw.bb32
%193:	store	 XXX interactive
%194:	br	 sw.epilog103

BASIC BLOCK sw.bb33
%195:	store	 XXX backing_up_report
%196:	br	 sw.epilog103

BASIC BLOCK sw.bb34
%197:	load	 err
%198:	load	 program_name
%199:	call	 %197 XXX %198 fprintf
%200:	br	 sw.bb36

BASIC BLOCK sw.bb36
%201:	icmp	 %179 XXX
%202:	br	 %201 if.end40 if.then39

BASIC BLOCK if.then39
%203:	call	 XXX flexerror
%204:	br	 if.end40

BASIC BLOCK if.end40
%205:	icmp	 %154 XXX
%206:	br	 %205 if.then42 if.end43

BASIC BLOCK if.then42
%207:	store	 XXX useecs
%208:	store	 XXX usemecs
%209:	store	 XXX fulltbl
%210:	br	 if.end43

BASIC BLOCK if.end43
%211:	phi	 %154 XXX
%212:	add	 %179 XXX
%213:	br	 for.cond44

BASIC BLOCK for.cond44
%214:	phi	 %212 %245
%215:	sext	 %214
%216:	getelementptr	 %175 %215
%217:	load	 %216
%218:	sext	 %217
%219:	icmp	 %218 XXX
%220:	br	 %219 for.end for.body50

BASIC BLOCK for.body50
%221:	sext	 %214
%222:	getelementptr	 %175 %221
%223:	load	 %222
%224:	sext	 %223
%225:	switch	 %224 sw.default XXX sw.bb54 XXX sw.bb55 XXX sw.bb56 XXX sw.bb57 XXX sw.bb58 XXX sw.bb59

BASIC BLOCK sw.bb54
%226:	store	 XXX long_align
%227:	br	 sw.epilog

BASIC BLOCK sw.bb55
%228:	store	 XXX useecs
%229:	br	 sw.epilog

BASIC BLOCK sw.bb56
%230:	store	 XXX fullspd
%231:	br	 sw.epilog

BASIC BLOCK sw.bb57
%232:	store	 XXX fulltbl
%233:	br	 sw.epilog

BASIC BLOCK sw.bb58
%234:	store	 XXX usemecs
%235:	br	 sw.epilog

BASIC BLOCK sw.bb59
%236:	store	 XXX use_read
%237:	br	 sw.epilog

BASIC BLOCK sw.default
%238:	sext	 %214
%239:	getelementptr	 %175 %238
%240:	load	 %239
%241:	sext	 %240
%242:	call	 XXX %241 lerrif
%243:	br	 sw.epilog

BASIC BLOCK sw.epilog
%244:	br	 for.inc

BASIC BLOCK for.inc
%245:	add	 %214 XXX
%246:	br	 for.cond44

BASIC BLOCK for.end
%247:	br	 get_next_arg

BASIC BLOCK sw.bb64
%248:	store	 XXX ddebug
%249:	br	 sw.epilog103

BASIC BLOCK sw.bb65
%250:	store	 XXX usemecs
%251:	store	 XXX useecs
%252:	store	 XXX fulltbl
%253:	store	 XXX use_read
%254:	br	 sw.epilog103

BASIC BLOCK sw.bb66
%255:	store	 XXX usemecs
%256:	store	 XXX useecs
%257:	store	 XXX fullspd
%258:	store	 XXX use_read
%259:	br	 sw.epilog103

BASIC BLOCK sw.bb67
%260:	call	 usage
%261:	call	 XXX exit
%262:	unreachable	

BASIC BLOCK sw.bb68
%263:	store	 XXX interactive
%264:	br	 sw.epilog103

BASIC BLOCK sw.bb69
%265:	store	 XXX caseins
%266:	br	 sw.epilog103

BASIC BLOCK sw.bb70
%267:	store	 XXX lex_compat
%268:	br	 sw.epilog103

BASIC BLOCK sw.bb71
%269:	store	 XXX gen_line_dirs
%270:	br	 sw.epilog103

BASIC BLOCK sw.bb72
%271:	br	 sw.epilog103

BASIC BLOCK sw.bb73
%272:	icmp	 %179 XXX
%273:	br	 %272 if.end77 if.then76

BASIC BLOCK if.then76
%274:	call	 XXX flexerror
%275:	br	 if.end77

BASIC BLOCK if.end77
%276:	sext	 %179
%277:	getelementptr	 %175 %276
%278:	getelementptr	 %277 XXX
%279:	store	 %278 prefix
%280:	br	 get_next_arg

BASIC BLOCK sw.bb79
%281:	load	 performance_report
%282:	add	 %281 XXX
%283:	store	 %282 performance_report
%284:	br	 sw.epilog103

BASIC BLOCK sw.bb81
%285:	icmp	 %179 XXX
%286:	br	 %285 if.end85 if.then84

BASIC BLOCK if.then84
%287:	call	 XXX flexerror
%288:	br	 if.end85

BASIC BLOCK if.end85
%289:	sext	 %179
%290:	getelementptr	 %175 %289
%291:	getelementptr	 %290 XXX
%292:	store	 %291 skelname
%293:	br	 get_next_arg

BASIC BLOCK sw.bb89
%294:	store	 XXX spprdflt
%295:	br	 sw.epilog103

BASIC BLOCK sw.bb90
%296:	store	 XXX use_stdout
%297:	br	 sw.epilog103

BASIC BLOCK sw.bb91
%298:	store	 XXX trace
%299:	br	 sw.epilog103

BASIC BLOCK sw.bb92
%300:	store	 XXX printstats
%301:	br	 sw.epilog103

BASIC BLOCK sw.bb93
%302:	load	 err
%303:	load	 program_name
%304:	call	 %302 XXX %303 XXX fprintf
%305:	call	 XXX exit
%306:	unreachable	

BASIC BLOCK sw.bb95
%307:	store	 XXX nowarn
%308:	br	 sw.epilog103

BASIC BLOCK sw.bb96
%309:	store	 XXX csize
%310:	br	 sw.epilog103

BASIC BLOCK sw.bb97
%311:	store	 XXX csize
%312:	br	 sw.epilog103

BASIC BLOCK sw.default98
%313:	load	 err
%314:	load	 program_name
%315:	sext	 %179
%316:	getelementptr	 %175 %315
%317:	load	 %316
%318:	sext	 %317
%319:	call	 %313 XXX %314 %318 fprintf
%320:	call	 usage
%321:	call	 XXX exit
%322:	unreachable	

BASIC BLOCK sw.epilog103
%323:	phi	 %177 %177 %177 %177 %177 %177 %177 %177 %177 %177 %177 %177 XXX %177 %177 %177 %177 XXX %177
%324:	phi	 XXX XXX %178 %178 %178 %178 %178 %178 %178 %178 %178 %178 %178 %178 %178 %178 %178 %178 %178
%325:	br	 for.inc104

BASIC BLOCK for.inc104
%326:	add	 %179 XXX
%327:	br	 for.cond23

BASIC BLOCK for.end106
%328:	br	 get_next_arg

BASIC BLOCK get_next_arg
%329:	phi	 %154 %154 %211 %154
%330:	br	 for.inc107

BASIC BLOCK for.inc107
%331:	add	 %156 XXX
%332:	getelementptr	 %155 XXX
%333:	br	 for.cond

BASIC BLOCK for.end110
%334:	icmp	 %153 XXX
%335:	br	 %334 if.then112 if.end120

BASIC BLOCK if.then112
%336:	load	 fulltbl
%337:	icmp	 %336 XXX
%338:	br	 %337 lor.lhs.false114 land.lhs.true116

BASIC BLOCK lor.lhs.false114
%339:	load	 fullspd
%340:	icmp	 %339 XXX
%341:	br	 %340 if.else land.lhs.true116

BASIC BLOCK land.lhs.true116
%342:	load	 useecs
%343:	icmp	 %342 XXX
%344:	br	 %343 if.then118 if.else

BASIC BLOCK if.then118
%345:	store	 XXX csize
%346:	br	 if.end119

BASIC BLOCK if.else
%347:	store	 XXX csize
%348:	br	 if.end119

BASIC BLOCK if.end119
%349:	br	 if.end120

BASIC BLOCK if.end120
%350:	icmp	 %152 XXX
%351:	br	 %350 if.then122 if.end129

BASIC BLOCK if.then122
%352:	load	 fulltbl
%353:	icmp	 %352 XXX
%354:	br	 %353 lor.lhs.false124 if.then126

BASIC BLOCK lor.lhs.false124
%355:	load	 fullspd
%356:	icmp	 %355 XXX
%357:	br	 %356 if.else127 if.then126

BASIC BLOCK if.then126
%358:	store	 XXX interactive
%359:	br	 if.end128

BASIC BLOCK if.else127
%360:	store	 XXX interactive
%361:	br	 if.end128

BASIC BLOCK if.end128
%362:	br	 if.end129

BASIC BLOCK if.end129
%363:	load	 lex_compat
%364:	icmp	 %363 XXX
%365:	br	 %364 if.end140 if.then131

BASIC BLOCK if.then131
%366:	load	 C_plus_plus
%367:	icmp	 %366 XXX
%368:	br	 %367 if.end134 if.then133

BASIC BLOCK if.then133
%369:	call	 XXX flexerror
%370:	br	 if.end134

BASIC BLOCK if.end134
%371:	load	 fulltbl
%372:	icmp	 %371 XXX
%373:	br	 %372 lor.lhs.false136 if.then138

BASIC BLOCK lor.lhs.false136
%374:	load	 fullspd
%375:	icmp	 %374 XXX
%376:	br	 %375 if.end139 if.then138

BASIC BLOCK if.then138
%377:	call	 XXX flexerror
%378:	br	 if.end139

BASIC BLOCK if.end139
%379:	store	 XXX reject_really_used
%380:	store	 XXX yymore_really_used
%381:	store	 XXX yytext_is_array
%382:	store	 XXX use_read
%383:	br	 if.end140

BASIC BLOCK if.end140
%384:	load	 fulltbl
%385:	icmp	 %384 XXX
%386:	br	 %385 lor.lhs.false142 land.lhs.true144

BASIC BLOCK lor.lhs.false142
%387:	load	 fullspd
%388:	icmp	 %387 XXX
%389:	br	 %388 if.end147 land.lhs.true144

BASIC BLOCK land.lhs.true144
%390:	load	 usemecs
%391:	icmp	 %390 XXX
%392:	br	 %391 if.end147 if.then146

BASIC BLOCK if.then146
%393:	call	 XXX flexerror
%394:	br	 if.end147

BASIC BLOCK if.end147
%395:	load	 fulltbl
%396:	icmp	 %395 XXX
%397:	br	 %396 lor.lhs.false149 land.lhs.true151

BASIC BLOCK lor.lhs.false149
%398:	load	 fullspd
%399:	icmp	 %398 XXX
%400:	br	 %399 if.end154 land.lhs.true151

BASIC BLOCK land.lhs.true151
%401:	load	 interactive
%402:	icmp	 %401 XXX
%403:	br	 %402 if.end154 if.then153

BASIC BLOCK if.then153
%404:	call	 XXX flexerror
%405:	br	 if.end154

BASIC BLOCK if.end154
%406:	load	 fulltbl
%407:	icmp	 %406 XXX
%408:	br	 %407 if.end159 land.lhs.true156

BASIC BLOCK land.lhs.true156
%409:	load	 fullspd
%410:	icmp	 %409 XXX
%411:	br	 %410 if.end159 if.then158

BASIC BLOCK if.then158
%412:	call	 XXX flexerror
%413:	br	 if.end159

BASIC BLOCK if.end159
%414:	load	 C_plus_plus
%415:	icmp	 %414 XXX
%416:	br	 %415 if.end164 land.lhs.true161

BASIC BLOCK land.lhs.true161
%417:	load	 fullspd
%418:	icmp	 %417 XXX
%419:	br	 %418 if.end164 if.then163

BASIC BLOCK if.then163
%420:	call	 XXX flexerror
%421:	br	 if.end164

BASIC BLOCK if.end164
%422:	load	 use_stdout
%423:	icmp	 %422 XXX
%424:	br	 %423 if.then166 if.end177

BASIC BLOCK if.then166
%425:	load	 C_plus_plus
%426:	icmp	 %425 XXX
%427:	br	 %426 if.else169 if.then168

BASIC BLOCK if.then168
%428:	br	 if.end170

BASIC BLOCK if.else169
%429:	br	 if.end170

BASIC BLOCK if.end170
%430:	phi	 XXX XXX
%431:	load	 outfile_template
%432:	load	 prefix
%433:	call	 XXX %431 %432 %430 sprintf
%434:	load	 stdout
%435:	call	 XXX XXX %434 freopen
%436:	icmp	 %435 XXX
%437:	br	 %436 if.end176 if.then175

BASIC BLOCK if.then175
%438:	call	 XXX XXX lerrsf
%439:	br	 if.end176

BASIC BLOCK if.end176
%440:	store	 XXX outfile_created
%441:	br	 if.end177

BASIC BLOCK if.end177
%442:	store	 %156 num_input_files
%443:	store	 %155 input_files
%444:	load	 num_input_files
%445:	icmp	 %444 XXX
%446:	br	 %445 cond.false cond.true

BASIC BLOCK cond.true
%447:	load	 input_files
%448:	getelementptr	 %447 XXX
%449:	load	 %448
%450:	br	 cond.end

BASIC BLOCK cond.false
%451:	br	 cond.end

BASIC BLOCK cond.end
%452:	phi	 %449 XXX
%453:	call	 %452 set_input_file
%454:	load	 backing_up_report
%455:	icmp	 %454 XXX
%456:	br	 %455 if.else188 if.then182

BASIC BLOCK if.then182
%457:	call	 XXX XXX fopen
%458:	store	 %457 backing_up_file
%459:	load	 backing_up_file
%460:	icmp	 %459 XXX
%461:	br	 %460 if.end187 if.then186

BASIC BLOCK if.then186
%462:	call	 XXX flexerror
%463:	br	 if.end187

BASIC BLOCK if.end187
%464:	br	 if.end189

BASIC BLOCK if.else188
%465:	store	 XXX backing_up_file
%466:	br	 if.end189

BASIC BLOCK if.end189
%467:	store	 XXX lastccl
%468:	store	 XXX lastsc
%469:	load	 skelname
%470:	icmp	 %469 XXX
%471:	br	 %470 if.end196 land.lhs.true191

BASIC BLOCK land.lhs.true191
%472:	load	 skelname
%473:	call	 %472 XXX fopen
%474:	store	 %473 skelfile
%475:	icmp	 %473 XXX
%476:	br	 %475 if.end196 if.then195

BASIC BLOCK if.then195
%477:	load	 skelname
%478:	call	 XXX %477 lerrsf
%479:	br	 if.end196

BASIC BLOCK if.end196
%480:	load	 prefix
%481:	call	 %480 XXX strcmp
%482:	icmp	 %481 XXX
%483:	br	 %482 if.end215 if.then199

BASIC BLOCK if.then199
%484:	load	 prefix
%485:	call	 XXX XXX %484 XXX printf
%486:	load	 prefix
%487:	call	 XXX XXX %486 XXX printf
%488:	load	 prefix
%489:	call	 XXX XXX %488 XXX printf
%490:	load	 prefix
%491:	call	 XXX XXX %490 XXX printf
%492:	load	 prefix
%493:	call	 XXX XXX %492 XXX printf
%494:	load	 prefix
%495:	call	 XXX XXX %494 XXX printf
%496:	load	 prefix
%497:	call	 XXX XXX %496 XXX printf
%498:	load	 prefix
%499:	call	 XXX XXX %498 XXX printf
%500:	load	 prefix
%501:	call	 XXX XXX %500 XXX printf
%502:	load	 prefix
%503:	call	 XXX XXX %502 XXX printf
%504:	load	 prefix
%505:	call	 XXX XXX %504 XXX printf
%506:	load	 prefix
%507:	call	 XXX XXX %506 XXX printf
%508:	load	 prefix
%509:	call	 XXX XXX %508 XXX printf
%510:	load	 prefix
%511:	call	 XXX XXX %510 XXX printf
%512:	call	 XXX printf
%513:	br	 if.end215

BASIC BLOCK if.end215
%514:	store	 XXX lastnfa
%515:	store	 XXX lastdfa
%516:	store	 XXX default_rule
%517:	store	 XXX num_eof_rules
%518:	store	 XXX num_rules
%519:	store	 XXX tmpuses
%520:	store	 XXX numsnpairs
%521:	store	 XXX numas
%522:	store	 XXX totnst
%523:	store	 XXX dfaeql
%524:	store	 XXX hshcol
%525:	store	 XXX num_reallocs
%526:	store	 XXX eps2
%527:	store	 XXX numeps
%528:	store	 XXX numecs
%529:	store	 XXX dataline
%530:	store	 XXX datapos
%531:	store	 XXX eofseen
%532:	store	 XXX hshsave
%533:	store	 XXX numdup
%534:	store	 XXX numuniq
%535:	store	 XXX numprots
%536:	store	 XXX onesp
%537:	store	 XXX num_backing_up
%538:	store	 XXX bol_needed
%539:	store	 XXX variable_trailing_context_rules
%540:	store	 XXX sectnum
%541:	store	 XXX linenum
%542:	store	 XXX firstprot
%543:	store	 XXX lastprot
%544:	load	 useecs
%545:	icmp	 %544 XXX
%546:	br	 %545 if.else233 if.then217

BASIC BLOCK if.then217
%547:	store	 XXX XXX
%548:	br	 for.cond218

BASIC BLOCK for.cond218
%549:	phi	 XXX %562
%550:	load	 csize
%551:	icmp	 %549 %550
%552:	br	 %551 for.end230 for.body221

BASIC BLOCK for.body221
%553:	sub	 %549 XXX
%554:	sext	 %549
%555:	getelementptr	 ecgroup XXX %554
%556:	store	 %553 %555
%557:	sub	 %549 XXX
%558:	sext	 %557
%559:	getelementptr	 nextecm XXX %558
%560:	store	 %549 %559
%561:	br	 for.inc228

BASIC BLOCK for.inc228
%562:	add	 %549 XXX
%563:	br	 for.cond218

BASIC BLOCK for.end230
%564:	load	 csize
%565:	sext	 %564
%566:	getelementptr	 nextecm XXX %565
%567:	store	 XXX %566
%568:	br	 if.end245

BASIC BLOCK if.else233
%569:	br	 for.cond234

BASIC BLOCK for.cond234
%570:	phi	 XXX %581
%571:	load	 csize
%572:	icmp	 %570 %571
%573:	br	 %572 for.end244 for.body237

BASIC BLOCK for.body237
%574:	sext	 %570
%575:	getelementptr	 ecgroup XXX %574
%576:	store	 %570 %575
%577:	sext	 %570
%578:	getelementptr	 nextecm XXX %577
%579:	store	 XXX %578
%580:	br	 for.inc242

BASIC BLOCK for.inc242
%581:	add	 %570 XXX
%582:	br	 for.cond234

BASIC BLOCK for.end244
%583:	br	 if.end245

BASIC BLOCK if.end245
%584:	call	 set_up_initial_allocations
%585:	ret	

FUNCTION readin

BASIC BLOCK entry
%586:	call	 skelout
%587:	call	 XXX line_directive_out
%588:	call	 yyparse
%589:	icmp	 %588 XXX
%590:	br	 %589 if.end if.then

BASIC BLOCK if.then
%591:	call	 XXX pinpoint_message
%592:	call	 XXX flexend
%593:	br	 if.end

BASIC BLOCK if.end
%594:	load	 syntaxerror
%595:	icmp	 %594 XXX
%596:	br	 %595 if.end3 if.then2

BASIC BLOCK if.then2
%597:	call	 XXX flexend
%598:	br	 if.end3

BASIC BLOCK if.end3
%599:	load	 yymore_really_used
%600:	icmp	 %599 XXX
%601:	br	 %600 if.else if.then4

BASIC BLOCK if.then4
%602:	store	 XXX yymore_used
%603:	br	 if.end8

BASIC BLOCK if.else
%604:	load	 yymore_really_used
%605:	icmp	 %604 XXX
%606:	br	 %605 if.end7 if.then6

BASIC BLOCK if.then6
%607:	store	 XXX yymore_used
%608:	br	 if.end7

BASIC BLOCK if.end7
%609:	br	 if.end8

BASIC BLOCK if.end8
%610:	load	 reject_really_used
%611:	icmp	 %610 XXX
%612:	br	 %611 if.else11 if.then10

BASIC BLOCK if.then10
%613:	store	 XXX reject
%614:	br	 if.end15

BASIC BLOCK if.else11
%615:	load	 reject_really_used
%616:	icmp	 %615 XXX
%617:	br	 %616 if.end14 if.then13

BASIC BLOCK if.then13
%618:	store	 XXX reject
%619:	br	 if.end14

BASIC BLOCK if.end14
%620:	br	 if.end15

BASIC BLOCK if.end15
%621:	load	 performance_report
%622:	icmp	 %621 XXX
%623:	br	 %622 if.end42 if.then17

BASIC BLOCK if.then17
%624:	load	 lex_compat
%625:	icmp	 %624 XXX
%626:	br	 %625 if.end22 if.then19

BASIC BLOCK if.then19
%627:	load	 err
%628:	call	 %627 XXX fprintf
%629:	load	 err
%630:	call	 %629 XXX fprintf
%631:	br	 if.end22

BASIC BLOCK if.end22
%632:	load	 performance_report
%633:	icmp	 %632 XXX
%634:	br	 %633 if.end33 if.then24

BASIC BLOCK if.then24
%635:	load	 interactive
%636:	icmp	 %635 XXX
%637:	br	 %636 if.end28 if.then26

BASIC BLOCK if.then26
%638:	load	 err
%639:	call	 %638 XXX fprintf
%640:	br	 if.end28

BASIC BLOCK if.end28
%641:	load	 yymore_used
%642:	icmp	 %641 XXX
%643:	br	 %642 if.end32 if.then30

BASIC BLOCK if.then30
%644:	load	 err
%645:	call	 %644 XXX fprintf
%646:	br	 if.end32

BASIC BLOCK if.end32
%647:	br	 if.end33

BASIC BLOCK if.end33
%648:	load	 reject
%649:	icmp	 %648 XXX
%650:	br	 %649 if.end37 if.then35

BASIC BLOCK if.then35
%651:	load	 err
%652:	call	 %651 XXX fprintf
%653:	br	 if.end37

BASIC BLOCK if.end37
%654:	load	 variable_trailing_context_rules
%655:	icmp	 %654 XXX
%656:	br	 %655 if.end41 if.then39

BASIC BLOCK if.then39
%657:	load	 err
%658:	call	 %657 XXX fprintf
%659:	br	 if.end41

BASIC BLOCK if.end41
%660:	br	 if.end42

BASIC BLOCK if.end42
%661:	load	 reject
%662:	icmp	 %661 XXX
%663:	br	 %662 if.end45 if.then44

BASIC BLOCK if.then44
%664:	store	 XXX real_reject
%665:	br	 if.end45

BASIC BLOCK if.end45
%666:	load	 variable_trailing_context_rules
%667:	icmp	 %666 XXX
%668:	br	 %667 if.end48 if.then47

BASIC BLOCK if.then47
%669:	store	 XXX reject
%670:	br	 if.end48

BASIC BLOCK if.end48
%671:	load	 fulltbl
%672:	icmp	 %671 XXX
%673:	br	 %672 lor.lhs.false land.lhs.true

BASIC BLOCK lor.lhs.false
%674:	load	 fullspd
%675:	icmp	 %674 XXX
%676:	br	 %675 if.end57 land.lhs.true

BASIC BLOCK land.lhs.true
%677:	load	 reject
%678:	icmp	 %677 XXX
%679:	br	 %678 if.end57 if.then52

BASIC BLOCK if.then52
%680:	load	 real_reject
%681:	icmp	 %680 XXX
%682:	br	 %681 if.else55 if.then54

BASIC BLOCK if.then54
%683:	call	 XXX flexerror
%684:	br	 if.end56

BASIC BLOCK if.else55
%685:	call	 XXX flexerror
%686:	br	 if.end56

BASIC BLOCK if.end56
%687:	br	 if.end57

BASIC BLOCK if.end57
%688:	load	 csize
%689:	icmp	 %688 XXX
%690:	br	 %689 if.else61 if.then59

BASIC BLOCK if.then59
%691:	call	 XXX puts
%692:	br	 if.end63

BASIC BLOCK if.else61
%693:	call	 XXX puts
%694:	br	 if.end63

BASIC BLOCK if.end63
%695:	load	 C_plus_plus
%696:	icmp	 %695 XXX
%697:	br	 %696 if.end71 if.then65

BASIC BLOCK if.then65
%698:	call	 XXX puts
%699:	load	 interactive
%700:	icmp	 %699 XXX
%701:	br	 %700 if.end70 if.then68

BASIC BLOCK if.then68
%702:	call	 XXX puts
%703:	br	 if.end70

BASIC BLOCK if.end70
%704:	br	 if.end71

BASIC BLOCK if.end71
%705:	load	 fullspd
%706:	icmp	 %705 XXX
%707:	br	 %706 if.else75 if.then73

BASIC BLOCK if.then73
%708:	call	 XXX printf
%709:	br	 if.end80

BASIC BLOCK if.else75
%710:	load	 C_plus_plus
%711:	icmp	 %710 XXX
%712:	br	 %711 if.then77 if.end79

BASIC BLOCK if.then77
%713:	call	 XXX printf
%714:	br	 if.end79

BASIC BLOCK if.end79
%715:	br	 if.end80

BASIC BLOCK if.end80
%716:	load	 reject
%717:	icmp	 %716 XXX
%718:	br	 %717 if.end84 if.then82

BASIC BLOCK if.then82
%719:	call	 XXX printf
%720:	br	 if.end84

BASIC BLOCK if.end84
%721:	load	 ddebug
%722:	icmp	 %721 XXX
%723:	br	 %722 if.end88 if.then86

BASIC BLOCK if.then86
%724:	call	 XXX puts
%725:	br	 if.end88

BASIC BLOCK if.end88
%726:	load	 lex_compat
%727:	icmp	 %726 XXX
%728:	br	 %727 if.else94 if.then90

BASIC BLOCK if.then90
%729:	call	 XXX printf
%730:	call	 XXX printf
%731:	call	 XXX printf
%732:	br	 if.end99

BASIC BLOCK if.else94
%733:	load	 C_plus_plus
%734:	icmp	 %733 XXX
%735:	br	 %734 if.then96 if.end98

BASIC BLOCK if.then96
%736:	call	 XXX printf
%737:	br	 if.end98

BASIC BLOCK if.end98
%738:	br	 if.end99

BASIC BLOCK if.end99
%739:	load	 C_plus_plus
%740:	icmp	 %739 XXX
%741:	br	 %740 if.else103 if.then101

BASIC BLOCK if.then101
%742:	call	 XXX printf
%743:	br	 if.end111

BASIC BLOCK if.else103
%744:	load	 yytext_is_array
%745:	icmp	 %744 XXX
%746:	br	 %745 if.else107 if.then105

BASIC BLOCK if.then105
%747:	call	 XXX puts
%748:	br	 if.end110

BASIC BLOCK if.else107
%749:	call	 XXX puts
%750:	call	 XXX puts
%751:	br	 if.end110

BASIC BLOCK if.end110
%752:	br	 if.end111

BASIC BLOCK if.end111
%753:	load	 useecs
%754:	icmp	 %753 XXX
%755:	br	 %754 if.else115 if.then113

BASIC BLOCK if.then113
%756:	load	 csize
%757:	call	 XXX XXX %756 cre8ecs
%758:	store	 %757 numecs
%759:	br	 if.end116

BASIC BLOCK if.else115
%760:	load	 csize
%761:	store	 %760 numecs
%762:	br	 if.end116

BASIC BLOCK if.end116
%763:	load	 csize
%764:	sext	 %763
%765:	getelementptr	 ecgroup XXX %764
%766:	load	 %765
%767:	store	 %766 XXX
%768:	load	 XXX
%769:	icmp	 %768 XXX
%770:	br	 %769 cond.false cond.true

BASIC BLOCK cond.true
%771:	load	 XXX
%772:	sub	 XXX %771
%773:	br	 cond.end

BASIC BLOCK cond.false
%774:	load	 XXX
%775:	br	 cond.end

BASIC BLOCK cond.end
%776:	phi	 %772 %774
%777:	store	 %776 NUL_ec
%778:	load	 useecs
%779:	icmp	 %778 XXX
%780:	br	 %779 if.end120 if.then119

BASIC BLOCK if.then119
%781:	call	 ccl2ecl
%782:	br	 if.end120

BASIC BLOCK if.end120
%783:	ret	

FUNCTION ntod

BASIC BLOCK entry
%784:	alloca	 XXX
%785:	alloca	 XXX
%786:	alloca	 XXX
%787:	alloca	 XXX
%788:	alloca	 XXX
%789:	alloca	 XXX
%790:	alloca	 XXX
%791:	alloca	 XXX
%792:	alloca	 XXX
%793:	alloca	 XXX
%794:	load	 num_rules
%795:	add	 %794 XXX
%796:	call	 %795 XXX allocate_array
%797:	bitcast	 %796
%798:	load	 current_max_dfa_size
%799:	call	 %798 XXX allocate_array
%800:	bitcast	 %799
%801:	br	 for.cond

BASIC BLOCK for.cond
%802:	phi	 XXX %813
%803:	load	 csize
%804:	icmp	 %802 %803
%805:	br	 %804 for.end for.body

BASIC BLOCK for.body
%806:	sext	 %802
%807:	getelementptr	 %790 XXX %806
%808:	store	 XXX %807
%809:	sext	 %802
%810:	getelementptr	 %789 XXX %809
%811:	store	 XXX %810
%812:	br	 for.inc

BASIC BLOCK for.inc
%813:	add	 %802 XXX
%814:	br	 for.cond

BASIC BLOCK for.end
%815:	br	 for.cond4

BASIC BLOCK for.cond4
%816:	phi	 XXX %824
%817:	load	 num_rules
%818:	icmp	 %816 %817
%819:	br	 %818 for.end11 for.body6

BASIC BLOCK for.body6
%820:	sext	 %816
%821:	getelementptr	 %797 %820
%822:	store	 XXX %821
%823:	br	 for.inc9

BASIC BLOCK for.inc9
%824:	add	 %816 XXX
%825:	br	 for.cond4

BASIC BLOCK for.end11
%826:	load	 trace
%827:	icmp	 %826 XXX
%828:	br	 %827 if.end if.then

BASIC BLOCK if.then
%829:	load	 scset
%830:	getelementptr	 %829 XXX
%831:	load	 %830
%832:	call	 %831 dumpnfa
%833:	load	 err
%834:	call	 XXX %833 fputs
%835:	br	 if.end

BASIC BLOCK if.end
%836:	call	 inittbl
%837:	load	 fullspd
%838:	icmp	 %837 XXX
%839:	br	 %838 land.lhs.true if.end37

BASIC BLOCK land.lhs.true
%840:	load	 XXX
%841:	load	 numecs
%842:	icmp	 %840 %841
%843:	br	 %842 if.end37 if.then16

BASIC BLOCK if.then16
%844:	load	 numecs
%845:	load	 csize
%846:	icmp	 %844 %845
%847:	zext	 %846
%848:	load	 fulltbl
%849:	icmp	 %848 XXX
%850:	br	 %849 if.end32 land.lhs.true19

BASIC BLOCK land.lhs.true19
%851:	icmp	 %847 XXX
%852:	br	 %851 if.then21 if.end32

BASIC BLOCK if.then21
%853:	br	 for.cond22

BASIC BLOCK for.cond22
%854:	phi	 XXX %863
%855:	load	 csize
%856:	icmp	 %854 %855
%857:	br	 %856 for.end31 for.body25

BASIC BLOCK for.body25
%858:	load	 numecs
%859:	icmp	 %858 %854
%860:	br	 %859 if.end29 if.then28

BASIC BLOCK if.then28
%861:	br	 for.end31

BASIC BLOCK if.end29
%862:	br	 for.inc30

BASIC BLOCK for.inc30
%863:	mul	 %854 XXX
%864:	br	 for.cond22

BASIC BLOCK for.end31
%865:	phi	 XXX %847
%866:	br	 if.end32

BASIC BLOCK if.end32
%867:	phi	 %847 %865 %847
%868:	icmp	 %867 XXX
%869:	br	 %868 if.end36 if.then34

BASIC BLOCK if.then34
%870:	load	 current_max_dfas
%871:	call	 %870 XXX allocate_array
%872:	bitcast	 %871
%873:	store	 %872 nultrans
%874:	br	 if.end36

BASIC BLOCK if.end36
%875:	br	 if.end37

BASIC BLOCK if.end37
%876:	load	 fullspd
%877:	icmp	 %876 XXX
%878:	br	 %877 if.else if.then39

BASIC BLOCK if.then39
%879:	br	 for.cond40

BASIC BLOCK for.cond40
%880:	phi	 XXX %888
%881:	load	 numecs
%882:	icmp	 %880 %881
%883:	br	 %882 for.end48 for.body43

BASIC BLOCK for.body43
%884:	sext	 %880
%885:	getelementptr	 %791 XXX %884
%886:	store	 XXX %885
%887:	br	 for.inc46

BASIC BLOCK for.inc46
%888:	add	 %880 XXX
%889:	br	 for.cond40

BASIC BLOCK for.end48
%890:	getelementptr	 %791 XXX XXX
%891:	call	 %890 XXX XXX place_state
%892:	sext	 %880
%893:	load	 dfaacc
%894:	getelementptr	 %893 %892
%895:	bitcast	 %894
%896:	store	 XXX %895
%897:	br	 if.end68

BASIC BLOCK if.else
%898:	load	 fulltbl
%899:	icmp	 %898 XXX
%900:	br	 %899 if.end67 if.then52

BASIC BLOCK if.then52
%901:	load	 nultrans
%902:	icmp	 %901 XXX
%903:	br	 %902 if.else55 if.then54

BASIC BLOCK if.then54
%904:	load	 numecs
%905:	br	 if.end57

BASIC BLOCK if.else55
%906:	load	 numecs
%907:	add	 %906 XXX
%908:	br	 if.end57

BASIC BLOCK if.end57
%909:	phi	 %904 %907
%910:	load	 long_align
%911:	icmp	 %910 XXX
%912:	select	 %911 XXX XXX
%913:	call	 XXX %912 %909 printf
%914:	br	 for.cond60

BASIC BLOCK for.cond60
%915:	phi	 XXX %920
%916:	icmp	 %915 %909
%917:	br	 %916 for.end66 for.body63

BASIC BLOCK for.body63
%918:	call	 XXX mk2data
%919:	br	 for.inc64

BASIC BLOCK for.inc64
%920:	add	 %915 XXX
%921:	br	 for.cond60

BASIC BLOCK for.end66
%922:	store	 XXX datapos
%923:	store	 XXX dataline
%924:	br	 if.end67

BASIC BLOCK if.end67
%925:	phi	 %909 XXX
%926:	br	 if.end68

BASIC BLOCK if.end68
%927:	phi	 XXX %925
%928:	load	 lastsc
%929:	mul	 %928 XXX
%930:	br	 for.cond70

BASIC BLOCK for.cond70
%931:	phi	 XXX %994
%932:	phi	 XXX %996
%933:	phi	 %800 %967
%934:	icmp	 %932 %929
%935:	br	 %934 for.end109 for.body73

BASIC BLOCK for.body73
%936:	store	 XXX %788
%937:	srem	 %932 XXX
%938:	icmp	 %937 XXX
%939:	br	 %938 if.else82 if.then76

BASIC BLOCK if.then76
%940:	sdiv	 %932 XXX
%941:	add	 %940 XXX
%942:	sext	 %941
%943:	load	 scset
%944:	getelementptr	 %943 %942
%945:	load	 %944
%946:	load	 %788
%947:	sext	 %946
%948:	getelementptr	 %933 %947
%949:	store	 %945 %948
%950:	br	 if.end92

BASIC BLOCK if.else82
%951:	sdiv	 %932 XXX
%952:	sext	 %951
%953:	load	 scbol
%954:	getelementptr	 %953 %952
%955:	load	 %954
%956:	sdiv	 %932 XXX
%957:	sext	 %956
%958:	load	 scset
%959:	getelementptr	 %958 %957
%960:	load	 %959
%961:	call	 %955 %960 mkbranch
%962:	load	 %788
%963:	sext	 %962
%964:	getelementptr	 %933 %963
%965:	store	 %961 %964
%966:	br	 if.end92

BASIC BLOCK if.end92
%967:	call	 %933 %788 %797 %785 %787 epsclosure
%968:	load	 %788
%969:	load	 %785
%970:	load	 %787
%971:	call	 %967 %968 %797 %969 %970 %784 snstods
%972:	icmp	 %971 XXX
%973:	br	 %972 if.end106 if.then96

BASIC BLOCK if.then96
%974:	load	 %785
%975:	load	 numas
%976:	add	 %975 %974
%977:	store	 %976 numas
%978:	load	 %788
%979:	load	 totnst
%980:	add	 %979 %978
%981:	store	 %980 totnst
%982:	add	 %931 XXX
%983:	load	 variable_trailing_context_rules
%984:	icmp	 %983 XXX
%985:	br	 %984 if.end105 land.lhs.true101

BASIC BLOCK land.lhs.true101
%986:	load	 %785
%987:	icmp	 %986 XXX
%988:	br	 %987 if.end105 if.then104

BASIC BLOCK if.then104
%989:	load	 %788
%990:	load	 %785
%991:	call	 %967 %989 %797 %990 check_trailing_context
%992:	br	 if.end105

BASIC BLOCK if.end105
%993:	br	 if.end106

BASIC BLOCK if.end106
%994:	phi	 %982 %931
%995:	br	 for.inc107

BASIC BLOCK for.inc107
%996:	add	 %932 XXX
%997:	br	 for.cond70

BASIC BLOCK for.end109
%998:	load	 fullspd
%999:	icmp	 %998 XXX
%1000:	br	 %999 if.then111 if.end119

BASIC BLOCK if.then111
%1001:	call	 %933 XXX %797 XXX XXX end_of_buffer_state snstods
%1002:	icmp	 %1001 XXX
%1003:	br	 %1002 if.then114 if.end115

BASIC BLOCK if.then114
%1004:	call	 XXX flexfatal
%1005:	br	 if.end115

BASIC BLOCK if.end115
%1006:	load	 numas
%1007:	add	 %1006 XXX
%1008:	store	 %1007 numas
%1009:	add	 %929 XXX
%1010:	add	 %931 XXX
%1011:	br	 if.end119

BASIC BLOCK if.end119
%1012:	phi	 %929 %1009
%1013:	phi	 %931 %1010
%1014:	br	 while.cond

BASIC BLOCK while.cond
%1015:	phi	 XXX %1031
%1016:	phi	 %1013 %1054
%1017:	phi	 %933 %1057
%1018:	icmp	 %1015 %1016
%1019:	br	 %1018 while.end297 while.body

BASIC BLOCK while.body
%1020:	br	 for.cond122

BASIC BLOCK for.cond122
%1021:	phi	 XXX %1029
%1022:	load	 numecs
%1023:	icmp	 %1021 %1022
%1024:	br	 %1023 for.end130 for.body125

BASIC BLOCK for.body125
%1025:	sext	 %1021
%1026:	getelementptr	 %791 XXX %1025
%1027:	store	 XXX %1026
%1028:	br	 for.inc128

BASIC BLOCK for.inc128
%1029:	add	 %1021 XXX
%1030:	br	 for.cond122

BASIC BLOCK for.end130
%1031:	add	 %1015 XXX
%1032:	store	 %1031 %784
%1033:	load	 %784
%1034:	sext	 %1033
%1035:	load	 dss
%1036:	getelementptr	 %1035 %1034
%1037:	load	 %1036
%1038:	load	 %784
%1039:	sext	 %1038
%1040:	load	 dfasiz
%1041:	getelementptr	 %1040 %1039
%1042:	load	 %1041
%1043:	load	 trace
%1044:	icmp	 %1043 XXX
%1045:	br	 %1044 if.end139 if.then137

BASIC BLOCK if.then137
%1046:	load	 err
%1047:	load	 %784
%1048:	call	 %1046 XXX %1047 fprintf
%1049:	br	 if.end139

BASIC BLOCK if.end139
%1050:	getelementptr	 %789 XXX XXX
%1051:	getelementptr	 %790 XXX XXX
%1052:	call	 %1037 %1042 %1050 %1051 sympartition
%1053:	br	 for.cond142

BASIC BLOCK for.cond142
%1054:	phi	 %1016 %1169
%1055:	phi	 XXX %1170
%1056:	phi	 XXX %1171
%1057:	phi	 %1017 %1172
%1058:	phi	 XXX %1174
%1059:	load	 numecs
%1060:	icmp	 %1058 %1059
%1061:	br	 %1060 for.end213 for.body145

BASIC BLOCK for.body145
%1062:	sext	 %1058
%1063:	getelementptr	 %789 XXX %1062
%1064:	load	 %1063
%1065:	icmp	 %1064 XXX
%1066:	br	 %1065 if.end210 if.then149

BASIC BLOCK if.then149
%1067:	sext	 %1058
%1068:	getelementptr	 %789 XXX %1067
%1069:	store	 XXX %1068
%1070:	sext	 %1058
%1071:	getelementptr	 %790 XXX %1070
%1072:	load	 %1071
%1073:	icmp	 %1072 XXX
%1074:	br	 %1073 if.else184 if.then156

BASIC BLOCK if.then156
%1075:	call	 %1037 %1042 %1058 %1057 symfollowset
%1076:	store	 %1075 %788
%1077:	call	 %1057 %788 %797 %785 %787 epsclosure
%1078:	load	 %788
%1079:	load	 %785
%1080:	load	 %787
%1081:	call	 %1077 %1078 %797 %1079 %1080 %786 snstods
%1082:	icmp	 %1081 XXX
%1083:	br	 %1082 if.end171 if.then161

BASIC BLOCK if.then161
%1084:	load	 totnst
%1085:	load	 %788
%1086:	add	 %1084 %1085
%1087:	store	 %1086 totnst
%1088:	add	 %1054 XXX
%1089:	load	 %785
%1090:	load	 numas
%1091:	add	 %1090 %1089
%1092:	store	 %1091 numas
%1093:	load	 variable_trailing_context_rules
%1094:	icmp	 %1093 XXX
%1095:	br	 %1094 if.end170 land.lhs.true166

BASIC BLOCK land.lhs.true166
%1096:	load	 %785
%1097:	icmp	 %1096 XXX
%1098:	br	 %1097 if.end170 if.then169

BASIC BLOCK if.then169
%1099:	load	 %788
%1100:	load	 %785
%1101:	call	 %1077 %1099 %797 %1100 check_trailing_context
%1102:	br	 if.end170

BASIC BLOCK if.end170
%1103:	br	 if.end171

BASIC BLOCK if.end171
%1104:	phi	 %1088 %1054
%1105:	load	 %786
%1106:	sext	 %1058
%1107:	getelementptr	 %791 XXX %1106
%1108:	store	 %1105 %1107
%1109:	load	 trace
%1110:	icmp	 %1109 XXX
%1111:	br	 %1110 if.end177 if.then175

BASIC BLOCK if.then175
%1112:	load	 err
%1113:	load	 %786
%1114:	call	 %1112 XXX %1058 %1113 fprintf
%1115:	br	 if.end177

BASIC BLOCK if.end177
%1116:	add	 %1056 XXX
%1117:	sext	 %1116
%1118:	getelementptr	 %792 XXX %1117
%1119:	store	 XXX %1118
%1120:	load	 %786
%1121:	sext	 %1116
%1122:	getelementptr	 %793 XXX %1121
%1123:	store	 %1120 %1122
%1124:	load	 numuniq
%1125:	add	 %1124 XXX
%1126:	store	 %1125 numuniq
%1127:	br	 if.end206

BASIC BLOCK if.else184
%1128:	sext	 %1058
%1129:	getelementptr	 %790 XXX %1128
%1130:	load	 %1129
%1131:	sext	 %1130
%1132:	getelementptr	 %791 XXX %1131
%1133:	load	 %1132
%1134:	sext	 %1058
%1135:	getelementptr	 %791 XXX %1134
%1136:	store	 %1133 %1135
%1137:	load	 trace
%1138:	icmp	 %1137 XXX
%1139:	br	 %1138 if.end194 if.then192

BASIC BLOCK if.then192
%1140:	load	 err
%1141:	call	 %1140 XXX %1058 %1133 fprintf
%1142:	br	 if.end194

BASIC BLOCK if.end194
%1143:	br	 while.cond195

BASIC BLOCK while.cond195
%1144:	phi	 XXX %1145
%1145:	add	 %1144 XXX
%1146:	sext	 %1145
%1147:	getelementptr	 %793 XXX %1146
%1148:	load	 %1147
%1149:	icmp	 %1148 %1133
%1150:	br	 %1149 while.end while.body201

BASIC BLOCK while.body201
%1151:	br	 while.cond195

BASIC BLOCK while.end
%1152:	sext	 %1145
%1153:	getelementptr	 %792 XXX %1152
%1154:	load	 %1153
%1155:	add	 %1154 XXX
%1156:	store	 %1155 %1153
%1157:	load	 numdup
%1158:	add	 %1157 XXX
%1159:	store	 %1158 numdup
%1160:	br	 if.end206

BASIC BLOCK if.end206
%1161:	phi	 %1104 %1054
%1162:	phi	 %1116 %1056
%1163:	phi	 %1077 %1057
%1164:	add	 %1055 XXX
%1165:	sext	 %1058
%1166:	getelementptr	 %790 XXX %1165
%1167:	store	 XXX %1166
%1168:	br	 if.end210

BASIC BLOCK if.end210
%1169:	phi	 %1161 %1054
%1170:	phi	 %1164 %1055
%1171:	phi	 %1162 %1056
%1172:	phi	 %1163 %1057
%1173:	br	 for.inc211

BASIC BLOCK for.inc211
%1174:	add	 %1058 XXX
%1175:	br	 for.cond142

BASIC BLOCK for.end213
%1176:	load	 numsnpairs
%1177:	add	 %1176 %1055
%1178:	store	 %1177 numsnpairs
%1179:	load	 caseins
%1180:	icmp	 %1179 XXX
%1181:	br	 %1180 if.end231 land.lhs.true216

BASIC BLOCK land.lhs.true216
%1182:	load	 useecs
%1183:	icmp	 %1182 XXX
%1184:	br	 %1183 if.then218 if.end231

BASIC BLOCK if.then218
%1185:	br	 for.cond219

BASIC BLOCK for.cond219
%1186:	phi	 XXX %1197
%1187:	phi	 XXX %1198
%1188:	icmp	 %1186 XXX
%1189:	br	 %1188 for.end230 for.body222

BASIC BLOCK for.body222
%1190:	sext	 %1187
%1191:	getelementptr	 %791 XXX %1190
%1192:	load	 %1191
%1193:	sext	 %1186
%1194:	getelementptr	 %791 XXX %1193
%1195:	store	 %1192 %1194
%1196:	br	 for.inc227

BASIC BLOCK for.inc227
%1197:	add	 %1186 XXX
%1198:	add	 %1187 XXX
%1199:	br	 for.cond219

BASIC BLOCK for.end230
%1200:	br	 if.end231

BASIC BLOCK if.end231
%1201:	load	 %784
%1202:	icmp	 %1201 %1012
%1203:	br	 %1202 if.end236 if.then234

BASIC BLOCK if.then234
%1204:	load	 %784
%1205:	getelementptr	 %791 XXX XXX
%1206:	call	 %1204 %1205 check_for_backing_up
%1207:	br	 if.end236

BASIC BLOCK if.end236
%1208:	load	 nultrans
%1209:	icmp	 %1208 XXX
%1210:	br	 %1209 if.end245 if.then238

BASIC BLOCK if.then238
%1211:	load	 NUL_ec
%1212:	sext	 %1211
%1213:	getelementptr	 %791 XXX %1212
%1214:	load	 %1213
%1215:	load	 %784
%1216:	sext	 %1215
%1217:	load	 nultrans
%1218:	getelementptr	 %1217 %1216
%1219:	store	 %1214 %1218
%1220:	load	 NUL_ec
%1221:	sext	 %1220
%1222:	getelementptr	 %791 XXX %1221
%1223:	store	 XXX %1222
%1224:	br	 if.end245

BASIC BLOCK if.end245
%1225:	load	 fulltbl
%1226:	icmp	 %1225 XXX
%1227:	br	 %1226 if.else267 if.then247

BASIC BLOCK if.then247
%1228:	load	 %784
%1229:	load	 end_of_buffer_state
%1230:	icmp	 %1228 %1229
%1231:	br	 %1230 if.else251 if.then250

BASIC BLOCK if.then250
%1232:	load	 end_of_buffer_state
%1233:	sub	 XXX %1232
%1234:	call	 %1233 mk2data
%1235:	br	 if.end252

BASIC BLOCK if.else251
%1236:	load	 end_of_buffer_state
%1237:	call	 %1236 mk2data
%1238:	br	 if.end252

BASIC BLOCK if.end252
%1239:	br	 for.cond253

BASIC BLOCK for.cond253
%1240:	phi	 XXX %1258
%1241:	icmp	 %1240 %927
%1242:	br	 %1241 for.end266 for.body256

BASIC BLOCK for.body256
%1243:	sext	 %1240
%1244:	getelementptr	 %791 XXX %1243
%1245:	load	 %1244
%1246:	icmp	 %1245 XXX
%1247:	br	 %1246 cond.false cond.true

BASIC BLOCK cond.true
%1248:	sext	 %1240
%1249:	getelementptr	 %791 XXX %1248
%1250:	load	 %1249
%1251:	br	 cond.end

BASIC BLOCK cond.false
%1252:	load	 %784
%1253:	sub	 XXX %1252
%1254:	br	 cond.end

BASIC BLOCK cond.end
%1255:	phi	 %1250 %1253
%1256:	call	 %1255 mk2data
%1257:	br	 for.inc264

BASIC BLOCK for.inc264
%1258:	add	 %1240 XXX
%1259:	br	 for.cond253

BASIC BLOCK for.end266
%1260:	store	 XXX datapos
%1261:	store	 XXX dataline
%1262:	br	 if.end296

BASIC BLOCK if.else267
%1263:	load	 fullspd
%1264:	icmp	 %1263 XXX
%1265:	br	 %1264 if.else271 if.then269

BASIC BLOCK if.then269
%1266:	getelementptr	 %791 XXX XXX
%1267:	load	 %784
%1268:	call	 %1266 %1267 %1055 place_state
%1269:	br	 if.end295

BASIC BLOCK if.else271
%1270:	load	 %784
%1271:	load	 end_of_buffer_state
%1272:	icmp	 %1270 %1271
%1273:	br	 %1272 if.else275 if.then274

BASIC BLOCK if.then274
%1274:	load	 %784
%1275:	call	 %1274 XXX XXX XXX stack1
%1276:	br	 if.end294

BASIC BLOCK if.else275
%1277:	br	 for.cond276

BASIC BLOCK for.cond276
%1278:	phi	 XXX %1295
%1279:	phi	 XXX %1296
%1280:	phi	 XXX %1298
%1281:	icmp	 %1280 %1056
%1282:	br	 %1281 for.end292 for.body279

BASIC BLOCK for.body279
%1283:	sext	 %1280
%1284:	getelementptr	 %792 XXX %1283
%1285:	load	 %1284
%1286:	icmp	 %1285 %1278
%1287:	br	 %1286 if.end289 if.then284

BASIC BLOCK if.then284
%1288:	sext	 %1280
%1289:	getelementptr	 %792 XXX %1288
%1290:	load	 %1289
%1291:	sext	 %1280
%1292:	getelementptr	 %793 XXX %1291
%1293:	load	 %1292
%1294:	br	 if.end289

BASIC BLOCK if.end289
%1295:	phi	 %1290 %1278
%1296:	phi	 %1293 %1279
%1297:	br	 for.inc290

BASIC BLOCK for.inc290
%1298:	add	 %1280 XXX
%1299:	br	 for.cond276

BASIC BLOCK for.end292
%1300:	getelementptr	 %791 XXX XXX
%1301:	load	 %784
%1302:	call	 %1300 %1301 %1055 %1279 %1278 bldtbl
%1303:	br	 if.end294

BASIC BLOCK if.end294
%1304:	br	 if.end295

BASIC BLOCK if.end295
%1305:	br	 if.end296

BASIC BLOCK if.end296
%1306:	br	 while.cond

BASIC BLOCK while.end297
%1307:	load	 fulltbl
%1308:	icmp	 %1307 XXX
%1309:	br	 %1308 if.else300 if.then299

BASIC BLOCK if.then299
%1310:	call	 dataend
%1311:	br	 if.end317

BASIC BLOCK if.else300
%1312:	load	 fullspd
%1313:	icmp	 %1312 XXX
%1314:	br	 %1313 if.then302 if.end316

BASIC BLOCK if.then302
%1315:	call	 cmptmps
%1316:	br	 while.cond303

BASIC BLOCK while.cond303
%1317:	load	 onesp
%1318:	icmp	 %1317 XXX
%1319:	br	 %1318 while.end315 while.body306

BASIC BLOCK while.body306
%1320:	load	 onesp
%1321:	sext	 %1320
%1322:	getelementptr	 onestate XXX %1321
%1323:	load	 %1322
%1324:	load	 onesp
%1325:	sext	 %1324
%1326:	getelementptr	 onesym XXX %1325
%1327:	load	 %1326
%1328:	load	 onesp
%1329:	sext	 %1328
%1330:	getelementptr	 onenext XXX %1329
%1331:	load	 %1330
%1332:	load	 onesp
%1333:	sext	 %1332
%1334:	getelementptr	 onedef XXX %1333
%1335:	load	 %1334
%1336:	call	 %1323 %1327 %1331 %1335 mk1tbl
%1337:	load	 onesp
%1338:	add	 %1337 XXX
%1339:	store	 %1338 onesp
%1340:	br	 while.cond303

BASIC BLOCK while.end315
%1341:	call	 mkdeftbl
%1342:	br	 if.end316

BASIC BLOCK if.end316
%1343:	br	 if.end317

BASIC BLOCK if.end317
%1344:	bitcast	 %797
%1345:	call	 %1344 flex_free
%1346:	bitcast	 %1017
%1347:	call	 %1346 flex_free
%1348:	ret	

FUNCTION line_warning

BASIC BLOCK entry
%1349:	alloca	 XXX
%1350:	load	 nowarn
%1351:	icmp	 %1350 XXX
%1352:	br	 %1351 if.then if.end

BASIC BLOCK if.then
%1353:	getelementptr	 %1349 XXX XXX
%1354:	call	 %1353 XXX str sprintf
%1355:	getelementptr	 %1349 XXX XXX
%1356:	call	 %1355 line line_pinpoint
%1357:	br	 if.end

BASIC BLOCK if.end
%1358:	ret	

FUNCTION make_tables

BASIC BLOCK entry
%1359:	call	 skelout
%1360:	store	 XXX indent_level
%1361:	load	 yymore_used
%1362:	icmp	 %1361 XXX
%1363:	br	 %1362 if.else if.then

BASIC BLOCK if.then
%1364:	call	 XXX indent_puts
%1365:	call	 XXX indent_puts
%1366:	br	 if.end

BASIC BLOCK if.else
%1367:	call	 XXX indent_puts
%1368:	br	 if.end

BASIC BLOCK if.end
%1369:	call	 skelout
%1370:	load	 yytext_is_array
%1371:	icmp	 %1370 XXX
%1372:	br	 %1371 if.end3 if.then2

BASIC BLOCK if.then2
%1373:	call	 XXX indent_puts
%1374:	load	 indent_level
%1375:	add	 %1374 XXX
%1376:	store	 %1375 indent_level
%1377:	call	 XXX indent_puts
%1378:	load	 indent_level
%1379:	add	 %1378 XXX
%1380:	store	 %1379 indent_level
%1381:	call	 XXX indent_puts
%1382:	br	 if.end3

BASIC BLOCK if.end3
%1383:	store	 XXX indent_level
%1384:	call	 skelout
%1385:	load	 num_rules
%1386:	add	 %1385 XXX
%1387:	call	 XXX %1386 printf
%1388:	load	 fullspd
%1389:	icmp	 %1388 XXX
%1390:	br	 %1389 if.end15 if.then5

BASIC BLOCK if.then5
%1391:	load	 tblend
%1392:	load	 numecs
%1393:	add	 %1391 %1392
%1394:	add	 %1393 XXX
%1395:	icmp	 %1394 XXX
%1396:	br	 %1395 lor.rhs lor.end

BASIC BLOCK lor.rhs
%1397:	load	 long_align
%1398:	icmp	 %1397 XXX
%1399:	br	 lor.end

BASIC BLOCK lor.end
%1400:	phi	 XXX %1398
%1401:	select	 %1400 XXX XXX
%1402:	store	 XXX indent_level
%1403:	call	 XXX indent_puts
%1404:	load	 indent_level
%1405:	add	 %1404 XXX
%1406:	store	 %1405 indent_level
%1407:	call	 XXX indent_puts
%1408:	load	 long_align
%1409:	icmp	 %1408 XXX
%1410:	br	 %1409 if.else12 if.then11

BASIC BLOCK if.then11
%1411:	call	 XXX indent_puts
%1412:	br	 if.end13

BASIC BLOCK if.else12
%1413:	call	 XXX indent_puts
%1414:	br	 if.end13

BASIC BLOCK if.end13
%1415:	call	 XXX %1401 indent_put2s
%1416:	call	 XXX indent_puts
%1417:	load	 indent_level
%1418:	add	 %1417 XXX
%1419:	store	 %1418 indent_level
%1420:	br	 if.end15

BASIC BLOCK if.end15
%1421:	load	 fullspd
%1422:	icmp	 %1421 XXX
%1423:	br	 %1422 if.else18 if.then17

BASIC BLOCK if.then17
%1424:	call	 genctbl
%1425:	br	 if.end23

BASIC BLOCK if.else18
%1426:	load	 fulltbl
%1427:	icmp	 %1426 XXX
%1428:	br	 %1427 if.else21 if.then20

BASIC BLOCK if.then20
%1429:	call	 genftbl
%1430:	br	 if.end22

BASIC BLOCK if.else21
%1431:	call	 gentabs
%1432:	br	 if.end22

BASIC BLOCK if.end22
%1433:	br	 if.end23

BASIC BLOCK if.end23
%1434:	load	 num_backing_up
%1435:	icmp	 %1434 XXX
%1436:	br	 %1435 if.end30 land.lhs.true

BASIC BLOCK land.lhs.true
%1437:	load	 reject
%1438:	icmp	 %1437 XXX
%1439:	br	 %1438 if.then26 if.end30

BASIC BLOCK if.then26
%1440:	load	 C_plus_plus
%1441:	icmp	 %1440 XXX
%1442:	br	 %1441 if.then28 if.end29

BASIC BLOCK if.then28
%1443:	call	 XXX indent_puts
%1444:	call	 XXX indent_puts
%1445:	br	 if.end29

BASIC BLOCK if.end29
%1446:	br	 if.end30

BASIC BLOCK if.end30
%1447:	load	 nultrans
%1448:	icmp	 %1447 XXX
%1449:	br	 %1448 if.end44 if.then32

BASIC BLOCK if.then32
%1450:	load	 lastdfa
%1451:	add	 %1450 XXX
%1452:	call	 XXX XXX %1451 printf
%1453:	br	 for.cond

BASIC BLOCK for.cond
%1454:	phi	 XXX %1474
%1455:	load	 lastdfa
%1456:	icmp	 %1454 %1455
%1457:	br	 %1456 for.end for.body

BASIC BLOCK for.body
%1458:	load	 fullspd
%1459:	icmp	 %1458 XXX
%1460:	br	 %1459 if.else39 if.then37

BASIC BLOCK if.then37
%1461:	sext	 %1454
%1462:	load	 base
%1463:	getelementptr	 %1462 %1461
%1464:	load	 %1463
%1465:	call	 XXX %1464 printf
%1466:	br	 if.end42

BASIC BLOCK if.else39
%1467:	sext	 %1454
%1468:	load	 nultrans
%1469:	getelementptr	 %1468 %1467
%1470:	load	 %1469
%1471:	call	 %1470 mkdata
%1472:	br	 if.end42

BASIC BLOCK if.end42
%1473:	br	 for.inc

BASIC BLOCK for.inc
%1474:	add	 %1454 XXX
%1475:	br	 for.cond

BASIC BLOCK for.end
%1476:	call	 dataend
%1477:	br	 if.end44

BASIC BLOCK if.end44
%1478:	load	 ddebug
%1479:	icmp	 %1478 XXX
%1480:	br	 %1479 if.end58 if.then46

BASIC BLOCK if.then46
%1481:	call	 XXX indent_puts
%1482:	call	 XXX indent_puts
%1483:	load	 long_align
%1484:	icmp	 %1483 XXX
%1485:	select	 %1484 XXX XXX
%1486:	load	 num_rules
%1487:	call	 %1485 XXX %1486 printf
%1488:	br	 for.cond50

BASIC BLOCK for.cond50
%1489:	phi	 XXX %1499
%1490:	load	 num_rules
%1491:	icmp	 %1489 %1490
%1492:	br	 %1491 for.end57 for.body52

BASIC BLOCK for.body52
%1493:	sext	 %1489
%1494:	load	 rule_linenum
%1495:	getelementptr	 %1494 %1493
%1496:	load	 %1495
%1497:	call	 %1496 mkdata
%1498:	br	 for.inc55

BASIC BLOCK for.inc55
%1499:	add	 %1489 XXX
%1500:	br	 for.cond50

BASIC BLOCK for.end57
%1501:	call	 dataend
%1502:	br	 if.end58

BASIC BLOCK if.end58
%1503:	load	 reject
%1504:	icmp	 %1503 XXX
%1505:	br	 %1504 if.else91 if.then60

BASIC BLOCK if.then60
%1506:	load	 C_plus_plus
%1507:	icmp	 %1506 XXX
%1508:	br	 %1507 if.then62 if.end66

BASIC BLOCK if.then62
%1509:	call	 XXX puts
%1510:	call	 XXX puts
%1511:	call	 XXX puts
%1512:	br	 if.end66

BASIC BLOCK if.end66
%1513:	load	 variable_trailing_context_rules
%1514:	icmp	 %1513 XXX
%1515:	br	 %1514 if.end77 if.then68

BASIC BLOCK if.then68
%1516:	load	 C_plus_plus
%1517:	icmp	 %1516 XXX
%1518:	br	 %1517 if.then70 if.end74

BASIC BLOCK if.then70
%1519:	call	 XXX puts
%1520:	call	 XXX puts
%1521:	call	 XXX puts
%1522:	br	 if.end74

BASIC BLOCK if.end74
%1523:	call	 XXX XXX printf
%1524:	call	 XXX XXX printf
%1525:	br	 if.end77

BASIC BLOCK if.end77
%1526:	call	 XXX puts
%1527:	call	 XXX puts
%1528:	call	 XXX puts
%1529:	call	 XXX puts
%1530:	load	 variable_trailing_context_rules
%1531:	icmp	 %1530 XXX
%1532:	br	 %1531 if.end87 if.then83

BASIC BLOCK if.then83
%1533:	call	 XXX puts
%1534:	call	 XXX puts
%1535:	call	 XXX puts
%1536:	br	 if.end87

BASIC BLOCK if.end87
%1537:	call	 XXX puts
%1538:	call	 XXX puts
%1539:	call	 XXX puts
%1540:	br	 if.end96

BASIC BLOCK if.else91
%1541:	call	 XXX puts
%1542:	call	 XXX puts
%1543:	call	 XXX puts
%1544:	call	 XXX puts
%1545:	br	 if.end96

BASIC BLOCK if.end96
%1546:	load	 yymore_used
%1547:	icmp	 %1546 XXX
%1548:	br	 %1547 if.else102 if.then98

BASIC BLOCK if.then98
%1549:	load	 C_plus_plus
%1550:	icmp	 %1549 XXX
%1551:	br	 %1550 if.then100 if.end101

BASIC BLOCK if.then100
%1552:	call	 XXX indent_puts
%1553:	call	 XXX indent_puts
%1554:	br	 if.end101

BASIC BLOCK if.end101
%1555:	call	 XXX indent_puts
%1556:	call	 XXX indent_puts
%1557:	br	 if.end103

BASIC BLOCK if.else102
%1558:	call	 XXX indent_puts
%1559:	call	 XXX indent_puts
%1560:	br	 if.end103

BASIC BLOCK if.end103
%1561:	load	 C_plus_plus
%1562:	icmp	 %1561 XXX
%1563:	br	 %1562 if.then105 if.end116

BASIC BLOCK if.then105
%1564:	load	 yytext_is_array
%1565:	icmp	 %1564 XXX
%1566:	br	 %1565 if.else113 if.then107

BASIC BLOCK if.then107
%1567:	call	 XXX puts
%1568:	call	 XXX puts
%1569:	call	 XXX puts
%1570:	call	 XXX puts
%1571:	call	 XXX puts
%1572:	br	 if.end115

BASIC BLOCK if.else113
%1573:	call	 XXX puts
%1574:	br	 if.end115

BASIC BLOCK if.end115
%1575:	br	 if.end116

BASIC BLOCK if.end116
%1576:	load	 defs1_offset
%1577:	sext	 %1576
%1578:	load	 action_array
%1579:	getelementptr	 %1578 %1577
%1580:	load	 stdout
%1581:	call	 %1579 %1580 fputs
%1582:	call	 skelout
%1583:	load	 C_plus_plus
%1584:	icmp	 %1583 XXX
%1585:	br	 %1584 if.then121 if.end137

BASIC BLOCK if.then121
%1586:	load	 use_read
%1587:	icmp	 %1586 XXX
%1588:	br	 %1587 if.else126 if.then123

BASIC BLOCK if.then123
%1589:	call	 XXX printf
%1590:	call	 XXX printf
%1591:	br	 if.end136

BASIC BLOCK if.else126
%1592:	call	 XXX printf
%1593:	call	 XXX printf
%1594:	call	 XXX printf
%1595:	call	 XXX printf
%1596:	call	 XXX printf
%1597:	call	 XXX printf
%1598:	call	 XXX printf
%1599:	call	 XXX printf
%1600:	call	 XXX printf
%1601:	br	 if.end136

BASIC BLOCK if.end136
%1602:	br	 if.end137

BASIC BLOCK if.end137
%1603:	call	 skelout
%1604:	load	 prolog_offset
%1605:	sext	 %1604
%1606:	load	 action_array
%1607:	getelementptr	 %1606 %1605
%1608:	load	 stdout
%1609:	call	 %1607 %1608 fputs
%1610:	call	 skelout
%1611:	store	 XXX indent_level
%1612:	load	 yymore_used
%1613:	icmp	 %1612 XXX
%1614:	br	 %1613 if.end145 if.then142

BASIC BLOCK if.then142
%1615:	call	 XXX indent_puts
%1616:	call	 XXX indent_puts
%1617:	load	 indent_level
%1618:	add	 %1617 XXX
%1619:	store	 %1618 indent_level
%1620:	call	 XXX indent_puts
%1621:	call	 XXX indent_puts
%1622:	call	 XXX indent_puts
%1623:	call	 XXX indent_puts
%1624:	load	 indent_level
%1625:	add	 %1624 XXX
%1626:	store	 %1625 indent_level
%1627:	br	 if.end145

BASIC BLOCK if.end145
%1628:	call	 skelout
%1629:	call	 gen_start_state
%1630:	call	 XXX puts
%1631:	call	 gen_next_match
%1632:	call	 skelout
%1633:	store	 XXX indent_level
%1634:	call	 gen_find_action
%1635:	call	 skelout
%1636:	load	 lex_compat
%1637:	icmp	 %1636 XXX
%1638:	br	 %1637 if.end155 if.then148

BASIC BLOCK if.then148
%1639:	call	 XXX indent_puts
%1640:	load	 indent_level
%1641:	add	 %1640 XXX
%1642:	store	 %1641 indent_level
%1643:	call	 XXX indent_puts
%1644:	call	 XXX indent_puts
%1645:	call	 XXX indent_puts
%1646:	load	 indent_level
%1647:	add	 %1646 XXX
%1648:	store	 %1647 indent_level
%1649:	call	 XXX indent_puts
%1650:	load	 indent_level
%1651:	add	 %1650 XXX
%1652:	store	 %1651 indent_level
%1653:	call	 XXX indent_puts
%1654:	load	 indent_level
%1655:	add	 %1654 XXX
%1656:	store	 %1655 indent_level
%1657:	load	 indent_level
%1658:	add	 %1657 XXX
%1659:	store	 %1658 indent_level
%1660:	call	 XXX indent_puts
%1661:	load	 indent_level
%1662:	add	 %1661 XXX
%1663:	store	 %1662 indent_level
%1664:	br	 if.end155

BASIC BLOCK if.end155
%1665:	call	 skelout
%1666:	load	 ddebug
%1667:	icmp	 %1666 XXX
%1668:	br	 %1667 if.end175 if.then157

BASIC BLOCK if.then157
%1669:	call	 XXX indent_puts
%1670:	load	 indent_level
%1671:	add	 %1670 XXX
%1672:	store	 %1671 indent_level
%1673:	call	 XXX indent_puts
%1674:	call	 XXX indent_puts
%1675:	load	 indent_level
%1676:	add	 %1675 XXX
%1677:	store	 %1676 indent_level
%1678:	call	 XXX indent_puts
%1679:	load	 indent_level
%1680:	add	 %1679 XXX
%1681:	store	 %1680 indent_level
%1682:	call	 do_indent
%1683:	load	 num_rules
%1684:	call	 XXX %1683 printf
%1685:	load	 indent_level
%1686:	add	 %1685 XXX
%1687:	store	 %1686 indent_level
%1688:	call	 XXX indent_puts
%1689:	call	 XXX indent_puts
%1690:	load	 indent_level
%1691:	add	 %1690 XXX
%1692:	store	 %1691 indent_level
%1693:	call	 do_indent
%1694:	load	 num_rules
%1695:	call	 XXX %1694 printf
%1696:	load	 indent_level
%1697:	add	 %1696 XXX
%1698:	store	 %1697 indent_level
%1699:	call	 XXX indent_puts
%1700:	call	 XXX indent_puts
%1701:	load	 indent_level
%1702:	add	 %1701 XXX
%1703:	store	 %1702 indent_level
%1704:	call	 do_indent
%1705:	load	 num_rules
%1706:	add	 %1705 XXX
%1707:	call	 XXX %1706 printf
%1708:	load	 indent_level
%1709:	add	 %1708 XXX
%1710:	store	 %1709 indent_level
%1711:	call	 XXX indent_puts
%1712:	load	 indent_level
%1713:	add	 %1712 XXX
%1714:	store	 %1713 indent_level
%1715:	call	 do_indent
%1716:	call	 XXX printf
%1717:	load	 indent_level
%1718:	add	 %1717 XXX
%1719:	store	 %1718 indent_level
%1720:	call	 XXX indent_puts
%1721:	load	 indent_level
%1722:	add	 %1721 XXX
%1723:	store	 %1722 indent_level
%1724:	call	 XXX indent_puts
%1725:	load	 indent_level
%1726:	add	 %1725 XXX
%1727:	store	 %1726 indent_level
%1728:	br	 if.end175

BASIC BLOCK if.end175
%1729:	call	 skelout
%1730:	load	 indent_level
%1731:	add	 %1730 XXX
%1732:	store	 %1731 indent_level
%1733:	call	 gen_bu_action
%1734:	load	 action_offset
%1735:	sext	 %1734
%1736:	load	 action_array
%1737:	getelementptr	 %1736 %1735
%1738:	load	 stdout
%1739:	call	 %1737 %1738 fputs
%1740:	br	 for.cond180

BASIC BLOCK for.cond180
%1741:	phi	 XXX %1759
%1742:	phi	 XXX %1761
%1743:	load	 lastsc
%1744:	icmp	 %1742 %1743
%1745:	br	 %1744 for.end193 for.body182

BASIC BLOCK for.body182
%1746:	sext	 %1742
%1747:	load	 sceof
%1748:	getelementptr	 %1747 %1746
%1749:	load	 %1748
%1750:	icmp	 %1749 XXX
%1751:	br	 %1750 if.then186 if.end190

BASIC BLOCK if.then186
%1752:	call	 do_indent
%1753:	sext	 %1742
%1754:	load	 scname
%1755:	getelementptr	 %1754 %1753
%1756:	load	 %1755
%1757:	call	 XXX %1756 printf
%1758:	br	 if.end190

BASIC BLOCK if.end190
%1759:	phi	 %1741 XXX
%1760:	br	 for.inc191

BASIC BLOCK for.inc191
%1761:	add	 %1742 XXX
%1762:	br	 for.cond180

BASIC BLOCK for.end193
%1763:	icmp	 %1741 XXX
%1764:	br	 %1763 if.end198 if.then195

BASIC BLOCK if.then195
%1765:	load	 indent_level
%1766:	add	 %1765 XXX
%1767:	store	 %1766 indent_level
%1768:	call	 XXX indent_puts
%1769:	load	 indent_level
%1770:	add	 %1769 XXX
%1771:	store	 %1770 indent_level
%1772:	br	 if.end198

BASIC BLOCK if.end198
%1773:	call	 skelout
%1774:	store	 XXX indent_level
%1775:	load	 fullspd
%1776:	icmp	 %1775 XXX
%1777:	br	 %1776 lor.lhs.false if.then201

BASIC BLOCK lor.lhs.false
%1778:	load	 fulltbl
%1779:	icmp	 %1778 XXX
%1780:	br	 %1779 if.else202 if.then201

BASIC BLOCK if.then201
%1781:	call	 XXX indent_puts
%1782:	br	 if.end209

BASIC BLOCK if.else202
%1783:	load	 reject
%1784:	icmp	 %1783 XXX
%1785:	br	 %1784 land.lhs.true204 if.else207

BASIC BLOCK land.lhs.true204
%1786:	load	 interactive
%1787:	icmp	 %1786 XXX
%1788:	br	 %1787 if.then206 if.else207

BASIC BLOCK if.then206
%1789:	call	 XXX indent_puts
%1790:	call	 XXX indent_puts
%1791:	br	 if.end208

BASIC BLOCK if.else207
%1792:	call	 XXX indent_puts
%1793:	br	 if.end208

BASIC BLOCK if.end208
%1794:	br	 if.end209

BASIC BLOCK if.end209
%1795:	store	 XXX indent_level
%1796:	call	 skelout
%1797:	load	 bol_needed
%1798:	icmp	 %1797 XXX
%1799:	br	 %1798 if.end212 if.then211

BASIC BLOCK if.then211
%1800:	call	 XXX indent_puts
%1801:	br	 if.end212

BASIC BLOCK if.end212
%1802:	call	 gen_start_state
%1803:	store	 XXX indent_level
%1804:	call	 skelout
%1805:	call	 XXX gen_next_state
%1806:	store	 XXX indent_level
%1807:	call	 skelout
%1808:	call	 gen_NUL_trans
%1809:	call	 skelout
%1810:	load	 lex_compat
%1811:	icmp	 %1810 XXX
%1812:	br	 %1811 if.end217 if.then214

BASIC BLOCK if.then214
%1813:	call	 XXX indent_puts
%1814:	load	 indent_level
%1815:	add	 %1814 XXX
%1816:	store	 %1815 indent_level
%1817:	call	 XXX indent_puts
%1818:	load	 indent_level
%1819:	add	 %1818 XXX
%1820:	store	 %1819 indent_level
%1821:	br	 if.end217

BASIC BLOCK if.end217
%1822:	call	 skelout
%1823:	load	 stdout
%1824:	call	 %1823 line_directive_out
%1825:	load	 sectnum
%1826:	icmp	 %1825 XXX
%1827:	br	 %1826 if.end221 if.then219

BASIC BLOCK if.then219
%1828:	call	 flexscan
%1829:	br	 if.end221

BASIC BLOCK if.end221
%1830:	ret	

FUNCTION flexend

BASIC BLOCK entry
%1831:	load	 skelfile
%1832:	icmp	 %1831 XXX
%1833:	br	 %1832 if.end6 if.then

BASIC BLOCK if.then
%1834:	load	 skelfile
%1835:	call	 %1834 ferror
%1836:	icmp	 %1835 XXX
%1837:	br	 %1836 if.else if.then1

BASIC BLOCK if.then1
%1838:	call	 XXX flexfatal
%1839:	br	 if.end5

BASIC BLOCK if.else
%1840:	load	 skelfile
%1841:	call	 %1840 fclose
%1842:	icmp	 %1841 XXX
%1843:	br	 %1842 if.end if.then4

BASIC BLOCK if.then4
%1844:	call	 XXX flexfatal
%1845:	br	 if.end

BASIC BLOCK if.end
%1846:	br	 if.end5

BASIC BLOCK if.end5
%1847:	br	 if.end6

BASIC BLOCK if.end6
%1848:	icmp	 exit_status XXX
%1849:	br	 %1848 if.end24 land.lhs.true

BASIC BLOCK land.lhs.true
%1850:	load	 outfile_created
%1851:	icmp	 %1850 XXX
%1852:	br	 %1851 if.end24 if.then9

BASIC BLOCK if.then9
%1853:	load	 stdout
%1854:	call	 %1853 ferror
%1855:	icmp	 %1854 XXX
%1856:	br	 %1855 if.else13 if.then12

BASIC BLOCK if.then12
%1857:	call	 XXX flexfatal
%1858:	br	 if.end23

BASIC BLOCK if.else13
%1859:	load	 stdout
%1860:	call	 %1859 fclose
%1861:	icmp	 %1860 XXX
%1862:	br	 %1861 if.else17 if.then16

BASIC BLOCK if.then16
%1863:	call	 XXX flexfatal
%1864:	br	 if.end22

BASIC BLOCK if.else17
%1865:	call	 XXX XXX
%1866:	icmp	 %1865 XXX
%1867:	br	 %1866 if.end21 if.then20

BASIC BLOCK if.then20
%1868:	call	 XXX flexfatal
%1869:	br	 if.end21

BASIC BLOCK if.end21
%1870:	br	 if.end22

BASIC BLOCK if.end22
%1871:	br	 if.end23

BASIC BLOCK if.end23
%1872:	br	 if.end24

BASIC BLOCK if.end24
%1873:	load	 backing_up_report
%1874:	icmp	 %1873 XXX
%1875:	br	 %1874 if.end50 land.lhs.true26

BASIC BLOCK land.lhs.true26
%1876:	load	 backing_up_file
%1877:	icmp	 %1876 XXX
%1878:	br	 %1877 if.end50 if.then28

BASIC BLOCK if.then28
%1879:	load	 num_backing_up
%1880:	icmp	 %1879 XXX
%1881:	br	 %1880 if.else32 if.then30

BASIC BLOCK if.then30
%1882:	load	 backing_up_file
%1883:	call	 %1882 XXX fprintf
%1884:	br	 if.end40

BASIC BLOCK if.else32
%1885:	load	 fullspd
%1886:	icmp	 %1885 XXX
%1887:	br	 %1886 lor.lhs.false if.then35

BASIC BLOCK lor.lhs.false
%1888:	load	 fulltbl
%1889:	icmp	 %1888 XXX
%1890:	br	 %1889 if.else37 if.then35

BASIC BLOCK if.then35
%1891:	load	 backing_up_file
%1892:	load	 num_backing_up
%1893:	call	 %1891 XXX %1892 fprintf
%1894:	br	 if.end39

BASIC BLOCK if.else37
%1895:	load	 backing_up_file
%1896:	call	 %1895 XXX fprintf
%1897:	br	 if.end39

BASIC BLOCK if.end39
%1898:	br	 if.end40

BASIC BLOCK if.end40
%1899:	load	 backing_up_file
%1900:	call	 %1899 ferror
%1901:	icmp	 %1900 XXX
%1902:	br	 %1901 if.else44 if.then43

BASIC BLOCK if.then43
%1903:	call	 XXX flexfatal
%1904:	br	 if.end49

BASIC BLOCK if.else44
%1905:	load	 backing_up_file
%1906:	call	 %1905 fclose
%1907:	icmp	 %1906 XXX
%1908:	br	 %1907 if.end48 if.then47

BASIC BLOCK if.then47
%1909:	call	 XXX flexfatal
%1910:	br	 if.end48

BASIC BLOCK if.end48
%1911:	br	 if.end49

BASIC BLOCK if.end49
%1912:	br	 if.end50

BASIC BLOCK if.end50
%1913:	load	 printstats
%1914:	icmp	 %1913 XXX
%1915:	br	 %1914 if.end220 if.then52

BASIC BLOCK if.then52
%1916:	load	 err
%1917:	load	 program_name
%1918:	call	 %1916 XXX %1917 XXX fprintf
%1919:	load	 err
%1920:	call	 %1919 XXX fprintf
%1921:	load	 C_plus_plus
%1922:	icmp	 %1921 XXX
%1923:	br	 %1922 if.end58 if.then56

BASIC BLOCK if.then56
%1924:	load	 err
%1925:	call	 XXX %1924 _IO_putc
%1926:	br	 if.end58

BASIC BLOCK if.end58
%1927:	load	 backing_up_report
%1928:	icmp	 %1927 XXX
%1929:	br	 %1928 if.end62 if.then60

BASIC BLOCK if.then60
%1930:	load	 err
%1931:	call	 XXX %1930 _IO_putc
%1932:	br	 if.end62

BASIC BLOCK if.end62
%1933:	load	 ddebug
%1934:	icmp	 %1933 XXX
%1935:	br	 %1934 if.end66 if.then64

BASIC BLOCK if.then64
%1936:	load	 err
%1937:	call	 XXX %1936 _IO_putc
%1938:	br	 if.end66

BASIC BLOCK if.end66
%1939:	load	 caseins
%1940:	icmp	 %1939 XXX
%1941:	br	 %1940 if.end70 if.then68

BASIC BLOCK if.then68
%1942:	load	 err
%1943:	call	 XXX %1942 _IO_putc
%1944:	br	 if.end70

BASIC BLOCK if.end70
%1945:	load	 lex_compat
%1946:	icmp	 %1945 XXX
%1947:	br	 %1946 if.end74 if.then72

BASIC BLOCK if.then72
%1948:	load	 err
%1949:	call	 XXX %1948 _IO_putc
%1950:	br	 if.end74

BASIC BLOCK if.end74
%1951:	load	 performance_report
%1952:	icmp	 %1951 XXX
%1953:	br	 %1952 if.end78 if.then76

BASIC BLOCK if.then76
%1954:	load	 err
%1955:	call	 XXX %1954 _IO_putc
%1956:	br	 if.end78

BASIC BLOCK if.end78
%1957:	load	 performance_report
%1958:	icmp	 %1957 XXX
%1959:	br	 %1958 if.end82 if.then80

BASIC BLOCK if.then80
%1960:	load	 err
%1961:	call	 XXX %1960 _IO_putc
%1962:	br	 if.end82

BASIC BLOCK if.end82
%1963:	load	 spprdflt
%1964:	icmp	 %1963 XXX
%1965:	br	 %1964 if.end86 if.then84

BASIC BLOCK if.then84
%1966:	load	 err
%1967:	call	 XXX %1966 _IO_putc
%1968:	br	 if.end86

BASIC BLOCK if.end86
%1969:	load	 use_stdout
%1970:	icmp	 %1969 XXX
%1971:	br	 %1970 if.end90 if.then88

BASIC BLOCK if.then88
%1972:	load	 err
%1973:	call	 XXX %1972 _IO_putc
%1974:	br	 if.end90

BASIC BLOCK if.end90
%1975:	load	 printstats
%1976:	icmp	 %1975 XXX
%1977:	br	 %1976 if.end94 if.then92

BASIC BLOCK if.then92
%1978:	load	 err
%1979:	call	 XXX %1978 _IO_putc
%1980:	br	 if.end94

BASIC BLOCK if.end94
%1981:	load	 nowarn
%1982:	icmp	 %1981 XXX
%1983:	br	 %1982 if.end98 if.then96

BASIC BLOCK if.then96
%1984:	load	 err
%1985:	call	 XXX %1984 _IO_putc
%1986:	br	 if.end98

BASIC BLOCK if.end98
%1987:	load	 interactive
%1988:	icmp	 %1987 XXX
%1989:	br	 %1988 if.then100 if.end102

BASIC BLOCK if.then100
%1990:	load	 err
%1991:	call	 XXX %1990 _IO_putc
%1992:	br	 if.end102

BASIC BLOCK if.end102
%1993:	load	 interactive
%1994:	icmp	 %1993 XXX
%1995:	br	 %1994 if.end106 if.then104

BASIC BLOCK if.then104
%1996:	load	 err
%1997:	call	 XXX %1996 _IO_putc
%1998:	br	 if.end106

BASIC BLOCK if.end106
%1999:	load	 gen_line_dirs
%2000:	icmp	 %1999 XXX
%2001:	br	 %2000 if.then108 if.end110

BASIC BLOCK if.then108
%2002:	load	 err
%2003:	call	 XXX %2002 _IO_putc
%2004:	br	 if.end110

BASIC BLOCK if.end110
%2005:	load	 trace
%2006:	icmp	 %2005 XXX
%2007:	br	 %2006 if.end114 if.then112

BASIC BLOCK if.then112
%2008:	load	 err
%2009:	call	 XXX %2008 _IO_putc
%2010:	br	 if.end114

BASIC BLOCK if.end114
%2011:	load	 csize
%2012:	icmp	 %2011 XXX
%2013:	br	 %2012 if.else118 if.then116

BASIC BLOCK if.then116
%2014:	load	 err
%2015:	call	 XXX %2014 _IO_putc
%2016:	br	 if.end120

BASIC BLOCK if.else118
%2017:	load	 err
%2018:	call	 XXX %2017 _IO_putc
%2019:	br	 if.end120

BASIC BLOCK if.end120
%2020:	load	 err
%2021:	call	 %2020 XXX fprintf
%2022:	load	 long_align
%2023:	icmp	 %2022 XXX
%2024:	br	 %2023 if.end125 if.then123

BASIC BLOCK if.then123
%2025:	load	 err
%2026:	call	 XXX %2025 _IO_putc
%2027:	br	 if.end125

BASIC BLOCK if.end125
%2028:	load	 fulltbl
%2029:	icmp	 %2028 XXX
%2030:	br	 %2029 if.end129 if.then127

BASIC BLOCK if.then127
%2031:	load	 err
%2032:	call	 XXX %2031 _IO_putc
%2033:	br	 if.end129

BASIC BLOCK if.end129
%2034:	load	 fullspd
%2035:	icmp	 %2034 XXX
%2036:	br	 %2035 if.end133 if.then131

BASIC BLOCK if.then131
%2037:	load	 err
%2038:	call	 XXX %2037 _IO_putc
%2039:	br	 if.end133

BASIC BLOCK if.end133
%2040:	load	 useecs
%2041:	icmp	 %2040 XXX
%2042:	br	 %2041 if.end137 if.then135

BASIC BLOCK if.then135
%2043:	load	 err
%2044:	call	 XXX %2043 _IO_putc
%2045:	br	 if.end137

BASIC BLOCK if.end137
%2046:	load	 usemecs
%2047:	icmp	 %2046 XXX
%2048:	br	 %2047 if.end141 if.then139

BASIC BLOCK if.then139
%2049:	load	 err
%2050:	call	 XXX %2049 _IO_putc
%2051:	br	 if.end141

BASIC BLOCK if.end141
%2052:	load	 use_read
%2053:	icmp	 %2052 XXX
%2054:	br	 %2053 if.end145 if.then143

BASIC BLOCK if.then143
%2055:	load	 err
%2056:	call	 XXX %2055 _IO_putc
%2057:	br	 if.end145

BASIC BLOCK if.end145
%2058:	load	 skelname
%2059:	icmp	 %2058 XXX
%2060:	br	 %2059 if.end149 if.then147

BASIC BLOCK if.then147
%2061:	load	 err
%2062:	load	 skelname
%2063:	call	 %2061 XXX %2062 fprintf
%2064:	br	 if.end149

BASIC BLOCK if.end149
%2065:	load	 prefix
%2066:	call	 %2065 XXX strcmp
%2067:	icmp	 %2066 XXX
%2068:	br	 %2067 if.end154 if.then152

BASIC BLOCK if.then152
%2069:	load	 err
%2070:	load	 prefix
%2071:	call	 %2069 XXX %2070 fprintf
%2072:	br	 if.end154

BASIC BLOCK if.end154
%2073:	load	 err
%2074:	call	 XXX %2073 _IO_putc
%2075:	load	 err
%2076:	load	 lastnfa
%2077:	load	 current_mns
%2078:	call	 %2075 XXX %2076 %2077 fprintf
%2079:	load	 err
%2080:	load	 lastdfa
%2081:	load	 current_max_dfas
%2082:	load	 totnst
%2083:	call	 %2079 XXX %2080 %2081 %2082 fprintf
%2084:	load	 err
%2085:	load	 num_rules
%2086:	load	 num_eof_rules
%2087:	add	 %2085 %2086
%2088:	sub	 %2087 XXX
%2089:	call	 %2084 XXX %2088 fprintf
%2090:	load	 num_backing_up
%2091:	icmp	 %2090 XXX
%2092:	br	 %2091 if.else162 if.then160

BASIC BLOCK if.then160
%2093:	load	 err
%2094:	call	 %2093 XXX fprintf
%2095:	br	 if.end171

BASIC BLOCK if.else162
%2096:	load	 fullspd
%2097:	icmp	 %2096 XXX
%2098:	br	 %2097 lor.lhs.false164 if.then166

BASIC BLOCK lor.lhs.false164
%2099:	load	 fulltbl
%2100:	icmp	 %2099 XXX
%2101:	br	 %2100 if.else168 if.then166

BASIC BLOCK if.then166
%2102:	load	 err
%2103:	load	 num_backing_up
%2104:	call	 %2102 XXX %2103 fprintf
%2105:	br	 if.end170

BASIC BLOCK if.else168
%2106:	load	 err
%2107:	call	 %2106 XXX fprintf
%2108:	br	 if.end170

BASIC BLOCK if.end170
%2109:	br	 if.end171

BASIC BLOCK if.end171
%2110:	load	 bol_needed
%2111:	icmp	 %2110 XXX
%2112:	br	 %2111 if.end175 if.then173

BASIC BLOCK if.then173
%2113:	load	 err
%2114:	call	 %2113 XXX fprintf
%2115:	br	 if.end175

BASIC BLOCK if.end175
%2116:	load	 err
%2117:	load	 lastsc
%2118:	load	 current_max_scs
%2119:	call	 %2116 XXX %2117 %2118 fprintf
%2120:	load	 err
%2121:	load	 numeps
%2122:	load	 eps2
%2123:	call	 %2120 XXX %2121 %2122 fprintf
%2124:	load	 lastccl
%2125:	icmp	 %2124 XXX
%2126:	br	 %2125 if.else181 if.then179

BASIC BLOCK if.then179
%2127:	load	 err
%2128:	call	 %2127 XXX fprintf
%2129:	br	 if.end186

BASIC BLOCK if.else181
%2130:	load	 err
%2131:	load	 lastccl
%2132:	load	 current_maxccls
%2133:	load	 lastccl
%2134:	sext	 %2133
%2135:	load	 cclmap
%2136:	getelementptr	 %2135 %2134
%2137:	load	 %2136
%2138:	load	 lastccl
%2139:	sext	 %2138
%2140:	load	 ccllen
%2141:	getelementptr	 %2140 %2139
%2142:	load	 %2141
%2143:	add	 %2137 %2142
%2144:	load	 current_max_ccl_tbl_size
%2145:	load	 cclreuse
%2146:	call	 %2130 XXX %2131 %2132 %2143 %2144 %2145 fprintf
%2147:	br	 if.end186

BASIC BLOCK if.end186
%2148:	load	 err
%2149:	load	 numsnpairs
%2150:	call	 %2148 XXX %2149 fprintf
%2151:	load	 err
%2152:	load	 numuniq
%2153:	load	 numdup
%2154:	call	 %2151 XXX %2152 %2153 fprintf
%2155:	load	 fulltbl
%2156:	icmp	 %2155 XXX
%2157:	br	 %2156 if.else192 if.then190

BASIC BLOCK if.then190
%2158:	load	 lastdfa
%2159:	load	 numecs
%2160:	mul	 %2158 %2159
%2161:	load	 err
%2162:	call	 %2161 XXX %2160 fprintf
%2163:	br	 if.end206

BASIC BLOCK if.else192
%2164:	load	 lastdfa
%2165:	load	 numtemps
%2166:	add	 %2164 %2165
%2167:	mul	 XXX %2166
%2168:	load	 tblend
%2169:	mul	 XXX %2168
%2170:	add	 %2167 %2169
%2171:	load	 err
%2172:	load	 lastdfa
%2173:	load	 numtemps
%2174:	add	 %2172 %2173
%2175:	load	 current_max_dfas
%2176:	call	 %2171 XXX %2174 %2175 fprintf
%2177:	load	 err
%2178:	load	 tblend
%2179:	load	 current_max_xpairs
%2180:	load	 peakpairs
%2181:	call	 %2177 XXX %2178 %2179 %2180 fprintf
%2182:	load	 err
%2183:	load	 numtemps
%2184:	load	 nummecs
%2185:	mul	 %2183 %2184
%2186:	load	 current_max_template_xpairs
%2187:	load	 numtemps
%2188:	load	 numecs
%2189:	mul	 %2187 %2188
%2190:	call	 %2182 XXX %2185 %2186 %2189 fprintf
%2191:	load	 err
%2192:	load	 nummt
%2193:	call	 %2191 XXX %2192 fprintf
%2194:	load	 err
%2195:	load	 numprots
%2196:	call	 %2194 XXX %2195 fprintf
%2197:	load	 err
%2198:	load	 numtemps
%2199:	load	 tmpuses
%2200:	call	 %2197 XXX %2198 %2199 fprintf
%2201:	br	 if.end206

BASIC BLOCK if.end206
%2202:	phi	 %2160 %2170
%2203:	load	 useecs
%2204:	icmp	 %2203 XXX
%2205:	br	 %2204 if.end211 if.then208

BASIC BLOCK if.then208
%2206:	load	 csize
%2207:	add	 %2202 %2206
%2208:	load	 err
%2209:	load	 numecs
%2210:	load	 csize
%2211:	call	 %2208 XXX %2209 %2210 fprintf
%2212:	br	 if.end211

BASIC BLOCK if.end211
%2213:	phi	 %2207 %2202
%2214:	load	 usemecs
%2215:	icmp	 %2214 XXX
%2216:	br	 %2215 if.end216 if.then213

BASIC BLOCK if.then213
%2217:	load	 numecs
%2218:	add	 %2213 %2217
%2219:	load	 err
%2220:	load	 nummecs
%2221:	load	 csize
%2222:	call	 %2219 XXX %2220 %2221 fprintf
%2223:	br	 if.end216

BASIC BLOCK if.end216
%2224:	phi	 %2218 %2213
%2225:	load	 err
%2226:	load	 hshcol
%2227:	load	 hshsave
%2228:	load	 dfaeql
%2229:	call	 %2225 XXX %2226 %2227 %2228 fprintf
%2230:	load	 err
%2231:	load	 num_reallocs
%2232:	call	 %2230 XXX %2231 fprintf
%2233:	load	 err
%2234:	call	 %2233 XXX %2224 fprintf
%2235:	br	 if.end220

BASIC BLOCK if.end220
%2236:	call	 exit_status exit
%2237:	unreachable	

BASIC BLOCK return
%2238:	ret	

FUNCTION flexfatal

BASIC BLOCK entry
%2239:	load	 err
%2240:	load	 program_name
%2241:	call	 %2239 XXX %2240 msg fprintf
%2242:	call	 XXX exit
%2243:	unreachable	

BASIC BLOCK return
%2244:	ret	

FUNCTION allocate_array

BASIC BLOCK entry
%2245:	mul	 element_size size
%2246:	icmp	 %2245 XXX
%2247:	br	 %2246 if.end if.then

BASIC BLOCK if.then
%2248:	call	 XXX flexfatal
%2249:	br	 if.end

BASIC BLOCK if.end
%2250:	mul	 element_size size
%2251:	call	 %2250 flex_alloc
%2252:	icmp	 %2251 XXX
%2253:	br	 %2252 if.end4 if.then3

BASIC BLOCK if.then3
%2254:	call	 XXX flexfatal
%2255:	br	 if.end4

BASIC BLOCK if.end4
%2256:	ret	 %2251

FUNCTION flexerror

BASIC BLOCK entry
%2257:	load	 err
%2258:	load	 program_name
%2259:	call	 %2257 XXX %2258 msg fprintf
%2260:	call	 XXX flexend
%2261:	ret	

FUNCTION lerrif

BASIC BLOCK entry
%2262:	alloca	 XXX
%2263:	getelementptr	 %2262 XXX XXX
%2264:	call	 %2263 msg arg sprintf
%2265:	getelementptr	 %2262 XXX XXX
%2266:	call	 %2265 flexerror
%2267:	ret	

FUNCTION usage

BASIC BLOCK entry
%2268:	load	 err
%2269:	load	 program_name
%2270:	call	 %2268 XXX %2269 fprintf
%2271:	load	 err
%2272:	call	 %2271 XXX fprintf
%2273:	load	 err
%2274:	call	 %2273 XXX fprintf
%2275:	load	 err
%2276:	call	 %2275 XXX fprintf
%2277:	load	 err
%2278:	call	 %2277 XXX fprintf
%2279:	load	 err
%2280:	call	 %2279 XXX fprintf
%2281:	load	 err
%2282:	call	 %2281 XXX fprintf
%2283:	load	 err
%2284:	call	 %2283 XXX fprintf
%2285:	load	 err
%2286:	call	 %2285 XXX fprintf
%2287:	load	 err
%2288:	call	 %2287 XXX fprintf
%2289:	load	 err
%2290:	call	 %2289 XXX fprintf
%2291:	load	 err
%2292:	call	 %2291 XXX fprintf
%2293:	load	 err
%2294:	call	 %2293 XXX fprintf
%2295:	load	 err
%2296:	call	 %2295 XXX fprintf
%2297:	load	 err
%2298:	call	 %2297 XXX fprintf
%2299:	load	 err
%2300:	call	 %2299 XXX fprintf
%2301:	load	 err
%2302:	call	 %2301 XXX fprintf
%2303:	load	 err
%2304:	call	 %2303 XXX fprintf
%2305:	load	 err
%2306:	load	 program_name
%2307:	call	 %2305 XXX %2306 fprintf
%2308:	load	 err
%2309:	load	 program_name
%2310:	call	 %2308 XXX %2309 fprintf
%2311:	load	 err
%2312:	call	 %2311 XXX fprintf
%2313:	load	 err
%2314:	call	 %2313 XXX fprintf
%2315:	load	 err
%2316:	call	 %2315 XXX fprintf
%2317:	load	 err
%2318:	call	 %2317 XXX fprintf
%2319:	load	 err
%2320:	call	 %2319 XXX fprintf
%2321:	load	 err
%2322:	call	 %2321 XXX fprintf
%2323:	load	 err
%2324:	call	 %2323 XXX fprintf
%2325:	load	 err
%2326:	call	 %2325 XXX fprintf
%2327:	load	 err
%2328:	call	 %2327 XXX fprintf
%2329:	load	 err
%2330:	call	 %2329 XXX fprintf
%2331:	load	 err
%2332:	call	 %2331 XXX fprintf
%2333:	load	 err
%2334:	call	 %2333 XXX fprintf
%2335:	ret	

FUNCTION lerrsf

BASIC BLOCK entry
%2336:	alloca	 XXX
%2337:	getelementptr	 %2336 XXX XXX
%2338:	call	 %2337 msg arg sprintf
%2339:	getelementptr	 %2336 XXX XXX
%2340:	call	 %2339 flexerror
%2341:	ret	

FUNCTION set_input_file

BASIC BLOCK entry
%2342:	icmp	 file XXX
%2343:	br	 %2342 if.else if.then

BASIC BLOCK if.then
%2344:	store	 file infilename
%2345:	load	 infilename
%2346:	call	 %2345 XXX fopen
%2347:	store	 %2346 yyin
%2348:	load	 yyin
%2349:	icmp	 %2348 XXX
%2350:	br	 %2349 if.end if.then1

BASIC BLOCK if.then1
%2351:	call	 XXX file lerrsf
%2352:	br	 if.end

BASIC BLOCK if.end
%2353:	br	 if.end2

BASIC BLOCK if.else
%2354:	load	 stdin
%2355:	store	 %2354 yyin
%2356:	store	 XXX infilename
%2357:	br	 if.end2

BASIC BLOCK if.end2
%2358:	ret	

FUNCTION set_up_initial_allocations

BASIC BLOCK entry
%2359:	store	 XXX current_mns
%2360:	load	 current_mns
%2361:	call	 %2360 XXX allocate_array
%2362:	bitcast	 %2361
%2363:	store	 %2362 firstst
%2364:	load	 current_mns
%2365:	call	 %2364 XXX allocate_array
%2366:	bitcast	 %2365
%2367:	store	 %2366 lastst
%2368:	load	 current_mns
%2369:	call	 %2368 XXX allocate_array
%2370:	bitcast	 %2369
%2371:	store	 %2370 finalst
%2372:	load	 current_mns
%2373:	call	 %2372 XXX allocate_array
%2374:	bitcast	 %2373
%2375:	store	 %2374 transchar
%2376:	load	 current_mns
%2377:	call	 %2376 XXX allocate_array
%2378:	bitcast	 %2377
%2379:	store	 %2378 trans1
%2380:	load	 current_mns
%2381:	call	 %2380 XXX allocate_array
%2382:	bitcast	 %2381
%2383:	store	 %2382 trans2
%2384:	load	 current_mns
%2385:	call	 %2384 XXX allocate_array
%2386:	bitcast	 %2385
%2387:	store	 %2386 accptnum
%2388:	load	 current_mns
%2389:	call	 %2388 XXX allocate_array
%2390:	bitcast	 %2389
%2391:	store	 %2390 assoc_rule
%2392:	load	 current_mns
%2393:	call	 %2392 XXX allocate_array
%2394:	bitcast	 %2393
%2395:	store	 %2394 state_type
%2396:	store	 XXX current_max_rules
%2397:	load	 current_max_rules
%2398:	call	 %2397 XXX allocate_array
%2399:	bitcast	 %2398
%2400:	store	 %2399 rule_type
%2401:	load	 current_max_rules
%2402:	call	 %2401 XXX allocate_array
%2403:	bitcast	 %2402
%2404:	store	 %2403 rule_linenum
%2405:	load	 current_max_rules
%2406:	call	 %2405 XXX allocate_array
%2407:	bitcast	 %2406
%2408:	store	 %2407 rule_useful
%2409:	store	 XXX current_max_scs
%2410:	load	 current_max_scs
%2411:	call	 %2410 XXX allocate_array
%2412:	bitcast	 %2411
%2413:	store	 %2412 scset
%2414:	load	 current_max_scs
%2415:	call	 %2414 XXX allocate_array
%2416:	bitcast	 %2415
%2417:	store	 %2416 scbol
%2418:	load	 current_max_scs
%2419:	call	 %2418 XXX allocate_array
%2420:	bitcast	 %2419
%2421:	store	 %2420 scxclu
%2422:	load	 current_max_scs
%2423:	call	 %2422 XXX allocate_array
%2424:	bitcast	 %2423
%2425:	store	 %2424 sceof
%2426:	load	 current_max_scs
%2427:	call	 %2426 XXX allocate_array
%2428:	bitcast	 %2427
%2429:	store	 %2428 scname
%2430:	load	 current_max_scs
%2431:	call	 %2430 XXX allocate_array
%2432:	bitcast	 %2431
%2433:	store	 %2432 actvsc
%2434:	store	 XXX current_maxccls
%2435:	load	 current_maxccls
%2436:	call	 %2435 XXX allocate_array
%2437:	bitcast	 %2436
%2438:	store	 %2437 cclmap
%2439:	load	 current_maxccls
%2440:	call	 %2439 XXX allocate_array
%2441:	bitcast	 %2440
%2442:	store	 %2441 ccllen
%2443:	load	 current_maxccls
%2444:	call	 %2443 XXX allocate_array
%2445:	bitcast	 %2444
%2446:	store	 %2445 cclng
%2447:	store	 XXX current_max_ccl_tbl_size
%2448:	load	 current_max_ccl_tbl_size
%2449:	call	 %2448 XXX allocate_array
%2450:	store	 %2449 ccltbl
%2451:	store	 XXX current_max_dfa_size
%2452:	store	 XXX current_max_xpairs
%2453:	load	 current_max_xpairs
%2454:	call	 %2453 XXX allocate_array
%2455:	bitcast	 %2454
%2456:	store	 %2455 nxt
%2457:	load	 current_max_xpairs
%2458:	call	 %2457 XXX allocate_array
%2459:	bitcast	 %2458
%2460:	store	 %2459 chk
%2461:	store	 XXX current_max_template_xpairs
%2462:	load	 current_max_template_xpairs
%2463:	call	 %2462 XXX allocate_array
%2464:	bitcast	 %2463
%2465:	store	 %2464 tnxt
%2466:	store	 XXX current_max_dfas
%2467:	load	 current_max_dfas
%2468:	call	 %2467 XXX allocate_array
%2469:	bitcast	 %2468
%2470:	store	 %2469 base
%2471:	load	 current_max_dfas
%2472:	call	 %2471 XXX allocate_array
%2473:	bitcast	 %2472
%2474:	store	 %2473 def
%2475:	load	 current_max_dfas
%2476:	call	 %2475 XXX allocate_array
%2477:	bitcast	 %2476
%2478:	store	 %2477 dfasiz
%2479:	load	 current_max_dfas
%2480:	call	 %2479 XXX allocate_array
%2481:	bitcast	 %2480
%2482:	store	 %2481 accsiz
%2483:	load	 current_max_dfas
%2484:	call	 %2483 XXX allocate_array
%2485:	bitcast	 %2484
%2486:	store	 %2485 dhash
%2487:	load	 current_max_dfas
%2488:	call	 %2487 XXX allocate_array
%2489:	bitcast	 %2488
%2490:	store	 %2489 dss
%2491:	load	 current_max_dfas
%2492:	call	 %2491 XXX allocate_array
%2493:	bitcast	 %2492
%2494:	store	 %2493 dfaacc
%2495:	store	 XXX nultrans
%2496:	ret	

FUNCTION skelout

BASIC BLOCK entry
%2497:	alloca	 XXX
%2498:	getelementptr	 %2497 XXX XXX
%2499:	br	 while.cond

BASIC BLOCK while.cond
%2500:	phi	 XXX %2557
%2501:	phi	 %2498 %2519
%2502:	load	 skelfile
%2503:	icmp	 %2502 XXX
%2504:	br	 %2503 cond.false cond.true

BASIC BLOCK cond.true
%2505:	load	 skelfile
%2506:	call	 %2501 XXX %2505 fgets
%2507:	icmp	 %2506 XXX
%2508:	zext	 %2507
%2509:	br	 cond.end

BASIC BLOCK cond.false
%2510:	load	 skel_ind
%2511:	add	 %2510 XXX
%2512:	store	 %2511 skel_ind
%2513:	sext	 %2510
%2514:	getelementptr	 XXX XXX %2513
%2515:	load	 %2514
%2516:	icmp	 %2515 XXX
%2517:	zext	 %2516
%2518:	br	 cond.end

BASIC BLOCK cond.end
%2519:	phi	 %2501 %2515
%2520:	phi	 %2508 %2517
%2521:	icmp	 %2520 XXX
%2522:	br	 %2521 while.end while.body

BASIC BLOCK while.body
%2523:	getelementptr	 %2519 XXX
%2524:	load	 %2523
%2525:	sext	 %2524
%2526:	icmp	 %2525 XXX
%2527:	br	 %2526 if.else if.then

BASIC BLOCK if.then
%2528:	getelementptr	 %2519 XXX
%2529:	load	 %2528
%2530:	sext	 %2529
%2531:	switch	 %2530 sw.default XXX sw.bb XXX sw.bb10 XXX sw.bb11 XXX sw.bb13

BASIC BLOCK sw.bb
%2532:	br	 while.end

BASIC BLOCK sw.bb10
%2533:	load	 C_plus_plus
%2534:	br	 sw.epilog

BASIC BLOCK sw.bb11
%2535:	load	 C_plus_plus
%2536:	icmp	 %2535 XXX
%2537:	xor	 %2536 XXX
%2538:	zext	 %2537
%2539:	br	 sw.epilog

BASIC BLOCK sw.bb13
%2540:	br	 sw.epilog

BASIC BLOCK sw.default
%2541:	call	 XXX flexfatal
%2542:	br	 sw.epilog

BASIC BLOCK sw.epilog
%2543:	phi	 %2500 XXX %2538 %2533
%2544:	br	 if.end22

BASIC BLOCK if.else
%2545:	icmp	 %2500 XXX
%2546:	br	 %2545 if.end21 if.then15

BASIC BLOCK if.then15
%2547:	load	 skelfile
%2548:	icmp	 %2547 XXX
%2549:	br	 %2548 if.else19 if.then17

BASIC BLOCK if.then17
%2550:	load	 stdout
%2551:	call	 %2519 %2550 fputs
%2552:	br	 if.end

BASIC BLOCK if.else19
%2553:	call	 XXX %2519 printf
%2554:	br	 if.end

BASIC BLOCK if.end
%2555:	br	 if.end21

BASIC BLOCK if.end21
%2556:	br	 if.end22

BASIC BLOCK if.end22
%2557:	phi	 %2543 %2500
%2558:	br	 while.cond

BASIC BLOCK while.end
%2559:	ret	

FUNCTION line_directive_out

BASIC BLOCK entry
%2560:	alloca	 XXX
%2561:	load	 infilename
%2562:	icmp	 %2561 XXX
%2563:	br	 %2562 if.end7 land.lhs.true

BASIC BLOCK land.lhs.true
%2564:	load	 gen_line_dirs
%2565:	icmp	 %2564 XXX
%2566:	br	 %2565 if.end7 if.then

BASIC BLOCK if.then
%2567:	getelementptr	 %2560 XXX XXX
%2568:	load	 linenum
%2569:	load	 infilename
%2570:	call	 %2567 XXX %2568 %2569 sprintf
%2571:	icmp	 output_file XXX
%2572:	br	 %2571 if.else if.then3

BASIC BLOCK if.then3
%2573:	getelementptr	 %2560 XXX XXX
%2574:	call	 %2573 output_file fputs
%2575:	br	 if.end

BASIC BLOCK if.else
%2576:	getelementptr	 %2560 XXX XXX
%2577:	call	 %2576 add_action
%2578:	br	 if.end

BASIC BLOCK if.end
%2579:	br	 if.end7

BASIC BLOCK if.end7
%2580:	ret	

FUNCTION yyparse

BASIC BLOCK entry
%2581:	alloca	 XXX
%2582:	alloca	 XXX
%2583:	getelementptr	 %2581 XXX XXX
%2584:	getelementptr	 %2582 XXX XXX
%2585:	store	 XXX yynerrs
%2586:	store	 XXX yychar
%2587:	getelementptr	 %2583 XXX
%2588:	br	 yynewstate

BASIC BLOCK yynewstate
%2589:	phi	 XXX %3677 %2589 %2589
%2590:	phi	 XXX %2658 %2658 %2658
%2591:	phi	 %2584 %2659 %2659 %2659
%2592:	phi	 %2583 %2660 %2660 %2660
%2593:	phi	 XXX %2747 XXX %2737
%2594:	phi	 %2584 %3684 %3790 %2731
%2595:	phi	 %2587 %3683 %3750 %2662
%2596:	phi	 XXX %3721 %3774 %2710
%2597:	trunc	 %2596
%2598:	getelementptr	 %2595 XXX
%2599:	store	 %2597 %2598
%2600:	sext	 %2590
%2601:	getelementptr	 %2592 %2600
%2602:	getelementptr	 %2601 XXX
%2603:	icmp	 %2598 %2602
%2604:	br	 %2603 if.end36 if.then

BASIC BLOCK if.then
%2605:	ptrtoint	 %2598
%2606:	ptrtoint	 %2592
%2607:	sub	 %2605 %2606
%2608:	sdiv	 %2607 XXX
%2609:	add	 %2608 XXX
%2610:	trunc	 %2609
%2611:	icmp	 %2590 XXX
%2612:	br	 %2611 if.end10 if.then8

BASIC BLOCK if.then8
%2613:	call	 XXX yyerror
%2614:	icmp	 XXX XXX
%2615:	br	 %2614 if.end if.then9

BASIC BLOCK if.then9
%2616:	bitcast	 %2592
%2617:	call	 %2616 free
%2618:	bitcast	 %2591
%2619:	call	 %2618 free
%2620:	br	 if.end

BASIC BLOCK if.end
%2621:	br	 return

BASIC BLOCK if.end10
%2622:	mul	 %2590 XXX
%2623:	icmp	 %2622 XXX
%2624:	br	 %2623 if.end14 if.then13

BASIC BLOCK if.then13
%2625:	br	 if.end14

BASIC BLOCK if.end14
%2626:	phi	 XXX %2622
%2627:	sext	 %2626
%2628:	mul	 %2627 XXX
%2629:	alloca	 %2628
%2630:	bitcast	 %2629
%2631:	bitcast	 %2630
%2632:	bitcast	 %2592
%2633:	mul	 %2610 XXX
%2634:	zext	 %2633
%2635:	call	 %2631 %2632 %2634 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%2636:	sext	 %2626
%2637:	mul	 %2636 XXX
%2638:	alloca	 %2637
%2639:	bitcast	 %2638
%2640:	bitcast	 %2639
%2641:	bitcast	 %2591
%2642:	mul	 %2610 XXX
%2643:	zext	 %2642
%2644:	call	 %2640 %2641 %2643 XXX XXX llvm.memcpy.p0i8.p0i8.i64
%2645:	sext	 %2610
%2646:	getelementptr	 %2630 %2645
%2647:	getelementptr	 %2646 XXX
%2648:	sext	 %2610
%2649:	getelementptr	 %2639 %2648
%2650:	getelementptr	 %2649 XXX
%2651:	sext	 %2626
%2652:	getelementptr	 %2630 %2651
%2653:	getelementptr	 %2652 XXX
%2654:	icmp	 %2647 %2653
%2655:	br	 %2654 if.end35 if.then34

BASIC BLOCK if.then34
%2656:	br	 yyabortlab

BASIC BLOCK if.end35
%2657:	br	 if.end36

BASIC BLOCK if.end36
%2658:	phi	 %2626 %2590
%2659:	phi	 %2639 %2591
%2660:	phi	 %2630 %2592
%2661:	phi	 %2650 %2594
%2662:	phi	 %2647 %2598
%2663:	br	 yybackup

BASIC BLOCK yybackup
%2664:	sext	 %2596
%2665:	getelementptr	 yypact XXX %2664
%2666:	load	 %2665
%2667:	sext	 %2666
%2668:	icmp	 %2667 XXX
%2669:	br	 %2668 if.end41 if.then40

BASIC BLOCK if.then40
%2670:	br	 yydefault

BASIC BLOCK if.end41
%2671:	load	 yychar
%2672:	icmp	 %2671 XXX
%2673:	br	 %2672 if.end45 if.then44

BASIC BLOCK if.then44
%2674:	call	 yylex
%2675:	store	 %2674 yychar
%2676:	br	 if.end45

BASIC BLOCK if.end45
%2677:	load	 yychar
%2678:	icmp	 %2677 XXX
%2679:	br	 %2678 if.else if.then48

BASIC BLOCK if.then48
%2680:	store	 XXX yychar
%2681:	br	 if.end54

BASIC BLOCK if.else
%2682:	load	 yychar
%2683:	icmp	 %2682 XXX
%2684:	br	 %2683 cond.false cond.true

BASIC BLOCK cond.true
%2685:	load	 yychar
%2686:	sext	 %2685
%2687:	getelementptr	 yytranslate XXX %2686
%2688:	load	 %2687
%2689:	sext	 %2688
%2690:	br	 cond.end

BASIC BLOCK cond.false
%2691:	br	 cond.end

BASIC BLOCK cond.end
%2692:	phi	 %2689 XXX
%2693:	br	 if.end54

BASIC BLOCK if.end54
%2694:	phi	 XXX %2692
%2695:	add	 %2667 %2694
%2696:	icmp	 %2695 XXX
%2697:	br	 %2696 lor.lhs.false if.then66

BASIC BLOCK lor.lhs.false
%2698:	icmp	 %2695 XXX
%2699:	br	 %2698 lor.lhs.false60 if.then66

BASIC BLOCK lor.lhs.false60
%2700:	sext	 %2695
%2701:	getelementptr	 yycheck XXX %2700
%2702:	load	 %2701
%2703:	sext	 %2702
%2704:	icmp	 %2703 %2694
%2705:	br	 %2704 if.end67 if.then66

BASIC BLOCK if.then66
%2706:	br	 yydefault

BASIC BLOCK if.end67
%2707:	sext	 %2695
%2708:	getelementptr	 yytable XXX %2707
%2709:	load	 %2708
%2710:	sext	 %2709
%2711:	icmp	 %2710 XXX
%2712:	br	 %2711 if.else78 if.then73

BASIC BLOCK if.then73
%2713:	icmp	 %2710 XXX
%2714:	br	 %2713 if.end77 if.then76

BASIC BLOCK if.then76
%2715:	br	 yyerrlab

BASIC BLOCK if.end77
%2716:	sub	 XXX %2710
%2717:	br	 yyreduce

BASIC BLOCK if.else78
%2718:	icmp	 %2710 XXX
%2719:	br	 %2718 if.end82 if.then81

BASIC BLOCK if.then81
%2720:	br	 yyerrlab

BASIC BLOCK if.end82
%2721:	br	 if.end83

BASIC BLOCK if.end83
%2722:	icmp	 %2710 XXX
%2723:	br	 %2722 if.end87 if.then86

BASIC BLOCK if.then86
%2724:	br	 yyacceptlab

BASIC BLOCK if.end87
%2725:	load	 yychar
%2726:	icmp	 %2725 XXX
%2727:	br	 %2726 if.end91 if.then90

BASIC BLOCK if.then90
%2728:	store	 XXX yychar
%2729:	br	 if.end91

BASIC BLOCK if.end91
%2730:	load	 yylval
%2731:	getelementptr	 %2661 XXX
%2732:	store	 %2730 %2731
%2733:	icmp	 %2593 XXX
%2734:	br	 %2733 if.end95 if.then94

BASIC BLOCK if.then94
%2735:	add	 %2593 XXX
%2736:	br	 if.end95

BASIC BLOCK if.end95
%2737:	phi	 %2735 %2593
%2738:	br	 yynewstate

BASIC BLOCK yydefault
%2739:	sext	 %2596
%2740:	getelementptr	 yydefact XXX %2739
%2741:	load	 %2740
%2742:	sext	 %2741
%2743:	icmp	 %2742 XXX
%2744:	br	 %2743 if.end102 if.then101

BASIC BLOCK if.then101
%2745:	br	 yyerrlab

BASIC BLOCK if.end102
%2746:	br	 yyreduce

BASIC BLOCK yyreduce
%2747:	phi	 XXX %2593 %2593
%2748:	phi	 %3749 %2661 %2661
%2749:	phi	 %3750 %2662 %2662
%2750:	phi	 %3780 %2742 %2716
%2751:	sext	 %2750
%2752:	getelementptr	 yyr2 XXX %2751
%2753:	load	 %2752
%2754:	sext	 %2753
%2755:	icmp	 %2754 XXX
%2756:	br	 %2755 if.end112 if.then108

BASIC BLOCK if.then108
%2757:	sub	 XXX %2754
%2758:	sext	 %2757
%2759:	getelementptr	 %2748 %2758
%2760:	load	 %2759
%2761:	br	 if.end112

BASIC BLOCK if.end112
%2762:	phi	 %2760 %2589
%2763:	switch	 %2750 sw.epilog XXX sw.bb XXX sw.bb127 XXX sw.bb128 XXX sw.bb129 XXX sw.bb141 XXX sw.bb142 XXX sw.bb143 XXX sw.bb144 XXX sw.bb145 XXX sw.bb146 XXX sw.bb147 XXX sw.bb172 XXX sw.bb190 XXX sw.bb216 XXX sw.bb235 XXX sw.bb236 XXX sw.bb257 XXX sw.bb258 XXX sw.bb269 XXX sw.bb270 XXX sw.bb271 XXX sw.bb286 XXX sw.bb322 XXX sw.bb323 XXX sw.bb344 XXX sw.bb358 XXX sw.bb362 XXX sw.bb364 XXX sw.bb374 XXX sw.bb378 XXX sw.bb380 XXX sw.bb383 XXX sw.bb386 XXX sw.bb389 XXX sw.bb423 XXX sw.bb434 XXX sw.bb448 XXX sw.bb465 XXX sw.bb492 XXX sw.bb497 XXX sw.bb499 XXX sw.bb501 XXX sw.bb520 XXX sw.bb522 XXX sw.bb525 XXX sw.bb578 XXX sw.bb605 XXX sw.bb607 XXX sw.bb628

BASIC BLOCK sw.bb
%2764:	call	 cclinit
%2765:	store	 %2764 pat
%2766:	load	 pat
%2767:	call	 %2766 cclnegate
%2768:	load	 pat
%2769:	sub	 XXX %2768
%2770:	call	 %2769 mkstate
%2771:	load	 num_rules
%2772:	store	 %2771 default_rule
%2773:	call	 %2770 XXX XXX XXX finish_rule
%2774:	store	 XXX i
%2775:	br	 for.cond

BASIC BLOCK for.cond
%2776:	load	 i
%2777:	load	 lastsc
%2778:	icmp	 %2776 %2777
%2779:	br	 %2778 for.end for.body

BASIC BLOCK for.body
%2780:	load	 i
%2781:	sext	 %2780
%2782:	load	 scset
%2783:	getelementptr	 %2782 %2781
%2784:	load	 %2783
%2785:	call	 %2784 %2770 mkbranch
%2786:	load	 i
%2787:	sext	 %2786
%2788:	load	 scset
%2789:	getelementptr	 %2788 %2787
%2790:	store	 %2785 %2789
%2791:	br	 for.inc

BASIC BLOCK for.inc
%2792:	load	 i
%2793:	add	 %2792 XXX
%2794:	store	 %2793 i
%2795:	br	 for.cond

BASIC BLOCK for.end
%2796:	load	 spprdflt
%2797:	icmp	 %2796 XXX
%2798:	br	 %2797 if.else125 if.then124

BASIC BLOCK if.then124
%2799:	call	 XXX add_action
%2800:	br	 if.end126

BASIC BLOCK if.else125
%2801:	call	 XXX add_action
%2802:	br	 if.end126

BASIC BLOCK if.end126
%2803:	call	 XXX add_action
%2804:	br	 sw.epilog

BASIC BLOCK sw.bb127
%2805:	call	 XXX XXX scinstal
%2806:	store	 XXX actvp
%2807:	br	 sw.epilog

BASIC BLOCK sw.bb128
%2808:	call	 XXX synerr
%2809:	br	 sw.epilog

BASIC BLOCK sw.bb129
%2810:	load	 lastsc
%2811:	add	 %2810 XXX
%2812:	call	 %2811 XXX allocate_array
%2813:	bitcast	 %2812
%2814:	store	 %2813 active_ss
%2815:	store	 XXX i
%2816:	br	 for.cond132

BASIC BLOCK for.cond132
%2817:	load	 i
%2818:	load	 lastsc
%2819:	icmp	 %2817 %2818
%2820:	br	 %2819 for.end140 for.body135

BASIC BLOCK for.body135
%2821:	load	 i
%2822:	sext	 %2821
%2823:	load	 active_ss
%2824:	getelementptr	 %2823 %2822
%2825:	store	 XXX %2824
%2826:	br	 for.inc138

BASIC BLOCK for.inc138
%2827:	load	 i
%2828:	add	 %2827 XXX
%2829:	store	 %2828 i
%2830:	br	 for.cond132

BASIC BLOCK for.end140
%2831:	br	 sw.epilog

BASIC BLOCK sw.bb141
%2832:	store	 XXX xcluflg
%2833:	br	 sw.epilog

BASIC BLOCK sw.bb142
%2834:	store	 XXX xcluflg
%2835:	br	 sw.epilog

BASIC BLOCK sw.bb143
%2836:	load	 xcluflg
%2837:	call	 XXX %2836 scinstal
%2838:	br	 sw.epilog

BASIC BLOCK sw.bb144
%2839:	load	 xcluflg
%2840:	call	 XXX %2839 scinstal
%2841:	br	 sw.epilog

BASIC BLOCK sw.bb145
%2842:	call	 XXX synerr
%2843:	br	 sw.epilog

BASIC BLOCK sw.bb146
%2844:	store	 XXX varlength
%2845:	store	 XXX variable_trail_rule
%2846:	store	 XXX trlcontxt
%2847:	store	 XXX rulelen
%2848:	store	 XXX headcnt
%2849:	store	 XXX trailcnt
%2850:	store	 XXX current_state_type
%2851:	load	 continued_action
%2852:	store	 %2851 previous_continued_action
%2853:	call	 new_rule
%2854:	br	 sw.epilog

BASIC BLOCK sw.bb147
%2855:	getelementptr	 %2748 XXX
%2856:	load	 %2855
%2857:	store	 %2856 pat
%2858:	load	 pat
%2859:	load	 variable_trail_rule
%2860:	load	 headcnt
%2861:	load	 trailcnt
%2862:	call	 %2858 %2859 %2860 %2861 finish_rule
%2863:	store	 XXX i
%2864:	br	 for.cond149

BASIC BLOCK for.cond149
%2865:	load	 i
%2866:	load	 actvp
%2867:	icmp	 %2865 %2866
%2868:	br	 %2867 for.end164 for.body152

BASIC BLOCK for.body152
%2869:	load	 i
%2870:	sext	 %2869
%2871:	load	 actvsc
%2872:	getelementptr	 %2871 %2870
%2873:	load	 %2872
%2874:	sext	 %2873
%2875:	load	 scbol
%2876:	getelementptr	 %2875 %2874
%2877:	load	 %2876
%2878:	load	 pat
%2879:	call	 %2877 %2878 mkbranch
%2880:	load	 i
%2881:	sext	 %2880
%2882:	load	 actvsc
%2883:	getelementptr	 %2882 %2881
%2884:	load	 %2883
%2885:	sext	 %2884
%2886:	load	 scbol
%2887:	getelementptr	 %2886 %2885
%2888:	store	 %2879 %2887
%2889:	br	 for.inc162

BASIC BLOCK for.inc162
%2890:	load	 i
%2891:	add	 %2890 XXX
%2892:	store	 %2891 i
%2893:	br	 for.cond149

BASIC BLOCK for.end164
%2894:	load	 bol_needed
%2895:	icmp	 %2894 XXX
%2896:	br	 %2895 if.then166 if.end171

BASIC BLOCK if.then166
%2897:	store	 XXX bol_needed
%2898:	load	 performance_report
%2899:	icmp	 %2898 XXX
%2900:	br	 %2899 if.end170 if.then169

BASIC BLOCK if.then169
%2901:	call	 XXX pinpoint_message
%2902:	br	 if.end170

BASIC BLOCK if.end170
%2903:	br	 if.end171

BASIC BLOCK if.end171
%2904:	br	 sw.epilog

BASIC BLOCK sw.bb172
%2905:	getelementptr	 %2748 XXX
%2906:	load	 %2905
%2907:	store	 %2906 pat
%2908:	load	 pat
%2909:	load	 variable_trail_rule
%2910:	load	 headcnt
%2911:	load	 trailcnt
%2912:	call	 %2908 %2909 %2910 %2911 finish_rule
%2913:	store	 XXX i
%2914:	br	 for.cond174

BASIC BLOCK for.cond174
%2915:	load	 i
%2916:	load	 actvp
%2917:	icmp	 %2915 %2916
%2918:	br	 %2917 for.end189 for.body177

BASIC BLOCK for.body177
%2919:	load	 i
%2920:	sext	 %2919
%2921:	load	 actvsc
%2922:	getelementptr	 %2921 %2920
%2923:	load	 %2922
%2924:	sext	 %2923
%2925:	load	 scset
%2926:	getelementptr	 %2925 %2924
%2927:	load	 %2926
%2928:	load	 pat
%2929:	call	 %2927 %2928 mkbranch
%2930:	load	 i
%2931:	sext	 %2930
%2932:	load	 actvsc
%2933:	getelementptr	 %2932 %2931
%2934:	load	 %2933
%2935:	sext	 %2934
%2936:	load	 scset
%2937:	getelementptr	 %2936 %2935
%2938:	store	 %2929 %2937
%2939:	br	 for.inc187

BASIC BLOCK for.inc187
%2940:	load	 i
%2941:	add	 %2940 XXX
%2942:	store	 %2941 i
%2943:	br	 for.cond174

BASIC BLOCK for.end189
%2944:	br	 sw.epilog

BASIC BLOCK sw.bb190
%2945:	getelementptr	 %2748 XXX
%2946:	load	 %2945
%2947:	store	 %2946 pat
%2948:	load	 pat
%2949:	load	 variable_trail_rule
%2950:	load	 headcnt
%2951:	load	 trailcnt
%2952:	call	 %2948 %2949 %2950 %2951 finish_rule
%2953:	store	 XXX i
%2954:	br	 for.cond192

BASIC BLOCK for.cond192
%2955:	load	 i
%2956:	load	 lastsc
%2957:	icmp	 %2955 %2956
%2958:	br	 %2957 for.end208 for.body195

BASIC BLOCK for.body195
%2959:	load	 i
%2960:	sext	 %2959
%2961:	load	 scxclu
%2962:	getelementptr	 %2961 %2960
%2963:	load	 %2962
%2964:	icmp	 %2963 XXX
%2965:	br	 %2964 if.then199 if.end205

BASIC BLOCK if.then199
%2966:	load	 i
%2967:	sext	 %2966
%2968:	load	 scbol
%2969:	getelementptr	 %2968 %2967
%2970:	load	 %2969
%2971:	load	 pat
%2972:	call	 %2970 %2971 mkbranch
%2973:	load	 i
%2974:	sext	 %2973
%2975:	load	 scbol
%2976:	getelementptr	 %2975 %2974
%2977:	store	 %2972 %2976
%2978:	br	 if.end205

BASIC BLOCK if.end205
%2979:	br	 for.inc206

BASIC BLOCK for.inc206
%2980:	load	 i
%2981:	add	 %2980 XXX
%2982:	store	 %2981 i
%2983:	br	 for.cond192

BASIC BLOCK for.end208
%2984:	load	 bol_needed
%2985:	icmp	 %2984 XXX
%2986:	br	 %2985 if.then210 if.end215

BASIC BLOCK if.then210
%2987:	store	 XXX bol_needed
%2988:	load	 performance_report
%2989:	icmp	 %2988 XXX
%2990:	br	 %2989 if.end214 if.then213

BASIC BLOCK if.then213
%2991:	call	 XXX pinpoint_message
%2992:	br	 if.end214

BASIC BLOCK if.end214
%2993:	br	 if.end215

BASIC BLOCK if.end215
%2994:	br	 sw.epilog

BASIC BLOCK sw.bb216
%2995:	getelementptr	 %2748 XXX
%2996:	load	 %2995
%2997:	store	 %2996 pat
%2998:	load	 pat
%2999:	load	 variable_trail_rule
%3000:	load	 headcnt
%3001:	load	 trailcnt
%3002:	call	 %2998 %2999 %3000 %3001 finish_rule
%3003:	store	 XXX i
%3004:	br	 for.cond218

BASIC BLOCK for.cond218
%3005:	load	 i
%3006:	load	 lastsc
%3007:	icmp	 %3005 %3006
%3008:	br	 %3007 for.end234 for.body221

BASIC BLOCK for.body221
%3009:	load	 i
%3010:	sext	 %3009
%3011:	load	 scxclu
%3012:	getelementptr	 %3011 %3010
%3013:	load	 %3012
%3014:	icmp	 %3013 XXX
%3015:	br	 %3014 if.then225 if.end231

BASIC BLOCK if.then225
%3016:	load	 i
%3017:	sext	 %3016
%3018:	load	 scset
%3019:	getelementptr	 %3018 %3017
%3020:	load	 %3019
%3021:	load	 pat
%3022:	call	 %3020 %3021 mkbranch
%3023:	load	 i
%3024:	sext	 %3023
%3025:	load	 scset
%3026:	getelementptr	 %3025 %3024
%3027:	store	 %3022 %3026
%3028:	br	 if.end231

BASIC BLOCK if.end231
%3029:	br	 for.inc232

BASIC BLOCK for.inc232
%3030:	load	 i
%3031:	add	 %3030 XXX
%3032:	store	 %3031 i
%3033:	br	 for.cond218

BASIC BLOCK for.end234
%3034:	br	 sw.epilog

BASIC BLOCK sw.bb235
%3035:	call	 build_eof_action
%3036:	br	 sw.epilog

BASIC BLOCK sw.bb236
%3037:	store	 XXX actvp
%3038:	store	 XXX i
%3039:	br	 for.cond237

BASIC BLOCK for.cond237
%3040:	load	 i
%3041:	load	 lastsc
%3042:	icmp	 %3040 %3041
%3043:	br	 %3042 for.end251 for.body240

BASIC BLOCK for.body240
%3044:	load	 i
%3045:	sext	 %3044
%3046:	load	 sceof
%3047:	getelementptr	 %3046 %3045
%3048:	load	 %3047
%3049:	icmp	 %3048 XXX
%3050:	br	 %3049 if.then244 if.end248

BASIC BLOCK if.then244
%3051:	load	 i
%3052:	load	 actvp
%3053:	add	 %3052 XXX
%3054:	store	 %3053 actvp
%3055:	sext	 %3053
%3056:	load	 actvsc
%3057:	getelementptr	 %3056 %3055
%3058:	store	 %3051 %3057
%3059:	br	 if.end248

BASIC BLOCK if.end248
%3060:	br	 for.inc249

BASIC BLOCK for.inc249
%3061:	load	 i
%3062:	add	 %3061 XXX
%3063:	store	 %3062 i
%3064:	br	 for.cond237

BASIC BLOCK for.end251
%3065:	load	 actvp
%3066:	icmp	 %3065 XXX
%3067:	br	 %3066 if.else255 if.then254

BASIC BLOCK if.then254
%3068:	call	 XXX warn
%3069:	br	 if.end256

BASIC BLOCK if.else255
%3070:	call	 build_eof_action
%3071:	br	 if.end256

BASIC BLOCK if.end256
%3072:	br	 sw.epilog

BASIC BLOCK sw.bb257
%3073:	call	 XXX synerr
%3074:	br	 sw.epilog

BASIC BLOCK sw.bb258
%3075:	store	 XXX actvp
%3076:	store	 XXX i
%3077:	br	 for.cond259

BASIC BLOCK for.cond259
%3078:	load	 i
%3079:	load	 lastsc
%3080:	icmp	 %3078 %3079
%3081:	br	 %3080 for.end268 for.body262

BASIC BLOCK for.body262
%3082:	load	 i
%3083:	load	 actvp
%3084:	add	 %3083 XXX
%3085:	store	 %3084 actvp
%3086:	sext	 %3084
%3087:	load	 actvsc
%3088:	getelementptr	 %3087 %3086
%3089:	store	 %3082 %3088
%3090:	br	 for.inc266

BASIC BLOCK for.inc266
%3091:	load	 i
%3092:	add	 %3091 XXX
%3093:	store	 %3092 i
%3094:	br	 for.cond259

BASIC BLOCK for.end268
%3095:	br	 sw.epilog

BASIC BLOCK sw.bb269
%3096:	store	 XXX actvp
%3097:	br	 sw.epilog

BASIC BLOCK sw.bb270
%3098:	call	 XXX synerr
%3099:	br	 sw.epilog

BASIC BLOCK sw.bb271
%3100:	call	 XXX sclookup
%3101:	store	 %3100 scnum
%3102:	icmp	 %3100 XXX
%3103:	br	 %3102 if.else276 if.then275

BASIC BLOCK if.then275
%3104:	call	 XXX XXX format_pinpoint_message
%3105:	br	 if.end285

BASIC BLOCK if.else276
%3106:	load	 actvp
%3107:	add	 %3106 XXX
%3108:	store	 %3107 actvp
%3109:	load	 current_max_scs
%3110:	icmp	 %3107 %3109
%3111:	br	 %3110 if.else281 if.then280

BASIC BLOCK if.then280
%3112:	call	 XXX pinpoint_message
%3113:	br	 if.end284

BASIC BLOCK if.else281
%3114:	load	 scnum
%3115:	load	 actvp
%3116:	sext	 %3115
%3117:	load	 actvsc
%3118:	getelementptr	 %3117 %3116
%3119:	store	 %3114 %3118
%3120:	br	 if.end284

BASIC BLOCK if.end284
%3121:	br	 if.end285

BASIC BLOCK if.end285
%3122:	br	 sw.epilog

BASIC BLOCK sw.bb286
%3123:	getelementptr	 %2748 XXX
%3124:	load	 %3123
%3125:	sext	 %3124
%3126:	load	 lastst
%3127:	getelementptr	 %3126 %3125
%3128:	load	 %3127
%3129:	sext	 %3128
%3130:	load	 transchar
%3131:	getelementptr	 %3130 %3129
%3132:	load	 %3131
%3133:	icmp	 %3132 XXX
%3134:	br	 %3133 if.end299 if.then294

BASIC BLOCK if.then294
%3135:	getelementptr	 %2748 XXX
%3136:	load	 %3135
%3137:	call	 XXX mkstate
%3138:	call	 %3136 %3137 link_machines
%3139:	getelementptr	 %2748 XXX
%3140:	store	 %3138 %3139
%3141:	br	 if.end299

BASIC BLOCK if.end299
%3142:	getelementptr	 %2748 XXX
%3143:	load	 %3142
%3144:	call	 %3143 mark_beginning_as_normal
%3145:	store	 XXX current_state_type
%3146:	load	 previous_continued_action
%3147:	icmp	 %3146 XXX
%3148:	br	 %3147 if.end309 if.then302

BASIC BLOCK if.then302
%3149:	load	 varlength
%3150:	icmp	 %3149 XXX
%3151:	br	 %3150 if.then307 lor.lhs.false304

BASIC BLOCK lor.lhs.false304
%3152:	load	 headcnt
%3153:	icmp	 %3152 XXX
%3154:	br	 %3153 if.end308 if.then307

BASIC BLOCK if.then307
%3155:	call	 XXX warn
%3156:	br	 if.end308

BASIC BLOCK if.end308
%3157:	store	 XXX varlength
%3158:	store	 XXX headcnt
%3159:	br	 if.end309

BASIC BLOCK if.end309
%3160:	load	 lex_compat
%3161:	icmp	 %3160 XXX
%3162:	br	 %3161 lor.lhs.false311 if.then315

BASIC BLOCK lor.lhs.false311
%3163:	load	 varlength
%3164:	icmp	 %3163 XXX
%3165:	br	 %3164 if.else317 land.lhs.true

BASIC BLOCK land.lhs.true
%3166:	load	 headcnt
%3167:	icmp	 %3166 XXX
%3168:	br	 %3167 if.else317 if.then315

BASIC BLOCK if.then315
%3169:	getelementptr	 %2748 XXX
%3170:	load	 %3169
%3171:	load	 num_rules
%3172:	or	 %3171 XXX
%3173:	call	 %3170 %3172 add_accept
%3174:	store	 XXX variable_trail_rule
%3175:	br	 if.end318

BASIC BLOCK if.else317
%3176:	load	 rulelen
%3177:	store	 %3176 trailcnt
%3178:	br	 if.end318

BASIC BLOCK if.end318
%3179:	getelementptr	 %2748 XXX
%3180:	load	 %3179
%3181:	getelementptr	 %2748 XXX
%3182:	load	 %3181
%3183:	call	 %3180 %3182 link_machines
%3184:	br	 sw.epilog

BASIC BLOCK sw.bb322
%3185:	call	 XXX synerr
%3186:	br	 sw.epilog

BASIC BLOCK sw.bb323
%3187:	store	 XXX headcnt
%3188:	store	 XXX trailcnt
%3189:	store	 XXX rulelen
%3190:	store	 XXX varlength
%3191:	store	 XXX current_state_type
%3192:	load	 trlcontxt
%3193:	icmp	 %3192 XXX
%3194:	br	 %3193 if.else327 if.then325

BASIC BLOCK if.then325
%3195:	call	 XXX synerr
%3196:	call	 XXX mkstate
%3197:	br	 if.end331

BASIC BLOCK if.else327
%3198:	load	 previous_continued_action
%3199:	icmp	 %3198 XXX
%3200:	br	 %3199 if.end330 if.then329

BASIC BLOCK if.then329
%3201:	call	 XXX warn
%3202:	store	 XXX varlength
%3203:	br	 if.end330

BASIC BLOCK if.end330
%3204:	br	 if.end331

BASIC BLOCK if.end331
%3205:	load	 lex_compat
%3206:	icmp	 %3205 XXX
%3207:	br	 %3206 lor.lhs.false333 if.then335

BASIC BLOCK lor.lhs.false333
%3208:	load	 varlength
%3209:	icmp	 %3208 XXX
%3210:	br	 %3209 if.end338 if.then335

BASIC BLOCK if.then335
%3211:	getelementptr	 %2748 XXX
%3212:	load	 %3211
%3213:	load	 num_rules
%3214:	or	 %3213 XXX
%3215:	call	 %3212 %3214 add_accept
%3216:	store	 XXX variable_trail_rule
%3217:	br	 if.end338

BASIC BLOCK if.end338
%3218:	store	 XXX trlcontxt
%3219:	call	 XXX mkstate
%3220:	store	 %3219 eps
%3221:	getelementptr	 %2748 XXX
%3222:	load	 %3221
%3223:	load	 eps
%3224:	call	 XXX mkstate
%3225:	call	 %3223 %3224 link_machines
%3226:	call	 %3222 %3225 link_machines
%3227:	br	 sw.epilog

BASIC BLOCK sw.bb344
%3228:	getelementptr	 %2748 XXX
%3229:	load	 %3228
%3230:	load	 trlcontxt
%3231:	icmp	 %3230 XXX
%3232:	br	 %3231 if.end357 if.then347

BASIC BLOCK if.then347
%3233:	load	 lex_compat
%3234:	icmp	 %3233 XXX
%3235:	br	 %3234 lor.lhs.false349 if.then354

BASIC BLOCK lor.lhs.false349
%3236:	load	 varlength
%3237:	icmp	 %3236 XXX
%3238:	br	 %3237 if.else355 land.lhs.true351

BASIC BLOCK land.lhs.true351
%3239:	load	 headcnt
%3240:	icmp	 %3239 XXX
%3241:	br	 %3240 if.else355 if.then354

BASIC BLOCK if.then354
%3242:	store	 XXX variable_trail_rule
%3243:	br	 if.end356

BASIC BLOCK if.else355
%3244:	load	 rulelen
%3245:	store	 %3244 trailcnt
%3246:	br	 if.end356

BASIC BLOCK if.end356
%3247:	br	 if.end357

BASIC BLOCK if.end357
%3248:	br	 sw.epilog

BASIC BLOCK sw.bb358
%3249:	store	 XXX varlength
%3250:	getelementptr	 %2748 XXX
%3251:	load	 %3250
%3252:	getelementptr	 %2748 XXX
%3253:	load	 %3252
%3254:	call	 %3251 %3253 mkor
%3255:	br	 sw.epilog

BASIC BLOCK sw.bb362
%3256:	getelementptr	 %2748 XXX
%3257:	load	 %3256
%3258:	br	 sw.epilog

BASIC BLOCK sw.bb364
%3259:	load	 trlcontxt
%3260:	icmp	 %3259 XXX
%3261:	br	 %3260 if.else367 if.then366

BASIC BLOCK if.then366
%3262:	call	 XXX synerr
%3263:	br	 if.end368

BASIC BLOCK if.else367
%3264:	store	 XXX trlcontxt
%3265:	br	 if.end368

BASIC BLOCK if.end368
%3266:	load	 varlength
%3267:	icmp	 %3266 XXX
%3268:	br	 %3267 if.else371 if.then370

BASIC BLOCK if.then370
%3269:	store	 XXX varlength
%3270:	br	 if.end372

BASIC BLOCK if.else371
%3271:	load	 rulelen
%3272:	store	 %3271 headcnt
%3273:	br	 if.end372

BASIC BLOCK if.end372
%3274:	store	 XXX rulelen
%3275:	store	 XXX current_state_type
%3276:	getelementptr	 %2748 XXX
%3277:	load	 %3276
%3278:	br	 sw.epilog

BASIC BLOCK sw.bb374
%3279:	getelementptr	 %2748 XXX
%3280:	load	 %3279
%3281:	getelementptr	 %2748 XXX
%3282:	load	 %3281
%3283:	call	 %3280 %3282 link_machines
%3284:	br	 sw.epilog

BASIC BLOCK sw.bb378
%3285:	getelementptr	 %2748 XXX
%3286:	load	 %3285
%3287:	br	 sw.epilog

BASIC BLOCK sw.bb380
%3288:	store	 XXX varlength
%3289:	getelementptr	 %2748 XXX
%3290:	load	 %3289
%3291:	call	 %3290 mkclos
%3292:	br	 sw.epilog

BASIC BLOCK sw.bb383
%3293:	store	 XXX varlength
%3294:	getelementptr	 %2748 XXX
%3295:	load	 %3294
%3296:	call	 %3295 mkposcl
%3297:	br	 sw.epilog

BASIC BLOCK sw.bb386
%3298:	store	 XXX varlength
%3299:	getelementptr	 %2748 XXX
%3300:	load	 %3299
%3301:	call	 %3300 mkopt
%3302:	br	 sw.epilog

BASIC BLOCK sw.bb389
%3303:	store	 XXX varlength
%3304:	getelementptr	 %2748 XXX
%3305:	load	 %3304
%3306:	getelementptr	 %2748 XXX
%3307:	load	 %3306
%3308:	icmp	 %3305 %3307
%3309:	br	 %3308 lor.lhs.false394 if.then398

BASIC BLOCK lor.lhs.false394
%3310:	getelementptr	 %2748 XXX
%3311:	load	 %3310
%3312:	icmp	 %3311 XXX
%3313:	br	 %3312 if.else400 if.then398

BASIC BLOCK if.then398
%3314:	call	 XXX synerr
%3315:	getelementptr	 %2748 XXX
%3316:	load	 %3315
%3317:	br	 if.end422

BASIC BLOCK if.else400
%3318:	getelementptr	 %2748 XXX
%3319:	load	 %3318
%3320:	icmp	 %3319 XXX
%3321:	br	 %3320 if.else416 if.then404

BASIC BLOCK if.then404
%3322:	getelementptr	 %2748 XXX
%3323:	load	 %3322
%3324:	icmp	 %3323 XXX
%3325:	br	 %3324 if.else410 if.then408

BASIC BLOCK if.then408
%3326:	call	 XXX synerr
%3327:	getelementptr	 %2748 XXX
%3328:	load	 %3327
%3329:	br	 if.end415

BASIC BLOCK if.else410
%3330:	getelementptr	 %2748 XXX
%3331:	load	 %3330
%3332:	getelementptr	 %2748 XXX
%3333:	load	 %3332
%3334:	call	 %3331 XXX %3333 mkrep
%3335:	call	 %3334 mkopt
%3336:	br	 if.end415

BASIC BLOCK if.end415
%3337:	phi	 %3328 %3335
%3338:	br	 if.end421

BASIC BLOCK if.else416
%3339:	getelementptr	 %2748 XXX
%3340:	load	 %3339
%3341:	getelementptr	 %2748 XXX
%3342:	load	 %3341
%3343:	getelementptr	 %2748 XXX
%3344:	load	 %3343
%3345:	call	 %3340 %3342 %3344 mkrep
%3346:	br	 if.end421

BASIC BLOCK if.end421
%3347:	phi	 %3337 %3345
%3348:	br	 if.end422

BASIC BLOCK if.end422
%3349:	phi	 %3316 %3347
%3350:	br	 sw.epilog

BASIC BLOCK sw.bb423
%3351:	store	 XXX varlength
%3352:	getelementptr	 %2748 XXX
%3353:	load	 %3352
%3354:	icmp	 %3353 XXX
%3355:	br	 %3354 if.else429 if.then427

BASIC BLOCK if.then427
%3356:	call	 XXX synerr
%3357:	getelementptr	 %2748 XXX
%3358:	load	 %3357
%3359:	br	 if.end433

BASIC BLOCK if.else429
%3360:	getelementptr	 %2748 XXX
%3361:	load	 %3360
%3362:	getelementptr	 %2748 XXX
%3363:	load	 %3362
%3364:	call	 %3361 %3363 XXX mkrep
%3365:	br	 if.end433

BASIC BLOCK if.end433
%3366:	phi	 %3358 %3364
%3367:	br	 sw.epilog

BASIC BLOCK sw.bb434
%3368:	store	 XXX varlength
%3369:	getelementptr	 %2748 XXX
%3370:	load	 %3369
%3371:	icmp	 %3370 XXX
%3372:	br	 %3371 if.else440 if.then438

BASIC BLOCK if.then438
%3373:	call	 XXX synerr
%3374:	getelementptr	 %2748 XXX
%3375:	load	 %3374
%3376:	br	 if.end447

BASIC BLOCK if.else440
%3377:	getelementptr	 %2748 XXX
%3378:	load	 %3377
%3379:	getelementptr	 %2748 XXX
%3380:	load	 %3379
%3381:	getelementptr	 %2748 XXX
%3382:	load	 %3381
%3383:	sub	 %3382 XXX
%3384:	call	 %3380 %3383 copysingl
%3385:	call	 %3378 %3384 link_machines
%3386:	br	 if.end447

BASIC BLOCK if.end447
%3387:	phi	 %3375 %3385
%3388:	br	 sw.epilog

BASIC BLOCK sw.bb448
%3389:	load	 madeany
%3390:	icmp	 %3389 XXX
%3391:	br	 %3390 if.then450 if.end461

BASIC BLOCK if.then450
%3392:	call	 cclinit
%3393:	store	 %3392 anyccl
%3394:	load	 anyccl
%3395:	call	 %3394 XXX ccladd
%3396:	load	 anyccl
%3397:	call	 %3396 cclnegate
%3398:	load	 useecs
%3399:	icmp	 %3398 XXX
%3400:	br	 %3399 if.end460 if.then453

BASIC BLOCK if.then453
%3401:	load	 ccltbl
%3402:	load	 anyccl
%3403:	sext	 %3402
%3404:	load	 cclmap
%3405:	getelementptr	 %3404 %3403
%3406:	load	 %3405
%3407:	sext	 %3406
%3408:	getelementptr	 %3401 %3407
%3409:	load	 anyccl
%3410:	sext	 %3409
%3411:	load	 ccllen
%3412:	getelementptr	 %3411 %3410
%3413:	load	 %3412
%3414:	load	 csize
%3415:	load	 csize
%3416:	call	 %3408 %3413 XXX XXX %3414 %3415 mkeccl
%3417:	br	 if.end460

BASIC BLOCK if.end460
%3418:	store	 XXX madeany
%3419:	br	 if.end461

BASIC BLOCK if.end461
%3420:	load	 rulelen
%3421:	add	 %3420 XXX
%3422:	store	 %3421 rulelen
%3423:	load	 anyccl
%3424:	sub	 XXX %3423
%3425:	call	 %3424 mkstate
%3426:	br	 sw.epilog

BASIC BLOCK sw.bb465
%3427:	load	 cclsorted
%3428:	icmp	 %3427 XXX
%3429:	br	 %3428 if.then467 if.end476

BASIC BLOCK if.then467
%3430:	load	 ccltbl
%3431:	getelementptr	 %2748 XXX
%3432:	load	 %3431
%3433:	sext	 %3432
%3434:	load	 cclmap
%3435:	getelementptr	 %3434 %3433
%3436:	load	 %3435
%3437:	sext	 %3436
%3438:	getelementptr	 %3430 %3437
%3439:	getelementptr	 %2748 XXX
%3440:	load	 %3439
%3441:	sext	 %3440
%3442:	load	 ccllen
%3443:	getelementptr	 %3442 %3441
%3444:	load	 %3443
%3445:	call	 %3438 %3444 XXX cshell
%3446:	br	 if.end476

BASIC BLOCK if.end476
%3447:	load	 useecs
%3448:	icmp	 %3447 XXX
%3449:	br	 %3448 if.end487 if.then478

BASIC BLOCK if.then478
%3450:	load	 ccltbl
%3451:	getelementptr	 %2748 XXX
%3452:	load	 %3451
%3453:	sext	 %3452
%3454:	load	 cclmap
%3455:	getelementptr	 %3454 %3453
%3456:	load	 %3455
%3457:	sext	 %3456
%3458:	getelementptr	 %3450 %3457
%3459:	getelementptr	 %2748 XXX
%3460:	load	 %3459
%3461:	sext	 %3460
%3462:	load	 ccllen
%3463:	getelementptr	 %3462 %3461
%3464:	load	 %3463
%3465:	load	 csize
%3466:	load	 csize
%3467:	call	 %3458 %3464 XXX XXX %3465 %3466 mkeccl
%3468:	br	 if.end487

BASIC BLOCK if.end487
%3469:	load	 rulelen
%3470:	add	 %3469 XXX
%3471:	store	 %3470 rulelen
%3472:	getelementptr	 %2748 XXX
%3473:	load	 %3472
%3474:	sub	 XXX %3473
%3475:	call	 %3474 mkstate
%3476:	br	 sw.epilog

BASIC BLOCK sw.bb492
%3477:	load	 rulelen
%3478:	add	 %3477 XXX
%3479:	store	 %3478 rulelen
%3480:	getelementptr	 %2748 XXX
%3481:	load	 %3480
%3482:	sub	 XXX %3481
%3483:	call	 %3482 mkstate
%3484:	br	 sw.epilog

BASIC BLOCK sw.bb497
%3485:	getelementptr	 %2748 XXX
%3486:	load	 %3485
%3487:	br	 sw.epilog

BASIC BLOCK sw.bb499
%3488:	getelementptr	 %2748 XXX
%3489:	load	 %3488
%3490:	br	 sw.epilog

BASIC BLOCK sw.bb501
%3491:	load	 rulelen
%3492:	add	 %3491 XXX
%3493:	store	 %3492 rulelen
%3494:	load	 caseins
%3495:	icmp	 %3494 XXX
%3496:	br	 %3495 if.end517 land.lhs.true504

BASIC BLOCK land.lhs.true504
%3497:	getelementptr	 %2748 XXX
%3498:	load	 %3497
%3499:	icmp	 %3498 XXX
%3500:	br	 %3499 if.end517 land.lhs.true508

BASIC BLOCK land.lhs.true508
%3501:	getelementptr	 %2748 XXX
%3502:	load	 %3501
%3503:	icmp	 %3502 XXX
%3504:	br	 %3503 if.end517 if.then512

BASIC BLOCK if.then512
%3505:	getelementptr	 %2748 XXX
%3506:	load	 %3505
%3507:	call	 %3506 clower
%3508:	zext	 %3507
%3509:	getelementptr	 %2748 XXX
%3510:	store	 %3508 %3509
%3511:	br	 if.end517

BASIC BLOCK if.end517
%3512:	getelementptr	 %2748 XXX
%3513:	load	 %3512
%3514:	call	 %3513 mkstate
%3515:	br	 sw.epilog

BASIC BLOCK sw.bb520
%3516:	getelementptr	 %2748 XXX
%3517:	load	 %3516
%3518:	br	 sw.epilog

BASIC BLOCK sw.bb522
%3519:	getelementptr	 %2748 XXX
%3520:	load	 %3519
%3521:	call	 %3520 cclnegate
%3522:	getelementptr	 %2748 XXX
%3523:	load	 %3522
%3524:	br	 sw.epilog

BASIC BLOCK sw.bb525
%3525:	load	 caseins
%3526:	icmp	 %3525 XXX
%3527:	br	 %3526 if.end554 if.then527

BASIC BLOCK if.then527
%3528:	getelementptr	 %2748 XXX
%3529:	load	 %3528
%3530:	icmp	 %3529 XXX
%3531:	br	 %3530 if.end540 land.lhs.true531

BASIC BLOCK land.lhs.true531
%3532:	getelementptr	 %2748 XXX
%3533:	load	 %3532
%3534:	icmp	 %3533 XXX
%3535:	br	 %3534 if.end540 if.then535

BASIC BLOCK if.then535
%3536:	getelementptr	 %2748 XXX
%3537:	load	 %3536
%3538:	call	 %3537 clower
%3539:	zext	 %3538
%3540:	getelementptr	 %2748 XXX
%3541:	store	 %3539 %3540
%3542:	br	 if.end540

BASIC BLOCK if.end540
%3543:	getelementptr	 %2748 XXX
%3544:	load	 %3543
%3545:	icmp	 %3544 XXX
%3546:	br	 %3545 if.end553 land.lhs.true544

BASIC BLOCK land.lhs.true544
%3547:	getelementptr	 %2748 XXX
%3548:	load	 %3547
%3549:	icmp	 %3548 XXX
%3550:	br	 %3549 if.end553 if.then548

BASIC BLOCK if.then548
%3551:	getelementptr	 %2748 XXX
%3552:	load	 %3551
%3553:	call	 %3552 clower
%3554:	zext	 %3553
%3555:	getelementptr	 %2748 XXX
%3556:	store	 %3554 %3555
%3557:	br	 if.end553

BASIC BLOCK if.end553
%3558:	br	 if.end554

BASIC BLOCK if.end554
%3559:	getelementptr	 %2748 XXX
%3560:	load	 %3559
%3561:	getelementptr	 %2748 XXX
%3562:	load	 %3561
%3563:	icmp	 %3560 %3562
%3564:	br	 %3563 if.else560 if.then559

BASIC BLOCK if.then559
%3565:	call	 XXX synerr
%3566:	br	 if.end576

BASIC BLOCK if.else560
%3567:	getelementptr	 %2748 XXX
%3568:	load	 %3567
%3569:	store	 %3568 i
%3570:	br	 for.cond562

BASIC BLOCK for.cond562
%3571:	load	 i
%3572:	getelementptr	 %2748 XXX
%3573:	load	 %3572
%3574:	icmp	 %3571 %3573
%3575:	br	 %3574 for.end570 for.body566

BASIC BLOCK for.body566
%3576:	getelementptr	 %2748 XXX
%3577:	load	 %3576
%3578:	load	 i
%3579:	call	 %3577 %3578 ccladd
%3580:	br	 for.inc568

BASIC BLOCK for.inc568
%3581:	load	 i
%3582:	add	 %3581 XXX
%3583:	store	 %3582 i
%3584:	br	 for.cond562

BASIC BLOCK for.end570
%3585:	load	 cclsorted
%3586:	icmp	 %3585 XXX
%3587:	br	 %3586 land.end land.rhs

BASIC BLOCK land.rhs
%3588:	getelementptr	 %2748 XXX
%3589:	load	 %3588
%3590:	load	 lastchar
%3591:	icmp	 %3589 %3590
%3592:	br	 land.end

BASIC BLOCK land.end
%3593:	phi	 XXX %3591
%3594:	zext	 %3593
%3595:	store	 %3594 cclsorted
%3596:	getelementptr	 %2748 XXX
%3597:	load	 %3596
%3598:	store	 %3597 lastchar
%3599:	br	 if.end576

BASIC BLOCK if.end576
%3600:	getelementptr	 %2748 XXX
%3601:	load	 %3600
%3602:	br	 sw.epilog

BASIC BLOCK sw.bb578
%3603:	load	 caseins
%3604:	icmp	 %3603 XXX
%3605:	br	 %3604 if.end593 land.lhs.true580

BASIC BLOCK land.lhs.true580
%3606:	getelementptr	 %2748 XXX
%3607:	load	 %3606
%3608:	icmp	 %3607 XXX
%3609:	br	 %3608 if.end593 land.lhs.true584

BASIC BLOCK land.lhs.true584
%3610:	getelementptr	 %2748 XXX
%3611:	load	 %3610
%3612:	icmp	 %3611 XXX
%3613:	br	 %3612 if.end593 if.then588

BASIC BLOCK if.then588
%3614:	getelementptr	 %2748 XXX
%3615:	load	 %3614
%3616:	call	 %3615 clower
%3617:	zext	 %3616
%3618:	getelementptr	 %2748 XXX
%3619:	store	 %3617 %3618
%3620:	br	 if.end593

BASIC BLOCK if.end593
%3621:	getelementptr	 %2748 XXX
%3622:	load	 %3621
%3623:	getelementptr	 %2748 XXX
%3624:	load	 %3623
%3625:	call	 %3622 %3624 ccladd
%3626:	load	 cclsorted
%3627:	icmp	 %3626 XXX
%3628:	br	 %3627 land.end601 land.rhs597

BASIC BLOCK land.rhs597
%3629:	getelementptr	 %2748 XXX
%3630:	load	 %3629
%3631:	load	 lastchar
%3632:	icmp	 %3630 %3631
%3633:	br	 land.end601

BASIC BLOCK land.end601
%3634:	phi	 XXX %3632
%3635:	zext	 %3634
%3636:	store	 %3635 cclsorted
%3637:	getelementptr	 %2748 XXX
%3638:	load	 %3637
%3639:	store	 %3638 lastchar
%3640:	getelementptr	 %2748 XXX
%3641:	load	 %3640
%3642:	br	 sw.epilog

BASIC BLOCK sw.bb605
%3643:	store	 XXX cclsorted
%3644:	store	 XXX lastchar
%3645:	call	 cclinit
%3646:	br	 sw.epilog

BASIC BLOCK sw.bb607
%3647:	load	 caseins
%3648:	icmp	 %3647 XXX
%3649:	br	 %3648 if.end622 land.lhs.true609

BASIC BLOCK land.lhs.true609
%3650:	getelementptr	 %2748 XXX
%3651:	load	 %3650
%3652:	icmp	 %3651 XXX
%3653:	br	 %3652 if.end622 land.lhs.true613

BASIC BLOCK land.lhs.true613
%3654:	getelementptr	 %2748 XXX
%3655:	load	 %3654
%3656:	icmp	 %3655 XXX
%3657:	br	 %3656 if.end622 if.then617

BASIC BLOCK if.then617
%3658:	getelementptr	 %2748 XXX
%3659:	load	 %3658
%3660:	call	 %3659 clower
%3661:	zext	 %3660
%3662:	getelementptr	 %2748 XXX
%3663:	store	 %3661 %3662
%3664:	br	 if.end622

BASIC BLOCK if.end622
%3665:	load	 rulelen
%3666:	add	 %3665 XXX
%3667:	store	 %3666 rulelen
%3668:	getelementptr	 %2748 XXX
%3669:	load	 %3668
%3670:	getelementptr	 %2748 XXX
%3671:	load	 %3670
%3672:	call	 %3671 mkstate
%3673:	call	 %3669 %3672 link_machines
%3674:	br	 sw.epilog

BASIC BLOCK sw.bb628
%3675:	call	 XXX mkstate
%3676:	br	 sw.epilog

BASIC BLOCK sw.epilog
%3677:	phi	 %2762 %3675 %3673 %3645 %3641 %3601 %3523 %3517 %3514 %3489 %3486 %3483 %3475 %3425 %3387 %3366 %3349 %3301 %3296 %3291 %3286 %3283 %3277 %3257 %3254 %3229 %3226 %2762 %3183 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762 %2762
%3678:	sext	 %2754
%3679:	sub	 XXX %3678
%3680:	getelementptr	 %2748 %3679
%3681:	sext	 %2754
%3682:	sub	 XXX %3681
%3683:	getelementptr	 %2749 %3682
%3684:	getelementptr	 %3680 XXX
%3685:	store	 %3677 %3684
%3686:	sext	 %2750
%3687:	getelementptr	 yyr1 XXX %3686
%3688:	load	 %3687
%3689:	sext	 %3688
%3690:	sub	 %3689 XXX
%3691:	sext	 %3690
%3692:	getelementptr	 yypgoto XXX %3691
%3693:	load	 %3692
%3694:	sext	 %3693
%3695:	load	 %3683
%3696:	sext	 %3695
%3697:	add	 %3694 %3696
%3698:	icmp	 %3697 XXX
%3699:	br	 %3698 if.else661 land.lhs.true647

BASIC BLOCK land.lhs.true647
%3700:	icmp	 %3697 XXX
%3701:	br	 %3700 if.else661 land.lhs.true650

BASIC BLOCK land.lhs.true650
%3702:	sext	 %3697
%3703:	getelementptr	 yycheck XXX %3702
%3704:	load	 %3703
%3705:	sext	 %3704
%3706:	load	 %3683
%3707:	sext	 %3706
%3708:	icmp	 %3705 %3707
%3709:	br	 %3708 if.else661 if.then657

BASIC BLOCK if.then657
%3710:	sext	 %3697
%3711:	getelementptr	 yytable XXX %3710
%3712:	load	 %3711
%3713:	sext	 %3712
%3714:	br	 if.end666

BASIC BLOCK if.else661
%3715:	sub	 %3689 XXX
%3716:	sext	 %3715
%3717:	getelementptr	 yydefgoto XXX %3716
%3718:	load	 %3717
%3719:	sext	 %3718
%3720:	br	 if.end666

BASIC BLOCK if.end666
%3721:	phi	 %3713 %3719
%3722:	br	 yynewstate

BASIC BLOCK yyerrlab
%3723:	icmp	 %2593 XXX
%3724:	br	 %3723 if.then668 if.end670

BASIC BLOCK if.then668
%3725:	load	 yynerrs
%3726:	add	 %3725 XXX
%3727:	store	 %3726 yynerrs
%3728:	call	 XXX yyerror
%3729:	br	 if.end670

BASIC BLOCK if.end670
%3730:	br	 yyerrlab1

BASIC BLOCK yyerrlab1
%3731:	icmp	 %2593 XXX
%3732:	br	 %3731 if.end678 if.then673

BASIC BLOCK if.then673
%3733:	load	 yychar
%3734:	icmp	 %3733 XXX
%3735:	br	 %3734 if.end677 if.then676

BASIC BLOCK if.then676
%3736:	br	 yyabortlab

BASIC BLOCK if.end677
%3737:	store	 XXX yychar
%3738:	br	 if.end678

BASIC BLOCK if.end678
%3739:	br	 yyerrhandle

BASIC BLOCK yyerrdefault
%3740:	br	 yyerrpop

BASIC BLOCK yyerrpop
%3741:	icmp	 %3750 %2660
%3742:	br	 %3741 if.end682 if.then681

BASIC BLOCK if.then681
%3743:	br	 yyabortlab

BASIC BLOCK if.end682
%3744:	getelementptr	 %3749 XXX
%3745:	getelementptr	 %3750 XXX
%3746:	load	 %3745
%3747:	sext	 %3746
%3748:	br	 yyerrhandle

BASIC BLOCK yyerrhandle
%3749:	phi	 %2661 %3744
%3750:	phi	 %2662 %3745
%3751:	phi	 %2596 %3747
%3752:	sext	 %3751
%3753:	getelementptr	 yypact XXX %3752
%3754:	load	 %3753
%3755:	sext	 %3754
%3756:	icmp	 %3755 XXX
%3757:	br	 %3756 if.end692 if.then691

BASIC BLOCK if.then691
%3758:	br	 yyerrdefault

BASIC BLOCK if.end692
%3759:	add	 %3755 XXX
%3760:	icmp	 %3759 XXX
%3761:	br	 %3760 lor.lhs.false696 if.then705

BASIC BLOCK lor.lhs.false696
%3762:	icmp	 %3759 XXX
%3763:	br	 %3762 lor.lhs.false699 if.then705

BASIC BLOCK lor.lhs.false699
%3764:	sext	 %3759
%3765:	getelementptr	 yycheck XXX %3764
%3766:	load	 %3765
%3767:	sext	 %3766
%3768:	icmp	 %3767 XXX
%3769:	br	 %3768 if.end706 if.then705

BASIC BLOCK if.then705
%3770:	br	 yyerrdefault

BASIC BLOCK if.end706
%3771:	sext	 %3759
%3772:	getelementptr	 yytable XXX %3771
%3773:	load	 %3772
%3774:	sext	 %3773
%3775:	icmp	 %3774 XXX
%3776:	br	 %3775 if.else718 if.then712

BASIC BLOCK if.then712
%3777:	icmp	 %3774 XXX
%3778:	br	 %3777 if.end716 if.then715

BASIC BLOCK if.then715
%3779:	br	 yyerrpop

BASIC BLOCK if.end716
%3780:	sub	 XXX %3774
%3781:	br	 yyreduce

BASIC BLOCK if.else718
%3782:	icmp	 %3774 XXX
%3783:	br	 %3782 if.end722 if.then721

BASIC BLOCK if.then721
%3784:	br	 yyerrpop

BASIC BLOCK if.end722
%3785:	br	 if.end723

BASIC BLOCK if.end723
%3786:	icmp	 %3774 XXX
%3787:	br	 %3786 if.end727 if.then726

BASIC BLOCK if.then726
%3788:	br	 yyacceptlab

BASIC BLOCK if.end727
%3789:	load	 yylval
%3790:	getelementptr	 %3749 XXX
%3791:	store	 %3789 %3790
%3792:	br	 yynewstate

BASIC BLOCK yyacceptlab
%3793:	icmp	 XXX XXX
%3794:	br	 %3793 if.end731 if.then730

BASIC BLOCK if.then730
%3795:	bitcast	 %2660
%3796:	call	 %3795 free
%3797:	bitcast	 %2659
%3798:	call	 %3797 free
%3799:	br	 if.end731

BASIC BLOCK if.end731
%3800:	br	 return

BASIC BLOCK yyabortlab
%3801:	phi	 %2639 %2659 %2659
%3802:	phi	 %2630 %2660 %2660
%3803:	icmp	 XXX XXX
%3804:	br	 %3803 if.end734 if.then733

BASIC BLOCK if.then733
%3805:	bitcast	 %3802
%3806:	call	 %3805 free
%3807:	bitcast	 %3801
%3808:	call	 %3807 free
%3809:	br	 if.end734

BASIC BLOCK if.end734
%3810:	br	 return

BASIC BLOCK return
%3811:	phi	 XXX XXX XXX
%3812:	ret	 %3811

FUNCTION pinpoint_message

BASIC BLOCK entry
%3813:	load	 linenum
%3814:	call	 str %3813 line_pinpoint
%3815:	ret	

FUNCTION cre8ecs

BASIC BLOCK entry
%3816:	br	 for.cond

BASIC BLOCK for.cond
%3817:	phi	 XXX %3849
%3818:	phi	 XXX %3847
%3819:	icmp	 %3817 num
%3820:	br	 %3819 for.end15 for.body

BASIC BLOCK for.body
%3821:	sext	 %3817
%3822:	getelementptr	 bck %3821
%3823:	load	 %3822
%3824:	icmp	 %3823 XXX
%3825:	br	 %3824 if.end if.then

BASIC BLOCK if.then
%3826:	add	 %3818 XXX
%3827:	sext	 %3817
%3828:	getelementptr	 bck %3827
%3829:	store	 %3826 %3828
%3830:	sext	 %3817
%3831:	getelementptr	 fwd %3830
%3832:	load	 %3831
%3833:	br	 for.cond6

BASIC BLOCK for.cond6
%3834:	phi	 %3832 %3844
%3835:	icmp	 %3834 XXX
%3836:	br	 %3835 for.end for.body8

BASIC BLOCK for.body8
%3837:	sub	 XXX %3826
%3838:	sext	 %3834
%3839:	getelementptr	 bck %3838
%3840:	store	 %3837 %3839
%3841:	br	 for.inc

BASIC BLOCK for.inc
%3842:	sext	 %3834
%3843:	getelementptr	 fwd %3842
%3844:	load	 %3843
%3845:	br	 for.cond6

BASIC BLOCK for.end
%3846:	br	 if.end

BASIC BLOCK if.end
%3847:	phi	 %3826 %3818
%3848:	br	 for.inc13

BASIC BLOCK for.inc13
%3849:	add	 %3817 XXX
%3850:	br	 for.cond

BASIC BLOCK for.end15
%3851:	ret	 %3818

FUNCTION ccl2ecl

BASIC BLOCK entry
%3852:	br	 for.cond

BASIC BLOCK for.cond
%3853:	phi	 XXX %3898
%3854:	load	 lastccl
%3855:	icmp	 %3853 %3854
%3856:	br	 %3855 for.end21 for.body

BASIC BLOCK for.body
%3857:	sext	 %3853
%3858:	load	 cclmap
%3859:	getelementptr	 %3858 %3857
%3860:	load	 %3859
%3861:	br	 for.cond1

BASIC BLOCK for.cond1
%3862:	phi	 XXX %3889
%3863:	phi	 XXX %3891
%3864:	sext	 %3853
%3865:	load	 ccllen
%3866:	getelementptr	 %3865 %3864
%3867:	load	 %3866
%3868:	icmp	 %3863 %3867
%3869:	br	 %3868 for.end for.body5

BASIC BLOCK for.body5
%3870:	add	 %3860 %3863
%3871:	sext	 %3870
%3872:	load	 ccltbl
%3873:	getelementptr	 %3872 %3871
%3874:	load	 %3873
%3875:	zext	 %3874
%3876:	sext	 %3875
%3877:	getelementptr	 ecgroup XXX %3876
%3878:	load	 %3877
%3879:	icmp	 %3878 XXX
%3880:	br	 %3879 if.end if.then

BASIC BLOCK if.then
%3881:	trunc	 %3878
%3882:	add	 %3860 %3862
%3883:	sext	 %3882
%3884:	load	 ccltbl
%3885:	getelementptr	 %3884 %3883
%3886:	store	 %3881 %3885
%3887:	add	 %3862 XXX
%3888:	br	 if.end

BASIC BLOCK if.end
%3889:	phi	 %3887 %3862
%3890:	br	 for.inc

BASIC BLOCK for.inc
%3891:	add	 %3863 XXX
%3892:	br	 for.cond1

BASIC BLOCK for.end
%3893:	sext	 %3853
%3894:	load	 ccllen
%3895:	getelementptr	 %3894 %3893
%3896:	store	 %3862 %3895
%3897:	br	 for.inc19

BASIC BLOCK for.inc19
%3898:	add	 %3853 XXX
%3899:	br	 for.cond

BASIC BLOCK for.end21
%3900:	ret	

FUNCTION ccladd

BASIC BLOCK entry
%3901:	call	 ch check_char
%3902:	sext	 cclp
%3903:	load	 ccllen
%3904:	getelementptr	 %3903 %3902
%3905:	load	 %3904
%3906:	sext	 cclp
%3907:	load	 cclmap
%3908:	getelementptr	 %3907 %3906
%3909:	load	 %3908
%3910:	br	 for.cond

BASIC BLOCK for.cond
%3911:	phi	 XXX %3924
%3912:	icmp	 %3911 %3905
%3913:	br	 %3912 for.end for.body

BASIC BLOCK for.body
%3914:	add	 %3909 %3911
%3915:	sext	 %3914
%3916:	load	 ccltbl
%3917:	getelementptr	 %3916 %3915
%3918:	load	 %3917
%3919:	zext	 %3918
%3920:	icmp	 %3919 ch
%3921:	br	 %3920 if.end if.then

BASIC BLOCK if.then
%3922:	br	 return

BASIC BLOCK if.end
%3923:	br	 for.inc

BASIC BLOCK for.inc
%3924:	add	 %3911 XXX
%3925:	br	 for.cond

BASIC BLOCK for.end
%3926:	add	 %3909 %3905
%3927:	load	 current_max_ccl_tbl_size
%3928:	icmp	 %3926 %3927
%3929:	br	 %3928 if.end13 if.then10

BASIC BLOCK if.then10
%3930:	load	 current_max_ccl_tbl_size
%3931:	add	 %3930 XXX
%3932:	store	 %3931 current_max_ccl_tbl_size
%3933:	load	 num_reallocs
%3934:	add	 %3933 XXX
%3935:	store	 %3934 num_reallocs
%3936:	load	 ccltbl
%3937:	load	 current_max_ccl_tbl_size
%3938:	call	 %3936 %3937 XXX reallocate_array
%3939:	store	 %3938 ccltbl
%3940:	br	 if.end13

BASIC BLOCK if.end13
%3941:	add	 %3905 XXX
%3942:	sext	 cclp
%3943:	load	 ccllen
%3944:	getelementptr	 %3943 %3942
%3945:	store	 %3941 %3944
%3946:	trunc	 ch
%3947:	sext	 %3926
%3948:	load	 ccltbl
%3949:	getelementptr	 %3948 %3947
%3950:	store	 %3946 %3949
%3951:	br	 return

BASIC BLOCK return
%3952:	ret	

FUNCTION check_char

BASIC BLOCK entry
%3953:	icmp	 c XXX
%3954:	br	 %3953 if.end if.then

BASIC BLOCK if.then
%3955:	call	 c readable_form
%3956:	call	 XXX %3955 lerrsf
%3957:	br	 if.end

BASIC BLOCK if.end
%3958:	load	 csize
%3959:	icmp	 c %3958
%3960:	br	 %3959 if.end4 if.then2

BASIC BLOCK if.then2
%3961:	call	 c readable_form
%3962:	call	 XXX %3961 lerrsf
%3963:	br	 if.end4

BASIC BLOCK if.end4
%3964:	ret	

FUNCTION reallocate_array

BASIC BLOCK entry
%3965:	mul	 size element_size
%3966:	icmp	 %3965 XXX
%3967:	br	 %3966 if.end if.then

BASIC BLOCK if.then
%3968:	call	 XXX flexfatal
%3969:	br	 if.end

BASIC BLOCK if.end
%3970:	mul	 size element_size
%3971:	call	 array %3970 flex_realloc
%3972:	icmp	 %3971 XXX
%3973:	br	 %3972 if.end4 if.then3

BASIC BLOCK if.then3
%3974:	call	 XXX flexfatal
%3975:	br	 if.end4

BASIC BLOCK if.end4
%3976:	ret	 %3971

FUNCTION cclinit

BASIC BLOCK entry
%3977:	load	 lastccl
%3978:	add	 %3977 XXX
%3979:	store	 %3978 lastccl
%3980:	load	 current_maxccls
%3981:	icmp	 %3978 %3980
%3982:	br	 %3981 if.end if.then

BASIC BLOCK if.then
%3983:	load	 current_maxccls
%3984:	add	 %3983 XXX
%3985:	store	 %3984 current_maxccls
%3986:	load	 num_reallocs
%3987:	add	 %3986 XXX
%3988:	store	 %3987 num_reallocs
%3989:	load	 cclmap
%3990:	bitcast	 %3989
%3991:	load	 current_maxccls
%3992:	call	 %3990 %3991 XXX reallocate_array
%3993:	bitcast	 %3992
%3994:	store	 %3993 cclmap
%3995:	load	 ccllen
%3996:	bitcast	 %3995
%3997:	load	 current_maxccls
%3998:	call	 %3996 %3997 XXX reallocate_array
%3999:	bitcast	 %3998
%4000:	store	 %3999 ccllen
%4001:	load	 cclng
%4002:	bitcast	 %4001
%4003:	load	 current_maxccls
%4004:	call	 %4002 %4003 XXX reallocate_array
%4005:	bitcast	 %4004
%4006:	store	 %4005 cclng
%4007:	br	 if.end

BASIC BLOCK if.end
%4008:	load	 lastccl
%4009:	icmp	 %4008 XXX
%4010:	br	 %4009 if.else if.then5

BASIC BLOCK if.then5
%4011:	load	 lastccl
%4012:	sext	 %4011
%4013:	load	 cclmap
%4014:	getelementptr	 %4013 %4012
%4015:	store	 XXX %4014
%4016:	br	 if.end14

BASIC BLOCK if.else
%4017:	load	 lastccl
%4018:	sub	 %4017 XXX
%4019:	sext	 %4018
%4020:	load	 cclmap
%4021:	getelementptr	 %4020 %4019
%4022:	load	 %4021
%4023:	load	 lastccl
%4024:	sub	 %4023 XXX
%4025:	sext	 %4024
%4026:	load	 ccllen
%4027:	getelementptr	 %4026 %4025
%4028:	load	 %4027
%4029:	add	 %4022 %4028
%4030:	load	 lastccl
%4031:	sext	 %4030
%4032:	load	 cclmap
%4033:	getelementptr	 %4032 %4031
%4034:	store	 %4029 %4033
%4035:	br	 if.end14

BASIC BLOCK if.end14
%4036:	load	 lastccl
%4037:	sext	 %4036
%4038:	load	 ccllen
%4039:	getelementptr	 %4038 %4037
%4040:	store	 XXX %4039
%4041:	load	 lastccl
%4042:	sext	 %4041
%4043:	load	 cclng
%4044:	getelementptr	 %4043 %4042
%4045:	store	 XXX %4044
%4046:	load	 lastccl
%4047:	ret	 %4046

FUNCTION cclnegate

BASIC BLOCK entry
%4048:	sext	 cclp
%4049:	load	 cclng
%4050:	getelementptr	 %4049 %4048
%4051:	store	 XXX %4050
%4052:	ret	

FUNCTION list_character_set

BASIC BLOCK entry
%4053:	call	 XXX file _IO_putc
%4054:	br	 for.cond

BASIC BLOCK for.cond
%4055:	phi	 XXX %4092
%4056:	load	 csize
%4057:	icmp	 %4055 %4056
%4058:	br	 %4057 for.end for.body

BASIC BLOCK for.body
%4059:	sext	 %4055
%4060:	getelementptr	 cset %4059
%4061:	load	 %4060
%4062:	icmp	 %4061 XXX
%4063:	br	 %4062 if.end14 if.then

BASIC BLOCK if.then
%4064:	call	 XXX file _IO_putc
%4065:	call	 %4055 readable_form
%4066:	call	 %4065 file fputs
%4067:	br	 while.cond

BASIC BLOCK while.cond
%4068:	phi	 %4055 %4069
%4069:	add	 %4068 XXX
%4070:	load	 csize
%4071:	icmp	 %4069 %4070
%4072:	br	 %4071 land.end land.rhs

BASIC BLOCK land.rhs
%4073:	sext	 %4069
%4074:	getelementptr	 cset %4073
%4075:	load	 %4074
%4076:	icmp	 %4075 XXX
%4077:	br	 land.end

BASIC BLOCK land.end
%4078:	phi	 XXX %4076
%4079:	br	 %4078 while.end while.body

BASIC BLOCK while.body
%4080:	br	 while.cond

BASIC BLOCK while.end
%4081:	sub	 %4069 XXX
%4082:	icmp	 %4081 %4055
%4083:	br	 %4082 if.end if.then9

BASIC BLOCK if.then9
%4084:	sub	 %4069 XXX
%4085:	call	 %4084 readable_form
%4086:	call	 file XXX %4085 fprintf
%4087:	br	 if.end

BASIC BLOCK if.end
%4088:	call	 XXX file _IO_putc
%4089:	br	 if.end14

BASIC BLOCK if.end14
%4090:	phi	 %4069 %4055
%4091:	br	 for.inc

BASIC BLOCK for.inc
%4092:	add	 %4090 XXX
%4093:	br	 for.cond

BASIC BLOCK for.end
%4094:	call	 XXX file _IO_putc
%4095:	ret	

FUNCTION readable_form

BASIC BLOCK entry
%4096:	icmp	 c XXX
%4097:	br	 %4096 lor.lhs.false land.lhs.true

BASIC BLOCK land.lhs.true
%4098:	icmp	 c XXX
%4099:	br	 %4098 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4100:	icmp	 c XXX
%4101:	br	 %4100 if.else if.then

BASIC BLOCK if.then
%4102:	switch	 c sw.default XXX sw.bb XXX sw.bb3 XXX sw.bb4 XXX sw.bb5 XXX sw.bb6 XXX sw.bb7 XXX sw.bb8

BASIC BLOCK sw.bb
%4103:	br	 return

BASIC BLOCK sw.bb3
%4104:	br	 return

BASIC BLOCK sw.bb4
%4105:	br	 return

BASIC BLOCK sw.bb5
%4106:	br	 return

BASIC BLOCK sw.bb6
%4107:	br	 return

BASIC BLOCK sw.bb7
%4108:	br	 return

BASIC BLOCK sw.bb8
%4109:	br	 return

BASIC BLOCK sw.default
%4110:	call	 XXX XXX c sprintf
%4111:	br	 return

BASIC BLOCK if.else
%4112:	icmp	 c XXX
%4113:	br	 %4112 if.else11 if.then10

BASIC BLOCK if.then10
%4114:	br	 return

BASIC BLOCK if.else11
%4115:	trunc	 c
%4116:	store	 %4115 XXX
%4117:	store	 XXX XXX
%4118:	br	 return

BASIC BLOCK return
%4119:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
%4120:	ret	 %4119

FUNCTION check_for_backing_up

BASIC BLOCK entry
%4121:	load	 reject
%4122:	icmp	 %4121 XXX
%4123:	br	 %4122 lor.lhs.false land.lhs.true

BASIC BLOCK land.lhs.true
%4124:	sext	 ds
%4125:	load	 dfaacc
%4126:	getelementptr	 %4125 %4124
%4127:	bitcast	 %4126
%4128:	load	 %4127
%4129:	icmp	 %4128 XXX
%4130:	br	 %4129 if.then lor.lhs.false

BASIC BLOCK lor.lhs.false
%4131:	load	 reject
%4132:	icmp	 %4131 XXX
%4133:	br	 %4132 land.lhs.true3 if.end10

BASIC BLOCK land.lhs.true3
%4134:	sext	 ds
%4135:	load	 dfaacc
%4136:	getelementptr	 %4135 %4134
%4137:	bitcast	 %4136
%4138:	load	 %4137
%4139:	icmp	 %4138 XXX
%4140:	br	 %4139 if.then if.end10

BASIC BLOCK if.then
%4141:	load	 num_backing_up
%4142:	add	 %4141 XXX
%4143:	store	 %4142 num_backing_up
%4144:	load	 backing_up_report
%4145:	icmp	 %4144 XXX
%4146:	br	 %4145 if.end if.then8

BASIC BLOCK if.then8
%4147:	load	 backing_up_file
%4148:	call	 %4147 XXX ds fprintf
%4149:	load	 backing_up_file
%4150:	call	 %4149 ds dump_associated_rules
%4151:	load	 backing_up_file
%4152:	call	 %4151 state dump_transitions
%4153:	load	 backing_up_file
%4154:	call	 XXX %4153 _IO_putc
%4155:	br	 if.end

BASIC BLOCK if.end
%4156:	br	 if.end10

BASIC BLOCK if.end10
%4157:	ret	

FUNCTION dump_associated_rules

BASIC BLOCK entry
%4158:	alloca	 XXX
%4159:	sext	 ds
%4160:	load	 dss
%4161:	getelementptr	 %4160 %4159
%4162:	load	 %4161
%4163:	sext	 ds
%4164:	load	 dfasiz
%4165:	getelementptr	 %4164 %4163
%4166:	load	 %4165
%4167:	br	 for.cond

BASIC BLOCK for.cond
%4168:	phi	 XXX %4209
%4169:	phi	 XXX %4207
%4170:	icmp	 %4168 %4166
%4171:	br	 %4170 for.end26 for.body

BASIC BLOCK for.body
%4172:	sext	 %4168
%4173:	getelementptr	 %4162 %4172
%4174:	load	 %4173
%4175:	sext	 %4174
%4176:	load	 assoc_rule
%4177:	getelementptr	 %4176 %4175
%4178:	load	 %4177
%4179:	sext	 %4178
%4180:	load	 rule_linenum
%4181:	getelementptr	 %4180 %4179
%4182:	load	 %4181
%4183:	br	 for.cond9

BASIC BLOCK for.cond9
%4184:	phi	 XXX %4194
%4185:	icmp	 %4184 %4169
%4186:	br	 %4185 for.end for.body11

BASIC BLOCK for.body11
%4187:	sext	 %4184
%4188:	getelementptr	 %4158 XXX %4187
%4189:	load	 %4188
%4190:	icmp	 %4182 %4189
%4191:	br	 %4190 if.end if.then

BASIC BLOCK if.then
%4192:	br	 for.end

BASIC BLOCK if.end
%4193:	br	 for.inc

BASIC BLOCK for.inc
%4194:	add	 %4184 XXX
%4195:	br	 for.cond9

BASIC BLOCK for.end
%4196:	icmp	 %4184 %4169
%4197:	br	 %4196 if.end23 if.then16

BASIC BLOCK if.then16
%4198:	icmp	 %4169 XXX
%4199:	br	 %4198 if.end22 if.then18

BASIC BLOCK if.then18
%4200:	add	 %4169 XXX
%4201:	sext	 %4200
%4202:	getelementptr	 %4158 XXX %4201
%4203:	store	 %4182 %4202
%4204:	br	 if.end22

BASIC BLOCK if.end22
%4205:	phi	 %4200 %4169
%4206:	br	 if.end23

BASIC BLOCK if.end23
%4207:	phi	 %4205 %4169
%4208:	br	 for.inc24

BASIC BLOCK for.inc24
%4209:	add	 %4168 XXX
%4210:	br	 for.cond

BASIC BLOCK for.end26
%4211:	getelementptr	 %4158 XXX XXX
%4212:	call	 %4211 %4169 bubble
%4213:	call	 file XXX fprintf
%4214:	br	 for.cond27

BASIC BLOCK for.cond27
%4215:	phi	 XXX %4228
%4216:	icmp	 %4215 %4169
%4217:	br	 %4216 for.end39 for.body29

BASIC BLOCK for.body29
%4218:	srem	 %4215 XXX
%4219:	icmp	 %4218 XXX
%4220:	br	 %4219 if.end33 if.then31

BASIC BLOCK if.then31
%4221:	call	 XXX file _IO_putc
%4222:	br	 if.end33

BASIC BLOCK if.end33
%4223:	sext	 %4215
%4224:	getelementptr	 %4158 XXX %4223
%4225:	load	 %4224
%4226:	call	 file XXX %4225 fprintf
%4227:	br	 for.inc37

BASIC BLOCK for.inc37
%4228:	add	 %4215 XXX
%4229:	br	 for.cond27

BASIC BLOCK for.end39
%4230:	call	 XXX file _IO_putc
%4231:	ret	

FUNCTION dump_transitions

BASIC BLOCK entry
%4232:	alloca	 XXX
%4233:	br	 for.cond

BASIC BLOCK for.cond
%4234:	phi	 XXX %4260
%4235:	load	 csize
%4236:	icmp	 %4234 %4235
%4237:	br	 %4236 for.end for.body

BASIC BLOCK for.body
%4238:	sext	 %4234
%4239:	getelementptr	 ecgroup XXX %4238
%4240:	load	 %4239
%4241:	icmp	 %4240 XXX
%4242:	br	 %4241 cond.false cond.true

BASIC BLOCK cond.true
%4243:	sext	 %4234
%4244:	getelementptr	 ecgroup XXX %4243
%4245:	load	 %4244
%4246:	sub	 XXX %4245
%4247:	br	 cond.end

BASIC BLOCK cond.false
%4248:	sext	 %4234
%4249:	getelementptr	 ecgroup XXX %4248
%4250:	load	 %4249
%4251:	br	 cond.end

BASIC BLOCK cond.end
%4252:	phi	 %4246 %4250
%4253:	sext	 %4252
%4254:	getelementptr	 state %4253
%4255:	load	 %4254
%4256:	sext	 %4234
%4257:	getelementptr	 %4232 XXX %4256
%4258:	store	 %4255 %4257
%4259:	br	 for.inc

BASIC BLOCK for.inc
%4260:	add	 %4234 XXX
%4261:	br	 for.cond

BASIC BLOCK for.end
%4262:	call	 file XXX fprintf
%4263:	getelementptr	 %4232 XXX XXX
%4264:	call	 file %4263 list_character_set
%4265:	br	 for.cond10

BASIC BLOCK for.cond10
%4266:	phi	 XXX %4280
%4267:	load	 csize
%4268:	icmp	 %4266 %4267
%4269:	br	 %4268 for.end19 for.body12

BASIC BLOCK for.body12
%4270:	sext	 %4266
%4271:	getelementptr	 %4232 XXX %4270
%4272:	load	 %4271
%4273:	icmp	 %4272 XXX
%4274:	xor	 %4273 XXX
%4275:	zext	 %4274
%4276:	sext	 %4266
%4277:	getelementptr	 %4232 XXX %4276
%4278:	store	 %4275 %4277
%4279:	br	 for.inc17

BASIC BLOCK for.inc17
%4280:	add	 %4266 XXX
%4281:	br	 for.cond10

BASIC BLOCK for.end19
%4282:	call	 file XXX fprintf
%4283:	getelementptr	 %4232 XXX XXX
%4284:	call	 file %4283 list_character_set
%4285:	call	 XXX file _IO_putc
%4286:	ret	

FUNCTION check_trailing_context

BASIC BLOCK entry
%4287:	br	 for.cond

BASIC BLOCK for.cond
%4288:	phi	 XXX %4335
%4289:	icmp	 %4288 num_states
%4290:	br	 %4289 for.end23 for.body

BASIC BLOCK for.body
%4291:	sext	 %4288
%4292:	getelementptr	 nfa_states %4291
%4293:	load	 %4292
%4294:	sext	 %4293
%4295:	load	 state_type
%4296:	getelementptr	 %4295 %4294
%4297:	load	 %4296
%4298:	sext	 %4293
%4299:	load	 assoc_rule
%4300:	getelementptr	 %4299 %4298
%4301:	load	 %4300
%4302:	icmp	 %4297 XXX
%4303:	br	 %4302 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%4304:	sext	 %4301
%4305:	load	 rule_type
%4306:	getelementptr	 %4305 %4304
%4307:	load	 %4306
%4308:	icmp	 %4307 XXX
%4309:	br	 %4308 if.else if.then

BASIC BLOCK if.then
%4310:	br	 if.end20

BASIC BLOCK if.else
%4311:	icmp	 %4297 XXX
%4312:	br	 %4311 if.end19 if.then10

BASIC BLOCK if.then10
%4313:	br	 for.cond11

BASIC BLOCK for.cond11
%4314:	phi	 XXX %4330
%4315:	icmp	 %4314 nacc
%4316:	br	 %4315 for.end for.body13

BASIC BLOCK for.body13
%4317:	sext	 %4314
%4318:	getelementptr	 accset %4317
%4319:	load	 %4318
%4320:	and	 %4319 XXX
%4321:	icmp	 %4320 XXX
%4322:	br	 %4321 if.end if.then16

BASIC BLOCK if.then16
%4323:	sext	 %4301
%4324:	load	 rule_linenum
%4325:	getelementptr	 %4324 %4323
%4326:	load	 %4325
%4327:	call	 XXX %4326 line_warning
%4328:	br	 for.end23

BASIC BLOCK if.end
%4329:	br	 for.inc

BASIC BLOCK for.inc
%4330:	add	 %4314 XXX
%4331:	br	 for.cond11

BASIC BLOCK for.end
%4332:	br	 if.end19

BASIC BLOCK if.end19
%4333:	br	 if.end20

BASIC BLOCK if.end20
%4334:	br	 for.inc21

BASIC BLOCK for.inc21
%4335:	add	 %4288 XXX
%4336:	br	 for.cond

BASIC BLOCK for.end23
%4337:	ret	

FUNCTION bubble

BASIC BLOCK entry
%4338:	br	 for.cond

BASIC BLOCK for.cond
%4339:	phi	 n %4374
%4340:	icmp	 %4339 XXX
%4341:	br	 %4340 for.end18 for.body

BASIC BLOCK for.body
%4342:	br	 for.cond1

BASIC BLOCK for.cond1
%4343:	phi	 XXX %4371
%4344:	icmp	 %4343 %4339
%4345:	br	 %4344 for.end for.body3

BASIC BLOCK for.body3
%4346:	sext	 %4343
%4347:	getelementptr	 v %4346
%4348:	load	 %4347
%4349:	add	 %4343 XXX
%4350:	sext	 %4349
%4351:	getelementptr	 v %4350
%4352:	load	 %4351
%4353:	icmp	 %4348 %4352
%4354:	br	 %4353 if.end if.then

BASIC BLOCK if.then
%4355:	sext	 %4343
%4356:	getelementptr	 v %4355
%4357:	load	 %4356
%4358:	add	 %4343 XXX
%4359:	sext	 %4358
%4360:	getelementptr	 v %4359
%4361:	load	 %4360
%4362:	sext	 %4343
%4363:	getelementptr	 v %4362
%4364:	store	 %4361 %4363
%4365:	add	 %4343 XXX
%4366:	sext	 %4365
%4367:	getelementptr	 v %4366
%4368:	store	 %4357 %4367
%4369:	br	 if.end

BASIC BLOCK if.end
%4370:	br	 for.inc

BASIC BLOCK for.inc
%4371:	add	 %4343 XXX
%4372:	br	 for.cond1

BASIC BLOCK for.end
%4373:	br	 for.inc17

BASIC BLOCK for.inc17
%4374:	add	 %4339 XXX
%4375:	br	 for.cond

BASIC BLOCK for.end18
%4376:	ret	

FUNCTION epsclosure

BASIC BLOCK entry
%4377:	load	 ns_addr
%4378:	load	 epsclosure.did_stk_init
%4379:	icmp	 %4378 XXX
%4380:	br	 %4379 if.then if.end

BASIC BLOCK if.then
%4381:	load	 current_max_dfa_size
%4382:	call	 %4381 XXX allocate_array
%4383:	bitcast	 %4382
%4384:	store	 %4383 epsclosure.stk
%4385:	store	 XXX epsclosure.did_stk_init
%4386:	br	 if.end

BASIC BLOCK if.end
%4387:	br	 for.cond

BASIC BLOCK for.cond
%4388:	phi	 XXX %4453
%4389:	phi	 XXX %4454
%4390:	phi	 XXX %4455
%4391:	phi	 XXX %4458
%4392:	phi	 t %4456
%4393:	icmp	 %4391 %4377
%4394:	br	 %4393 for.end for.body

BASIC BLOCK for.body
%4395:	sext	 %4391
%4396:	getelementptr	 %4392 %4395
%4397:	load	 %4396
%4398:	sext	 %4397
%4399:	load	 trans1
%4400:	getelementptr	 %4399 %4398
%4401:	load	 %4400
%4402:	icmp	 %4401 XXX
%4403:	br	 %4402 if.then4 if.end26

BASIC BLOCK if.then4
%4404:	add	 %4390 XXX
%4405:	load	 current_max_dfa_size
%4406:	icmp	 %4404 %4405
%4407:	br	 %4406 if.end10 if.then6

BASIC BLOCK if.then6
%4408:	load	 current_max_dfa_size
%4409:	add	 %4408 XXX
%4410:	store	 %4409 current_max_dfa_size
%4411:	load	 num_reallocs
%4412:	add	 %4411 XXX
%4413:	store	 %4412 num_reallocs
%4414:	bitcast	 %4392
%4415:	load	 current_max_dfa_size
%4416:	call	 %4414 %4415 XXX reallocate_array
%4417:	bitcast	 %4416
%4418:	load	 epsclosure.stk
%4419:	bitcast	 %4418
%4420:	load	 current_max_dfa_size
%4421:	call	 %4419 %4420 XXX reallocate_array
%4422:	bitcast	 %4421
%4423:	store	 %4422 epsclosure.stk
%4424:	br	 if.end10

BASIC BLOCK if.end10
%4425:	phi	 %4417 %4392
%4426:	sext	 %4404
%4427:	load	 epsclosure.stk
%4428:	getelementptr	 %4427 %4426
%4429:	store	 %4397 %4428
%4430:	sext	 %4397
%4431:	load	 trans1
%4432:	getelementptr	 %4431 %4430
%4433:	load	 %4432
%4434:	sub	 %4433 XXX
%4435:	sext	 %4397
%4436:	load	 trans1
%4437:	getelementptr	 %4436 %4435
%4438:	store	 %4434 %4437
%4439:	sext	 %4397
%4440:	load	 accptnum
%4441:	getelementptr	 %4440 %4439
%4442:	load	 %4441
%4443:	icmp	 %4442 XXX
%4444:	br	 %4443 if.end24 if.then20

BASIC BLOCK if.then20
%4445:	add	 %4388 XXX
%4446:	sext	 %4445
%4447:	getelementptr	 accset %4446
%4448:	store	 %4442 %4447
%4449:	br	 if.end24

BASIC BLOCK if.end24
%4450:	phi	 %4445 %4388
%4451:	add	 %4389 %4397
%4452:	br	 if.end26

BASIC BLOCK if.end26
%4453:	phi	 %4388 %4450
%4454:	phi	 %4389 %4451
%4455:	phi	 %4390 %4404
%4456:	phi	 %4392 %4425
%4457:	br	 for.inc

BASIC BLOCK for.inc
%4458:	add	 %4391 XXX
%4459:	br	 for.cond

BASIC BLOCK for.end
%4460:	br	 for.cond28

BASIC BLOCK for.cond28
%4461:	phi	 %4388 %4693
%4462:	phi	 %4377 %4694
%4463:	phi	 XXX %4699
%4464:	phi	 %4389 %4695
%4465:	phi	 %4390 %4696
%4466:	phi	 %4392 %4697
%4467:	icmp	 %4463 %4465
%4468:	br	 %4467 for.end140 for.body30

BASIC BLOCK for.body30
%4469:	sext	 %4463
%4470:	load	 epsclosure.stk
%4471:	getelementptr	 %4470 %4469
%4472:	load	 %4471
%4473:	sext	 %4472
%4474:	load	 transchar
%4475:	getelementptr	 %4474 %4473
%4476:	load	 %4475
%4477:	icmp	 %4476 XXX
%4478:	br	 %4477 if.end137 if.then36

BASIC BLOCK if.then36
%4479:	sext	 %4472
%4480:	load	 trans1
%4481:	getelementptr	 %4480 %4479
%4482:	load	 %4481
%4483:	add	 %4482 XXX
%4484:	icmp	 %4483 XXX
%4485:	br	 %4484 if.end136 if.then41

BASIC BLOCK if.then41
%4486:	sext	 %4483
%4487:	load	 trans1
%4488:	getelementptr	 %4487 %4486
%4489:	load	 %4488
%4490:	icmp	 %4489 XXX
%4491:	br	 %4490 if.then45 if.end86

BASIC BLOCK if.then45
%4492:	add	 %4465 XXX
%4493:	load	 current_max_dfa_size
%4494:	icmp	 %4492 %4493
%4495:	br	 %4494 if.end53 if.then48

BASIC BLOCK if.then48
%4496:	load	 current_max_dfa_size
%4497:	add	 %4496 XXX
%4498:	store	 %4497 current_max_dfa_size
%4499:	load	 num_reallocs
%4500:	add	 %4499 XXX
%4501:	store	 %4500 num_reallocs
%4502:	bitcast	 %4466
%4503:	load	 current_max_dfa_size
%4504:	call	 %4502 %4503 XXX reallocate_array
%4505:	bitcast	 %4504
%4506:	load	 epsclosure.stk
%4507:	bitcast	 %4506
%4508:	load	 current_max_dfa_size
%4509:	call	 %4507 %4508 XXX reallocate_array
%4510:	bitcast	 %4509
%4511:	store	 %4510 epsclosure.stk
%4512:	br	 if.end53

BASIC BLOCK if.end53
%4513:	phi	 %4505 %4466
%4514:	sext	 %4492
%4515:	load	 epsclosure.stk
%4516:	getelementptr	 %4515 %4514
%4517:	store	 %4483 %4516
%4518:	sext	 %4483
%4519:	load	 trans1
%4520:	getelementptr	 %4519 %4518
%4521:	load	 %4520
%4522:	sub	 %4521 XXX
%4523:	sext	 %4483
%4524:	load	 trans1
%4525:	getelementptr	 %4524 %4523
%4526:	store	 %4522 %4525
%4527:	sext	 %4483
%4528:	load	 accptnum
%4529:	getelementptr	 %4528 %4527
%4530:	load	 %4529
%4531:	icmp	 %4530 XXX
%4532:	br	 %4531 if.end68 if.then64

BASIC BLOCK if.then64
%4533:	add	 %4461 XXX
%4534:	sext	 %4533
%4535:	getelementptr	 accset %4534
%4536:	store	 %4530 %4535
%4537:	br	 if.end68

BASIC BLOCK if.end68
%4538:	phi	 %4533 %4461
%4539:	icmp	 %4530 XXX
%4540:	br	 %4539 lor.lhs.false if.then73

BASIC BLOCK lor.lhs.false
%4541:	sext	 %4483
%4542:	load	 transchar
%4543:	getelementptr	 %4542 %4541
%4544:	load	 %4543
%4545:	icmp	 %4544 XXX
%4546:	br	 %4545 if.end85 if.then73

BASIC BLOCK if.then73
%4547:	add	 %4462 XXX
%4548:	load	 current_max_dfa_size
%4549:	icmp	 %4547 %4548
%4550:	br	 %4549 if.end81 if.then76

BASIC BLOCK if.then76
%4551:	load	 current_max_dfa_size
%4552:	add	 %4551 XXX
%4553:	store	 %4552 current_max_dfa_size
%4554:	load	 num_reallocs
%4555:	add	 %4554 XXX
%4556:	store	 %4555 num_reallocs
%4557:	bitcast	 %4513
%4558:	load	 current_max_dfa_size
%4559:	call	 %4557 %4558 XXX reallocate_array
%4560:	bitcast	 %4559
%4561:	load	 epsclosure.stk
%4562:	bitcast	 %4561
%4563:	load	 current_max_dfa_size
%4564:	call	 %4562 %4563 XXX reallocate_array
%4565:	bitcast	 %4564
%4566:	store	 %4565 epsclosure.stk
%4567:	br	 if.end81

BASIC BLOCK if.end81
%4568:	phi	 %4560 %4513
%4569:	sext	 %4547
%4570:	getelementptr	 %4568 %4569
%4571:	store	 %4483 %4570
%4572:	add	 %4464 %4483
%4573:	br	 if.end85

BASIC BLOCK if.end85
%4574:	phi	 %4547 %4462
%4575:	phi	 %4572 %4464
%4576:	phi	 %4568 %4513
%4577:	br	 if.end86

BASIC BLOCK if.end86
%4578:	phi	 %4461 %4538
%4579:	phi	 %4462 %4574
%4580:	phi	 %4464 %4575
%4581:	phi	 %4465 %4492
%4582:	phi	 %4466 %4576
%4583:	sext	 %4472
%4584:	load	 trans2
%4585:	getelementptr	 %4584 %4583
%4586:	load	 %4585
%4587:	icmp	 %4586 XXX
%4588:	br	 %4587 if.end135 land.lhs.true

BASIC BLOCK land.lhs.true
%4589:	sext	 %4586
%4590:	load	 trans1
%4591:	getelementptr	 %4590 %4589
%4592:	load	 %4591
%4593:	icmp	 %4592 XXX
%4594:	br	 %4593 if.then93 if.end135

BASIC BLOCK if.then93
%4595:	add	 %4581 XXX
%4596:	load	 current_max_dfa_size
%4597:	icmp	 %4595 %4596
%4598:	br	 %4597 if.end101 if.then96

BASIC BLOCK if.then96
%4599:	load	 current_max_dfa_size
%4600:	add	 %4599 XXX
%4601:	store	 %4600 current_max_dfa_size
%4602:	load	 num_reallocs
%4603:	add	 %4602 XXX
%4604:	store	 %4603 num_reallocs
%4605:	bitcast	 %4582
%4606:	load	 current_max_dfa_size
%4607:	call	 %4605 %4606 XXX reallocate_array
%4608:	bitcast	 %4607
%4609:	load	 epsclosure.stk
%4610:	bitcast	 %4609
%4611:	load	 current_max_dfa_size
%4612:	call	 %4610 %4611 XXX reallocate_array
%4613:	bitcast	 %4612
%4614:	store	 %4613 epsclosure.stk
%4615:	br	 if.end101

BASIC BLOCK if.end101
%4616:	phi	 %4608 %4582
%4617:	sext	 %4595
%4618:	load	 epsclosure.stk
%4619:	getelementptr	 %4618 %4617
%4620:	store	 %4586 %4619
%4621:	sext	 %4586
%4622:	load	 trans1
%4623:	getelementptr	 %4622 %4621
%4624:	load	 %4623
%4625:	sub	 %4624 XXX
%4626:	sext	 %4586
%4627:	load	 trans1
%4628:	getelementptr	 %4627 %4626
%4629:	store	 %4625 %4628
%4630:	sext	 %4586
%4631:	load	 accptnum
%4632:	getelementptr	 %4631 %4630
%4633:	load	 %4632
%4634:	icmp	 %4633 XXX
%4635:	br	 %4634 if.end116 if.then112

BASIC BLOCK if.then112
%4636:	add	 %4578 XXX
%4637:	sext	 %4636
%4638:	getelementptr	 accset %4637
%4639:	store	 %4633 %4638
%4640:	br	 if.end116

BASIC BLOCK if.end116
%4641:	phi	 %4636 %4578
%4642:	icmp	 %4633 XXX
%4643:	br	 %4642 lor.lhs.false118 if.then122

BASIC BLOCK lor.lhs.false118
%4644:	sext	 %4586
%4645:	load	 transchar
%4646:	getelementptr	 %4645 %4644
%4647:	load	 %4646
%4648:	icmp	 %4647 XXX
%4649:	br	 %4648 if.end134 if.then122

BASIC BLOCK if.then122
%4650:	add	 %4579 XXX
%4651:	load	 current_max_dfa_size
%4652:	icmp	 %4650 %4651
%4653:	br	 %4652 if.end130 if.then125

BASIC BLOCK if.then125
%4654:	load	 current_max_dfa_size
%4655:	add	 %4654 XXX
%4656:	store	 %4655 current_max_dfa_size
%4657:	load	 num_reallocs
%4658:	add	 %4657 XXX
%4659:	store	 %4658 num_reallocs
%4660:	bitcast	 %4616
%4661:	load	 current_max_dfa_size
%4662:	call	 %4660 %4661 XXX reallocate_array
%4663:	bitcast	 %4662
%4664:	load	 epsclosure.stk
%4665:	bitcast	 %4664
%4666:	load	 current_max_dfa_size
%4667:	call	 %4665 %4666 XXX reallocate_array
%4668:	bitcast	 %4667
%4669:	store	 %4668 epsclosure.stk
%4670:	br	 if.end130

BASIC BLOCK if.end130
%4671:	phi	 %4663 %4616
%4672:	sext	 %4650
%4673:	getelementptr	 %4671 %4672
%4674:	store	 %4586 %4673
%4675:	add	 %4580 %4586
%4676:	br	 if.end134

BASIC BLOCK if.end134
%4677:	phi	 %4650 %4579
%4678:	phi	 %4675 %4580
%4679:	phi	 %4671 %4616
%4680:	br	 if.end135

BASIC BLOCK if.end135
%4681:	phi	 %4578 %4641 %4578
%4682:	phi	 %4579 %4677 %4579
%4683:	phi	 %4580 %4678 %4580
%4684:	phi	 %4581 %4595 %4581
%4685:	phi	 %4582 %4679 %4582
%4686:	br	 if.end136

BASIC BLOCK if.end136
%4687:	phi	 %4681 %4461
%4688:	phi	 %4682 %4462
%4689:	phi	 %4683 %4464
%4690:	phi	 %4684 %4465
%4691:	phi	 %4685 %4466
%4692:	br	 if.end137

BASIC BLOCK if.end137
%4693:	phi	 %4687 %4461
%4694:	phi	 %4688 %4462
%4695:	phi	 %4689 %4464
%4696:	phi	 %4690 %4465
%4697:	phi	 %4691 %4466
%4698:	br	 for.inc138

BASIC BLOCK for.inc138
%4699:	add	 %4463 XXX
%4700:	br	 for.cond28

BASIC BLOCK for.end140
%4701:	br	 for.cond141

BASIC BLOCK for.cond141
%4702:	phi	 XXX %4736
%4703:	icmp	 %4702 %4465
%4704:	br	 %4703 for.end162 for.body143

BASIC BLOCK for.body143
%4705:	sext	 %4702
%4706:	load	 epsclosure.stk
%4707:	getelementptr	 %4706 %4705
%4708:	load	 %4707
%4709:	sext	 %4708
%4710:	load	 trans1
%4711:	getelementptr	 %4710 %4709
%4712:	load	 %4711
%4713:	icmp	 %4712 XXX
%4714:	br	 %4713 if.else if.then149

BASIC BLOCK if.then149
%4715:	sext	 %4702
%4716:	load	 epsclosure.stk
%4717:	getelementptr	 %4716 %4715
%4718:	load	 %4717
%4719:	sext	 %4718
%4720:	load	 trans1
%4721:	getelementptr	 %4720 %4719
%4722:	load	 %4721
%4723:	add	 %4722 XXX
%4724:	sext	 %4702
%4725:	load	 epsclosure.stk
%4726:	getelementptr	 %4725 %4724
%4727:	load	 %4726
%4728:	sext	 %4727
%4729:	load	 trans1
%4730:	getelementptr	 %4729 %4728
%4731:	store	 %4723 %4730
%4732:	br	 if.end159

BASIC BLOCK if.else
%4733:	call	 XXX flexfatal
%4734:	br	 if.end159

BASIC BLOCK if.end159
%4735:	br	 for.inc160

BASIC BLOCK for.inc160
%4736:	add	 %4702 XXX
%4737:	br	 for.cond141

BASIC BLOCK for.end162
%4738:	store	 %4462 ns_addr
%4739:	store	 %4464 hv_addr
%4740:	store	 %4461 nacc_addr
%4741:	ret	 %4466

FUNCTION increase_max_dfas

BASIC BLOCK entry
%4742:	load	 current_max_dfas
%4743:	add	 %4742 XXX
%4744:	store	 %4743 current_max_dfas
%4745:	load	 num_reallocs
%4746:	add	 %4745 XXX
%4747:	store	 %4746 num_reallocs
%4748:	load	 base
%4749:	bitcast	 %4748
%4750:	load	 current_max_dfas
%4751:	call	 %4749 %4750 XXX reallocate_array
%4752:	bitcast	 %4751
%4753:	store	 %4752 base
%4754:	load	 def
%4755:	bitcast	 %4754
%4756:	load	 current_max_dfas
%4757:	call	 %4755 %4756 XXX reallocate_array
%4758:	bitcast	 %4757
%4759:	store	 %4758 def
%4760:	load	 dfasiz
%4761:	bitcast	 %4760
%4762:	load	 current_max_dfas
%4763:	call	 %4761 %4762 XXX reallocate_array
%4764:	bitcast	 %4763
%4765:	store	 %4764 dfasiz
%4766:	load	 accsiz
%4767:	bitcast	 %4766
%4768:	load	 current_max_dfas
%4769:	call	 %4767 %4768 XXX reallocate_array
%4770:	bitcast	 %4769
%4771:	store	 %4770 accsiz
%4772:	load	 dhash
%4773:	bitcast	 %4772
%4774:	load	 current_max_dfas
%4775:	call	 %4773 %4774 XXX reallocate_array
%4776:	bitcast	 %4775
%4777:	store	 %4776 dhash
%4778:	load	 dss
%4779:	bitcast	 %4778
%4780:	load	 current_max_dfas
%4781:	call	 %4779 %4780 XXX reallocate_array
%4782:	bitcast	 %4781
%4783:	store	 %4782 dss
%4784:	load	 dfaacc
%4785:	bitcast	 %4784
%4786:	load	 current_max_dfas
%4787:	call	 %4785 %4786 XXX reallocate_array
%4788:	bitcast	 %4787
%4789:	store	 %4788 dfaacc
%4790:	load	 nultrans
%4791:	icmp	 %4790 XXX
%4792:	br	 %4791 if.end if.then

BASIC BLOCK if.then
%4793:	load	 nultrans
%4794:	bitcast	 %4793
%4795:	load	 current_max_dfas
%4796:	call	 %4794 %4795 XXX reallocate_array
%4797:	bitcast	 %4796
%4798:	store	 %4797 nultrans
%4799:	br	 if.end

BASIC BLOCK if.end
%4800:	ret	

FUNCTION dumpnfa

BASIC BLOCK entry
%4801:	load	 err
%4802:	call	 %4801 XXX state1 fprintf
%4803:	br	 for.cond

BASIC BLOCK for.cond
%4804:	phi	 XXX %4836
%4805:	load	 lastnfa
%4806:	icmp	 %4804 %4805
%4807:	br	 %4806 for.end for.body

BASIC BLOCK for.body
%4808:	load	 err
%4809:	call	 %4808 XXX %4804 fprintf
%4810:	sext	 %4804
%4811:	load	 transchar
%4812:	getelementptr	 %4811 %4810
%4813:	load	 %4812
%4814:	sext	 %4804
%4815:	load	 trans1
%4816:	getelementptr	 %4815 %4814
%4817:	load	 %4816
%4818:	sext	 %4804
%4819:	load	 trans2
%4820:	getelementptr	 %4819 %4818
%4821:	load	 %4820
%4822:	sext	 %4804
%4823:	load	 accptnum
%4824:	getelementptr	 %4823 %4822
%4825:	load	 %4824
%4826:	load	 err
%4827:	call	 %4826 XXX %4813 %4817 %4821 fprintf
%4828:	icmp	 %4825 XXX
%4829:	br	 %4828 if.end if.then

BASIC BLOCK if.then
%4830:	load	 err
%4831:	call	 %4830 XXX %4825 fprintf
%4832:	br	 if.end

BASIC BLOCK if.end
%4833:	load	 err
%4834:	call	 %4833 XXX fprintf
%4835:	br	 for.inc

BASIC BLOCK for.inc
%4836:	add	 %4804 XXX
%4837:	br	 for.cond

BASIC BLOCK for.end
%4838:	load	 err
%4839:	call	 %4838 XXX fprintf
%4840:	ret	

FUNCTION inittbl

BASIC BLOCK entry
%4841:	load	 chk
%4842:	bitcast	 %4841
%4843:	load	 current_max_xpairs
%4844:	sext	 %4843
%4845:	mul	 %4844 XXX
%4846:	udiv	 %4845 XXX
%4847:	trunc	 %4846
%4848:	call	 %4842 %4847 zero_out
%4849:	store	 XXX tblend
%4850:	load	 tblend
%4851:	add	 %4850 XXX
%4852:	store	 %4851 firstfree
%4853:	store	 XXX numtemps
%4854:	load	 usemecs
%4855:	icmp	 %4854 XXX
%4856:	br	 %4855 if.end if.then

BASIC BLOCK if.then
%4857:	store	 XXX XXX
%4858:	br	 for.cond

BASIC BLOCK for.cond
%4859:	phi	 XXX %4872
%4860:	load	 numecs
%4861:	icmp	 %4859 %4860
%4862:	br	 %4861 for.end for.body

BASIC BLOCK for.body
%4863:	sub	 %4859 XXX
%4864:	sext	 %4859
%4865:	getelementptr	 tecbck XXX %4864
%4866:	store	 %4863 %4865
%4867:	sub	 %4859 XXX
%4868:	sext	 %4867
%4869:	getelementptr	 tecfwd XXX %4868
%4870:	store	 %4859 %4869
%4871:	br	 for.inc

BASIC BLOCK for.inc
%4872:	add	 %4859 XXX
%4873:	br	 for.cond

BASIC BLOCK for.end
%4874:	load	 numecs
%4875:	sext	 %4874
%4876:	getelementptr	 tecfwd XXX %4875
%4877:	store	 XXX %4876
%4878:	br	 if.end

BASIC BLOCK if.end
%4879:	ret	

FUNCTION place_state

BASIC BLOCK entry
%4880:	call	 state transnum find_table_space
%4881:	sext	 statenum
%4882:	load	 base
%4883:	getelementptr	 %4882 %4881
%4884:	store	 %4880 %4883
%4885:	sub	 %4880 XXX
%4886:	sext	 %4885
%4887:	load	 chk
%4888:	getelementptr	 %4887 %4886
%4889:	store	 XXX %4888
%4890:	sext	 %4880
%4891:	load	 chk
%4892:	getelementptr	 %4891 %4890
%4893:	store	 XXX %4892
%4894:	getelementptr	 state XXX
%4895:	br	 for.cond

BASIC BLOCK for.cond
%4896:	phi	 XXX %4917
%4897:	phi	 %4894 %4918
%4898:	load	 numecs
%4899:	icmp	 %4896 %4898
%4900:	br	 %4899 for.end for.body

BASIC BLOCK for.body
%4901:	load	 %4897
%4902:	icmp	 %4901 XXX
%4903:	br	 %4902 if.end if.then

BASIC BLOCK if.then
%4904:	add	 %4880 %4896
%4905:	sext	 %4904
%4906:	load	 chk
%4907:	getelementptr	 %4906 %4905
%4908:	store	 %4896 %4907
%4909:	load	 %4897
%4910:	add	 %4880 %4896
%4911:	sext	 %4910
%4912:	load	 nxt
%4913:	getelementptr	 %4912 %4911
%4914:	store	 %4909 %4913
%4915:	br	 if.end

BASIC BLOCK if.end
%4916:	br	 for.inc

BASIC BLOCK for.inc
%4917:	add	 %4896 XXX
%4918:	getelementptr	 %4897 XXX
%4919:	br	 for.cond

BASIC BLOCK for.end
%4920:	load	 numecs
%4921:	add	 %4880 %4920
%4922:	load	 tblend
%4923:	icmp	 %4921 %4922
%4924:	br	 %4923 if.end16 if.then14

BASIC BLOCK if.then14
%4925:	load	 numecs
%4926:	add	 %4880 %4925
%4927:	store	 %4926 tblend
%4928:	br	 if.end16

BASIC BLOCK if.end16
%4929:	ret	

FUNCTION mk2data

BASIC BLOCK entry
%4930:	load	 datapos
%4931:	icmp	 %4930 XXX
%4932:	br	 %4931 if.end if.then

BASIC BLOCK if.then
%4933:	call	 XXX putchar
%4934:	call	 dataflush
%4935:	br	 if.end

BASIC BLOCK if.end
%4936:	load	 datapos
%4937:	icmp	 %4936 XXX
%4938:	br	 %4937 if.else if.then2

BASIC BLOCK if.then2
%4939:	load	 stdout
%4940:	call	 XXX %4939 fputs
%4941:	br	 if.end5

BASIC BLOCK if.else
%4942:	call	 XXX putchar
%4943:	br	 if.end5

BASIC BLOCK if.end5
%4944:	load	 datapos
%4945:	add	 %4944 XXX
%4946:	store	 %4945 datapos
%4947:	call	 XXX value printf
%4948:	ret	

FUNCTION mkbranch

BASIC BLOCK entry
%4949:	icmp	 first XXX
%4950:	br	 %4949 if.else if.then

BASIC BLOCK if.then
%4951:	br	 return

BASIC BLOCK if.else
%4952:	icmp	 second XXX
%4953:	br	 %4952 if.end if.then2

BASIC BLOCK if.then2
%4954:	br	 return

BASIC BLOCK if.end
%4955:	br	 if.end3

BASIC BLOCK if.end3
%4956:	call	 XXX mkstate
%4957:	call	 %4956 first mkxtion
%4958:	call	 %4956 second mkxtion
%4959:	br	 return

BASIC BLOCK return
%4960:	phi	 second first %4956
%4961:	ret	 %4960

FUNCTION sympartition

BASIC BLOCK entry
%4962:	alloca	 XXX
%4963:	br	 for.cond

BASIC BLOCK for.cond
%4964:	phi	 XXX %4977
%4965:	load	 numecs
%4966:	icmp	 %4964 %4965
%4967:	br	 %4966 for.end for.body

BASIC BLOCK for.body
%4968:	sub	 %4964 XXX
%4969:	sext	 %4964
%4970:	getelementptr	 duplist %4969
%4971:	store	 %4968 %4970
%4972:	add	 %4964 XXX
%4973:	sext	 %4964
%4974:	getelementptr	 %4962 XXX %4973
%4975:	store	 %4972 %4974
%4976:	br	 for.inc

BASIC BLOCK for.inc
%4977:	add	 %4964 XXX
%4978:	br	 for.cond

BASIC BLOCK for.end
%4979:	getelementptr	 duplist XXX
%4980:	store	 XXX %4979
%4981:	load	 numecs
%4982:	sext	 %4981
%4983:	getelementptr	 %4962 XXX %4982
%4984:	store	 XXX %4983
%4985:	br	 for.cond6

BASIC BLOCK for.cond6
%4986:	phi	 XXX %5108
%4987:	icmp	 %4986 numstates
%4988:	br	 %4987 for.end89 for.body8

BASIC BLOCK for.body8
%4989:	sext	 %4986
%4990:	getelementptr	 ds %4989
%4991:	load	 %4990
%4992:	sext	 %4991
%4993:	load	 transchar
%4994:	getelementptr	 %4993 %4992
%4995:	load	 %4994
%4996:	icmp	 %4995 XXX
%4997:	br	 %4996 if.end86 if.then

BASIC BLOCK if.then
%4998:	load	 lastccl
%4999:	sub	 XXX %4998
%5000:	icmp	 %4995 %4999
%5001:	br	 %5000 lor.lhs.false if.then17

BASIC BLOCK lor.lhs.false
%5002:	load	 csize
%5003:	icmp	 %4995 %5002
%5004:	br	 %5003 if.end if.then17

BASIC BLOCK if.then17
%5005:	call	 XXX flexfatal
%5006:	br	 if.end

BASIC BLOCK if.end
%5007:	icmp	 %4995 XXX
%5008:	br	 %5007 if.else if.then19

BASIC BLOCK if.then19
%5009:	sext	 %4995
%5010:	getelementptr	 ecgroup XXX %5009
%5011:	load	 %5010
%5012:	getelementptr	 %4962 XXX XXX
%5013:	call	 %5011 %5012 duplist mkechar
%5014:	sext	 %5011
%5015:	getelementptr	 symlist %5014
%5016:	store	 XXX %5015
%5017:	br	 if.end85

BASIC BLOCK if.else
%5018:	sub	 XXX %4995
%5019:	sext	 %5018
%5020:	load	 ccllen
%5021:	getelementptr	 %5020 %5019
%5022:	load	 %5021
%5023:	sext	 %5018
%5024:	load	 cclmap
%5025:	getelementptr	 %5024 %5023
%5026:	load	 %5025
%5027:	load	 ccltbl
%5028:	sext	 %5026
%5029:	getelementptr	 %5027 %5028
%5030:	getelementptr	 %4962 XXX XXX
%5031:	load	 numecs
%5032:	load	 NUL_ec
%5033:	call	 %5029 %5022 %5030 duplist %5031 %5032 mkeccl
%5034:	sext	 %5018
%5035:	load	 cclng
%5036:	getelementptr	 %5035 %5034
%5037:	load	 %5036
%5038:	icmp	 %5037 XXX
%5039:	br	 %5038 if.else66 if.then32

BASIC BLOCK if.then32
%5040:	br	 for.cond33

BASIC BLOCK for.cond33
%5041:	phi	 XXX %5058
%5042:	phi	 XXX %5068
%5043:	icmp	 %5042 %5022
%5044:	br	 %5043 for.end55 for.body35

BASIC BLOCK for.body35
%5045:	add	 %5026 %5042
%5046:	sext	 %5045
%5047:	load	 ccltbl
%5048:	getelementptr	 %5047 %5046
%5049:	load	 %5048
%5050:	zext	 %5049
%5051:	icmp	 %5050 XXX
%5052:	br	 %5051 if.end42 if.then41

BASIC BLOCK if.then41
%5053:	load	 NUL_ec
%5054:	br	 if.end42

BASIC BLOCK if.end42
%5055:	phi	 %5053 %5050
%5056:	add	 %5041 XXX
%5057:	br	 for.cond44

BASIC BLOCK for.cond44
%5058:	phi	 %5056 %5065
%5059:	icmp	 %5058 %5055
%5060:	br	 %5059 for.end52 for.body47

BASIC BLOCK for.body47
%5061:	sext	 %5058
%5062:	getelementptr	 symlist %5061
%5063:	store	 XXX %5062
%5064:	br	 for.inc50

BASIC BLOCK for.inc50
%5065:	add	 %5058 XXX
%5066:	br	 for.cond44

BASIC BLOCK for.end52
%5067:	br	 for.inc53

BASIC BLOCK for.inc53
%5068:	add	 %5042 XXX
%5069:	br	 for.cond33

BASIC BLOCK for.end55
%5070:	add	 %5041 XXX
%5071:	br	 for.cond57

BASIC BLOCK for.cond57
%5072:	phi	 %5070 %5080
%5073:	load	 numecs
%5074:	icmp	 %5072 %5073
%5075:	br	 %5074 for.end65 for.body60

BASIC BLOCK for.body60
%5076:	sext	 %5072
%5077:	getelementptr	 symlist %5076
%5078:	store	 XXX %5077
%5079:	br	 for.inc63

BASIC BLOCK for.inc63
%5080:	add	 %5072 XXX
%5081:	br	 for.cond57

BASIC BLOCK for.end65
%5082:	br	 if.end84

BASIC BLOCK if.else66
%5083:	br	 for.cond67

BASIC BLOCK for.cond67
%5084:	phi	 XXX %5102
%5085:	icmp	 %5084 %5022
%5086:	br	 %5085 for.end83 for.body70

BASIC BLOCK for.body70
%5087:	add	 %5026 %5084
%5088:	sext	 %5087
%5089:	load	 ccltbl
%5090:	getelementptr	 %5089 %5088
%5091:	load	 %5090
%5092:	zext	 %5091
%5093:	icmp	 %5092 XXX
%5094:	br	 %5093 if.end78 if.then77

BASIC BLOCK if.then77
%5095:	load	 NUL_ec
%5096:	br	 if.end78

BASIC BLOCK if.end78
%5097:	phi	 %5095 %5092
%5098:	sext	 %5097
%5099:	getelementptr	 symlist %5098
%5100:	store	 XXX %5099
%5101:	br	 for.inc81

BASIC BLOCK for.inc81
%5102:	add	 %5084 XXX
%5103:	br	 for.cond67

BASIC BLOCK for.end83
%5104:	br	 if.end84

BASIC BLOCK if.end84
%5105:	br	 if.end85

BASIC BLOCK if.end85
%5106:	br	 if.end86

BASIC BLOCK if.end86
%5107:	br	 for.inc87

BASIC BLOCK for.inc87
%5108:	add	 %4986 XXX
%5109:	br	 for.cond6

BASIC BLOCK for.end89
%5110:	ret	

FUNCTION symfollowset

BASIC BLOCK entry
%5111:	br	 for.cond

BASIC BLOCK for.cond
%5112:	phi	 XXX %5251
%5113:	phi	 XXX %5249
%5114:	icmp	 %5112 dsize
%5115:	br	 %5114 for.end95 for.body

BASIC BLOCK for.body
%5116:	sext	 %5112
%5117:	getelementptr	 ds %5116
%5118:	load	 %5117
%5119:	sext	 %5118
%5120:	load	 transchar
%5121:	getelementptr	 %5120 %5119
%5122:	load	 %5121
%5123:	sext	 %5118
%5124:	load	 trans1
%5125:	getelementptr	 %5124 %5123
%5126:	load	 %5125
%5127:	icmp	 %5122 XXX
%5128:	br	 %5127 if.else61 if.then

BASIC BLOCK if.then
%5129:	sub	 XXX %5122
%5130:	sext	 %5129
%5131:	load	 cclmap
%5132:	getelementptr	 %5131 %5130
%5133:	load	 %5132
%5134:	sext	 %5129
%5135:	load	 ccllen
%5136:	getelementptr	 %5135 %5134
%5137:	load	 %5136
%5138:	sext	 %5129
%5139:	load	 cclng
%5140:	getelementptr	 %5139 %5138
%5141:	load	 %5140
%5142:	icmp	 %5141 XXX
%5143:	br	 %5142 if.else32 if.then12

BASIC BLOCK if.then12
%5144:	br	 for.cond13

BASIC BLOCK for.cond13
%5145:	phi	 XXX %5167
%5146:	icmp	 %5145 %5137
%5147:	br	 %5146 for.end for.body15

BASIC BLOCK for.body15
%5148:	add	 %5133 %5145
%5149:	sext	 %5148
%5150:	load	 ccltbl
%5151:	getelementptr	 %5150 %5149
%5152:	load	 %5151
%5153:	zext	 %5152
%5154:	icmp	 %5153 XXX
%5155:	br	 %5154 if.end if.then20

BASIC BLOCK if.then20
%5156:	load	 NUL_ec
%5157:	br	 if.end

BASIC BLOCK if.end
%5158:	phi	 %5156 %5153
%5159:	icmp	 %5158 transsym
%5160:	br	 %5159 if.else if.then23

BASIC BLOCK if.then23
%5161:	br	 for.end

BASIC BLOCK if.else
%5162:	icmp	 %5158 transsym
%5163:	br	 %5162 if.end27 if.then26

BASIC BLOCK if.then26
%5164:	br	 bottom

BASIC BLOCK if.end27
%5165:	br	 if.end28

BASIC BLOCK if.end28
%5166:	br	 for.inc

BASIC BLOCK for.inc
%5167:	add	 %5145 XXX
%5168:	br	 for.cond13

BASIC BLOCK for.end
%5169:	add	 %5113 XXX
%5170:	sext	 %5169
%5171:	getelementptr	 nset %5170
%5172:	store	 %5126 %5171
%5173:	br	 if.end60

BASIC BLOCK if.else32
%5174:	br	 for.cond33

BASIC BLOCK for.cond33
%5175:	phi	 XXX %5201
%5176:	icmp	 %5175 %5137
%5177:	br	 %5176 for.end59 for.body36

BASIC BLOCK for.body36
%5178:	add	 %5133 %5175
%5179:	sext	 %5178
%5180:	load	 ccltbl
%5181:	getelementptr	 %5180 %5179
%5182:	load	 %5181
%5183:	zext	 %5182
%5184:	icmp	 %5183 XXX
%5185:	br	 %5184 if.end44 if.then43

BASIC BLOCK if.then43
%5186:	load	 NUL_ec
%5187:	br	 if.end44

BASIC BLOCK if.end44
%5188:	phi	 %5186 %5183
%5189:	icmp	 %5188 transsym
%5190:	br	 %5189 if.else48 if.then47

BASIC BLOCK if.then47
%5191:	br	 for.end59

BASIC BLOCK if.else48
%5192:	icmp	 %5188 transsym
%5193:	br	 %5192 if.end55 if.then51

BASIC BLOCK if.then51
%5194:	add	 %5113 XXX
%5195:	sext	 %5194
%5196:	getelementptr	 nset %5195
%5197:	store	 %5126 %5196
%5198:	br	 for.end59

BASIC BLOCK if.end55
%5199:	br	 if.end56

BASIC BLOCK if.end56
%5200:	br	 for.inc57

BASIC BLOCK for.inc57
%5201:	add	 %5175 XXX
%5202:	br	 for.cond33

BASIC BLOCK for.end59
%5203:	phi	 %5113 %5194 %5113
%5204:	br	 if.end60

BASIC BLOCK if.end60
%5205:	phi	 %5169 %5203
%5206:	br	 if.end92

BASIC BLOCK if.else61
%5207:	icmp	 %5122 XXX
%5208:	br	 %5207 if.else69 land.lhs.true

BASIC BLOCK land.lhs.true
%5209:	icmp	 %5122 XXX
%5210:	br	 %5209 if.else69 land.lhs.true66

BASIC BLOCK land.lhs.true66
%5211:	load	 caseins
%5212:	icmp	 %5211 XXX
%5213:	br	 %5212 if.else69 if.then68

BASIC BLOCK if.then68
%5214:	call	 XXX flexfatal
%5215:	br	 if.end91

BASIC BLOCK if.else69
%5216:	icmp	 %5122 XXX
%5217:	br	 %5216 if.else73 if.then72

BASIC BLOCK if.then72
%5218:	br	 if.end90

BASIC BLOCK if.else73
%5219:	sext	 %5122
%5220:	getelementptr	 ecgroup XXX %5219
%5221:	load	 %5220
%5222:	icmp	 %5221 XXX
%5223:	br	 %5222 cond.false cond.true

BASIC BLOCK cond.true
%5224:	sext	 %5122
%5225:	getelementptr	 ecgroup XXX %5224
%5226:	load	 %5225
%5227:	sub	 XXX %5226
%5228:	br	 cond.end

BASIC BLOCK cond.false
%5229:	sext	 %5122
%5230:	getelementptr	 ecgroup XXX %5229
%5231:	load	 %5230
%5232:	br	 cond.end

BASIC BLOCK cond.end
%5233:	phi	 %5227 %5231
%5234:	icmp	 %5233 transsym
%5235:	br	 %5234 if.end89 if.then85

BASIC BLOCK if.then85
%5236:	add	 %5113 XXX
%5237:	sext	 %5236
%5238:	getelementptr	 nset %5237
%5239:	store	 %5126 %5238
%5240:	br	 if.end89

BASIC BLOCK if.end89
%5241:	phi	 %5236 %5113
%5242:	br	 if.end90

BASIC BLOCK if.end90
%5243:	phi	 %5113 %5241
%5244:	br	 if.end91

BASIC BLOCK if.end91
%5245:	phi	 %5113 %5243
%5246:	br	 if.end92

BASIC BLOCK if.end92
%5247:	phi	 %5205 %5245
%5248:	br	 bottom

BASIC BLOCK bottom
%5249:	phi	 %5247 %5113
%5250:	br	 for.inc93

BASIC BLOCK for.inc93
%5251:	add	 %5112 XXX
%5252:	br	 for.cond

BASIC BLOCK for.end95
%5253:	ret	 %5113

FUNCTION stack1

BASIC BLOCK entry
%5254:	load	 onesp
%5255:	icmp	 %5254 XXX
%5256:	br	 %5255 if.else if.then

BASIC BLOCK if.then
%5257:	call	 statenum sym nextstate deflink mk1tbl
%5258:	br	 if.end

BASIC BLOCK if.else
%5259:	load	 onesp
%5260:	add	 %5259 XXX
%5261:	store	 %5260 onesp
%5262:	load	 onesp
%5263:	sext	 %5262
%5264:	getelementptr	 onestate XXX %5263
%5265:	store	 statenum %5264
%5266:	load	 onesp
%5267:	sext	 %5266
%5268:	getelementptr	 onesym XXX %5267
%5269:	store	 sym %5268
%5270:	load	 onesp
%5271:	sext	 %5270
%5272:	getelementptr	 onenext XXX %5271
%5273:	store	 nextstate %5272
%5274:	load	 onesp
%5275:	sext	 %5274
%5276:	getelementptr	 onedef XXX %5275
%5277:	store	 deflink %5276
%5278:	br	 if.end

BASIC BLOCK if.end
%5279:	ret	

FUNCTION bldtbl

BASIC BLOCK entry
%5280:	alloca	 XXX
%5281:	mul	 totaltrans XXX
%5282:	load	 numecs
%5283:	mul	 %5282 XXX
%5284:	icmp	 %5281 %5283
%5285:	br	 %5284 if.else if.then

BASIC BLOCK if.then
%5286:	load	 numecs
%5287:	call	 state %5286 statenum XXX totaltrans mkentry
%5288:	br	 if.end73

BASIC BLOCK if.else
%5289:	mul	 comfreq XXX
%5290:	mul	 totaltrans XXX
%5291:	icmp	 %5289 %5290
%5292:	zext	 %5291
%5293:	load	 firstprot
%5294:	icmp	 %5292 XXX
%5295:	br	 %5294 if.else15 if.then5

BASIC BLOCK if.then5
%5296:	load	 firstprot
%5297:	br	 for.cond

BASIC BLOCK for.cond
%5298:	phi	 %5296 %5314
%5299:	icmp	 %5298 XXX
%5300:	br	 %5299 for.end for.body

BASIC BLOCK for.body
%5301:	sext	 %5298
%5302:	getelementptr	 protcomst XXX %5301
%5303:	load	 %5302
%5304:	icmp	 %5303 comstate
%5305:	br	 %5304 if.end if.then10

BASIC BLOCK if.then10
%5306:	sext	 XXX
%5307:	getelementptr	 %5280 XXX %5306
%5308:	getelementptr	 %5307 XXX XXX
%5309:	call	 state %5298 %5308 tbldiff
%5310:	br	 for.end

BASIC BLOCK if.end
%5311:	br	 for.inc

BASIC BLOCK for.inc
%5312:	sext	 %5298
%5313:	getelementptr	 protnext XXX %5312
%5314:	load	 %5313
%5315:	br	 for.cond

BASIC BLOCK for.end
%5316:	phi	 %5309 totaltrans
%5317:	phi	 %5298 %5293
%5318:	br	 if.end24

BASIC BLOCK if.else15
%5319:	load	 firstprot
%5320:	icmp	 %5319 XXX
%5321:	br	 %5320 if.end23 if.then18

BASIC BLOCK if.then18
%5322:	load	 firstprot
%5323:	sext	 XXX
%5324:	getelementptr	 %5280 XXX %5323
%5325:	getelementptr	 %5324 XXX XXX
%5326:	call	 state %5322 %5325 tbldiff
%5327:	br	 if.end23

BASIC BLOCK if.end23
%5328:	phi	 %5326 totaltrans
%5329:	phi	 %5322 %5293
%5330:	br	 if.end24

BASIC BLOCK if.end24
%5331:	phi	 comstate XXX
%5332:	phi	 %5316 %5328
%5333:	phi	 %5317 %5329
%5334:	mul	 %5332 XXX
%5335:	mul	 totaltrans XXX
%5336:	icmp	 %5334 %5335
%5337:	br	 %5336 if.end47 if.then29

BASIC BLOCK if.then29
%5338:	br	 for.cond30

BASIC BLOCK for.cond30
%5339:	phi	 XXX %5354
%5340:	phi	 %5332 %5355
%5341:	phi	 %5333 %5356
%5342:	phi	 %5333 %5360
%5343:	icmp	 %5342 XXX
%5344:	br	 %5343 for.end46 for.body33

BASIC BLOCK for.body33
%5345:	sub	 XXX %5339
%5346:	sext	 %5345
%5347:	getelementptr	 %5280 XXX %5346
%5348:	getelementptr	 %5347 XXX XXX
%5349:	call	 state %5342 %5348 tbldiff
%5350:	icmp	 %5349 %5340
%5351:	br	 %5350 if.end42 if.then40

BASIC BLOCK if.then40
%5352:	sub	 XXX %5339
%5353:	br	 if.end42

BASIC BLOCK if.end42
%5354:	phi	 %5352 %5339
%5355:	phi	 %5349 %5340
%5356:	phi	 %5342 %5341
%5357:	br	 for.inc43

BASIC BLOCK for.inc43
%5358:	sext	 %5342
%5359:	getelementptr	 protnext XXX %5358
%5360:	load	 %5359
%5361:	br	 for.cond30

BASIC BLOCK for.end46
%5362:	br	 if.end47

BASIC BLOCK if.end47
%5363:	phi	 %5339 XXX
%5364:	phi	 %5340 %5332
%5365:	phi	 %5341 %5333
%5366:	mul	 %5364 XXX
%5367:	mul	 totaltrans XXX
%5368:	icmp	 %5366 %5367
%5369:	br	 %5368 if.else60 if.then52

BASIC BLOCK if.then52
%5370:	mul	 comfreq XXX
%5371:	mul	 totaltrans XXX
%5372:	icmp	 %5370 %5371
%5373:	br	 %5372 if.else58 if.then57

BASIC BLOCK if.then57
%5374:	call	 state statenum %5331 mktemplate
%5375:	br	 if.end59

BASIC BLOCK if.else58
%5376:	call	 state statenum %5331 mkprot
%5377:	load	 numecs
%5378:	call	 state %5377 statenum XXX totaltrans mkentry
%5379:	br	 if.end59

BASIC BLOCK if.end59
%5380:	br	 if.end72

BASIC BLOCK if.else60
%5381:	sext	 %5363
%5382:	getelementptr	 %5280 XXX %5381
%5383:	getelementptr	 %5382 XXX XXX
%5384:	load	 numecs
%5385:	sext	 %5365
%5386:	getelementptr	 prottbl XXX %5385
%5387:	load	 %5386
%5388:	call	 %5383 %5384 statenum %5387 %5364 mkentry
%5389:	mul	 %5364 XXX
%5390:	mul	 totaltrans XXX
%5391:	icmp	 %5389 %5390
%5392:	br	 %5391 if.end71 if.then70

BASIC BLOCK if.then70
%5393:	call	 state statenum %5331 mkprot
%5394:	br	 if.end71

BASIC BLOCK if.end71
%5395:	call	 %5365 mv2front
%5396:	br	 if.end72

BASIC BLOCK if.end72
%5397:	br	 if.end73

BASIC BLOCK if.end73
%5398:	ret	

FUNCTION dataend

BASIC BLOCK entry
%5399:	load	 datapos
%5400:	icmp	 %5399 XXX
%5401:	br	 %5400 if.end if.then

BASIC BLOCK if.then
%5402:	call	 dataflush
%5403:	br	 if.end

BASIC BLOCK if.end
%5404:	call	 XXX puts
%5405:	store	 XXX dataline
%5406:	store	 XXX datapos
%5407:	ret	

FUNCTION cmptmps

BASIC BLOCK entry
%5408:	alloca	 XXX
%5409:	getelementptr	 %5408 XXX XXX
%5410:	load	 numtemps
%5411:	load	 numecs
%5412:	mul	 %5410 %5411
%5413:	load	 tblend
%5414:	add	 %5412 %5413
%5415:	store	 %5414 peakpairs
%5416:	load	 usemecs
%5417:	icmp	 %5416 XXX
%5418:	br	 %5417 if.else if.then

BASIC BLOCK if.then
%5419:	load	 numecs
%5420:	call	 XXX XXX %5419 cre8ecs
%5421:	store	 %5420 nummecs
%5422:	br	 if.end

BASIC BLOCK if.else
%5423:	load	 numecs
%5424:	store	 %5423 nummecs
%5425:	br	 if.end

BASIC BLOCK if.end
%5426:	br	 while.cond

BASIC BLOCK while.cond
%5427:	load	 lastdfa
%5428:	load	 numtemps
%5429:	add	 %5427 %5428
%5430:	add	 %5429 XXX
%5431:	load	 current_max_dfas
%5432:	icmp	 %5430 %5431
%5433:	br	 %5432 while.end while.body

BASIC BLOCK while.body
%5434:	call	 increase_max_dfas
%5435:	br	 while.cond

BASIC BLOCK while.end
%5436:	br	 for.cond

BASIC BLOCK for.cond
%5437:	phi	 XXX %5495
%5438:	load	 numtemps
%5439:	icmp	 %5437 %5438
%5440:	br	 %5439 for.end40 for.body

BASIC BLOCK for.body
%5441:	br	 for.cond8

BASIC BLOCK for.cond8
%5442:	phi	 XXX %5487
%5443:	phi	 XXX %5485
%5444:	load	 numecs
%5445:	icmp	 %5442 %5444
%5446:	br	 %5445 for.end for.body10

BASIC BLOCK for.body10
%5447:	load	 numecs
%5448:	mul	 %5447 %5437
%5449:	add	 %5448 %5442
%5450:	sext	 %5449
%5451:	load	 tnxt
%5452:	getelementptr	 %5451 %5450
%5453:	load	 %5452
%5454:	load	 usemecs
%5455:	icmp	 %5454 XXX
%5456:	br	 %5455 if.else27 if.then14

BASIC BLOCK if.then14
%5457:	sext	 %5442
%5458:	getelementptr	 tecbck XXX %5457
%5459:	load	 %5458
%5460:	icmp	 %5459 XXX
%5461:	br	 %5460 if.end26 if.then18

BASIC BLOCK if.then18
%5462:	sext	 %5442
%5463:	getelementptr	 tecbck XXX %5462
%5464:	load	 %5463
%5465:	sext	 %5464
%5466:	getelementptr	 %5409 %5465
%5467:	store	 %5453 %5466
%5468:	icmp	 %5453 XXX
%5469:	br	 %5468 if.end25 if.then24

BASIC BLOCK if.then24
%5470:	add	 %5443 XXX
%5471:	br	 if.end25

BASIC BLOCK if.end25
%5472:	phi	 %5470 %5443
%5473:	br	 if.end26

BASIC BLOCK if.end26
%5474:	phi	 %5472 %5443
%5475:	br	 if.end34

BASIC BLOCK if.else27
%5476:	sext	 %5442
%5477:	getelementptr	 %5409 %5476
%5478:	store	 %5453 %5477
%5479:	icmp	 %5453 XXX
%5480:	br	 %5479 if.end33 if.then31

BASIC BLOCK if.then31
%5481:	add	 %5443 XXX
%5482:	br	 if.end33

BASIC BLOCK if.end33
%5483:	phi	 %5481 %5443
%5484:	br	 if.end34

BASIC BLOCK if.end34
%5485:	phi	 %5474 %5483
%5486:	br	 for.inc

BASIC BLOCK for.inc
%5487:	add	 %5442 XXX
%5488:	br	 for.cond8

BASIC BLOCK for.end
%5489:	load	 nummecs
%5490:	load	 lastdfa
%5491:	add	 %5490 %5437
%5492:	add	 %5491 XXX
%5493:	call	 %5409 %5489 %5492 XXX %5443 mkentry
%5494:	br	 for.inc38

BASIC BLOCK for.inc38
%5495:	add	 %5437 XXX
%5496:	br	 for.cond

BASIC BLOCK for.end40
%5497:	ret	

FUNCTION mk1tbl

BASIC BLOCK entry
%5498:	load	 firstfree
%5499:	icmp	 %5498 sym
%5500:	br	 %5499 if.end if.then

BASIC BLOCK if.then
%5501:	store	 sym firstfree
%5502:	br	 if.end

BASIC BLOCK if.end
%5503:	br	 while.cond

BASIC BLOCK while.cond
%5504:	load	 firstfree
%5505:	sext	 %5504
%5506:	load	 chk
%5507:	getelementptr	 %5506 %5505
%5508:	load	 %5507
%5509:	icmp	 %5508 XXX
%5510:	br	 %5509 while.end while.body

BASIC BLOCK while.body
%5511:	load	 firstfree
%5512:	add	 %5511 XXX
%5513:	store	 %5512 firstfree
%5514:	load	 current_max_xpairs
%5515:	icmp	 %5512 %5514
%5516:	br	 %5515 if.end4 if.then3

BASIC BLOCK if.then3
%5517:	call	 expand_nxt_chk
%5518:	br	 if.end4

BASIC BLOCK if.end4
%5519:	br	 while.cond

BASIC BLOCK while.end
%5520:	load	 firstfree
%5521:	sub	 %5520 sym
%5522:	sext	 state
%5523:	load	 base
%5524:	getelementptr	 %5523 %5522
%5525:	store	 %5521 %5524
%5526:	sext	 state
%5527:	load	 def
%5528:	getelementptr	 %5527 %5526
%5529:	store	 onedef %5528
%5530:	load	 firstfree
%5531:	sext	 %5530
%5532:	load	 chk
%5533:	getelementptr	 %5532 %5531
%5534:	store	 state %5533
%5535:	load	 firstfree
%5536:	sext	 %5535
%5537:	load	 nxt
%5538:	getelementptr	 %5537 %5536
%5539:	store	 onenxt %5538
%5540:	load	 firstfree
%5541:	load	 tblend
%5542:	icmp	 %5540 %5541
%5543:	br	 %5542 if.end19 if.then14

BASIC BLOCK if.then14
%5544:	load	 firstfree
%5545:	add	 %5544 XXX
%5546:	store	 %5545 firstfree
%5547:	store	 %5544 tblend
%5548:	load	 firstfree
%5549:	load	 current_max_xpairs
%5550:	icmp	 %5548 %5549
%5551:	br	 %5550 if.end18 if.then17

BASIC BLOCK if.then17
%5552:	call	 expand_nxt_chk
%5553:	br	 if.end18

BASIC BLOCK if.end18
%5554:	br	 if.end19

BASIC BLOCK if.end19
%5555:	ret	

FUNCTION mkdeftbl

BASIC BLOCK entry
%5556:	load	 lastdfa
%5557:	add	 %5556 XXX
%5558:	store	 %5557 jamstate
%5559:	load	 tblend
%5560:	add	 %5559 XXX
%5561:	store	 %5560 tblend
%5562:	br	 while.cond

BASIC BLOCK while.cond
%5563:	load	 tblend
%5564:	load	 numecs
%5565:	add	 %5563 %5564
%5566:	load	 current_max_xpairs
%5567:	icmp	 %5565 %5566
%5568:	br	 %5567 while.end while.body

BASIC BLOCK while.body
%5569:	call	 expand_nxt_chk
%5570:	br	 while.cond

BASIC BLOCK while.end
%5571:	load	 end_of_buffer_state
%5572:	load	 tblend
%5573:	sext	 %5572
%5574:	load	 nxt
%5575:	getelementptr	 %5574 %5573
%5576:	store	 %5571 %5575
%5577:	load	 jamstate
%5578:	load	 tblend
%5579:	sext	 %5578
%5580:	load	 chk
%5581:	getelementptr	 %5580 %5579
%5582:	store	 %5577 %5581
%5583:	br	 for.cond

BASIC BLOCK for.cond
%5584:	phi	 XXX %5602
%5585:	load	 numecs
%5586:	icmp	 %5584 %5585
%5587:	br	 %5586 for.end for.body

BASIC BLOCK for.body
%5588:	load	 tblend
%5589:	add	 %5588 %5584
%5590:	sext	 %5589
%5591:	load	 nxt
%5592:	getelementptr	 %5591 %5590
%5593:	store	 XXX %5592
%5594:	load	 jamstate
%5595:	load	 tblend
%5596:	add	 %5595 %5584
%5597:	sext	 %5596
%5598:	load	 chk
%5599:	getelementptr	 %5598 %5597
%5600:	store	 %5594 %5599
%5601:	br	 for.inc

BASIC BLOCK for.inc
%5602:	add	 %5584 XXX
%5603:	br	 for.cond

BASIC BLOCK for.end
%5604:	load	 tblend
%5605:	store	 %5604 jambase
%5606:	load	 jambase
%5607:	load	 jamstate
%5608:	sext	 %5607
%5609:	load	 base
%5610:	getelementptr	 %5609 %5608
%5611:	store	 %5606 %5610
%5612:	load	 jamstate
%5613:	sext	 %5612
%5614:	load	 def
%5615:	getelementptr	 %5614 %5613
%5616:	store	 XXX %5615
%5617:	load	 numecs
%5618:	load	 tblend
%5619:	add	 %5618 %5617
%5620:	store	 %5619 tblend
%5621:	load	 numtemps
%5622:	add	 %5621 XXX
%5623:	store	 %5622 numtemps
%5624:	ret	

FUNCTION flex_free

BASIC BLOCK entry
%5625:	call	 ptr yy_flex_free
%5626:	ret	

FUNCTION snstods

BASIC BLOCK entry
%5627:	br	 for.cond

BASIC BLOCK for.cond
%5628:	phi	 XXX %5687
%5629:	phi	 XXX %5689
%5630:	load	 lastdfa
%5631:	icmp	 %5629 %5630
%5632:	br	 %5631 for.end29 for.body

BASIC BLOCK for.body
%5633:	sext	 %5629
%5634:	load	 dhash
%5635:	getelementptr	 %5634 %5633
%5636:	load	 %5635
%5637:	icmp	 hashval %5636
%5638:	br	 %5637 if.end26 if.then

BASIC BLOCK if.then
%5639:	sext	 %5629
%5640:	load	 dfasiz
%5641:	getelementptr	 %5640 %5639
%5642:	load	 %5641
%5643:	icmp	 numstates %5642
%5644:	br	 %5643 if.else if.then5

BASIC BLOCK if.then5
%5645:	sext	 %5629
%5646:	load	 dss
%5647:	getelementptr	 %5646 %5645
%5648:	load	 %5647
%5649:	icmp	 %5628 XXX
%5650:	br	 %5649 if.then8 if.end

BASIC BLOCK if.then8
%5651:	call	 sns numstates bubble
%5652:	br	 if.end

BASIC BLOCK if.end
%5653:	phi	 %5628 XXX
%5654:	br	 for.cond9

BASIC BLOCK for.cond9
%5655:	phi	 XXX %5668
%5656:	icmp	 %5655 numstates
%5657:	br	 %5656 for.end for.body11

BASIC BLOCK for.body11
%5658:	sext	 %5655
%5659:	getelementptr	 sns %5658
%5660:	load	 %5659
%5661:	sext	 %5655
%5662:	getelementptr	 %5648 %5661
%5663:	load	 %5662
%5664:	icmp	 %5660 %5663
%5665:	br	 %5664 if.end18 if.then17

BASIC BLOCK if.then17
%5666:	br	 for.end

BASIC BLOCK if.end18
%5667:	br	 for.inc

BASIC BLOCK for.inc
%5668:	add	 %5655 XXX
%5669:	br	 for.cond9

BASIC BLOCK for.end
%5670:	icmp	 %5655 numstates
%5671:	br	 %5670 if.end22 if.then20

BASIC BLOCK if.then20
%5672:	load	 dfaeql
%5673:	add	 %5672 XXX
%5674:	store	 %5673 dfaeql
%5675:	store	 %5629 newds_addr
%5676:	br	 return

BASIC BLOCK if.end22
%5677:	load	 hshcol
%5678:	add	 %5677 XXX
%5679:	store	 %5678 hshcol
%5680:	br	 if.end25

BASIC BLOCK if.else
%5681:	load	 hshsave
%5682:	add	 %5681 XXX
%5683:	store	 %5682 hshsave
%5684:	br	 if.end25

BASIC BLOCK if.end25
%5685:	phi	 %5653 %5628
%5686:	br	 if.end26

BASIC BLOCK if.end26
%5687:	phi	 %5685 %5628
%5688:	br	 for.inc27

BASIC BLOCK for.inc27
%5689:	add	 %5629 XXX
%5690:	br	 for.cond

BASIC BLOCK for.end29
%5691:	load	 lastdfa
%5692:	add	 %5691 XXX
%5693:	store	 %5692 lastdfa
%5694:	load	 current_max_dfas
%5695:	icmp	 %5692 %5694
%5696:	br	 %5695 if.end33 if.then32

BASIC BLOCK if.then32
%5697:	call	 increase_max_dfas
%5698:	br	 if.end33

BASIC BLOCK if.end33
%5699:	load	 lastdfa
%5700:	add	 numstates XXX
%5701:	call	 %5700 XXX allocate_array
%5702:	bitcast	 %5701
%5703:	sext	 %5699
%5704:	load	 dss
%5705:	getelementptr	 %5704 %5703
%5706:	store	 %5702 %5705
%5707:	icmp	 %5628 XXX
%5708:	br	 %5707 if.then37 if.end38

BASIC BLOCK if.then37
%5709:	call	 sns numstates bubble
%5710:	br	 if.end38

BASIC BLOCK if.end38
%5711:	br	 for.cond39

BASIC BLOCK for.cond39
%5712:	phi	 XXX %5726
%5713:	icmp	 %5712 numstates
%5714:	br	 %5713 for.end50 for.body41

BASIC BLOCK for.body41
%5715:	sext	 %5712
%5716:	getelementptr	 sns %5715
%5717:	load	 %5716
%5718:	sext	 %5712
%5719:	sext	 %5699
%5720:	load	 dss
%5721:	getelementptr	 %5720 %5719
%5722:	load	 %5721
%5723:	getelementptr	 %5722 %5718
%5724:	store	 %5717 %5723
%5725:	br	 for.inc48

BASIC BLOCK for.inc48
%5726:	add	 %5712 XXX
%5727:	br	 for.cond39

BASIC BLOCK for.end50
%5728:	sext	 %5699
%5729:	load	 dfasiz
%5730:	getelementptr	 %5729 %5728
%5731:	store	 numstates %5730
%5732:	sext	 %5699
%5733:	load	 dhash
%5734:	getelementptr	 %5733 %5732
%5735:	store	 hashval %5734
%5736:	icmp	 nacc XXX
%5737:	br	 %5736 if.else67 if.then56

BASIC BLOCK if.then56
%5738:	load	 reject
%5739:	icmp	 %5738 XXX
%5740:	br	 %5739 if.else61 if.then58

BASIC BLOCK if.then58
%5741:	sext	 %5699
%5742:	load	 dfaacc
%5743:	getelementptr	 %5742 %5741
%5744:	bitcast	 %5743
%5745:	store	 XXX %5744
%5746:	br	 if.end64

BASIC BLOCK if.else61
%5747:	sext	 %5699
%5748:	load	 dfaacc
%5749:	getelementptr	 %5748 %5747
%5750:	bitcast	 %5749
%5751:	store	 XXX %5750
%5752:	br	 if.end64

BASIC BLOCK if.end64
%5753:	sext	 %5699
%5754:	load	 accsiz
%5755:	getelementptr	 %5754 %5753
%5756:	store	 XXX %5755
%5757:	br	 if.end123

BASIC BLOCK if.else67
%5758:	load	 reject
%5759:	icmp	 %5758 XXX
%5760:	br	 %5759 if.else99 if.then69

BASIC BLOCK if.then69
%5761:	call	 accset nacc bubble
%5762:	add	 nacc XXX
%5763:	call	 %5762 XXX allocate_array
%5764:	bitcast	 %5763
%5765:	sext	 %5699
%5766:	load	 dfaacc
%5767:	getelementptr	 %5766 %5765
%5768:	bitcast	 %5767
%5769:	store	 %5764 %5768
%5770:	br	 for.cond75

BASIC BLOCK for.cond75
%5771:	phi	 XXX %5800
%5772:	icmp	 %5771 nacc
%5773:	br	 %5772 for.end96 for.body77

BASIC BLOCK for.body77
%5774:	sext	 %5771
%5775:	getelementptr	 accset %5774
%5776:	load	 %5775
%5777:	sext	 %5771
%5778:	sext	 %5699
%5779:	load	 dfaacc
%5780:	getelementptr	 %5779 %5778
%5781:	bitcast	 %5780
%5782:	load	 %5781
%5783:	getelementptr	 %5782 %5777
%5784:	store	 %5776 %5783
%5785:	sext	 %5771
%5786:	getelementptr	 accset %5785
%5787:	load	 %5786
%5788:	load	 num_rules
%5789:	icmp	 %5787 %5788
%5790:	br	 %5789 if.end93 if.then88

BASIC BLOCK if.then88
%5791:	sext	 %5771
%5792:	getelementptr	 accset %5791
%5793:	load	 %5792
%5794:	sext	 %5793
%5795:	load	 rule_useful
%5796:	getelementptr	 %5795 %5794
%5797:	store	 XXX %5796
%5798:	br	 if.end93

BASIC BLOCK if.end93
%5799:	br	 for.inc94

BASIC BLOCK for.inc94
%5800:	add	 %5771 XXX
%5801:	br	 for.cond75

BASIC BLOCK for.end96
%5802:	sext	 %5699
%5803:	load	 accsiz
%5804:	getelementptr	 %5803 %5802
%5805:	store	 nacc %5804
%5806:	br	 if.end122

BASIC BLOCK if.else99
%5807:	load	 num_rules
%5808:	add	 %5807 XXX
%5809:	br	 for.cond101

BASIC BLOCK for.cond101
%5810:	phi	 XXX %5825
%5811:	phi	 %5808 %5823
%5812:	icmp	 %5810 nacc
%5813:	br	 %5812 for.end113 for.body103

BASIC BLOCK for.body103
%5814:	sext	 %5810
%5815:	getelementptr	 accset %5814
%5816:	load	 %5815
%5817:	icmp	 %5816 %5811
%5818:	br	 %5817 if.end110 if.then107

BASIC BLOCK if.then107
%5819:	sext	 %5810
%5820:	getelementptr	 accset %5819
%5821:	load	 %5820
%5822:	br	 if.end110

BASIC BLOCK if.end110
%5823:	phi	 %5821 %5811
%5824:	br	 for.inc111

BASIC BLOCK for.inc111
%5825:	add	 %5810 XXX
%5826:	br	 for.cond101

BASIC BLOCK for.end113
%5827:	sext	 %5699
%5828:	load	 dfaacc
%5829:	getelementptr	 %5828 %5827
%5830:	bitcast	 %5829
%5831:	store	 %5811 %5830
%5832:	load	 num_rules
%5833:	icmp	 %5811 %5832
%5834:	br	 %5833 if.end121 if.then118

BASIC BLOCK if.then118
%5835:	sext	 %5811
%5836:	load	 rule_useful
%5837:	getelementptr	 %5836 %5835
%5838:	store	 XXX %5837
%5839:	br	 if.end121

BASIC BLOCK if.end121
%5840:	br	 if.end122

BASIC BLOCK if.end122
%5841:	br	 if.end123

BASIC BLOCK if.end123
%5842:	store	 %5699 newds_addr
%5843:	br	 return

BASIC BLOCK return
%5844:	phi	 XXX XXX
%5845:	ret	 %5844

FUNCTION mkechar

BASIC BLOCK entry
%5846:	sext	 tch
%5847:	getelementptr	 fwd %5846
%5848:	load	 %5847
%5849:	icmp	 %5848 XXX
%5850:	br	 %5849 if.end if.then

BASIC BLOCK if.then
%5851:	sext	 tch
%5852:	getelementptr	 bck %5851
%5853:	load	 %5852
%5854:	sext	 tch
%5855:	getelementptr	 fwd %5854
%5856:	load	 %5855
%5857:	sext	 %5856
%5858:	getelementptr	 bck %5857
%5859:	store	 %5853 %5858
%5860:	br	 if.end

BASIC BLOCK if.end
%5861:	sext	 tch
%5862:	getelementptr	 bck %5861
%5863:	load	 %5862
%5864:	icmp	 %5863 XXX
%5865:	br	 %5864 if.end17 if.then10

BASIC BLOCK if.then10
%5866:	sext	 tch
%5867:	getelementptr	 fwd %5866
%5868:	load	 %5867
%5869:	sext	 tch
%5870:	getelementptr	 bck %5869
%5871:	load	 %5870
%5872:	sext	 %5871
%5873:	getelementptr	 fwd %5872
%5874:	store	 %5868 %5873
%5875:	br	 if.end17

BASIC BLOCK if.end17
%5876:	sext	 tch
%5877:	getelementptr	 fwd %5876
%5878:	store	 XXX %5877
%5879:	sext	 tch
%5880:	getelementptr	 bck %5879
%5881:	store	 XXX %5880
%5882:	ret	

FUNCTION mkeccl

BASIC BLOCK entry
%5883:	br	 while.cond

BASIC BLOCK while.cond
%5884:	phi	 XXX %5996
%5885:	icmp	 %5884 lenccl
%5886:	br	 %5885 while.end while.body

BASIC BLOCK while.body
%5887:	sext	 %5884
%5888:	getelementptr	 ccls %5887
%5889:	load	 %5888
%5890:	zext	 %5889
%5891:	icmp	 NUL_mapping XXX
%5892:	br	 %5891 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%5893:	icmp	 %5890 XXX
%5894:	br	 %5893 if.end if.then

BASIC BLOCK if.then
%5895:	br	 if.end

BASIC BLOCK if.end
%5896:	phi	 NUL_mapping %5890 %5890
%5897:	sext	 %5896
%5898:	getelementptr	 bck %5897
%5899:	load	 %5898
%5900:	add	 %5884 XXX
%5901:	sext	 %5896
%5902:	getelementptr	 fwd %5901
%5903:	load	 %5902
%5904:	br	 for.cond

BASIC BLOCK for.cond
%5905:	phi	 %5899 %5967
%5906:	phi	 %5896 %5968
%5907:	phi	 %5903 %5972
%5908:	phi	 %5900 %5916
%5909:	icmp	 %5907 XXX
%5910:	br	 %5909 land.end land.rhs

BASIC BLOCK land.rhs
%5911:	icmp	 %5907 llsiz
%5912:	br	 land.end

BASIC BLOCK land.end
%5913:	phi	 XXX %5911
%5914:	br	 %5913 for.end56 for.body

BASIC BLOCK for.body
%5915:	br	 for.cond11

BASIC BLOCK for.cond11
%5916:	phi	 %5908 %5955
%5917:	icmp	 %5916 lenccl
%5918:	br	 %5917 for.end for.body14

BASIC BLOCK for.body14
%5919:	icmp	 NUL_mapping XXX
%5920:	br	 %5919 if.else land.lhs.true16

BASIC BLOCK land.lhs.true16
%5921:	sext	 %5916
%5922:	getelementptr	 ccls %5921
%5923:	load	 %5922
%5924:	zext	 %5923
%5925:	icmp	 %5924 XXX
%5926:	br	 %5925 if.else if.then22

BASIC BLOCK if.then22
%5927:	br	 if.end26

BASIC BLOCK if.else
%5928:	sext	 %5916
%5929:	getelementptr	 ccls %5928
%5930:	load	 %5929
%5931:	zext	 %5930
%5932:	br	 if.end26

BASIC BLOCK if.end26
%5933:	phi	 NUL_mapping %5931
%5934:	icmp	 %5933 %5907
%5935:	br	 %5934 if.end30 if.then29

BASIC BLOCK if.then29
%5936:	br	 for.end

BASIC BLOCK if.end30
%5937:	icmp	 %5933 %5907
%5938:	br	 %5937 if.end44 land.lhs.true33

BASIC BLOCK land.lhs.true33
%5939:	sext	 %5916
%5940:	getelementptr	 mkeccl.cclflags XXX %5939
%5941:	load	 %5940
%5942:	icmp	 %5941 XXX
%5943:	br	 %5942 if.then37 if.end44

BASIC BLOCK if.then37
%5944:	sext	 %5907
%5945:	getelementptr	 bck %5944
%5946:	store	 %5906 %5945
%5947:	sext	 %5906
%5948:	getelementptr	 fwd %5947
%5949:	store	 %5907 %5948
%5950:	sext	 %5916
%5951:	getelementptr	 mkeccl.cclflags XXX %5950
%5952:	store	 XXX %5951
%5953:	br	 next_pt

BASIC BLOCK if.end44
%5954:	br	 for.inc

BASIC BLOCK for.inc
%5955:	add	 %5916 XXX
%5956:	br	 for.cond11

BASIC BLOCK for.end
%5957:	sext	 %5907
%5958:	getelementptr	 bck %5957
%5959:	store	 %5905 %5958
%5960:	icmp	 %5905 XXX
%5961:	br	 %5960 if.end52 if.then49

BASIC BLOCK if.then49
%5962:	sext	 %5905
%5963:	getelementptr	 fwd %5962
%5964:	store	 %5907 %5963
%5965:	br	 if.end52

BASIC BLOCK if.end52
%5966:	br	 next_pt

BASIC BLOCK next_pt
%5967:	phi	 %5907 %5905
%5968:	phi	 %5906 %5907
%5969:	br	 for.inc53

BASIC BLOCK for.inc53
%5970:	sext	 %5907
%5971:	getelementptr	 fwd %5970
%5972:	load	 %5971
%5973:	br	 for.cond

BASIC BLOCK for.end56
%5974:	sext	 %5896
%5975:	getelementptr	 bck %5974
%5976:	load	 %5975
%5977:	icmp	 %5976 XXX
%5978:	br	 %5977 lor.lhs.false if.then65

BASIC BLOCK lor.lhs.false
%5979:	sext	 %5896
%5980:	getelementptr	 bck %5979
%5981:	load	 %5980
%5982:	icmp	 %5905 %5981
%5983:	br	 %5982 if.end70 if.then65

BASIC BLOCK if.then65
%5984:	sext	 %5896
%5985:	getelementptr	 bck %5984
%5986:	store	 XXX %5985
%5987:	sext	 %5905
%5988:	getelementptr	 fwd %5987
%5989:	store	 XXX %5988
%5990:	br	 if.end70

BASIC BLOCK if.end70
%5991:	sext	 %5906
%5992:	getelementptr	 fwd %5991
%5993:	store	 XXX %5992
%5994:	add	 %5884 XXX
%5995:	br	 for.cond74

BASIC BLOCK for.cond74
%5996:	phi	 %5994 %6011
%5997:	sext	 %5996
%5998:	getelementptr	 mkeccl.cclflags XXX %5997
%5999:	load	 %5998
%6000:	zext	 %5999
%6001:	icmp	 %6000 XXX
%6002:	br	 %6001 land.end82 land.rhs79

BASIC BLOCK land.rhs79
%6003:	icmp	 %5996 lenccl
%6004:	br	 land.end82

BASIC BLOCK land.end82
%6005:	phi	 XXX %6003
%6006:	br	 %6005 for.end88 for.body83

BASIC BLOCK for.body83
%6007:	sext	 %5996
%6008:	getelementptr	 mkeccl.cclflags XXX %6007
%6009:	store	 XXX %6008
%6010:	br	 for.inc86

BASIC BLOCK for.inc86
%6011:	add	 %5996 XXX
%6012:	br	 for.cond74

BASIC BLOCK for.end88
%6013:	br	 while.cond

BASIC BLOCK while.end
%6014:	ret	

FUNCTION do_indent

BASIC BLOCK entry
%6015:	load	 indent_level
%6016:	mul	 %6015 XXX
%6017:	br	 while.cond

BASIC BLOCK while.cond
%6018:	phi	 %6016 %6022
%6019:	icmp	 %6018 XXX
%6020:	br	 %6019 while.end while.body

BASIC BLOCK while.body
%6021:	call	 XXX putchar
%6022:	sub	 %6018 XXX
%6023:	br	 while.cond

BASIC BLOCK while.end
%6024:	br	 while.cond1

BASIC BLOCK while.cond1
%6025:	phi	 %6018 %6029
%6026:	icmp	 %6025 XXX
%6027:	br	 %6026 while.end5 while.body3

BASIC BLOCK while.body3
%6028:	call	 XXX putchar
%6029:	add	 %6025 XXX
%6030:	br	 while.cond1

BASIC BLOCK while.end5
%6031:	ret	

FUNCTION gen_backing_up

BASIC BLOCK entry
%6032:	load	 reject
%6033:	icmp	 %6032 XXX
%6034:	br	 %6033 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%6035:	load	 num_backing_up
%6036:	icmp	 %6035 XXX
%6037:	br	 %6036 if.end if.then

BASIC BLOCK if.then
%6038:	br	 return

BASIC BLOCK if.end
%6039:	load	 fullspd
%6040:	icmp	 %6039 XXX
%6041:	br	 %6040 if.else if.then2

BASIC BLOCK if.then2
%6042:	call	 XXX indent_puts
%6043:	br	 if.end3

BASIC BLOCK if.else
%6044:	call	 XXX indent_puts
%6045:	br	 if.end3

BASIC BLOCK if.end3
%6046:	load	 indent_level
%6047:	add	 %6046 XXX
%6048:	store	 %6047 indent_level
%6049:	call	 XXX indent_puts
%6050:	call	 XXX indent_puts
%6051:	call	 XXX indent_puts
%6052:	call	 XXX indent_puts
%6053:	load	 indent_level
%6054:	add	 %6053 XXX
%6055:	store	 %6054 indent_level
%6056:	br	 return

BASIC BLOCK return
%6057:	ret	

FUNCTION indent_puts

BASIC BLOCK entry
%6058:	call	 do_indent
%6059:	call	 str puts
%6060:	ret	

FUNCTION gen_bu_action

BASIC BLOCK entry
%6061:	load	 reject
%6062:	icmp	 %6061 XXX
%6063:	br	 %6062 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%6064:	load	 num_backing_up
%6065:	icmp	 %6064 XXX
%6066:	br	 %6065 if.end if.then

BASIC BLOCK if.then
%6067:	br	 return

BASIC BLOCK if.end
%6068:	store	 XXX indent_level
%6069:	call	 XXX indent_puts
%6070:	call	 XXX indent_puts
%6071:	call	 XXX indent_puts
%6072:	load	 fullspd
%6073:	icmp	 %6072 XXX
%6074:	br	 %6073 lor.lhs.false2 if.then4

BASIC BLOCK lor.lhs.false2
%6075:	load	 fulltbl
%6076:	icmp	 %6075 XXX
%6077:	br	 %6076 if.else if.then4

BASIC BLOCK if.then4
%6078:	call	 XXX indent_puts
%6079:	br	 if.end5

BASIC BLOCK if.else
%6080:	call	 XXX indent_puts
%6081:	br	 if.end5

BASIC BLOCK if.end5
%6082:	call	 XXX indent_puts
%6083:	call	 XXX indent_puts
%6084:	call	 XXX putchar
%6085:	store	 XXX indent_level
%6086:	br	 return

BASIC BLOCK return
%6087:	ret	

FUNCTION genctbl

BASIC BLOCK entry
%6088:	load	 num_rules
%6089:	add	 %6088 XXX
%6090:	load	 tblend
%6091:	load	 numecs
%6092:	add	 %6090 %6091
%6093:	add	 %6092 XXX
%6094:	call	 XXX %6093 printf
%6095:	call	 XXX printf
%6096:	br	 while.cond

BASIC BLOCK while.cond
%6097:	load	 tblend
%6098:	add	 %6097 XXX
%6099:	load	 current_max_xpairs
%6100:	icmp	 %6098 %6099
%6101:	br	 %6100 while.end while.body

BASIC BLOCK while.body
%6102:	call	 expand_nxt_chk
%6103:	br	 while.cond

BASIC BLOCK while.end
%6104:	br	 while.cond5

BASIC BLOCK while.cond5
%6105:	load	 lastdfa
%6106:	add	 %6105 XXX
%6107:	load	 current_max_dfas
%6108:	icmp	 %6106 %6107
%6109:	br	 %6108 while.end9 while.body8

BASIC BLOCK while.body8
%6110:	call	 increase_max_dfas
%6111:	br	 while.cond5

BASIC BLOCK while.end9
%6112:	load	 tblend
%6113:	add	 %6112 XXX
%6114:	load	 lastdfa
%6115:	add	 %6114 XXX
%6116:	sext	 %6115
%6117:	load	 base
%6118:	getelementptr	 %6117 %6116
%6119:	store	 %6113 %6118
%6120:	load	 tblend
%6121:	add	 %6120 XXX
%6122:	sext	 %6121
%6123:	load	 nxt
%6124:	getelementptr	 %6123 %6122
%6125:	store	 %6089 %6124
%6126:	load	 numecs
%6127:	add	 %6126 XXX
%6128:	load	 tblend
%6129:	add	 %6128 XXX
%6130:	sext	 %6129
%6131:	load	 chk
%6132:	getelementptr	 %6131 %6130
%6133:	store	 %6127 %6132
%6134:	load	 tblend
%6135:	add	 %6134 XXX
%6136:	sext	 %6135
%6137:	load	 chk
%6138:	getelementptr	 %6137 %6136
%6139:	store	 XXX %6138
%6140:	load	 tblend
%6141:	add	 %6140 XXX
%6142:	sext	 %6141
%6143:	load	 nxt
%6144:	getelementptr	 %6143 %6142
%6145:	store	 XXX %6144
%6146:	br	 for.cond

BASIC BLOCK for.cond
%6147:	phi	 XXX %6175
%6148:	load	 lastdfa
%6149:	icmp	 %6147 %6148
%6150:	br	 %6149 for.end for.body

BASIC BLOCK for.body
%6151:	sext	 %6147
%6152:	load	 dfaacc
%6153:	getelementptr	 %6152 %6151
%6154:	bitcast	 %6153
%6155:	load	 %6154
%6156:	sext	 %6147
%6157:	load	 base
%6158:	getelementptr	 %6157 %6156
%6159:	load	 %6158
%6160:	sext	 %6159
%6161:	load	 chk
%6162:	getelementptr	 %6161 %6160
%6163:	store	 XXX %6162
%6164:	sub	 %6159 XXX
%6165:	sext	 %6164
%6166:	load	 chk
%6167:	getelementptr	 %6166 %6165
%6168:	store	 XXX %6167
%6169:	sub	 %6159 XXX
%6170:	sext	 %6169
%6171:	load	 nxt
%6172:	getelementptr	 %6171 %6170
%6173:	store	 %6155 %6172
%6174:	br	 for.inc

BASIC BLOCK for.inc
%6175:	add	 %6147 XXX
%6176:	br	 for.cond

BASIC BLOCK for.end
%6177:	br	 for.cond37

BASIC BLOCK for.cond37
%6178:	phi	 XXX %6247
%6179:	load	 tblend
%6180:	icmp	 %6178 %6179
%6181:	br	 %6180 for.end76 for.body39

BASIC BLOCK for.body39
%6182:	sext	 %6178
%6183:	load	 chk
%6184:	getelementptr	 %6183 %6182
%6185:	load	 %6184
%6186:	icmp	 %6185 XXX
%6187:	br	 %6186 if.else if.then

BASIC BLOCK if.then
%6188:	load	 lastdfa
%6189:	add	 %6188 XXX
%6190:	sext	 %6189
%6191:	load	 base
%6192:	getelementptr	 %6191 %6190
%6193:	load	 %6192
%6194:	sub	 %6193 %6178
%6195:	call	 XXX %6194 transition_struct_out
%6196:	br	 if.end73

BASIC BLOCK if.else
%6197:	sext	 %6178
%6198:	load	 chk
%6199:	getelementptr	 %6198 %6197
%6200:	load	 %6199
%6201:	icmp	 %6200 XXX
%6202:	br	 %6201 if.else53 if.then50

BASIC BLOCK if.then50
%6203:	sext	 %6178
%6204:	load	 nxt
%6205:	getelementptr	 %6204 %6203
%6206:	load	 %6205
%6207:	call	 XXX %6206 transition_struct_out
%6208:	br	 if.end72

BASIC BLOCK if.else53
%6209:	sext	 %6178
%6210:	load	 chk
%6211:	getelementptr	 %6210 %6209
%6212:	load	 %6211
%6213:	load	 numecs
%6214:	icmp	 %6212 %6213
%6215:	br	 %6214 lor.lhs.false if.then60

BASIC BLOCK lor.lhs.false
%6216:	sext	 %6178
%6217:	load	 chk
%6218:	getelementptr	 %6217 %6216
%6219:	load	 %6218
%6220:	icmp	 %6219 XXX
%6221:	br	 %6220 if.else61 if.then60

BASIC BLOCK if.then60
%6222:	call	 XXX XXX transition_struct_out
%6223:	br	 if.end

BASIC BLOCK if.else61
%6224:	sext	 %6178
%6225:	load	 chk
%6226:	getelementptr	 %6225 %6224
%6227:	load	 %6226
%6228:	sext	 %6178
%6229:	load	 nxt
%6230:	getelementptr	 %6229 %6228
%6231:	load	 %6230
%6232:	sext	 %6231
%6233:	load	 base
%6234:	getelementptr	 %6233 %6232
%6235:	load	 %6234
%6236:	sext	 %6178
%6237:	load	 chk
%6238:	getelementptr	 %6237 %6236
%6239:	load	 %6238
%6240:	sub	 %6178 %6239
%6241:	sub	 %6235 %6240
%6242:	call	 %6227 %6241 transition_struct_out
%6243:	br	 if.end

BASIC BLOCK if.end
%6244:	br	 if.end72

BASIC BLOCK if.end72
%6245:	br	 if.end73

BASIC BLOCK if.end73
%6246:	br	 for.inc74

BASIC BLOCK for.inc74
%6247:	add	 %6178 XXX
%6248:	br	 for.cond37

BASIC BLOCK for.end76
%6249:	load	 tblend
%6250:	add	 %6249 XXX
%6251:	sext	 %6250
%6252:	load	 chk
%6253:	getelementptr	 %6252 %6251
%6254:	load	 %6253
%6255:	load	 tblend
%6256:	add	 %6255 XXX
%6257:	sext	 %6256
%6258:	load	 nxt
%6259:	getelementptr	 %6258 %6257
%6260:	load	 %6259
%6261:	call	 %6254 %6260 transition_struct_out
%6262:	load	 tblend
%6263:	add	 %6262 XXX
%6264:	sext	 %6263
%6265:	load	 chk
%6266:	getelementptr	 %6265 %6264
%6267:	load	 %6266
%6268:	load	 tblend
%6269:	add	 %6268 XXX
%6270:	sext	 %6269
%6271:	load	 nxt
%6272:	getelementptr	 %6271 %6270
%6273:	load	 %6272
%6274:	call	 %6267 %6273 transition_struct_out
%6275:	call	 XXX printf
%6276:	call	 XXX printf
%6277:	load	 lastsc
%6278:	mul	 %6277 XXX
%6279:	add	 %6278 XXX
%6280:	call	 XXX %6279 printf
%6281:	call	 XXX printf
%6282:	br	 for.cond94

BASIC BLOCK for.cond94
%6283:	phi	 XXX %6294
%6284:	load	 lastsc
%6285:	mul	 %6284 XXX
%6286:	icmp	 %6283 %6285
%6287:	br	 %6286 for.end103 for.body97

BASIC BLOCK for.body97
%6288:	sext	 %6283
%6289:	load	 base
%6290:	getelementptr	 %6289 %6288
%6291:	load	 %6290
%6292:	call	 XXX %6291 printf
%6293:	br	 for.inc101

BASIC BLOCK for.inc101
%6294:	add	 %6283 XXX
%6295:	br	 for.cond94

BASIC BLOCK for.end103
%6296:	call	 dataend
%6297:	load	 useecs
%6298:	icmp	 %6297 XXX
%6299:	br	 %6298 if.end105 if.then104

BASIC BLOCK if.then104
%6300:	call	 genecs
%6301:	br	 if.end105

BASIC BLOCK if.end105
%6302:	ret	

FUNCTION expand_nxt_chk

BASIC BLOCK entry
%6303:	load	 current_max_xpairs
%6304:	load	 current_max_xpairs
%6305:	add	 %6304 XXX
%6306:	store	 %6305 current_max_xpairs
%6307:	load	 num_reallocs
%6308:	add	 %6307 XXX
%6309:	store	 %6308 num_reallocs
%6310:	load	 nxt
%6311:	bitcast	 %6310
%6312:	load	 current_max_xpairs
%6313:	call	 %6311 %6312 XXX reallocate_array
%6314:	bitcast	 %6313
%6315:	store	 %6314 nxt
%6316:	load	 chk
%6317:	bitcast	 %6316
%6318:	load	 current_max_xpairs
%6319:	call	 %6317 %6318 XXX reallocate_array
%6320:	bitcast	 %6319
%6321:	store	 %6320 chk
%6322:	load	 chk
%6323:	sext	 %6303
%6324:	getelementptr	 %6322 %6323
%6325:	bitcast	 %6324
%6326:	call	 %6325 XXX zero_out
%6327:	ret	

FUNCTION transition_struct_out

BASIC BLOCK entry
%6328:	call	 XXX element_v element_n printf
%6329:	load	 datapos
%6330:	add	 %6329 XXX
%6331:	store	 %6330 datapos
%6332:	load	 datapos
%6333:	icmp	 %6332 XXX
%6334:	br	 %6333 if.end5 if.then

BASIC BLOCK if.then
%6335:	call	 XXX putchar
%6336:	load	 dataline
%6337:	add	 %6336 XXX
%6338:	store	 %6337 dataline
%6339:	srem	 %6337 XXX
%6340:	icmp	 %6339 XXX
%6341:	br	 %6340 if.end if.then3

BASIC BLOCK if.then3
%6342:	call	 XXX putchar
%6343:	br	 if.end

BASIC BLOCK if.end
%6344:	store	 XXX datapos
%6345:	br	 if.end5

BASIC BLOCK if.end5
%6346:	ret	

FUNCTION genecs

BASIC BLOCK entry
%6347:	load	 csize
%6348:	call	 XXX XXX %6347 printf
%6349:	br	 for.cond

BASIC BLOCK for.cond
%6350:	phi	 XXX %6392
%6351:	load	 csize
%6352:	icmp	 %6350 %6351
%6353:	br	 %6352 for.end for.body

BASIC BLOCK for.body
%6354:	load	 caseins
%6355:	icmp	 %6354 XXX
%6356:	br	 %6355 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%6357:	icmp	 %6350 XXX
%6358:	br	 %6357 if.end land.lhs.true2

BASIC BLOCK land.lhs.true2
%6359:	icmp	 %6350 XXX
%6360:	br	 %6359 if.end if.then

BASIC BLOCK if.then
%6361:	call	 %6350 clower
%6362:	zext	 %6361
%6363:	getelementptr	 ecgroup XXX %6362
%6364:	load	 %6363
%6365:	sext	 %6350
%6366:	getelementptr	 ecgroup XXX %6365
%6367:	store	 %6364 %6366
%6368:	br	 if.end

BASIC BLOCK if.end
%6369:	sext	 %6350
%6370:	getelementptr	 ecgroup XXX %6369
%6371:	load	 %6370
%6372:	icmp	 %6371 XXX
%6373:	br	 %6372 cond.false cond.true

BASIC BLOCK cond.true
%6374:	sext	 %6350
%6375:	getelementptr	 ecgroup XXX %6374
%6376:	load	 %6375
%6377:	sub	 XXX %6376
%6378:	br	 cond.end

BASIC BLOCK cond.false
%6379:	sext	 %6350
%6380:	getelementptr	 ecgroup XXX %6379
%6381:	load	 %6380
%6382:	br	 cond.end

BASIC BLOCK cond.end
%6383:	phi	 %6377 %6381
%6384:	sext	 %6350
%6385:	getelementptr	 ecgroup XXX %6384
%6386:	store	 %6383 %6385
%6387:	sext	 %6350
%6388:	getelementptr	 ecgroup XXX %6387
%6389:	load	 %6388
%6390:	call	 %6389 mkdata
%6391:	br	 for.inc

BASIC BLOCK for.inc
%6392:	add	 %6350 XXX
%6393:	br	 for.cond

BASIC BLOCK for.end
%6394:	call	 dataend
%6395:	load	 trace
%6396:	icmp	 %6395 XXX
%6397:	br	 %6396 if.end38 if.then19

BASIC BLOCK if.then19
%6398:	load	 err
%6399:	call	 XXX %6398 fputs
%6400:	load	 csize
%6401:	sdiv	 %6400 XXX
%6402:	br	 for.cond21

BASIC BLOCK for.cond21
%6403:	phi	 XXX %6425
%6404:	icmp	 %6403 %6401
%6405:	br	 %6404 for.end37 for.body23

BASIC BLOCK for.body23
%6406:	br	 for.cond24

BASIC BLOCK for.cond24
%6407:	phi	 %6403 %6420
%6408:	load	 csize
%6409:	icmp	 %6407 %6408
%6410:	br	 %6409 for.end33 for.body26

BASIC BLOCK for.body26
%6411:	load	 err
%6412:	call	 %6407 readable_form
%6413:	sext	 %6407
%6414:	getelementptr	 ecgroup XXX %6413
%6415:	load	 %6414
%6416:	call	 %6411 XXX %6412 %6415 fprintf
%6417:	load	 err
%6418:	call	 XXX %6417 _IO_putc
%6419:	br	 for.inc32

BASIC BLOCK for.inc32
%6420:	add	 %6407 %6401
%6421:	br	 for.cond24

BASIC BLOCK for.end33
%6422:	load	 err
%6423:	call	 XXX %6422 _IO_putc
%6424:	br	 for.inc35

BASIC BLOCK for.inc35
%6425:	add	 %6403 XXX
%6426:	br	 for.cond21

BASIC BLOCK for.end37
%6427:	br	 if.end38

BASIC BLOCK if.end38
%6428:	ret	

FUNCTION mkdata

BASIC BLOCK entry
%6429:	load	 datapos
%6430:	icmp	 %6429 XXX
%6431:	br	 %6430 if.end if.then

BASIC BLOCK if.then
%6432:	call	 XXX putchar
%6433:	call	 dataflush
%6434:	br	 if.end

BASIC BLOCK if.end
%6435:	load	 datapos
%6436:	icmp	 %6435 XXX
%6437:	br	 %6436 if.else if.then2

BASIC BLOCK if.then2
%6438:	load	 stdout
%6439:	call	 XXX %6438 fputs
%6440:	br	 if.end5

BASIC BLOCK if.else
%6441:	call	 XXX putchar
%6442:	br	 if.end5

BASIC BLOCK if.end5
%6443:	load	 datapos
%6444:	add	 %6443 XXX
%6445:	store	 %6444 datapos
%6446:	call	 XXX value printf
%6447:	ret	

FUNCTION gen_find_action

BASIC BLOCK entry
%6448:	load	 fullspd
%6449:	icmp	 %6448 XXX
%6450:	br	 %6449 if.else if.then

BASIC BLOCK if.then
%6451:	call	 XXX indent_puts
%6452:	br	 if.end27

BASIC BLOCK if.else
%6453:	load	 fulltbl
%6454:	icmp	 %6453 XXX
%6455:	br	 %6454 if.else3 if.then2

BASIC BLOCK if.then2
%6456:	call	 XXX indent_puts
%6457:	br	 if.end26

BASIC BLOCK if.else3
%6458:	load	 reject
%6459:	icmp	 %6458 XXX
%6460:	br	 %6459 if.else24 if.then5

BASIC BLOCK if.then5
%6461:	call	 XXX indent_puts
%6462:	call	 XXX indent_puts
%6463:	call	 XXX puts
%6464:	call	 XXX indent_puts
%6465:	load	 indent_level
%6466:	add	 %6465 XXX
%6467:	store	 %6466 indent_level
%6468:	call	 XXX indent_puts
%6469:	call	 XXX indent_puts
%6470:	load	 indent_level
%6471:	add	 %6470 XXX
%6472:	store	 %6471 indent_level
%6473:	call	 XXX indent_puts
%6474:	call	 XXX indent_puts
%6475:	load	 variable_trailing_context_rules
%6476:	icmp	 %6475 XXX
%6477:	br	 %6476 if.else18 if.then8

BASIC BLOCK if.then8
%6478:	call	 XXX indent_puts
%6479:	call	 XXX indent_puts
%6480:	load	 indent_level
%6481:	add	 %6480 XXX
%6482:	store	 %6481 indent_level
%6483:	call	 XXX indent_puts
%6484:	call	 XXX indent_puts
%6485:	load	 indent_level
%6486:	add	 %6485 XXX
%6487:	store	 %6486 indent_level
%6488:	call	 XXX indent_puts
%6489:	call	 XXX indent_puts
%6490:	call	 XXX indent_puts
%6491:	call	 XXX indent_puts
%6492:	call	 XXX indent_puts
%6493:	load	 indent_level
%6494:	add	 %6493 XXX
%6495:	store	 %6494 indent_level
%6496:	call	 XXX indent_puts
%6497:	load	 indent_level
%6498:	add	 %6497 XXX
%6499:	store	 %6498 indent_level
%6500:	call	 XXX indent_puts
%6501:	load	 indent_level
%6502:	add	 %6501 XXX
%6503:	store	 %6502 indent_level
%6504:	call	 XXX indent_puts
%6505:	call	 XXX indent_puts
%6506:	call	 XXX indent_puts
%6507:	load	 real_reject
%6508:	icmp	 %6507 XXX
%6509:	br	 %6508 if.end if.then14

BASIC BLOCK if.then14
%6510:	call	 XXX indent_puts
%6511:	call	 XXX indent_puts
%6512:	call	 XXX indent_puts
%6513:	br	 if.end

BASIC BLOCK if.end
%6514:	call	 XXX indent_puts
%6515:	load	 indent_level
%6516:	add	 %6515 XXX
%6517:	store	 %6516 indent_level
%6518:	call	 XXX indent_puts
%6519:	load	 indent_level
%6520:	add	 %6519 XXX
%6521:	store	 %6520 indent_level
%6522:	call	 XXX indent_puts
%6523:	call	 XXX indent_puts
%6524:	call	 XXX indent_puts
%6525:	call	 XXX indent_puts
%6526:	call	 XXX indent_puts
%6527:	call	 XXX indent_puts
%6528:	load	 indent_level
%6529:	add	 %6528 XXX
%6530:	store	 %6529 indent_level
%6531:	call	 XXX indent_puts
%6532:	call	 XXX indent_puts
%6533:	br	 if.end21

BASIC BLOCK if.else18
%6534:	load	 indent_level
%6535:	add	 %6534 XXX
%6536:	store	 %6535 indent_level
%6537:	call	 XXX indent_puts
%6538:	call	 XXX indent_puts
%6539:	call	 XXX indent_puts
%6540:	call	 XXX indent_puts
%6541:	load	 indent_level
%6542:	add	 %6541 XXX
%6543:	store	 %6542 indent_level
%6544:	br	 if.end21

BASIC BLOCK if.end21
%6545:	call	 XXX indent_puts
%6546:	load	 indent_level
%6547:	add	 %6546 XXX
%6548:	store	 %6547 indent_level
%6549:	call	 XXX indent_puts
%6550:	call	 XXX indent_puts
%6551:	call	 XXX indent_puts
%6552:	call	 XXX indent_puts
%6553:	load	 indent_level
%6554:	add	 %6553 XXX
%6555:	store	 %6554 indent_level
%6556:	br	 if.end25

BASIC BLOCK if.else24
%6557:	call	 XXX indent_puts
%6558:	br	 if.end25

BASIC BLOCK if.end25
%6559:	br	 if.end26

BASIC BLOCK if.end26
%6560:	br	 if.end27

BASIC BLOCK if.end27
%6561:	ret	

FUNCTION genftbl

BASIC BLOCK entry
%6562:	load	 num_rules
%6563:	add	 %6562 XXX
%6564:	load	 long_align
%6565:	icmp	 %6564 XXX
%6566:	select	 %6565 XXX XXX
%6567:	load	 lastdfa
%6568:	add	 %6567 XXX
%6569:	call	 %6566 XXX %6568 printf
%6570:	load	 end_of_buffer_state
%6571:	sext	 %6570
%6572:	load	 dfaacc
%6573:	getelementptr	 %6572 %6571
%6574:	bitcast	 %6573
%6575:	store	 %6563 %6574
%6576:	br	 for.cond

BASIC BLOCK for.cond
%6577:	phi	 XXX %6596
%6578:	load	 lastdfa
%6579:	icmp	 %6577 %6578
%6580:	br	 %6579 for.end for.body

BASIC BLOCK for.body
%6581:	sext	 %6577
%6582:	load	 dfaacc
%6583:	getelementptr	 %6582 %6581
%6584:	bitcast	 %6583
%6585:	load	 %6584
%6586:	call	 %6585 mkdata
%6587:	load	 trace
%6588:	icmp	 %6587 XXX
%6589:	br	 %6588 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%6590:	icmp	 %6585 XXX
%6591:	br	 %6590 if.end if.then

BASIC BLOCK if.then
%6592:	load	 err
%6593:	call	 %6592 XXX %6577 %6585 fprintf
%6594:	br	 if.end

BASIC BLOCK if.end
%6595:	br	 for.inc

BASIC BLOCK for.inc
%6596:	add	 %6577 XXX
%6597:	br	 for.cond

BASIC BLOCK for.end
%6598:	call	 dataend
%6599:	load	 useecs
%6600:	icmp	 %6599 XXX
%6601:	br	 %6600 if.end10 if.then9

BASIC BLOCK if.then9
%6602:	call	 genecs
%6603:	br	 if.end10

BASIC BLOCK if.end10
%6604:	ret	

FUNCTION gen_next_compressed_state

BASIC BLOCK entry
%6605:	call	 XXX char_map indent_put2s
%6606:	call	 gen_backing_up
%6607:	call	 XXX indent_puts
%6608:	load	 indent_level
%6609:	add	 %6608 XXX
%6610:	store	 %6609 indent_level
%6611:	call	 XXX indent_puts
%6612:	call	 XXX indent_puts
%6613:	load	 usemecs
%6614:	icmp	 %6613 XXX
%6615:	br	 %6614 if.end if.then

BASIC BLOCK if.then
%6616:	call	 do_indent
%6617:	load	 lastdfa
%6618:	add	 %6617 XXX
%6619:	call	 XXX %6618 printf
%6620:	load	 indent_level
%6621:	add	 %6620 XXX
%6622:	store	 %6621 indent_level
%6623:	call	 XXX indent_puts
%6624:	load	 indent_level
%6625:	add	 %6624 XXX
%6626:	store	 %6625 indent_level
%6627:	br	 if.end

BASIC BLOCK if.end
%6628:	call	 XXX indent_puts
%6629:	load	 indent_level
%6630:	add	 %6629 XXX
%6631:	store	 %6630 indent_level
%6632:	call	 XXX indent_puts
%6633:	ret	

FUNCTION indent_put2s

BASIC BLOCK entry
%6634:	call	 do_indent
%6635:	call	 fmt arg printf
%6636:	call	 XXX putchar
%6637:	ret	

FUNCTION gen_next_match

BASIC BLOCK entry
%6638:	load	 useecs
%6639:	icmp	 %6638 XXX
%6640:	select	 %6639 XXX XXX
%6641:	load	 useecs
%6642:	icmp	 %6641 XXX
%6643:	select	 %6642 XXX XXX
%6644:	load	 fulltbl
%6645:	icmp	 %6644 XXX
%6646:	br	 %6645 if.else if.then

BASIC BLOCK if.then
%6647:	call	 XXX %6640 indent_put2s
%6648:	load	 indent_level
%6649:	add	 %6648 XXX
%6650:	store	 %6649 indent_level
%6651:	load	 num_backing_up
%6652:	icmp	 %6651 XXX
%6653:	br	 %6652 if.end if.then4

BASIC BLOCK if.then4
%6654:	call	 XXX indent_puts
%6655:	call	 gen_backing_up
%6656:	call	 XXX putchar
%6657:	br	 if.end

BASIC BLOCK if.end
%6658:	call	 XXX indent_puts
%6659:	load	 num_backing_up
%6660:	icmp	 %6659 XXX
%6661:	br	 %6660 if.end7 if.then6

BASIC BLOCK if.then6
%6662:	call	 XXX indent_puts
%6663:	br	 if.end7

BASIC BLOCK if.end7
%6664:	load	 indent_level
%6665:	add	 %6664 XXX
%6666:	store	 %6665 indent_level
%6667:	call	 XXX putchar
%6668:	call	 XXX indent_puts
%6669:	br	 if.end34

BASIC BLOCK if.else
%6670:	load	 fullspd
%6671:	icmp	 %6670 XXX
%6672:	br	 %6671 if.else20 if.then10

BASIC BLOCK if.then10
%6673:	call	 XXX indent_puts
%6674:	call	 XXX indent_puts
%6675:	call	 XXX indent_puts
%6676:	call	 XXX %6640 indent_put2s
%6677:	call	 XXX indent_puts
%6678:	call	 XXX indent_puts
%6679:	call	 XXX %6643 indent_put2s
%6680:	load	 indent_level
%6681:	add	 %6680 XXX
%6682:	store	 %6681 indent_level
%6683:	load	 num_backing_up
%6684:	icmp	 %6683 XXX
%6685:	br	 %6684 if.end14 if.then13

BASIC BLOCK if.then13
%6686:	call	 XXX indent_puts
%6687:	br	 if.end14

BASIC BLOCK if.end14
%6688:	call	 XXX indent_puts
%6689:	load	 num_backing_up
%6690:	icmp	 %6689 XXX
%6691:	br	 %6690 if.end18 if.then16

BASIC BLOCK if.then16
%6692:	call	 XXX putchar
%6693:	call	 gen_backing_up
%6694:	call	 XXX indent_puts
%6695:	br	 if.end18

BASIC BLOCK if.end18
%6696:	load	 indent_level
%6697:	add	 %6696 XXX
%6698:	store	 %6697 indent_level
%6699:	call	 XXX indent_puts
%6700:	br	 if.end33

BASIC BLOCK if.else20
%6701:	call	 XXX indent_puts
%6702:	load	 indent_level
%6703:	add	 %6702 XXX
%6704:	store	 %6703 indent_level
%6705:	call	 XXX indent_puts
%6706:	call	 XXX gen_next_state
%6707:	call	 XXX indent_puts
%6708:	call	 XXX indent_puts
%6709:	load	 indent_level
%6710:	add	 %6709 XXX
%6711:	store	 %6710 indent_level
%6712:	call	 do_indent
%6713:	load	 interactive
%6714:	icmp	 %6713 XXX
%6715:	br	 %6714 if.else26 if.then24

BASIC BLOCK if.then24
%6716:	load	 jambase
%6717:	call	 XXX %6716 printf
%6718:	br	 if.end28

BASIC BLOCK if.else26
%6719:	load	 jamstate
%6720:	call	 XXX %6719 printf
%6721:	br	 if.end28

BASIC BLOCK if.end28
%6722:	load	 reject
%6723:	icmp	 %6722 XXX
%6724:	br	 %6723 land.lhs.true if.end32

BASIC BLOCK land.lhs.true
%6725:	load	 interactive
%6726:	icmp	 %6725 XXX
%6727:	br	 %6726 if.then31 if.end32

BASIC BLOCK if.then31
%6728:	call	 XXX indent_puts
%6729:	call	 XXX indent_puts
%6730:	br	 if.end32

BASIC BLOCK if.end32
%6731:	br	 if.end33

BASIC BLOCK if.end33
%6732:	br	 if.end34

BASIC BLOCK if.end34
%6733:	ret	

FUNCTION gen_next_state

BASIC BLOCK entry
%6734:	alloca	 XXX
%6735:	icmp	 worry_about_NULs XXX
%6736:	br	 %6735 if.else6 land.lhs.true

BASIC BLOCK land.lhs.true
%6737:	load	 nultrans
%6738:	icmp	 %6737 XXX
%6739:	br	 %6738 if.then if.else6

BASIC BLOCK if.then
%6740:	load	 useecs
%6741:	icmp	 %6740 XXX
%6742:	br	 %6741 if.else if.then3

BASIC BLOCK if.then3
%6743:	getelementptr	 %6734 XXX XXX
%6744:	load	 NUL_ec
%6745:	call	 %6743 XXX %6744 sprintf
%6746:	br	 if.end

BASIC BLOCK if.else
%6747:	getelementptr	 %6734 XXX XXX
%6748:	load	 NUL_ec
%6749:	call	 %6747 XXX %6748 sprintf
%6750:	br	 if.end

BASIC BLOCK if.end
%6751:	br	 if.end10

BASIC BLOCK if.else6
%6752:	getelementptr	 %6734 XXX XXX
%6753:	load	 useecs
%6754:	icmp	 %6753 XXX
%6755:	select	 %6754 XXX XXX
%6756:	call	 %6752 %6755 strcpy
%6757:	br	 if.end10

BASIC BLOCK if.end10
%6758:	icmp	 worry_about_NULs XXX
%6759:	br	 %6758 if.end20 land.lhs.true12

BASIC BLOCK land.lhs.true12
%6760:	load	 nultrans
%6761:	icmp	 %6760 XXX
%6762:	br	 %6761 if.end20 if.then14

BASIC BLOCK if.then14
%6763:	load	 fulltbl
%6764:	icmp	 %6763 XXX
%6765:	br	 %6764 land.lhs.true16 if.end19

BASIC BLOCK land.lhs.true16
%6766:	load	 fullspd
%6767:	icmp	 %6766 XXX
%6768:	br	 %6767 if.then18 if.end19

BASIC BLOCK if.then18
%6769:	call	 gen_backing_up
%6770:	br	 if.end19

BASIC BLOCK if.end19
%6771:	call	 XXX indent_puts
%6772:	load	 indent_level
%6773:	add	 %6772 XXX
%6774:	store	 %6773 indent_level
%6775:	call	 XXX indent_puts
%6776:	br	 if.end20

BASIC BLOCK if.end20
%6777:	load	 fulltbl
%6778:	icmp	 %6777 XXX
%6779:	br	 %6778 if.else24 if.then22

BASIC BLOCK if.then22
%6780:	getelementptr	 %6734 XXX XXX
%6781:	call	 XXX %6780 indent_put2s
%6782:	br	 if.end31

BASIC BLOCK if.else24
%6783:	load	 fullspd
%6784:	icmp	 %6783 XXX
%6785:	br	 %6784 if.else28 if.then26

BASIC BLOCK if.then26
%6786:	getelementptr	 %6734 XXX XXX
%6787:	call	 XXX %6786 indent_put2s
%6788:	br	 if.end30

BASIC BLOCK if.else28
%6789:	getelementptr	 %6734 XXX XXX
%6790:	call	 %6789 gen_next_compressed_state
%6791:	br	 if.end30

BASIC BLOCK if.end30
%6792:	br	 if.end31

BASIC BLOCK if.end31
%6793:	icmp	 worry_about_NULs XXX
%6794:	br	 %6793 if.end38 land.lhs.true33

BASIC BLOCK land.lhs.true33
%6795:	load	 nultrans
%6796:	icmp	 %6795 XXX
%6797:	br	 %6796 if.end38 if.then35

BASIC BLOCK if.then35
%6798:	call	 XXX indent_puts
%6799:	load	 indent_level
%6800:	add	 %6799 XXX
%6801:	store	 %6800 indent_level
%6802:	call	 XXX indent_puts
%6803:	load	 indent_level
%6804:	add	 %6803 XXX
%6805:	store	 %6804 indent_level
%6806:	call	 XXX indent_puts
%6807:	load	 indent_level
%6808:	add	 %6807 XXX
%6809:	store	 %6808 indent_level
%6810:	br	 if.end38

BASIC BLOCK if.end38
%6811:	load	 fullspd
%6812:	icmp	 %6811 XXX
%6813:	br	 %6812 lor.lhs.false if.then41

BASIC BLOCK lor.lhs.false
%6814:	load	 fulltbl
%6815:	icmp	 %6814 XXX
%6816:	br	 %6815 if.end42 if.then41

BASIC BLOCK if.then41
%6817:	call	 gen_backing_up
%6818:	br	 if.end42

BASIC BLOCK if.end42
%6819:	load	 reject
%6820:	icmp	 %6819 XXX
%6821:	br	 %6820 if.end45 if.then44

BASIC BLOCK if.then44
%6822:	call	 XXX indent_puts
%6823:	br	 if.end45

BASIC BLOCK if.end45
%6824:	ret	

FUNCTION gen_NUL_trans

BASIC BLOCK entry
%6825:	alloca	 XXX
%6826:	load	 num_backing_up
%6827:	icmp	 %6826 XXX
%6828:	br	 %6827 land.end land.rhs

BASIC BLOCK land.rhs
%6829:	load	 reject
%6830:	icmp	 %6829 XXX
%6831:	xor	 %6830 XXX
%6832:	br	 land.end

BASIC BLOCK land.end
%6833:	phi	 XXX %6831
%6834:	zext	 %6833
%6835:	icmp	 %6834 XXX
%6836:	br	 %6835 if.end if.then

BASIC BLOCK if.then
%6837:	call	 XXX indent_puts
%6838:	br	 if.end

BASIC BLOCK if.end
%6839:	call	 XXX putchar
%6840:	load	 nultrans
%6841:	icmp	 %6840 XXX
%6842:	br	 %6841 if.else if.then3

BASIC BLOCK if.then3
%6843:	call	 XXX indent_puts
%6844:	call	 XXX indent_puts
%6845:	br	 if.end20

BASIC BLOCK if.else
%6846:	load	 fulltbl
%6847:	icmp	 %6846 XXX
%6848:	br	 %6847 if.else7 if.then5

BASIC BLOCK if.then5
%6849:	call	 do_indent
%6850:	load	 NUL_ec
%6851:	call	 XXX %6850 printf
%6852:	call	 XXX indent_puts
%6853:	br	 if.end19

BASIC BLOCK if.else7
%6854:	load	 fullspd
%6855:	icmp	 %6854 XXX
%6856:	br	 %6855 if.else11 if.then9

BASIC BLOCK if.then9
%6857:	call	 do_indent
%6858:	load	 NUL_ec
%6859:	call	 XXX %6858 printf
%6860:	call	 XXX indent_puts
%6861:	call	 XXX indent_puts
%6862:	call	 XXX indent_puts
%6863:	call	 XXX indent_puts
%6864:	br	 if.end18

BASIC BLOCK if.else11
%6865:	getelementptr	 %6825 XXX XXX
%6866:	load	 NUL_ec
%6867:	call	 %6865 XXX %6866 sprintf
%6868:	getelementptr	 %6825 XXX XXX
%6869:	call	 %6868 gen_next_compressed_state
%6870:	load	 reject
%6871:	icmp	 %6870 XXX
%6872:	br	 %6871 if.end16 if.then15

BASIC BLOCK if.then15
%6873:	call	 XXX indent_puts
%6874:	br	 if.end16

BASIC BLOCK if.end16
%6875:	call	 do_indent
%6876:	load	 jamstate
%6877:	call	 XXX %6876 printf
%6878:	br	 if.end18

BASIC BLOCK if.end18
%6879:	br	 if.end19

BASIC BLOCK if.end19
%6880:	br	 if.end20

BASIC BLOCK if.end20
%6881:	icmp	 %6834 XXX
%6882:	br	 %6881 if.end26 land.lhs.true

BASIC BLOCK land.lhs.true
%6883:	load	 fullspd
%6884:	icmp	 %6883 XXX
%6885:	br	 %6884 lor.lhs.false if.then24

BASIC BLOCK lor.lhs.false
%6886:	load	 fulltbl
%6887:	icmp	 %6886 XXX
%6888:	br	 %6887 if.end26 if.then24

BASIC BLOCK if.then24
%6889:	call	 XXX putchar
%6890:	call	 XXX indent_puts
%6891:	load	 indent_level
%6892:	add	 %6891 XXX
%6893:	store	 %6892 indent_level
%6894:	call	 XXX indent_puts
%6895:	call	 gen_backing_up
%6896:	call	 XXX indent_puts
%6897:	load	 indent_level
%6898:	add	 %6897 XXX
%6899:	store	 %6898 indent_level
%6900:	br	 if.end26

BASIC BLOCK if.end26
%6901:	ret	

FUNCTION gen_start_state

BASIC BLOCK entry
%6902:	load	 fullspd
%6903:	icmp	 %6902 XXX
%6904:	br	 %6903 if.else if.then

BASIC BLOCK if.then
%6905:	load	 bol_needed
%6906:	icmp	 %6905 XXX
%6907:	select	 %6906 XXX XXX
%6908:	call	 XXX %6907 indent_put2s
%6909:	br	 if.end7

BASIC BLOCK if.else
%6910:	call	 XXX indent_puts
%6911:	load	 bol_needed
%6912:	icmp	 %6911 XXX
%6913:	br	 %6912 if.end if.then3

BASIC BLOCK if.then3
%6914:	call	 XXX indent_puts
%6915:	load	 indent_level
%6916:	add	 %6915 XXX
%6917:	store	 %6916 indent_level
%6918:	call	 XXX indent_puts
%6919:	load	 indent_level
%6920:	add	 %6919 XXX
%6921:	store	 %6920 indent_level
%6922:	br	 if.end

BASIC BLOCK if.end
%6923:	load	 reject
%6924:	icmp	 %6923 XXX
%6925:	br	 %6924 if.end6 if.then5

BASIC BLOCK if.then5
%6926:	call	 XXX indent_puts
%6927:	call	 XXX indent_puts
%6928:	br	 if.end6

BASIC BLOCK if.end6
%6929:	br	 if.end7

BASIC BLOCK if.end7
%6930:	ret	

FUNCTION gentabs

BASIC BLOCK entry
%6931:	alloca	 XXX
%6932:	load	 num_rules
%6933:	add	 %6932 XXX
%6934:	load	 current_max_dfas
%6935:	call	 %6934 XXX allocate_array
%6936:	bitcast	 %6935
%6937:	store	 XXX nummt
%6938:	load	 num_backing_up
%6939:	add	 %6938 XXX
%6940:	store	 %6939 num_backing_up
%6941:	load	 reject
%6942:	icmp	 %6941 XXX
%6943:	br	 %6942 if.else60 if.then

BASIC BLOCK if.then
%6944:	getelementptr	 %6931 XXX XXX
%6945:	store	 XXX %6944
%6946:	getelementptr	 %6931 XXX XXX
%6947:	store	 %6933 %6946
%6948:	load	 end_of_buffer_state
%6949:	sext	 %6948
%6950:	load	 accsiz
%6951:	getelementptr	 %6950 %6949
%6952:	store	 XXX %6951
%6953:	getelementptr	 %6931 XXX XXX
%6954:	load	 end_of_buffer_state
%6955:	sext	 %6954
%6956:	load	 dfaacc
%6957:	getelementptr	 %6956 %6955
%6958:	bitcast	 %6957
%6959:	store	 %6953 %6958
%6960:	load	 long_align
%6961:	icmp	 %6960 XXX
%6962:	select	 %6961 XXX XXX
%6963:	load	 numas
%6964:	icmp	 %6963 XXX
%6965:	br	 %6964 cond.false cond.true

BASIC BLOCK cond.true
%6966:	load	 numas
%6967:	br	 cond.end

BASIC BLOCK cond.false
%6968:	br	 cond.end

BASIC BLOCK cond.end
%6969:	phi	 %6966 XXX
%6970:	add	 %6969 XXX
%6971:	call	 %6962 XXX %6970 printf
%6972:	br	 for.cond

BASIC BLOCK for.cond
%6973:	phi	 XXX %7053
%6974:	phi	 XXX %7055
%6975:	load	 lastdfa
%6976:	icmp	 %6974 %6975
%6977:	br	 %6976 for.end57 for.body

BASIC BLOCK for.body
%6978:	sext	 %6974
%6979:	getelementptr	 %6936 %6978
%6980:	store	 %6973 %6979
%6981:	sext	 %6974
%6982:	load	 accsiz
%6983:	getelementptr	 %6982 %6981
%6984:	load	 %6983
%6985:	icmp	 %6984 XXX
%6986:	br	 %6985 if.end54 if.then15

BASIC BLOCK if.then15
%6987:	sext	 %6974
%6988:	load	 dfaacc
%6989:	getelementptr	 %6988 %6987
%6990:	bitcast	 %6989
%6991:	load	 %6990
%6992:	sext	 %6974
%6993:	load	 accsiz
%6994:	getelementptr	 %6993 %6992
%6995:	load	 %6994
%6996:	load	 trace
%6997:	icmp	 %6996 XXX
%6998:	br	 %6997 if.end if.then22

BASIC BLOCK if.then22
%6999:	load	 err
%7000:	call	 %6999 XXX %6974 fprintf
%7001:	br	 if.end

BASIC BLOCK if.end
%7002:	br	 for.cond24

BASIC BLOCK for.cond24
%7003:	phi	 XXX %7050
%7004:	phi	 %6973 %7010
%7005:	icmp	 %7003 %6995
%7006:	br	 %7005 for.end for.body26

BASIC BLOCK for.body26
%7007:	sext	 %7003
%7008:	getelementptr	 %6991 %7007
%7009:	load	 %7008
%7010:	add	 %7004 XXX
%7011:	load	 variable_trailing_context_rules
%7012:	icmp	 %7011 XXX
%7013:	br	 %7012 if.end41 land.lhs.true

BASIC BLOCK land.lhs.true
%7014:	and	 %7009 XXX
%7015:	icmp	 %7014 XXX
%7016:	br	 %7015 land.lhs.true32 if.end41

BASIC BLOCK land.lhs.true32
%7017:	icmp	 %7009 XXX
%7018:	br	 %7017 if.end41 land.lhs.true34

BASIC BLOCK land.lhs.true34
%7019:	load	 num_rules
%7020:	icmp	 %7009 %7019
%7021:	br	 %7020 if.end41 land.lhs.true36

BASIC BLOCK land.lhs.true36
%7022:	sext	 %7009
%7023:	load	 rule_type
%7024:	getelementptr	 %7023 %7022
%7025:	load	 %7024
%7026:	icmp	 %7025 XXX
%7027:	br	 %7026 if.end41 if.then40

BASIC BLOCK if.then40
%7028:	or	 %7009 XXX
%7029:	br	 if.end41

BASIC BLOCK if.end41
%7030:	phi	 %7009 %7028 %7009 %7009 %7009 %7009
%7031:	call	 %7030 mkdata
%7032:	load	 trace
%7033:	icmp	 %7032 XXX
%7034:	br	 %7033 if.end52 if.then43

BASIC BLOCK if.then43
%7035:	load	 err
%7036:	sext	 %7003
%7037:	getelementptr	 %6991 %7036
%7038:	load	 %7037
%7039:	call	 %7035 XXX %7038 fprintf
%7040:	icmp	 %7003 %6995
%7041:	br	 %7040 if.else if.then48

BASIC BLOCK if.then48
%7042:	load	 err
%7043:	call	 XXX %7042 fputs
%7044:	br	 if.end51

BASIC BLOCK if.else
%7045:	load	 err
%7046:	call	 XXX %7045 _IO_putc
%7047:	br	 if.end51

BASIC BLOCK if.end51
%7048:	br	 if.end52

BASIC BLOCK if.end52
%7049:	br	 for.inc

BASIC BLOCK for.inc
%7050:	add	 %7003 XXX
%7051:	br	 for.cond24

BASIC BLOCK for.end
%7052:	br	 if.end54

BASIC BLOCK if.end54
%7053:	phi	 %7004 %6973
%7054:	br	 for.inc55

BASIC BLOCK for.inc55
%7055:	add	 %6974 XXX
%7056:	br	 for.cond

BASIC BLOCK for.end57
%7057:	sext	 %6974
%7058:	getelementptr	 %6936 %7057
%7059:	store	 %6973 %7058
%7060:	call	 dataend
%7061:	br	 if.end76

BASIC BLOCK if.else60
%7062:	load	 end_of_buffer_state
%7063:	sext	 %7062
%7064:	load	 dfaacc
%7065:	getelementptr	 %7064 %7063
%7066:	bitcast	 %7065
%7067:	store	 %6933 %7066
%7068:	br	 for.cond63

BASIC BLOCK for.cond63
%7069:	phi	 XXX %7082
%7070:	load	 lastdfa
%7071:	icmp	 %7069 %7070
%7072:	br	 %7071 for.end73 for.body65

BASIC BLOCK for.body65
%7073:	sext	 %7069
%7074:	load	 dfaacc
%7075:	getelementptr	 %7074 %7073
%7076:	bitcast	 %7075
%7077:	load	 %7076
%7078:	sext	 %7069
%7079:	getelementptr	 %6936 %7078
%7080:	store	 %7077 %7079
%7081:	br	 for.inc71

BASIC BLOCK for.inc71
%7082:	add	 %7069 XXX
%7083:	br	 for.cond63

BASIC BLOCK for.end73
%7084:	sext	 %7069
%7085:	getelementptr	 %6936 %7084
%7086:	store	 XXX %7085
%7087:	br	 if.end76

BASIC BLOCK if.end76
%7088:	load	 lastdfa
%7089:	add	 %7088 XXX
%7090:	load	 reject
%7091:	icmp	 %7090 XXX
%7092:	br	 %7091 if.end81 if.then79

BASIC BLOCK if.then79
%7093:	add	 %7089 XXX
%7094:	br	 if.end81

BASIC BLOCK if.end81
%7095:	phi	 %7093 %7089
%7096:	load	 long_align
%7097:	icmp	 %7096 XXX
%7098:	select	 %7097 XXX XXX
%7099:	call	 %7098 XXX %7095 printf
%7100:	br	 for.cond85

BASIC BLOCK for.cond85
%7101:	phi	 XXX %7127
%7102:	load	 lastdfa
%7103:	icmp	 %7101 %7102
%7104:	br	 %7103 for.end104 for.body87

BASIC BLOCK for.body87
%7105:	sext	 %7101
%7106:	getelementptr	 %6936 %7105
%7107:	load	 %7106
%7108:	call	 %7107 mkdata
%7109:	load	 reject
%7110:	icmp	 %7109 XXX
%7111:	br	 %7110 land.lhs.true91 if.end101

BASIC BLOCK land.lhs.true91
%7112:	load	 trace
%7113:	icmp	 %7112 XXX
%7114:	br	 %7113 if.end101 land.lhs.true93

BASIC BLOCK land.lhs.true93
%7115:	sext	 %7101
%7116:	getelementptr	 %6936 %7115
%7117:	load	 %7116
%7118:	icmp	 %7117 XXX
%7119:	br	 %7118 if.end101 if.then97

BASIC BLOCK if.then97
%7120:	load	 err
%7121:	sext	 %7101
%7122:	getelementptr	 %6936 %7121
%7123:	load	 %7122
%7124:	call	 %7120 XXX %7101 %7123 fprintf
%7125:	br	 if.end101

BASIC BLOCK if.end101
%7126:	br	 for.inc102

BASIC BLOCK for.inc102
%7127:	add	 %7101 XXX
%7128:	br	 for.cond85

BASIC BLOCK for.end104
%7129:	sext	 %7101
%7130:	getelementptr	 %6936 %7129
%7131:	load	 %7130
%7132:	call	 %7131 mkdata
%7133:	load	 reject
%7134:	icmp	 %7133 XXX
%7135:	br	 %7134 if.end111 if.then108

BASIC BLOCK if.then108
%7136:	sext	 %7101
%7137:	getelementptr	 %6936 %7136
%7138:	load	 %7137
%7139:	call	 %7138 mkdata
%7140:	br	 if.end111

BASIC BLOCK if.end111
%7141:	call	 dataend
%7142:	load	 useecs
%7143:	icmp	 %7142 XXX
%7144:	br	 %7143 if.end114 if.then113

BASIC BLOCK if.then113
%7145:	call	 genecs
%7146:	br	 if.end114

BASIC BLOCK if.end114
%7147:	load	 usemecs
%7148:	icmp	 %7147 XXX
%7149:	br	 %7148 if.end156 if.then116

BASIC BLOCK if.then116
%7150:	load	 trace
%7151:	icmp	 %7150 XXX
%7152:	br	 %7151 if.end120 if.then118

BASIC BLOCK if.then118
%7153:	load	 err
%7154:	call	 XXX %7153 fputs
%7155:	br	 if.end120

BASIC BLOCK if.end120
%7156:	load	 numecs
%7157:	add	 %7156 XXX
%7158:	call	 XXX XXX %7157 printf
%7159:	br	 for.cond123

BASIC BLOCK for.cond123
%7160:	phi	 XXX %7202
%7161:	load	 numecs
%7162:	icmp	 %7160 %7161
%7163:	br	 %7162 for.end155 for.body125

BASIC BLOCK for.body125
%7164:	load	 trace
%7165:	icmp	 %7164 XXX
%7166:	br	 %7165 if.end140 if.then127

BASIC BLOCK if.then127
%7167:	load	 err
%7168:	sext	 %7160
%7169:	getelementptr	 tecbck XXX %7168
%7170:	load	 %7169
%7171:	icmp	 %7170 XXX
%7172:	br	 %7171 cond.false134 cond.true131

BASIC BLOCK cond.true131
%7173:	sext	 %7160
%7174:	getelementptr	 tecbck XXX %7173
%7175:	load	 %7174
%7176:	sub	 XXX %7175
%7177:	br	 cond.end137

BASIC BLOCK cond.false134
%7178:	sext	 %7160
%7179:	getelementptr	 tecbck XXX %7178
%7180:	load	 %7179
%7181:	br	 cond.end137

BASIC BLOCK cond.end137
%7182:	phi	 %7176 %7180
%7183:	call	 %7167 XXX %7160 %7182 fprintf
%7184:	br	 if.end140

BASIC BLOCK if.end140
%7185:	sext	 %7160
%7186:	getelementptr	 tecbck XXX %7185
%7187:	load	 %7186
%7188:	icmp	 %7187 XXX
%7189:	br	 %7188 cond.false148 cond.true144

BASIC BLOCK cond.true144
%7190:	sext	 %7160
%7191:	getelementptr	 tecbck XXX %7190
%7192:	load	 %7191
%7193:	sub	 XXX %7192
%7194:	br	 cond.end151

BASIC BLOCK cond.false148
%7195:	sext	 %7160
%7196:	getelementptr	 tecbck XXX %7195
%7197:	load	 %7196
%7198:	br	 cond.end151

BASIC BLOCK cond.end151
%7199:	phi	 %7193 %7197
%7200:	call	 %7199 mkdata
%7201:	br	 for.inc153

BASIC BLOCK for.inc153
%7202:	add	 %7160 XXX
%7203:	br	 for.cond123

BASIC BLOCK for.end155
%7204:	call	 dataend
%7205:	br	 if.end156

BASIC BLOCK if.end156
%7206:	load	 lastdfa
%7207:	load	 numtemps
%7208:	add	 %7206 %7207
%7209:	load	 tblend
%7210:	icmp	 %7209 XXX
%7211:	br	 %7210 lor.rhs lor.end

BASIC BLOCK lor.rhs
%7212:	load	 long_align
%7213:	icmp	 %7212 XXX
%7214:	br	 lor.end

BASIC BLOCK lor.end
%7215:	phi	 XXX %7213
%7216:	select	 %7215 XXX XXX
%7217:	add	 %7208 XXX
%7218:	call	 %7216 XXX %7217 printf
%7219:	br	 for.cond163

BASIC BLOCK for.cond163
%7220:	phi	 XXX %7268
%7221:	load	 lastdfa
%7222:	icmp	 %7220 %7221
%7223:	br	 %7222 for.end193 for.body165

BASIC BLOCK for.body165
%7224:	sext	 %7220
%7225:	load	 def
%7226:	getelementptr	 %7225 %7224
%7227:	load	 %7226
%7228:	sext	 %7220
%7229:	load	 base
%7230:	getelementptr	 %7229 %7228
%7231:	load	 %7230
%7232:	icmp	 %7231 XXX
%7233:	br	 %7232 if.end174 if.then171

BASIC BLOCK if.then171
%7234:	load	 jambase
%7235:	sext	 %7220
%7236:	load	 base
%7237:	getelementptr	 %7236 %7235
%7238:	store	 %7234 %7237
%7239:	br	 if.end174

BASIC BLOCK if.end174
%7240:	icmp	 %7227 XXX
%7241:	br	 %7240 if.else179 if.then176

BASIC BLOCK if.then176
%7242:	load	 jamstate
%7243:	sext	 %7220
%7244:	load	 def
%7245:	getelementptr	 %7244 %7243
%7246:	store	 %7242 %7245
%7247:	br	 if.end188

BASIC BLOCK if.else179
%7248:	icmp	 %7227 XXX
%7249:	br	 %7248 if.end187 if.then181

BASIC BLOCK if.then181
%7250:	load	 tmpuses
%7251:	add	 %7250 XXX
%7252:	store	 %7251 tmpuses
%7253:	load	 lastdfa
%7254:	sub	 %7253 %7227
%7255:	add	 %7254 XXX
%7256:	sext	 %7220
%7257:	load	 def
%7258:	getelementptr	 %7257 %7256
%7259:	store	 %7255 %7258
%7260:	br	 if.end187

BASIC BLOCK if.end187
%7261:	br	 if.end188

BASIC BLOCK if.end188
%7262:	sext	 %7220
%7263:	load	 base
%7264:	getelementptr	 %7263 %7262
%7265:	load	 %7264
%7266:	call	 %7265 mkdata
%7267:	br	 for.inc191

BASIC BLOCK for.inc191
%7268:	add	 %7220 XXX
%7269:	br	 for.cond163

BASIC BLOCK for.end193
%7270:	sext	 %7220
%7271:	load	 base
%7272:	getelementptr	 %7271 %7270
%7273:	load	 %7272
%7274:	call	 %7273 mkdata
%7275:	add	 %7220 XXX
%7276:	br	 for.cond197

BASIC BLOCK for.cond197
%7277:	phi	 %7275 %7291
%7278:	icmp	 %7277 %7208
%7279:	br	 %7278 for.end206 for.body199

BASIC BLOCK for.body199
%7280:	sext	 %7277
%7281:	load	 base
%7282:	getelementptr	 %7281 %7280
%7283:	load	 %7282
%7284:	call	 %7283 mkdata
%7285:	load	 jamstate
%7286:	sext	 %7277
%7287:	load	 def
%7288:	getelementptr	 %7287 %7286
%7289:	store	 %7285 %7288
%7290:	br	 for.inc204

BASIC BLOCK for.inc204
%7291:	add	 %7277 XXX
%7292:	br	 for.cond197

BASIC BLOCK for.end206
%7293:	call	 dataend
%7294:	icmp	 %7208 XXX
%7295:	br	 %7294 lor.rhs208 lor.end210

BASIC BLOCK lor.rhs208
%7296:	load	 long_align
%7297:	icmp	 %7296 XXX
%7298:	br	 lor.end210

BASIC BLOCK lor.end210
%7299:	phi	 XXX %7297
%7300:	select	 %7299 XXX XXX
%7301:	add	 %7208 XXX
%7302:	call	 %7300 XXX %7301 printf
%7303:	br	 for.cond214

BASIC BLOCK for.cond214
%7304:	phi	 XXX %7313
%7305:	icmp	 %7304 %7208
%7306:	br	 %7305 for.end221 for.body216

BASIC BLOCK for.body216
%7307:	sext	 %7304
%7308:	load	 def
%7309:	getelementptr	 %7308 %7307
%7310:	load	 %7309
%7311:	call	 %7310 mkdata
%7312:	br	 for.inc219

BASIC BLOCK for.inc219
%7313:	add	 %7304 XXX
%7314:	br	 for.cond214

BASIC BLOCK for.end221
%7315:	call	 dataend
%7316:	icmp	 %7208 XXX
%7317:	br	 %7316 lor.rhs223 lor.end225

BASIC BLOCK lor.rhs223
%7318:	load	 long_align
%7319:	icmp	 %7318 XXX
%7320:	br	 lor.end225

BASIC BLOCK lor.end225
%7321:	phi	 XXX %7319
%7322:	select	 %7321 XXX XXX
%7323:	load	 tblend
%7324:	add	 %7323 XXX
%7325:	call	 %7322 XXX %7324 printf
%7326:	br	 for.cond229

BASIC BLOCK for.cond229
%7327:	phi	 XXX %7355
%7328:	load	 tblend
%7329:	icmp	 %7327 %7328
%7330:	br	 %7329 for.end246 for.body231

BASIC BLOCK for.body231
%7331:	sext	 %7327
%7332:	load	 nxt
%7333:	getelementptr	 %7332 %7331
%7334:	load	 %7333
%7335:	icmp	 %7334 XXX
%7336:	br	 %7335 lor.lhs.false if.then238

BASIC BLOCK lor.lhs.false
%7337:	sext	 %7327
%7338:	load	 chk
%7339:	getelementptr	 %7338 %7337
%7340:	load	 %7339
%7341:	icmp	 %7340 XXX
%7342:	br	 %7341 if.end241 if.then238

BASIC BLOCK if.then238
%7343:	load	 jamstate
%7344:	sext	 %7327
%7345:	load	 nxt
%7346:	getelementptr	 %7345 %7344
%7347:	store	 %7343 %7346
%7348:	br	 if.end241

BASIC BLOCK if.end241
%7349:	sext	 %7327
%7350:	load	 nxt
%7351:	getelementptr	 %7350 %7349
%7352:	load	 %7351
%7353:	call	 %7352 mkdata
%7354:	br	 for.inc244

BASIC BLOCK for.inc244
%7355:	add	 %7327 XXX
%7356:	br	 for.cond229

BASIC BLOCK for.end246
%7357:	call	 dataend
%7358:	icmp	 %7208 XXX
%7359:	br	 %7358 lor.rhs248 lor.end250

BASIC BLOCK lor.rhs248
%7360:	load	 long_align
%7361:	icmp	 %7360 XXX
%7362:	br	 lor.end250

BASIC BLOCK lor.end250
%7363:	phi	 XXX %7361
%7364:	select	 %7363 XXX XXX
%7365:	load	 tblend
%7366:	add	 %7365 XXX
%7367:	call	 %7364 XXX %7366 printf
%7368:	br	 for.cond254

BASIC BLOCK for.cond254
%7369:	phi	 XXX %7389
%7370:	load	 tblend
%7371:	icmp	 %7369 %7370
%7372:	br	 %7371 for.end267 for.body256

BASIC BLOCK for.body256
%7373:	sext	 %7369
%7374:	load	 chk
%7375:	getelementptr	 %7374 %7373
%7376:	load	 %7375
%7377:	icmp	 %7376 XXX
%7378:	br	 %7377 if.end262 if.then260

BASIC BLOCK if.then260
%7379:	load	 nummt
%7380:	add	 %7379 XXX
%7381:	store	 %7380 nummt
%7382:	br	 if.end262

BASIC BLOCK if.end262
%7383:	sext	 %7369
%7384:	load	 chk
%7385:	getelementptr	 %7384 %7383
%7386:	load	 %7385
%7387:	call	 %7386 mkdata
%7388:	br	 for.inc265

BASIC BLOCK for.inc265
%7389:	add	 %7369 XXX
%7390:	br	 for.cond254

BASIC BLOCK for.end267
%7391:	call	 dataend
%7392:	ret	

FUNCTION flexscan

BASIC BLOCK entry
%7393:	alloca	 XXX
%7394:	load	 yy_init
%7395:	icmp	 %7394 XXX
%7396:	br	 %7395 if.end12 if.then

BASIC BLOCK if.then
%7397:	load	 yy_start
%7398:	icmp	 %7397 XXX
%7399:	br	 %7398 if.then2 if.end

BASIC BLOCK if.then2
%7400:	store	 XXX yy_start
%7401:	br	 if.end

BASIC BLOCK if.end
%7402:	load	 yyin
%7403:	icmp	 %7402 XXX
%7404:	br	 %7403 if.then4 if.end5

BASIC BLOCK if.then4
%7405:	load	 stdin
%7406:	store	 %7405 yyin
%7407:	br	 if.end5

BASIC BLOCK if.end5
%7408:	load	 yyout
%7409:	icmp	 %7408 XXX
%7410:	br	 %7409 if.then7 if.end8

BASIC BLOCK if.then7
%7411:	load	 stdout
%7412:	store	 %7411 yyout
%7413:	br	 if.end8

BASIC BLOCK if.end8
%7414:	load	 yy_current_buffer
%7415:	icmp	 %7414 XXX
%7416:	br	 %7415 if.else if.then10

BASIC BLOCK if.then10
%7417:	load	 yy_current_buffer
%7418:	load	 yyin
%7419:	call	 %7417 %7418 yy_init_buffer
%7420:	br	 if.end11

BASIC BLOCK if.else
%7421:	load	 yyin
%7422:	call	 %7421 XXX yy_create_buffer
%7423:	store	 %7422 yy_current_buffer
%7424:	br	 if.end11

BASIC BLOCK if.end11
%7425:	call	 yy_load_buffer_state
%7426:	store	 XXX yy_init
%7427:	br	 if.end12

BASIC BLOCK if.end12
%7428:	br	 while.body

BASIC BLOCK while.body
%7429:	phi	 XXX %8437
%7430:	load	 yy_c_buf_p
%7431:	load	 yy_hold_char
%7432:	store	 %7431 %7430
%7433:	load	 yy_start
%7434:	getelementptr	 %7430 XXX
%7435:	load	 %7434
%7436:	sext	 %7435
%7437:	icmp	 %7436 XXX
%7438:	br	 %7437 if.end15 if.then14

BASIC BLOCK if.then14
%7439:	add	 %7433 XXX
%7440:	br	 if.end15

BASIC BLOCK if.end15
%7441:	phi	 %7439 %7433
%7442:	br	 yy_match

BASIC BLOCK yy_match
%7443:	phi	 %7430 %8380 %8419
%7444:	phi	 %7430 %8384 %8417
%7445:	phi	 %7441 %8378 %8416
%7446:	br	 do.body

BASIC BLOCK do.body
%7447:	phi	 %7444 %7502
%7448:	phi	 %7445 %7501
%7449:	load	 %7447
%7450:	zext	 %7449
%7451:	zext	 %7450
%7452:	getelementptr	 yy_ec XXX %7451
%7453:	load	 %7452
%7454:	trunc	 %7453
%7455:	sext	 %7448
%7456:	getelementptr	 yy_accept XXX %7455
%7457:	load	 %7456
%7458:	icmp	 %7457 XXX
%7459:	br	 %7458 if.end23 if.then22

BASIC BLOCK if.then22
%7460:	store	 %7448 yy_last_accepting_state
%7461:	store	 %7447 yy_last_accepting_cpos
%7462:	br	 if.end23

BASIC BLOCK if.end23
%7463:	br	 while.cond24

BASIC BLOCK while.cond24
%7464:	phi	 %7454 %7490
%7465:	phi	 %7448 %7481
%7466:	sext	 %7465
%7467:	getelementptr	 yy_base XXX %7466
%7468:	load	 %7467
%7469:	sext	 %7468
%7470:	zext	 %7464
%7471:	add	 %7469 %7470
%7472:	sext	 %7471
%7473:	getelementptr	 yy_chk XXX %7472
%7474:	load	 %7473
%7475:	sext	 %7474
%7476:	icmp	 %7475 %7465
%7477:	br	 %7476 while.end while.body34

BASIC BLOCK while.body34
%7478:	sext	 %7465
%7479:	getelementptr	 yy_def XXX %7478
%7480:	load	 %7479
%7481:	sext	 %7480
%7482:	icmp	 %7481 XXX
%7483:	br	 %7482 if.end45 if.then40

BASIC BLOCK if.then40
%7484:	zext	 %7464
%7485:	zext	 %7484
%7486:	getelementptr	 yy_meta XXX %7485
%7487:	load	 %7486
%7488:	trunc	 %7487
%7489:	br	 if.end45

BASIC BLOCK if.end45
%7490:	phi	 %7488 %7464
%7491:	br	 while.cond24

BASIC BLOCK while.end
%7492:	sext	 %7465
%7493:	getelementptr	 yy_base XXX %7492
%7494:	load	 %7493
%7495:	sext	 %7494
%7496:	zext	 %7464
%7497:	add	 %7495 %7496
%7498:	zext	 %7497
%7499:	getelementptr	 yy_nxt XXX %7498
%7500:	load	 %7499
%7501:	sext	 %7500
%7502:	getelementptr	 %7447 XXX
%7503:	br	 do.cond

BASIC BLOCK do.cond
%7504:	sext	 %7501
%7505:	getelementptr	 yy_base XXX %7504
%7506:	load	 %7505
%7507:	sext	 %7506
%7508:	icmp	 %7507 XXX
%7509:	br	 %7508 do.end do.body

BASIC BLOCK do.end
%7510:	br	 yy_find_action

BASIC BLOCK yy_find_action
%7511:	phi	 %7443 %8380 %8431 %7511
%7512:	phi	 %7502 %8387 %8429 %7533
%7513:	phi	 %7501 %8377 %8428 %7534
%7514:	sext	 %7513
%7515:	getelementptr	 yy_accept XXX %7514
%7516:	load	 %7515
%7517:	sext	 %7516
%7518:	store	 %7511 yytext
%7519:	ptrtoint	 %7512
%7520:	ptrtoint	 %7511
%7521:	sub	 %7519 %7520
%7522:	trunc	 %7521
%7523:	store	 %7522 yyleng
%7524:	load	 %7512
%7525:	store	 %7524 yy_hold_char
%7526:	store	 XXX %7512
%7527:	store	 %7512 yy_c_buf_p
%7528:	br	 do_action

BASIC BLOCK do_action
%7529:	phi	 %7517 %8402
%7530:	switch	 %7529 sw.default XXX sw.bb XXX sw.bb63 XXX sw.bb64 XXX sw.bb65 XXX sw.bb66 XXX sw.bb67 XXX sw.bb69 XXX sw.bb70 XXX sw.bb71 XXX sw.bb77 XXX sw.bb83 XXX sw.bb84 XXX sw.bb85 XXX sw.bb87 XXX sw.bb88 XXX sw.bb90 XXX sw.bb92 XXX sw.bb94 XXX sw.bb96 XXX sw.bb97 XXX sw.bb99 XXX sw.bb100 XXX sw.bb101 XXX sw.bb103 XXX sw.bb105 XXX sw.bb110 XXX sw.bb115 XXX sw.bb116 XXX sw.bb121 XXX sw.bb122 XXX sw.bb143 XXX sw.bb148 XXX sw.bb151 XXX sw.bb153 XXX sw.bb154 XXX sw.bb160 XXX sw.bb166 XXX sw.bb167 XXX sw.bb177 XXX sw.bb188 XXX sw.bb189 XXX sw.bb204 XXX sw.bb205 XXX sw.bb207 XXX sw.bb208 XXX sw.bb210 XXX sw.bb218 XXX sw.bb219 XXX sw.bb220 XXX sw.bb221 XXX sw.bb227 XXX sw.bb228 XXX sw.bb234 XXX sw.bb235 XXX sw.bb237 XXX sw.bb238 XXX sw.bb239 XXX sw.bb240 XXX sw.bb241 XXX sw.bb263 XXX sw.bb325 XXX sw.bb328 XXX sw.bb331 XXX sw.bb334 XXX sw.bb335 XXX sw.bb341 XXX sw.bb343 XXX sw.bb344 XXX sw.bb345 XXX sw.bb348 XXX sw.bb349 XXX sw.bb351 XXX sw.bb357 XXX sw.bb363 XXX sw.bb366 XXX sw.bb372 XXX sw.bb375 XXX sw.bb376 XXX sw.bb377 XXX sw.bb379 XXX sw.bb380 XXX sw.bb381 XXX sw.bb382 XXX sw.bb384 XXX sw.bb385 XXX sw.bb387 XXX sw.bb388 XXX sw.bb389 XXX sw.bb394 XXX sw.bb399 XXX sw.bb400 XXX sw.bb413 XXX sw.bb415 XXX sw.bb417 XXX sw.bb418 XXX sw.bb419 XXX sw.bb420 XXX sw.bb421 XXX sw.bb422 XXX sw.bb428 XXX sw.bb429 XXX sw.bb434 XXX sw.bb435 XXX sw.bb436 XXX sw.bb438 XXX sw.bb439 XXX sw.bb440 XXX sw.bb442 XXX sw.bb443 XXX sw.bb444 XXX sw.bb444 XXX sw.bb444 XXX sw.bb445 XXX sw.bb448 XXX sw.bb451 XXX sw.bb454 XXX sw.bb455 XXX sw.bb456 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb457 XXX sw.bb458

BASIC BLOCK sw.bb
%7531:	load	 yy_hold_char
%7532:	store	 %7531 %7512
%7533:	load	 yy_last_accepting_cpos
%7534:	load	 yy_last_accepting_state
%7535:	br	 yy_find_action

BASIC BLOCK sw.bb63
%7536:	store	 XXX flexscan.indented_code
%7537:	store	 XXX yy_start
%7538:	br	 sw.epilog509

BASIC BLOCK sw.bb64
%7539:	load	 yytext
%7540:	call	 %7539 add_action
%7541:	store	 XXX yy_start
%7542:	br	 sw.epilog509

BASIC BLOCK sw.bb65
%7543:	br	 return

BASIC BLOCK sw.bb66
%7544:	br	 return

BASIC BLOCK sw.bb67
%7545:	load	 linenum
%7546:	add	 %7545 XXX
%7547:	store	 %7546 linenum
%7548:	call	 XXX line_directive_out
%7549:	store	 XXX flexscan.indented_code
%7550:	store	 XXX yy_start
%7551:	br	 sw.epilog509

BASIC BLOCK sw.bb69
%7552:	br	 return

BASIC BLOCK sw.bb70
%7553:	store	 XXX sectnum
%7554:	store	 XXX flexscan.bracelevel
%7555:	call	 mark_defs1
%7556:	call	 XXX line_directive_out
%7557:	store	 XXX yy_start
%7558:	br	 return

BASIC BLOCK sw.bb71
%7559:	load	 lex_compat
%7560:	icmp	 %7559 XXX
%7561:	br	 %7560 if.else74 if.then73

BASIC BLOCK if.then73
%7562:	call	 XXX warn
%7563:	br	 if.end75

BASIC BLOCK if.else74
%7564:	store	 XXX yytext_is_array
%7565:	br	 if.end75

BASIC BLOCK if.end75
%7566:	load	 linenum
%7567:	add	 %7566 XXX
%7568:	store	 %7567 linenum
%7569:	br	 sw.epilog509

BASIC BLOCK sw.bb77
%7570:	load	 C_plus_plus
%7571:	icmp	 %7570 XXX
%7572:	br	 %7571 if.else80 if.then79

BASIC BLOCK if.then79
%7573:	call	 XXX warn
%7574:	br	 if.end81

BASIC BLOCK if.else80
%7575:	store	 XXX yytext_is_array
%7576:	br	 if.end81

BASIC BLOCK if.end81
%7577:	load	 linenum
%7578:	add	 %7577 XXX
%7579:	store	 %7578 linenum
%7580:	br	 sw.epilog509

BASIC BLOCK sw.bb83
%7581:	call	 XXX warn
%7582:	store	 XXX flexscan.checking_used
%7583:	store	 XXX yy_start
%7584:	br	 sw.epilog509

BASIC BLOCK sw.bb84
%7585:	call	 XXX warn
%7586:	store	 XXX flexscan.checking_used
%7587:	store	 XXX yy_start
%7588:	br	 sw.epilog509

BASIC BLOCK sw.bb85
%7589:	load	 linenum
%7590:	add	 %7589 XXX
%7591:	store	 %7590 linenum
%7592:	br	 sw.epilog509

BASIC BLOCK sw.bb87
%7593:	call	 XXX synerr
%7594:	br	 sw.epilog509

BASIC BLOCK sw.bb88
%7595:	load	 yytext
%7596:	call	 XXX %7595 strcpy
%7597:	store	 XXX flexscan.didadef
%7598:	store	 XXX yy_start
%7599:	br	 sw.epilog509

BASIC BLOCK sw.bb90
%7600:	load	 yytext
%7601:	call	 XXX %7600 strcpy
%7602:	br	 return

BASIC BLOCK sw.bb92
%7603:	load	 linenum
%7604:	add	 %7603 XXX
%7605:	store	 %7604 linenum
%7606:	br	 sw.epilog509

BASIC BLOCK sw.bb94
%7607:	load	 linenum
%7608:	add	 %7607 XXX
%7609:	store	 %7608 linenum
%7610:	br	 return

BASIC BLOCK sw.bb96
%7611:	load	 yytext
%7612:	call	 %7611 add_action
%7613:	store	 XXX yy_start
%7614:	br	 sw.epilog509

BASIC BLOCK sw.bb97
%7615:	load	 linenum
%7616:	add	 %7615 XXX
%7617:	store	 %7616 linenum
%7618:	load	 yytext
%7619:	call	 %7618 add_action
%7620:	store	 XXX yy_start
%7621:	br	 sw.epilog509

BASIC BLOCK sw.bb99
%7622:	load	 yytext
%7623:	call	 %7622 add_action
%7624:	br	 sw.epilog509

BASIC BLOCK sw.bb100
%7625:	load	 yytext
%7626:	call	 %7625 add_action
%7627:	br	 sw.epilog509

BASIC BLOCK sw.bb101
%7628:	load	 linenum
%7629:	add	 %7628 XXX
%7630:	store	 %7629 linenum
%7631:	load	 yytext
%7632:	call	 %7631 add_action
%7633:	br	 sw.epilog509

BASIC BLOCK sw.bb103
%7634:	load	 linenum
%7635:	add	 %7634 XXX
%7636:	store	 %7635 linenum
%7637:	store	 XXX yy_start
%7638:	br	 sw.epilog509

BASIC BLOCK sw.bb105
%7639:	load	 yytext
%7640:	call	 %7639 add_action
%7641:	load	 yytext
%7642:	call	 %7641 all_upper
%7643:	icmp	 %7642 XXX
%7644:	br	 %7643 if.end109 if.then108

BASIC BLOCK if.then108
%7645:	store	 XXX reject
%7646:	br	 if.end109

BASIC BLOCK if.end109
%7647:	br	 sw.epilog509

BASIC BLOCK sw.bb110
%7648:	load	 yytext
%7649:	call	 %7648 add_action
%7650:	load	 yytext
%7651:	call	 %7650 all_lower
%7652:	icmp	 %7651 XXX
%7653:	br	 %7652 if.end114 if.then113

BASIC BLOCK if.then113
%7654:	store	 XXX yymore_used
%7655:	br	 if.end114

BASIC BLOCK if.end114
%7656:	br	 sw.epilog509

BASIC BLOCK sw.bb115
%7657:	load	 yytext
%7658:	call	 %7657 add_action
%7659:	br	 sw.epilog509

BASIC BLOCK sw.bb116
%7660:	load	 linenum
%7661:	add	 %7660 XXX
%7662:	store	 %7661 linenum
%7663:	load	 yytext
%7664:	call	 %7663 add_action
%7665:	load	 flexscan.indented_code
%7666:	icmp	 %7665 XXX
%7667:	br	 %7666 if.end120 if.then119

BASIC BLOCK if.then119
%7668:	store	 XXX yy_start
%7669:	br	 if.end120

BASIC BLOCK if.end120
%7670:	br	 sw.epilog509

BASIC BLOCK sw.bb121
%7671:	br	 sw.epilog509

BASIC BLOCK sw.bb122
%7672:	getelementptr	 %7393 XXX XXX
%7673:	load	 yytext
%7674:	call	 %7672 %7673 strcpy
%7675:	getelementptr	 %7393 XXX XXX
%7676:	call	 %7675 strlen
%7677:	sub	 %7676 XXX
%7678:	trunc	 %7677
%7679:	br	 for.cond

BASIC BLOCK for.cond
%7680:	phi	 %7678 %7700
%7681:	icmp	 %7680 XXX
%7682:	br	 %7681 land.end land.rhs

BASIC BLOCK land.rhs
%7683:	sext	 %7680
%7684:	getelementptr	 %7393 XXX %7683
%7685:	load	 %7684
%7686:	zext	 %7685
%7687:	icmp	 %7686 XXX
%7688:	br	 %7687 lor.rhs lor.end

BASIC BLOCK lor.rhs
%7689:	sext	 %7680
%7690:	getelementptr	 %7393 XXX %7689
%7691:	load	 %7690
%7692:	zext	 %7691
%7693:	icmp	 %7692 XXX
%7694:	br	 lor.end

BASIC BLOCK lor.end
%7695:	phi	 XXX %7693
%7696:	br	 land.end

BASIC BLOCK land.end
%7697:	phi	 XXX %7695
%7698:	br	 %7697 for.end for.body

BASIC BLOCK for.body
%7699:	br	 for.inc

BASIC BLOCK for.inc
%7700:	add	 %7680 XXX
%7701:	br	 for.cond

BASIC BLOCK for.end
%7702:	add	 %7680 XXX
%7703:	sext	 %7702
%7704:	getelementptr	 %7393 XXX %7703
%7705:	store	 XXX %7704
%7706:	getelementptr	 %7393 XXX XXX
%7707:	call	 XXX %7706 ndinstal
%7708:	store	 XXX flexscan.didadef
%7709:	br	 sw.epilog509

BASIC BLOCK sw.bb143
%7710:	load	 flexscan.didadef
%7711:	icmp	 %7710 XXX
%7712:	br	 %7711 if.then145 if.end146

BASIC BLOCK if.then145
%7713:	call	 XXX synerr
%7714:	br	 if.end146

BASIC BLOCK if.end146
%7715:	store	 XXX yy_start
%7716:	load	 linenum
%7717:	add	 %7716 XXX
%7718:	store	 %7717 linenum
%7719:	br	 sw.epilog509

BASIC BLOCK sw.bb148
%7720:	load	 linenum
%7721:	add	 %7720 XXX
%7722:	store	 %7721 linenum
%7723:	store	 XXX yy_start
%7724:	load	 yytext
%7725:	call	 XXX %7724 strcpy
%7726:	br	 return

BASIC BLOCK sw.bb151
%7727:	load	 linenum
%7728:	add	 %7727 XXX
%7729:	store	 %7728 linenum
%7730:	store	 XXX yy_start
%7731:	br	 sw.epilog509

BASIC BLOCK sw.bb153
%7732:	br	 sw.epilog509

BASIC BLOCK sw.bb154
%7733:	load	 yytext
%7734:	call	 %7733 all_upper
%7735:	icmp	 %7734 XXX
%7736:	br	 %7735 if.else158 if.then157

BASIC BLOCK if.then157
%7737:	load	 flexscan.checking_used
%7738:	store	 %7737 reject_really_used
%7739:	br	 if.end159

BASIC BLOCK if.else158
%7740:	call	 XXX synerr
%7741:	br	 if.end159

BASIC BLOCK if.end159
%7742:	br	 sw.epilog509

BASIC BLOCK sw.bb160
%7743:	load	 yytext
%7744:	call	 %7743 all_lower
%7745:	icmp	 %7744 XXX
%7746:	br	 %7745 if.else164 if.then163

BASIC BLOCK if.then163
%7747:	load	 flexscan.checking_used
%7748:	store	 %7747 yymore_really_used
%7749:	br	 if.end165

BASIC BLOCK if.else164
%7750:	call	 XXX synerr
%7751:	br	 if.end165

BASIC BLOCK if.end165
%7752:	br	 sw.epilog509

BASIC BLOCK sw.bb166
%7753:	call	 XXX synerr
%7754:	br	 sw.epilog509

BASIC BLOCK sw.bb167
%7755:	load	 flexscan.bracelevel
%7756:	add	 %7755 XXX
%7757:	store	 %7756 flexscan.bracelevel
%7758:	br	 do.body169

BASIC BLOCK do.body169
%7759:	load	 yy_hold_char
%7760:	store	 %7759 %7512
%7761:	getelementptr	 %7511 XXX
%7762:	getelementptr	 %7761 XXX
%7763:	store	 %7762 yy_c_buf_p
%7764:	store	 %7511 yytext
%7765:	ptrtoint	 %7762
%7766:	ptrtoint	 %7511
%7767:	sub	 %7765 %7766
%7768:	trunc	 %7767
%7769:	store	 %7768 yyleng
%7770:	load	 %7762
%7771:	store	 %7770 yy_hold_char
%7772:	store	 XXX %7762
%7773:	store	 %7762 yy_c_buf_p
%7774:	br	 do.end176

BASIC BLOCK do.end176
%7775:	br	 sw.epilog509

BASIC BLOCK sw.bb177
%7776:	load	 flexscan.bracelevel
%7777:	add	 %7776 XXX
%7778:	store	 %7777 flexscan.bracelevel
%7779:	br	 do.body179

BASIC BLOCK do.body179
%7780:	load	 yy_hold_char
%7781:	store	 %7780 %7512
%7782:	getelementptr	 %7511 XXX
%7783:	getelementptr	 %7782 XXX
%7784:	store	 %7783 yy_c_buf_p
%7785:	store	 %7511 yytext
%7786:	ptrtoint	 %7783
%7787:	ptrtoint	 %7511
%7788:	sub	 %7786 %7787
%7789:	trunc	 %7788
%7790:	store	 %7789 yyleng
%7791:	load	 %7783
%7792:	store	 %7791 yy_hold_char
%7793:	store	 XXX %7783
%7794:	store	 %7783 yy_c_buf_p
%7795:	br	 do.end187

BASIC BLOCK do.end187
%7796:	br	 sw.epilog509

BASIC BLOCK sw.bb188
%7797:	load	 yytext
%7798:	call	 %7797 add_action
%7799:	br	 sw.epilog509

BASIC BLOCK sw.bb189
%7800:	load	 flexscan.bracelevel
%7801:	icmp	 %7800 XXX
%7802:	br	 %7801 if.else202 if.then192

BASIC BLOCK if.then192
%7803:	br	 do.body193

BASIC BLOCK do.body193
%7804:	load	 yy_hold_char
%7805:	store	 %7804 %7512
%7806:	getelementptr	 %7511 XXX
%7807:	getelementptr	 %7806 XXX
%7808:	store	 %7807 yy_c_buf_p
%7809:	store	 %7511 yytext
%7810:	ptrtoint	 %7807
%7811:	ptrtoint	 %7511
%7812:	sub	 %7810 %7811
%7813:	trunc	 %7812
%7814:	store	 %7813 yyleng
%7815:	load	 %7807
%7816:	store	 %7815 yy_hold_char
%7817:	store	 XXX %7807
%7818:	store	 %7807 yy_c_buf_p
%7819:	br	 do.end201

BASIC BLOCK do.end201
%7820:	call	 mark_prolog
%7821:	store	 XXX yy_start
%7822:	br	 if.end203

BASIC BLOCK if.else202
%7823:	load	 yytext
%7824:	call	 %7823 add_action
%7825:	br	 if.end203

BASIC BLOCK if.end203
%7826:	br	 sw.epilog509

BASIC BLOCK sw.bb204
%7827:	load	 yytext
%7828:	call	 %7827 add_action
%7829:	br	 sw.epilog509

BASIC BLOCK sw.bb205
%7830:	load	 linenum
%7831:	add	 %7830 XXX
%7832:	store	 %7831 linenum
%7833:	load	 yytext
%7834:	call	 %7833 add_action
%7835:	br	 sw.epilog509

BASIC BLOCK sw.bb207
%7836:	call	 mark_prolog
%7837:	store	 XXX sectnum
%7838:	br	 return

BASIC BLOCK sw.bb208
%7839:	load	 linenum
%7840:	add	 %7839 XXX
%7841:	store	 %7840 linenum
%7842:	br	 sw.epilog509

BASIC BLOCK sw.bb210
%7843:	load	 yytext
%7844:	getelementptr	 %7843 XXX
%7845:	load	 %7844
%7846:	sext	 %7845
%7847:	icmp	 %7846 XXX
%7848:	zext	 %7847
%7849:	store	 %7848 flexscan.indented_code
%7850:	store	 XXX flexscan.bracelevel
%7851:	load	 flexscan.indented_code
%7852:	icmp	 %7851 XXX
%7853:	br	 %7852 if.end217 if.then216

BASIC BLOCK if.then216
%7854:	load	 yytext
%7855:	call	 %7854 add_action
%7856:	br	 if.end217

BASIC BLOCK if.end217
%7857:	store	 XXX yy_start
%7858:	br	 sw.epilog509

BASIC BLOCK sw.bb218
%7859:	store	 XXX yy_start
%7860:	br	 return

BASIC BLOCK sw.bb219
%7861:	br	 return

BASIC BLOCK sw.bb220
%7862:	store	 XXX yy_start
%7863:	br	 return

BASIC BLOCK sw.bb221
%7864:	load	 yy_hold_char
%7865:	store	 %7864 %7512
%7866:	getelementptr	 %7511 XXX
%7867:	store	 %7866 yy_c_buf_p
%7868:	store	 %7511 yytext
%7869:	ptrtoint	 %7866
%7870:	ptrtoint	 %7511
%7871:	sub	 %7869 %7870
%7872:	trunc	 %7871
%7873:	store	 %7872 yyleng
%7874:	load	 %7866
%7875:	store	 %7874 yy_hold_char
%7876:	store	 XXX %7866
%7877:	store	 %7866 yy_c_buf_p
%7878:	store	 XXX yy_start
%7879:	br	 return

BASIC BLOCK sw.bb227
%7880:	store	 XXX yy_start
%7881:	br	 sw.epilog509

BASIC BLOCK sw.bb228
%7882:	load	 yy_hold_char
%7883:	store	 %7882 %7512
%7884:	getelementptr	 %7511 XXX
%7885:	store	 %7884 yy_c_buf_p
%7886:	store	 %7511 yytext
%7887:	ptrtoint	 %7884
%7888:	ptrtoint	 %7511
%7889:	sub	 %7887 %7888
%7890:	trunc	 %7889
%7891:	store	 %7890 yyleng
%7892:	load	 %7884
%7893:	store	 %7892 yy_hold_char
%7894:	store	 XXX %7884
%7895:	store	 %7884 yy_c_buf_p
%7896:	br	 return

BASIC BLOCK sw.bb234
%7897:	store	 XXX flexscan.bracelevel
%7898:	store	 XXX yy_start
%7899:	br	 return

BASIC BLOCK sw.bb235
%7900:	store	 XXX continued_action
%7901:	load	 linenum
%7902:	add	 %7901 XXX
%7903:	store	 %7902 linenum
%7904:	br	 return

BASIC BLOCK sw.bb237
%7905:	store	 XXX flexscan.bracelevel
%7906:	store	 XXX continued_action
%7907:	store	 XXX yy_start
%7908:	br	 return

BASIC BLOCK sw.bb238
%7909:	store	 XXX flexscan.bracelevel
%7910:	store	 XXX continued_action
%7911:	store	 XXX yy_start
%7912:	load	 yytext
%7913:	call	 XXX %7912 yyunput
%7914:	br	 return

BASIC BLOCK sw.bb239
%7915:	br	 return

BASIC BLOCK sw.bb240
%7916:	store	 XXX sectnum
%7917:	store	 XXX yy_start
%7918:	br	 return

BASIC BLOCK sw.bb241
%7919:	load	 yytext
%7920:	call	 XXX %7919 strcpy
%7921:	call	 XXX ccllookup
%7922:	icmp	 %7921 XXX
%7923:	br	 %7922 if.else252 if.then245

BASIC BLOCK if.then245
%7924:	call	 input
%7925:	icmp	 %7924 XXX
%7926:	br	 %7925 if.end250 if.then249

BASIC BLOCK if.then249
%7927:	call	 XXX synerr
%7928:	br	 if.end250

BASIC BLOCK if.end250
%7929:	store	 %7921 yylval
%7930:	load	 cclreuse
%7931:	add	 %7930 XXX
%7932:	store	 %7931 cclreuse
%7933:	br	 return

BASIC BLOCK if.else252
%7934:	load	 lastccl
%7935:	add	 %7934 XXX
%7936:	call	 XXX %7935 cclinstal
%7937:	br	 do.body254

BASIC BLOCK do.body254
%7938:	load	 yy_hold_char
%7939:	store	 %7938 %7512
%7940:	getelementptr	 %7511 XXX
%7941:	getelementptr	 %7940 XXX
%7942:	store	 %7941 yy_c_buf_p
%7943:	store	 %7511 yytext
%7944:	ptrtoint	 %7941
%7945:	ptrtoint	 %7511
%7946:	sub	 %7944 %7945
%7947:	trunc	 %7946
%7948:	store	 %7947 yyleng
%7949:	load	 %7941
%7950:	store	 %7949 yy_hold_char
%7951:	store	 XXX %7941
%7952:	store	 %7941 yy_c_buf_p
%7953:	br	 do.end262

BASIC BLOCK do.end262
%7954:	store	 XXX yy_start
%7955:	br	 return

BASIC BLOCK sw.bb263
%7956:	load	 yytext
%7957:	getelementptr	 %7956 XXX
%7958:	call	 XXX %7957 strcpy
%7959:	load	 yyleng
%7960:	sub	 %7959 XXX
%7961:	sext	 %7960
%7962:	getelementptr	 nmstr XXX %7961
%7963:	store	 XXX %7962
%7964:	call	 XXX ndlookup
%7965:	icmp	 %7964 XXX
%7966:	br	 %7965 if.then271 if.else272

BASIC BLOCK if.then271
%7967:	call	 XXX XXX format_synerr
%7968:	br	 if.end324

BASIC BLOCK if.else272
%7969:	call	 %7964 strlen
%7970:	trunc	 %7969
%7971:	load	 lex_compat
%7972:	icmp	 %7971 XXX
%7973:	br	 %7972 lor.lhs.false if.then289

BASIC BLOCK lor.lhs.false
%7974:	getelementptr	 %7964 XXX
%7975:	load	 %7974
%7976:	zext	 %7975
%7977:	icmp	 %7976 XXX
%7978:	br	 %7977 lor.lhs.false280 if.then289

BASIC BLOCK lor.lhs.false280
%7979:	icmp	 %7970 XXX
%7980:	br	 %7979 if.else309 land.lhs.true

BASIC BLOCK land.lhs.true
%7981:	sub	 %7970 XXX
%7982:	sext	 %7981
%7983:	getelementptr	 %7964 %7982
%7984:	load	 %7983
%7985:	zext	 %7984
%7986:	icmp	 %7985 XXX
%7987:	br	 %7986 if.else309 if.then289

BASIC BLOCK if.then289
%7988:	call	 %7964 strlen
%7989:	sub	 %7988 XXX
%7990:	trunc	 %7989
%7991:	br	 for.cond293

BASIC BLOCK for.cond293
%7992:	phi	 %7990 %8002
%7993:	icmp	 %7992 XXX
%7994:	br	 %7993 for.end302 for.body296

BASIC BLOCK for.body296
%7995:	sext	 %7992
%7996:	getelementptr	 %7964 %7995
%7997:	load	 %7996
%7998:	sext	 %7997
%7999:	load	 yytext
%8000:	call	 %7998 %7999 yyunput
%8001:	br	 for.inc300

BASIC BLOCK for.inc300
%8002:	add	 %7992 XXX
%8003:	br	 for.cond293

BASIC BLOCK for.end302
%8004:	getelementptr	 %7964 XXX
%8005:	load	 %8004
%8006:	zext	 %8005
%8007:	icmp	 %8006 XXX
%8008:	br	 %8007 if.end308 if.then307

BASIC BLOCK if.then307
%8009:	store	 XXX yy_start
%8010:	br	 if.end308

BASIC BLOCK if.end308
%8011:	br	 if.end323

BASIC BLOCK if.else309
%8012:	load	 yytext
%8013:	call	 XXX %8012 yyunput
%8014:	call	 %7964 strlen
%8015:	sub	 %8014 XXX
%8016:	trunc	 %8015
%8017:	br	 for.cond313

BASIC BLOCK for.cond313
%8018:	phi	 %8016 %8028
%8019:	icmp	 %8018 XXX
%8020:	br	 %8019 for.end322 for.body316

BASIC BLOCK for.body316
%8021:	sext	 %8018
%8022:	getelementptr	 %7964 %8021
%8023:	load	 %8022
%8024:	sext	 %8023
%8025:	load	 yytext
%8026:	call	 %8024 %8025 yyunput
%8027:	br	 for.inc320

BASIC BLOCK for.inc320
%8028:	add	 %8018 XXX
%8029:	br	 for.cond313

BASIC BLOCK for.end322
%8030:	load	 yytext
%8031:	call	 XXX %8030 yyunput
%8032:	br	 if.end323

BASIC BLOCK if.end323
%8033:	br	 if.end324

BASIC BLOCK if.end324
%8034:	br	 sw.epilog509

BASIC BLOCK sw.bb325
%8035:	load	 yytext
%8036:	getelementptr	 %8035 XXX
%8037:	load	 %8036
%8038:	zext	 %8037
%8039:	br	 return

BASIC BLOCK sw.bb328
%8040:	load	 yytext
%8041:	getelementptr	 %8040 XXX
%8042:	load	 %8041
%8043:	zext	 %8042
%8044:	store	 %8043 yylval
%8045:	br	 return

BASIC BLOCK sw.bb331
%8046:	load	 yytext
%8047:	getelementptr	 %8046 XXX
%8048:	load	 %8047
%8049:	zext	 %8048
%8050:	br	 return

BASIC BLOCK sw.bb334
%8051:	store	 XXX yy_start
%8052:	br	 return

BASIC BLOCK sw.bb335
%8053:	load	 yy_hold_char
%8054:	store	 %8053 %7512
%8055:	getelementptr	 %7511 XXX
%8056:	store	 %8055 yy_c_buf_p
%8057:	store	 %7511 yytext
%8058:	ptrtoint	 %8055
%8059:	ptrtoint	 %7511
%8060:	sub	 %8058 %8059
%8061:	trunc	 %8060
%8062:	store	 %8061 yyleng
%8063:	load	 %8055
%8064:	store	 %8063 yy_hold_char
%8065:	store	 XXX %8055
%8066:	store	 %8055 yy_c_buf_p
%8067:	store	 XXX yy_start
%8068:	br	 return

BASIC BLOCK sw.bb341
%8069:	load	 yytext
%8070:	call	 XXX %8069 strcpy
%8071:	br	 return

BASIC BLOCK sw.bb343
%8072:	load	 yytext
%8073:	call	 XXX %8072 format_synerr
%8074:	br	 sw.epilog509

BASIC BLOCK sw.bb344
%8075:	store	 XXX yy_start
%8076:	br	 return

BASIC BLOCK sw.bb345
%8077:	load	 yytext
%8078:	getelementptr	 %8077 XXX
%8079:	load	 %8078
%8080:	zext	 %8079
%8081:	store	 %8080 yylval
%8082:	br	 return

BASIC BLOCK sw.bb348
%8083:	store	 XXX yy_start
%8084:	br	 return

BASIC BLOCK sw.bb349
%8085:	call	 XXX synerr
%8086:	store	 XXX yy_start
%8087:	load	 linenum
%8088:	add	 %8087 XXX
%8089:	store	 %8088 linenum
%8090:	br	 return

BASIC BLOCK sw.bb351
%8091:	load	 yy_hold_char
%8092:	store	 %8091 %7512
%8093:	getelementptr	 %7511 XXX
%8094:	store	 %8093 yy_c_buf_p
%8095:	store	 %7511 yytext
%8096:	ptrtoint	 %8093
%8097:	ptrtoint	 %7511
%8098:	sub	 %8096 %8097
%8099:	trunc	 %8098
%8100:	store	 %8099 yyleng
%8101:	load	 %8093
%8102:	store	 %8101 yy_hold_char
%8103:	store	 XXX %8093
%8104:	store	 %8093 yy_c_buf_p
%8105:	store	 XXX yy_start
%8106:	br	 return

BASIC BLOCK sw.bb357
%8107:	load	 yy_hold_char
%8108:	store	 %8107 %7512
%8109:	getelementptr	 %7511 XXX
%8110:	store	 %8109 yy_c_buf_p
%8111:	store	 %7511 yytext
%8112:	ptrtoint	 %8109
%8113:	ptrtoint	 %7511
%8114:	sub	 %8112 %8113
%8115:	trunc	 %8114
%8116:	store	 %8115 yyleng
%8117:	load	 %8109
%8118:	store	 %8117 yy_hold_char
%8119:	store	 XXX %8109
%8120:	store	 %8109 yy_c_buf_p
%8121:	br	 return

BASIC BLOCK sw.bb363
%8122:	store	 XXX yy_start
%8123:	load	 yytext
%8124:	getelementptr	 %8123 XXX
%8125:	load	 %8124
%8126:	zext	 %8125
%8127:	store	 %8126 yylval
%8128:	br	 return

BASIC BLOCK sw.bb366
%8129:	load	 yy_hold_char
%8130:	store	 %8129 %7512
%8131:	getelementptr	 %7511 XXX
%8132:	store	 %8131 yy_c_buf_p
%8133:	store	 %7511 yytext
%8134:	ptrtoint	 %8131
%8135:	ptrtoint	 %7511
%8136:	sub	 %8134 %8135
%8137:	trunc	 %8136
%8138:	store	 %8137 yyleng
%8139:	load	 %8131
%8140:	store	 %8139 yy_hold_char
%8141:	store	 XXX %8131
%8142:	store	 %8131 yy_c_buf_p
%8143:	br	 return

BASIC BLOCK sw.bb372
%8144:	load	 yytext
%8145:	getelementptr	 %8144 XXX
%8146:	load	 %8145
%8147:	zext	 %8146
%8148:	store	 %8147 yylval
%8149:	br	 return

BASIC BLOCK sw.bb375
%8150:	store	 XXX yy_start
%8151:	br	 return

BASIC BLOCK sw.bb376
%8152:	call	 XXX synerr
%8153:	store	 XXX yy_start
%8154:	br	 return

BASIC BLOCK sw.bb377
%8155:	load	 yytext
%8156:	call	 %8155 myctoi
%8157:	store	 %8156 yylval
%8158:	br	 return

BASIC BLOCK sw.bb379
%8159:	br	 return

BASIC BLOCK sw.bb380
%8160:	store	 XXX yy_start
%8161:	br	 return

BASIC BLOCK sw.bb381
%8162:	call	 XXX synerr
%8163:	store	 XXX yy_start
%8164:	br	 return

BASIC BLOCK sw.bb382
%8165:	call	 XXX synerr
%8166:	store	 XXX yy_start
%8167:	load	 linenum
%8168:	add	 %8167 XXX
%8169:	store	 %8168 linenum
%8170:	br	 return

BASIC BLOCK sw.bb384
%8171:	call	 XXX synerr
%8172:	store	 XXX yy_start
%8173:	br	 sw.epilog509

BASIC BLOCK sw.bb385
%8174:	call	 XXX synerr
%8175:	load	 linenum
%8176:	add	 %8175 XXX
%8177:	store	 %8176 linenum
%8178:	store	 XXX yy_start
%8179:	br	 sw.epilog509

BASIC BLOCK sw.bb387
%8180:	load	 yytext
%8181:	call	 %8180 add_action
%8182:	store	 XXX yy_start
%8183:	br	 sw.epilog509

BASIC BLOCK sw.bb388
%8184:	store	 XXX flexscan.bracelevel
%8185:	br	 sw.epilog509

BASIC BLOCK sw.bb389
%8186:	load	 yytext
%8187:	call	 %8186 add_action
%8188:	load	 yytext
%8189:	call	 %8188 all_upper
%8190:	icmp	 %8189 XXX
%8191:	br	 %8190 if.end393 if.then392

BASIC BLOCK if.then392
%8192:	store	 XXX reject
%8193:	br	 if.end393

BASIC BLOCK if.end393
%8194:	br	 sw.epilog509

BASIC BLOCK sw.bb394
%8195:	load	 yytext
%8196:	call	 %8195 add_action
%8197:	load	 yytext
%8198:	call	 %8197 all_lower
%8199:	icmp	 %8198 XXX
%8200:	br	 %8199 if.end398 if.then397

BASIC BLOCK if.then397
%8201:	store	 XXX yymore_used
%8202:	br	 if.end398

BASIC BLOCK if.end398
%8203:	br	 sw.epilog509

BASIC BLOCK sw.bb399
%8204:	load	 yytext
%8205:	call	 %8204 add_action
%8206:	br	 sw.epilog509

BASIC BLOCK sw.bb400
%8207:	load	 linenum
%8208:	add	 %8207 XXX
%8209:	store	 %8208 linenum
%8210:	load	 yytext
%8211:	call	 %8210 add_action
%8212:	load	 flexscan.bracelevel
%8213:	icmp	 %8212 XXX
%8214:	br	 %8213 lor.lhs.false404 if.then408

BASIC BLOCK lor.lhs.false404
%8215:	icmp	 %7429 XXX
%8216:	br	 %8215 if.end412 land.lhs.true406

BASIC BLOCK land.lhs.true406
%8217:	load	 flexscan.indented_code
%8218:	icmp	 %8217 XXX
%8219:	br	 %8218 if.end412 if.then408

BASIC BLOCK if.then408
%8220:	icmp	 %7429 XXX
%8221:	br	 %8220 if.then410 if.end411

BASIC BLOCK if.then410
%8222:	call	 XXX add_action
%8223:	br	 if.end411

BASIC BLOCK if.end411
%8224:	store	 XXX yy_start
%8225:	br	 if.end412

BASIC BLOCK if.end412
%8226:	phi	 XXX %7429 %7429
%8227:	br	 sw.epilog509

BASIC BLOCK sw.bb413
%8228:	load	 yytext
%8229:	call	 %8228 add_action
%8230:	load	 flexscan.bracelevel
%8231:	add	 %8230 XXX
%8232:	store	 %8231 flexscan.bracelevel
%8233:	br	 sw.epilog509

BASIC BLOCK sw.bb415
%8234:	load	 yytext
%8235:	call	 %8234 add_action
%8236:	load	 flexscan.bracelevel
%8237:	add	 %8236 XXX
%8238:	store	 %8237 flexscan.bracelevel
%8239:	br	 sw.epilog509

BASIC BLOCK sw.bb417
%8240:	load	 yytext
%8241:	call	 %8240 add_action
%8242:	br	 sw.epilog509

BASIC BLOCK sw.bb418
%8243:	load	 yytext
%8244:	call	 %8243 add_action
%8245:	br	 sw.epilog509

BASIC BLOCK sw.bb419
%8246:	load	 yytext
%8247:	call	 %8246 add_action
%8248:	store	 XXX yy_start
%8249:	br	 sw.epilog509

BASIC BLOCK sw.bb420
%8250:	load	 yytext
%8251:	call	 %8250 add_action
%8252:	br	 sw.epilog509

BASIC BLOCK sw.bb421
%8253:	load	 yytext
%8254:	call	 %8253 add_action
%8255:	store	 XXX yy_start
%8256:	br	 sw.epilog509

BASIC BLOCK sw.bb422
%8257:	load	 linenum
%8258:	add	 %8257 XXX
%8259:	store	 %8258 linenum
%8260:	load	 yytext
%8261:	call	 %8260 add_action
%8262:	load	 flexscan.bracelevel
%8263:	icmp	 %8262 XXX
%8264:	br	 %8263 if.end427 if.then426

BASIC BLOCK if.then426
%8265:	call	 XXX add_action
%8266:	store	 XXX yy_start
%8267:	br	 if.end427

BASIC BLOCK if.end427
%8268:	br	 sw.epilog509

BASIC BLOCK sw.bb428
%8269:	load	 yytext
%8270:	call	 %8269 add_action
%8271:	br	 sw.epilog509

BASIC BLOCK sw.bb429
%8272:	load	 yytext
%8273:	call	 %8272 add_action
%8274:	icmp	 %7429 XXX
%8275:	br	 %8274 if.else432 if.then431

BASIC BLOCK if.then431
%8276:	store	 XXX yy_start
%8277:	br	 if.end433

BASIC BLOCK if.else432
%8278:	store	 XXX yy_start
%8279:	br	 if.end433

BASIC BLOCK if.end433
%8280:	br	 sw.epilog509

BASIC BLOCK sw.bb434
%8281:	load	 yytext
%8282:	call	 %8281 add_action
%8283:	br	 sw.epilog509

BASIC BLOCK sw.bb435
%8284:	load	 yytext
%8285:	call	 %8284 add_action
%8286:	br	 sw.epilog509

BASIC BLOCK sw.bb436
%8287:	load	 linenum
%8288:	add	 %8287 XXX
%8289:	store	 %8288 linenum
%8290:	load	 yytext
%8291:	call	 %8290 add_action
%8292:	br	 sw.epilog509

BASIC BLOCK sw.bb438
%8293:	load	 yytext
%8294:	call	 %8293 add_action
%8295:	br	 sw.epilog509

BASIC BLOCK sw.bb439
%8296:	load	 yytext
%8297:	call	 %8296 add_action
%8298:	br	 sw.epilog509

BASIC BLOCK sw.bb440
%8299:	load	 linenum
%8300:	add	 %8299 XXX
%8301:	store	 %8300 linenum
%8302:	load	 yytext
%8303:	call	 %8302 add_action
%8304:	br	 sw.epilog509

BASIC BLOCK sw.bb442
%8305:	load	 yytext
%8306:	call	 %8305 add_action
%8307:	store	 XXX yy_start
%8308:	br	 sw.epilog509

BASIC BLOCK sw.bb443
%8309:	load	 yytext
%8310:	call	 %8309 add_action
%8311:	br	 sw.epilog509

BASIC BLOCK sw.bb444
%8312:	call	 XXX synerr
%8313:	br	 return

BASIC BLOCK sw.bb445
%8314:	load	 yytext
%8315:	call	 %8314 myesc
%8316:	zext	 %8315
%8317:	store	 %8316 yylval
%8318:	br	 return

BASIC BLOCK sw.bb448
%8319:	load	 yytext
%8320:	call	 %8319 myesc
%8321:	zext	 %8320
%8322:	store	 %8321 yylval
%8323:	store	 XXX yy_start
%8324:	br	 return

BASIC BLOCK sw.bb451
%8325:	load	 yytext
%8326:	load	 yyleng
%8327:	sext	 %8326
%8328:	load	 yyout
%8329:	call	 %8325 %8327 XXX %8328 fwrite
%8330:	br	 sw.epilog509

BASIC BLOCK sw.bb454
%8331:	store	 XXX sectnum
%8332:	br	 return

BASIC BLOCK sw.bb455
%8333:	load	 yytext
%8334:	call	 XXX %8333 format_synerr
%8335:	br	 sw.epilog509

BASIC BLOCK sw.bb456
%8336:	call	 XXX yy_fatal_error
%8337:	br	 sw.epilog509

BASIC BLOCK sw.bb457
%8338:	br	 return

BASIC BLOCK sw.bb458
%8339:	load	 yytext
%8340:	ptrtoint	 %7512
%8341:	ptrtoint	 %8339
%8342:	sub	 %8340 %8341
%8343:	sub	 %8342 XXX
%8344:	trunc	 %8343
%8345:	load	 yy_hold_char
%8346:	store	 %8345 %7512
%8347:	load	 yy_current_buffer
%8348:	getelementptr	 %8347 XXX XXX
%8349:	load	 %8348
%8350:	icmp	 %8349 XXX
%8351:	br	 %8350 if.end468 if.then466

BASIC BLOCK if.then466
%8352:	load	 yy_current_buffer
%8353:	getelementptr	 %8352 XXX XXX
%8354:	load	 %8353
%8355:	store	 %8354 yy_n_chars
%8356:	load	 yyin
%8357:	load	 yy_current_buffer
%8358:	getelementptr	 %8357 XXX XXX
%8359:	store	 %8356 %8358
%8360:	load	 yy_current_buffer
%8361:	getelementptr	 %8360 XXX XXX
%8362:	store	 XXX %8361
%8363:	br	 if.end468

BASIC BLOCK if.end468
%8364:	load	 yy_c_buf_p
%8365:	load	 yy_n_chars
%8366:	sext	 %8365
%8367:	load	 yy_current_buffer
%8368:	getelementptr	 %8367 XXX XXX
%8369:	load	 %8368
%8370:	getelementptr	 %8369 %8366
%8371:	icmp	 %8364 %8370
%8372:	br	 %8371 if.else482 if.then473

BASIC BLOCK if.then473
%8373:	load	 yytext
%8374:	sext	 %8344
%8375:	getelementptr	 %8373 %8374
%8376:	store	 %8375 yy_c_buf_p
%8377:	call	 yy_get_previous_state
%8378:	call	 %8377 yy_try_NUL_trans
%8379:	load	 yytext
%8380:	getelementptr	 %8379 XXX
%8381:	icmp	 %8378 XXX
%8382:	br	 %8381 if.else481 if.then479

BASIC BLOCK if.then479
%8383:	load	 yy_c_buf_p
%8384:	getelementptr	 %8383 XXX
%8385:	store	 %8384 yy_c_buf_p
%8386:	br	 yy_match

BASIC BLOCK if.else481
%8387:	load	 yy_c_buf_p
%8388:	br	 yy_find_action

BASIC BLOCK if.else482
%8389:	call	 yy_get_next_buffer
%8390:	switch	 %8389 sw.epilog XXX sw.bb484 XXX sw.bb497 XXX sw.bb502

BASIC BLOCK sw.bb484
%8391:	store	 XXX yy_did_buffer_switch_on_eof
%8392:	call	 yywrap
%8393:	icmp	 %8392 XXX
%8394:	br	 %8393 if.else492 if.then487

BASIC BLOCK if.then487
%8395:	load	 yytext
%8396:	getelementptr	 %8395 XXX
%8397:	store	 %8396 yy_c_buf_p
%8398:	load	 yy_start
%8399:	sub	 %8398 XXX
%8400:	sdiv	 %8399 XXX
%8401:	add	 XXX %8400
%8402:	add	 %8401 XXX
%8403:	br	 do_action

BASIC BLOCK if.else492
%8404:	load	 yy_did_buffer_switch_on_eof
%8405:	icmp	 %8404 XXX
%8406:	br	 %8405 if.then494 if.end495

BASIC BLOCK if.then494
%8407:	load	 yyin
%8408:	call	 %8407 yyrestart
%8409:	br	 if.end495

BASIC BLOCK if.end495
%8410:	br	 if.end496

BASIC BLOCK if.end496
%8411:	br	 sw.epilog

BASIC BLOCK sw.bb497
%8412:	load	 yytext
%8413:	sext	 %8344
%8414:	getelementptr	 %8412 %8413
%8415:	store	 %8414 yy_c_buf_p
%8416:	call	 yy_get_previous_state
%8417:	load	 yy_c_buf_p
%8418:	load	 yytext
%8419:	getelementptr	 %8418 XXX
%8420:	br	 yy_match

BASIC BLOCK sw.bb502
%8421:	load	 yy_n_chars
%8422:	sext	 %8421
%8423:	load	 yy_current_buffer
%8424:	getelementptr	 %8423 XXX XXX
%8425:	load	 %8424
%8426:	getelementptr	 %8425 %8422
%8427:	store	 %8426 yy_c_buf_p
%8428:	call	 yy_get_previous_state
%8429:	load	 yy_c_buf_p
%8430:	load	 yytext
%8431:	getelementptr	 %8430 XXX
%8432:	br	 yy_find_action

BASIC BLOCK sw.epilog
%8433:	br	 if.end508

BASIC BLOCK if.end508
%8434:	br	 sw.epilog509

BASIC BLOCK sw.default
%8435:	call	 XXX yy_fatal_error
%8436:	br	 sw.epilog509

BASIC BLOCK sw.epilog509
%8437:	phi	 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %8226 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 XXX %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429 %7429
%8438:	br	 while.body

BASIC BLOCK return
%8439:	phi	 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX %8049 XXX %8038 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
%8440:	ret	 %8439

FUNCTION add_action

BASIC BLOCK entry
%8441:	call	 new_text strlen
%8442:	trunc	 %8441
%8443:	br	 while.cond

BASIC BLOCK while.cond
%8444:	load	 action_index
%8445:	add	 %8442 %8444
%8446:	load	 action_size
%8447:	sub	 %8446 XXX
%8448:	icmp	 %8445 %8447
%8449:	br	 %8448 while.end while.body

BASIC BLOCK while.body
%8450:	load	 action_size
%8451:	mul	 %8450 XXX
%8452:	store	 %8451 action_size
%8453:	load	 action_array
%8454:	load	 action_size
%8455:	call	 %8453 %8454 XXX reallocate_array
%8456:	store	 %8455 action_array
%8457:	br	 while.cond

BASIC BLOCK while.end
%8458:	load	 action_index
%8459:	sext	 %8458
%8460:	load	 action_array
%8461:	getelementptr	 %8460 %8459
%8462:	call	 %8461 new_text strcpy
%8463:	load	 action_index
%8464:	add	 %8463 %8442
%8465:	store	 %8464 action_index
%8466:	ret	

FUNCTION flex_alloc

BASIC BLOCK entry
%8467:	call	 size yy_flex_alloc
%8468:	ret	 %8467

FUNCTION all_lower

BASIC BLOCK entry
%8469:	br	 while.cond

BASIC BLOCK while.cond
%8470:	phi	 str %8491
%8471:	load	 %8470
%8472:	icmp	 %8471 XXX
%8473:	br	 %8472 while.end while.body

BASIC BLOCK while.body
%8474:	load	 %8470
%8475:	zext	 %8474
%8476:	and	 %8475 XXX
%8477:	icmp	 %8476 XXX
%8478:	br	 %8477 if.then lor.lhs.false

BASIC BLOCK lor.lhs.false
%8479:	load	 %8470
%8480:	sext	 %8479
%8481:	sext	 %8480
%8482:	call	 __ctype_b_loc
%8483:	load	 %8482
%8484:	getelementptr	 %8483 %8481
%8485:	load	 %8484
%8486:	zext	 %8485
%8487:	and	 %8486 XXX
%8488:	icmp	 %8487 XXX
%8489:	br	 %8488 if.then if.end

BASIC BLOCK if.then
%8490:	br	 return

BASIC BLOCK if.end
%8491:	getelementptr	 %8470 XXX
%8492:	br	 while.cond

BASIC BLOCK while.end
%8493:	br	 return

BASIC BLOCK return
%8494:	phi	 XXX XXX
%8495:	ret	 %8494

FUNCTION all_upper

BASIC BLOCK entry
%8496:	br	 while.cond

BASIC BLOCK while.cond
%8497:	phi	 str %8518
%8498:	load	 %8497
%8499:	icmp	 %8498 XXX
%8500:	br	 %8499 while.end while.body

BASIC BLOCK while.body
%8501:	load	 %8497
%8502:	zext	 %8501
%8503:	and	 %8502 XXX
%8504:	icmp	 %8503 XXX
%8505:	br	 %8504 if.then lor.lhs.false

BASIC BLOCK lor.lhs.false
%8506:	load	 %8497
%8507:	sext	 %8506
%8508:	sext	 %8507
%8509:	call	 __ctype_b_loc
%8510:	load	 %8509
%8511:	getelementptr	 %8510 %8508
%8512:	load	 %8511
%8513:	zext	 %8512
%8514:	and	 %8513 XXX
%8515:	icmp	 %8514 XXX
%8516:	br	 %8515 if.then if.end

BASIC BLOCK if.then
%8517:	br	 return

BASIC BLOCK if.end
%8518:	getelementptr	 %8497 XXX
%8519:	br	 while.cond

BASIC BLOCK while.end
%8520:	br	 return

BASIC BLOCK return
%8521:	phi	 XXX XXX
%8522:	ret	 %8521

FUNCTION clower

BASIC BLOCK entry
%8523:	and	 c XXX
%8524:	icmp	 %8523 XXX
%8525:	br	 %8524 cond.false land.lhs.true

BASIC BLOCK land.lhs.true
%8526:	sext	 c
%8527:	call	 __ctype_b_loc
%8528:	load	 %8527
%8529:	getelementptr	 %8528 %8526
%8530:	load	 %8529
%8531:	zext	 %8530
%8532:	and	 %8531 XXX
%8533:	icmp	 %8532 XXX
%8534:	br	 %8533 cond.false cond.true

BASIC BLOCK cond.true
%8535:	call	 c tolower
%8536:	br	 cond.end

BASIC BLOCK cond.false
%8537:	br	 cond.end

BASIC BLOCK cond.end
%8538:	phi	 %8535 c
%8539:	trunc	 %8538
%8540:	ret	 %8539

FUNCTION copy_string

BASIC BLOCK entry
%8541:	br	 for.cond

BASIC BLOCK for.cond
%8542:	phi	 str %8547
%8543:	load	 %8542
%8544:	icmp	 %8543 XXX
%8545:	br	 %8544 for.end for.body

BASIC BLOCK for.body
%8546:	br	 for.inc

BASIC BLOCK for.inc
%8547:	getelementptr	 %8542 XXX
%8548:	br	 for.cond

BASIC BLOCK for.end
%8549:	ptrtoint	 %8542
%8550:	ptrtoint	 str
%8551:	sub	 %8549 %8550
%8552:	add	 %8551 XXX
%8553:	mul	 %8552 XXX
%8554:	trunc	 %8553
%8555:	call	 %8554 flex_alloc
%8556:	icmp	 %8555 XXX
%8557:	br	 %8556 if.end if.then

BASIC BLOCK if.then
%8558:	call	 XXX flexfatal
%8559:	br	 if.end

BASIC BLOCK if.end
%8560:	br	 for.cond2

BASIC BLOCK for.cond2
%8561:	phi	 %8555 %8565
%8562:	phi	 str %8563
%8563:	getelementptr	 %8562 XXX
%8564:	load	 %8562
%8565:	getelementptr	 %8561 XXX
%8566:	store	 %8564 %8561
%8567:	icmp	 %8564 XXX
%8568:	br	 %8567 for.end7 for.body6

BASIC BLOCK for.body6
%8569:	br	 for.cond2

BASIC BLOCK for.end7
%8570:	ret	 %8555

FUNCTION copy_unsigned_string

BASIC BLOCK entry
%8571:	br	 for.cond

BASIC BLOCK for.cond
%8572:	phi	 str %8577
%8573:	load	 %8572
%8574:	icmp	 %8573 XXX
%8575:	br	 %8574 for.end for.body

BASIC BLOCK for.body
%8576:	br	 for.inc

BASIC BLOCK for.inc
%8577:	getelementptr	 %8572 XXX
%8578:	br	 for.cond

BASIC BLOCK for.end
%8579:	ptrtoint	 %8572
%8580:	ptrtoint	 str
%8581:	sub	 %8579 %8580
%8582:	add	 %8581 XXX
%8583:	trunc	 %8582
%8584:	call	 %8583 XXX allocate_array
%8585:	br	 for.cond1

BASIC BLOCK for.cond1
%8586:	phi	 %8584 %8590
%8587:	phi	 str %8588
%8588:	getelementptr	 %8587 XXX
%8589:	load	 %8587
%8590:	getelementptr	 %8586 XXX
%8591:	store	 %8589 %8586
%8592:	icmp	 %8589 XXX
%8593:	br	 %8592 for.end6 for.body5

BASIC BLOCK for.body5
%8594:	br	 for.cond1

BASIC BLOCK for.end6
%8595:	ret	 %8584

FUNCTION cshell

BASIC BLOCK entry
%8596:	sdiv	 n XXX
%8597:	br	 for.cond

BASIC BLOCK for.cond
%8598:	phi	 %8596 %8670
%8599:	icmp	 %8598 XXX
%8600:	br	 %8599 for.end50 for.body

BASIC BLOCK for.body
%8601:	br	 for.cond1

BASIC BLOCK for.cond1
%8602:	phi	 %8598 %8667
%8603:	icmp	 %8602 n
%8604:	br	 %8603 for.end47 for.body3

BASIC BLOCK for.body3
%8605:	sub	 %8602 %8598
%8606:	br	 for.cond4

BASIC BLOCK for.cond4
%8607:	phi	 %8605 %8664
%8608:	icmp	 %8607 XXX
%8609:	br	 %8608 for.end for.body6

BASIC BLOCK for.body6
%8610:	add	 %8607 %8598
%8611:	icmp	 special_case_0 XXX
%8612:	br	 %8611 if.else25 if.then

BASIC BLOCK if.then
%8613:	sext	 %8610
%8614:	getelementptr	 v %8613
%8615:	load	 %8614
%8616:	zext	 %8615
%8617:	icmp	 %8616 XXX
%8618:	br	 %8617 if.else if.then9

BASIC BLOCK if.then9
%8619:	br	 for.end

BASIC BLOCK if.else
%8620:	sext	 %8607
%8621:	getelementptr	 v %8620
%8622:	load	 %8621
%8623:	zext	 %8622
%8624:	icmp	 %8623 XXX
%8625:	br	 %8624 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%8626:	sext	 %8607
%8627:	getelementptr	 v %8626
%8628:	load	 %8627
%8629:	zext	 %8628
%8630:	sext	 %8610
%8631:	getelementptr	 v %8630
%8632:	load	 %8631
%8633:	zext	 %8632
%8634:	icmp	 %8629 %8633
%8635:	br	 %8634 if.end if.then23

BASIC BLOCK if.then23
%8636:	br	 for.end

BASIC BLOCK if.end
%8637:	br	 if.end24

BASIC BLOCK if.end24
%8638:	br	 if.end36

BASIC BLOCK if.else25
%8639:	sext	 %8607
%8640:	getelementptr	 v %8639
%8641:	load	 %8640
%8642:	zext	 %8641
%8643:	sext	 %8610
%8644:	getelementptr	 v %8643
%8645:	load	 %8644
%8646:	zext	 %8645
%8647:	icmp	 %8642 %8646
%8648:	br	 %8647 if.end35 if.then34

BASIC BLOCK if.then34
%8649:	br	 for.end

BASIC BLOCK if.end35
%8650:	br	 if.end36

BASIC BLOCK if.end36
%8651:	sext	 %8607
%8652:	getelementptr	 v %8651
%8653:	load	 %8652
%8654:	sext	 %8610
%8655:	getelementptr	 v %8654
%8656:	load	 %8655
%8657:	sext	 %8607
%8658:	getelementptr	 v %8657
%8659:	store	 %8656 %8658
%8660:	sext	 %8610
%8661:	getelementptr	 v %8660
%8662:	store	 %8653 %8661
%8663:	br	 for.inc

BASIC BLOCK for.inc
%8664:	sub	 %8607 %8598
%8665:	br	 for.cond4

BASIC BLOCK for.end
%8666:	br	 for.inc46

BASIC BLOCK for.inc46
%8667:	add	 %8602 XXX
%8668:	br	 for.cond1

BASIC BLOCK for.end47
%8669:	br	 for.inc48

BASIC BLOCK for.inc48
%8670:	sdiv	 %8598 XXX
%8671:	br	 for.cond

BASIC BLOCK for.end50
%8672:	ret	

FUNCTION dataflush

BASIC BLOCK entry
%8673:	call	 XXX putchar
%8674:	load	 dataline
%8675:	add	 %8674 XXX
%8676:	store	 %8675 dataline
%8677:	icmp	 %8675 XXX
%8678:	br	 %8677 if.end if.then

BASIC BLOCK if.then
%8679:	call	 XXX putchar
%8680:	store	 XXX dataline
%8681:	br	 if.end

BASIC BLOCK if.end
%8682:	store	 XXX datapos
%8683:	ret	

FUNCTION htoi

BASIC BLOCK entry
%8684:	alloca	 XXX
%8685:	call	 str XXX %8684 sscanf
%8686:	load	 %8684
%8687:	ret	 %8686

FUNCTION is_hex_digit

BASIC BLOCK entry
%8688:	sext	 ch
%8689:	call	 __ctype_b_loc
%8690:	load	 %8689
%8691:	getelementptr	 %8690 %8688
%8692:	load	 %8691
%8693:	zext	 %8692
%8694:	and	 %8693 XXX
%8695:	icmp	 %8694 XXX
%8696:	br	 %8695 if.end if.then

BASIC BLOCK if.then
%8697:	br	 return

BASIC BLOCK if.end
%8698:	call	 ch clower
%8699:	zext	 %8698
%8700:	switch	 %8699 sw.default XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb

BASIC BLOCK sw.bb
%8701:	br	 return

BASIC BLOCK sw.default
%8702:	br	 return

BASIC BLOCK return
%8703:	phi	 XXX XXX XXX
%8704:	ret	 %8703

FUNCTION mark_defs1

BASIC BLOCK entry
%8705:	store	 XXX defs1_offset
%8706:	load	 action_index
%8707:	add	 %8706 XXX
%8708:	store	 %8707 action_index
%8709:	sext	 %8706
%8710:	load	 action_array
%8711:	getelementptr	 %8710 %8709
%8712:	store	 XXX %8711
%8713:	load	 action_index
%8714:	store	 %8713 prolog_offset
%8715:	store	 %8713 action_offset
%8716:	load	 action_index
%8717:	sext	 %8716
%8718:	load	 action_array
%8719:	getelementptr	 %8718 %8717
%8720:	store	 XXX %8719
%8721:	ret	

FUNCTION mark_prolog

BASIC BLOCK entry
%8722:	load	 action_index
%8723:	add	 %8722 XXX
%8724:	store	 %8723 action_index
%8725:	sext	 %8722
%8726:	load	 action_array
%8727:	getelementptr	 %8726 %8725
%8728:	store	 XXX %8727
%8729:	load	 action_index
%8730:	store	 %8729 action_offset
%8731:	load	 action_index
%8732:	sext	 %8731
%8733:	load	 action_array
%8734:	getelementptr	 %8733 %8732
%8735:	store	 XXX %8734
%8736:	ret	

FUNCTION myctoi

BASIC BLOCK entry
%8737:	alloca	 XXX
%8738:	store	 XXX %8737
%8739:	call	 array XXX %8737 sscanf
%8740:	load	 %8737
%8741:	ret	 %8740

FUNCTION myesc

BASIC BLOCK entry
%8742:	getelementptr	 array XXX
%8743:	load	 %8742
%8744:	zext	 %8743
%8745:	switch	 %8744 sw.default XXX sw.bb XXX sw.bb1 XXX sw.bb2 XXX sw.bb3 XXX sw.bb4 XXX sw.bb5 XXX sw.bb6 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb7 XXX sw.bb26

BASIC BLOCK sw.bb
%8746:	br	 return

BASIC BLOCK sw.bb1
%8747:	br	 return

BASIC BLOCK sw.bb2
%8748:	br	 return

BASIC BLOCK sw.bb3
%8749:	br	 return

BASIC BLOCK sw.bb4
%8750:	br	 return

BASIC BLOCK sw.bb5
%8751:	br	 return

BASIC BLOCK sw.bb6
%8752:	br	 return

BASIC BLOCK sw.bb7
%8753:	br	 while.cond

BASIC BLOCK while.cond
%8754:	phi	 XXX %8777
%8755:	sext	 %8754
%8756:	getelementptr	 array %8755
%8757:	load	 %8756
%8758:	zext	 %8757
%8759:	and	 %8758 XXX
%8760:	icmp	 %8759 XXX
%8761:	br	 %8760 land.end land.rhs

BASIC BLOCK land.rhs
%8762:	sext	 %8754
%8763:	getelementptr	 array %8762
%8764:	load	 %8763
%8765:	zext	 %8764
%8766:	sext	 %8765
%8767:	call	 __ctype_b_loc
%8768:	load	 %8767
%8769:	getelementptr	 %8768 %8766
%8770:	load	 %8769
%8771:	zext	 %8770
%8772:	and	 %8771 XXX
%8773:	icmp	 %8772 XXX
%8774:	br	 land.end

BASIC BLOCK land.end
%8775:	phi	 XXX %8773
%8776:	br	 %8775 while.end while.body

BASIC BLOCK while.body
%8777:	add	 %8754 XXX
%8778:	br	 while.cond

BASIC BLOCK while.end
%8779:	sext	 %8754
%8780:	getelementptr	 array %8779
%8781:	load	 %8780
%8782:	sext	 %8754
%8783:	getelementptr	 array %8782
%8784:	store	 XXX %8783
%8785:	getelementptr	 array XXX
%8786:	call	 %8785 otoi
%8787:	trunc	 %8786
%8788:	sext	 %8754
%8789:	getelementptr	 array %8788
%8790:	store	 %8781 %8789
%8791:	br	 return

BASIC BLOCK sw.bb26
%8792:	br	 while.cond28

BASIC BLOCK while.cond28
%8793:	phi	 XXX %8810
%8794:	sext	 %8793
%8795:	getelementptr	 array %8794
%8796:	load	 %8795
%8797:	zext	 %8796
%8798:	and	 %8797 XXX
%8799:	icmp	 %8798 XXX
%8800:	br	 %8799 land.end41 land.rhs35

BASIC BLOCK land.rhs35
%8801:	sext	 %8793
%8802:	getelementptr	 array %8801
%8803:	load	 %8802
%8804:	sext	 %8803
%8805:	call	 %8804 is_hex_digit
%8806:	icmp	 %8805 XXX
%8807:	br	 land.end41

BASIC BLOCK land.end41
%8808:	phi	 XXX %8806
%8809:	br	 %8808 while.end44 while.body42

BASIC BLOCK while.body42
%8810:	add	 %8793 XXX
%8811:	br	 while.cond28

BASIC BLOCK while.end44
%8812:	sext	 %8793
%8813:	getelementptr	 array %8812
%8814:	load	 %8813
%8815:	sext	 %8793
%8816:	getelementptr	 array %8815
%8817:	store	 XXX %8816
%8818:	getelementptr	 array XXX
%8819:	call	 %8818 htoi
%8820:	trunc	 %8819
%8821:	sext	 %8793
%8822:	getelementptr	 array %8821
%8823:	store	 %8814 %8822
%8824:	br	 return

BASIC BLOCK sw.default
%8825:	getelementptr	 array XXX
%8826:	load	 %8825
%8827:	br	 return

BASIC BLOCK return
%8828:	phi	 %8826 %8820 %8787 XXX XXX XXX XXX XXX XXX XXX
%8829:	ret	 %8828

FUNCTION otoi

BASIC BLOCK entry
%8830:	alloca	 XXX
%8831:	call	 str XXX %8830 sscanf
%8832:	load	 %8830
%8833:	ret	 %8832

FUNCTION flex_realloc

BASIC BLOCK entry
%8834:	call	 ptr size yy_flex_realloc
%8835:	ret	 %8834

FUNCTION yy_flex_xmalloc

BASIC BLOCK entry
%8836:	call	 size flex_alloc
%8837:	icmp	 %8836 XXX
%8838:	br	 %8837 if.then if.end

BASIC BLOCK if.then
%8839:	call	 XXX flexfatal
%8840:	br	 if.end

BASIC BLOCK if.end
%8841:	ret	 %8836

FUNCTION zero_out

BASIC BLOCK entry
%8842:	sext	 size_in_bytes
%8843:	getelementptr	 region_ptr %8842
%8844:	br	 while.cond

BASIC BLOCK while.cond
%8845:	phi	 region_ptr %8848
%8846:	icmp	 %8845 %8843
%8847:	br	 %8846 while.end while.body

BASIC BLOCK while.body
%8848:	getelementptr	 %8845 XXX
%8849:	store	 XXX %8845
%8850:	br	 while.cond

BASIC BLOCK while.end
%8851:	ret	

FUNCTION add_accept

BASIC BLOCK entry
%8852:	sext	 mach
%8853:	load	 finalst
%8854:	getelementptr	 %8853 %8852
%8855:	load	 %8854
%8856:	sext	 %8855
%8857:	load	 transchar
%8858:	getelementptr	 %8857 %8856
%8859:	load	 %8858
%8860:	icmp	 %8859 XXX
%8861:	br	 %8860 if.else if.then

BASIC BLOCK if.then
%8862:	sext	 mach
%8863:	load	 finalst
%8864:	getelementptr	 %8863 %8862
%8865:	load	 %8864
%8866:	sext	 %8865
%8867:	load	 accptnum
%8868:	getelementptr	 %8867 %8866
%8869:	store	 accepting_number %8868
%8870:	br	 if.end

BASIC BLOCK if.else
%8871:	call	 XXX mkstate
%8872:	sext	 %8871
%8873:	load	 accptnum
%8874:	getelementptr	 %8873 %8872
%8875:	store	 accepting_number %8874
%8876:	call	 mach %8871 link_machines
%8877:	br	 if.end

BASIC BLOCK if.end
%8878:	ret	

FUNCTION mkstate

BASIC BLOCK entry
%8879:	load	 lastnfa
%8880:	add	 %8879 XXX
%8881:	store	 %8880 lastnfa
%8882:	load	 current_mns
%8883:	icmp	 %8880 %8882
%8884:	br	 %8883 if.end12 if.then

BASIC BLOCK if.then
%8885:	load	 current_mns
%8886:	add	 %8885 XXX
%8887:	store	 %8886 current_mns
%8888:	icmp	 %8886 XXX
%8889:	br	 %8888 if.end if.then2

BASIC BLOCK if.then2
%8890:	load	 current_mns
%8891:	call	 XXX %8890 lerrif
%8892:	br	 if.end

BASIC BLOCK if.end
%8893:	load	 num_reallocs
%8894:	add	 %8893 XXX
%8895:	store	 %8894 num_reallocs
%8896:	load	 firstst
%8897:	bitcast	 %8896
%8898:	load	 current_mns
%8899:	call	 %8897 %8898 XXX reallocate_array
%8900:	bitcast	 %8899
%8901:	store	 %8900 firstst
%8902:	load	 lastst
%8903:	bitcast	 %8902
%8904:	load	 current_mns
%8905:	call	 %8903 %8904 XXX reallocate_array
%8906:	bitcast	 %8905
%8907:	store	 %8906 lastst
%8908:	load	 finalst
%8909:	bitcast	 %8908
%8910:	load	 current_mns
%8911:	call	 %8909 %8910 XXX reallocate_array
%8912:	bitcast	 %8911
%8913:	store	 %8912 finalst
%8914:	load	 transchar
%8915:	bitcast	 %8914
%8916:	load	 current_mns
%8917:	call	 %8915 %8916 XXX reallocate_array
%8918:	bitcast	 %8917
%8919:	store	 %8918 transchar
%8920:	load	 trans1
%8921:	bitcast	 %8920
%8922:	load	 current_mns
%8923:	call	 %8921 %8922 XXX reallocate_array
%8924:	bitcast	 %8923
%8925:	store	 %8924 trans1
%8926:	load	 trans2
%8927:	bitcast	 %8926
%8928:	load	 current_mns
%8929:	call	 %8927 %8928 XXX reallocate_array
%8930:	bitcast	 %8929
%8931:	store	 %8930 trans2
%8932:	load	 accptnum
%8933:	bitcast	 %8932
%8934:	load	 current_mns
%8935:	call	 %8933 %8934 XXX reallocate_array
%8936:	bitcast	 %8935
%8937:	store	 %8936 accptnum
%8938:	load	 assoc_rule
%8939:	bitcast	 %8938
%8940:	load	 current_mns
%8941:	call	 %8939 %8940 XXX reallocate_array
%8942:	bitcast	 %8941
%8943:	store	 %8942 assoc_rule
%8944:	load	 state_type
%8945:	bitcast	 %8944
%8946:	load	 current_mns
%8947:	call	 %8945 %8946 XXX reallocate_array
%8948:	bitcast	 %8947
%8949:	store	 %8948 state_type
%8950:	br	 if.end12

BASIC BLOCK if.end12
%8951:	load	 lastnfa
%8952:	load	 lastnfa
%8953:	sext	 %8952
%8954:	load	 firstst
%8955:	getelementptr	 %8954 %8953
%8956:	store	 %8951 %8955
%8957:	load	 lastnfa
%8958:	load	 lastnfa
%8959:	sext	 %8958
%8960:	load	 finalst
%8961:	getelementptr	 %8960 %8959
%8962:	store	 %8957 %8961
%8963:	load	 lastnfa
%8964:	load	 lastnfa
%8965:	sext	 %8964
%8966:	load	 lastst
%8967:	getelementptr	 %8966 %8965
%8968:	store	 %8963 %8967
%8969:	load	 lastnfa
%8970:	sext	 %8969
%8971:	load	 transchar
%8972:	getelementptr	 %8971 %8970
%8973:	store	 sym %8972
%8974:	load	 lastnfa
%8975:	sext	 %8974
%8976:	load	 trans1
%8977:	getelementptr	 %8976 %8975
%8978:	store	 XXX %8977
%8979:	load	 lastnfa
%8980:	sext	 %8979
%8981:	load	 trans2
%8982:	getelementptr	 %8981 %8980
%8983:	store	 XXX %8982
%8984:	load	 lastnfa
%8985:	sext	 %8984
%8986:	load	 accptnum
%8987:	getelementptr	 %8986 %8985
%8988:	store	 XXX %8987
%8989:	load	 num_rules
%8990:	load	 lastnfa
%8991:	sext	 %8990
%8992:	load	 assoc_rule
%8993:	getelementptr	 %8992 %8991
%8994:	store	 %8989 %8993
%8995:	load	 current_state_type
%8996:	load	 lastnfa
%8997:	sext	 %8996
%8998:	load	 state_type
%8999:	getelementptr	 %8998 %8997
%9000:	store	 %8995 %8999
%9001:	icmp	 sym XXX
%9002:	br	 %9001 if.else if.then30

BASIC BLOCK if.then30
%9003:	br	 if.end39

BASIC BLOCK if.else
%9004:	icmp	 sym XXX
%9005:	br	 %9004 if.else34 if.then32

BASIC BLOCK if.then32
%9006:	load	 numeps
%9007:	add	 %9006 XXX
%9008:	store	 %9007 numeps
%9009:	br	 if.end38

BASIC BLOCK if.else34
%9010:	call	 sym check_char
%9011:	load	 useecs
%9012:	icmp	 %9011 XXX
%9013:	br	 %9012 if.end37 if.then35

BASIC BLOCK if.then35
%9014:	icmp	 sym XXX
%9015:	br	 %9014 cond.false cond.true

BASIC BLOCK cond.true
%9016:	br	 cond.end

BASIC BLOCK cond.false
%9017:	load	 csize
%9018:	br	 cond.end

BASIC BLOCK cond.end
%9019:	phi	 sym %9017
%9020:	call	 %9019 XXX XXX mkechar
%9021:	br	 if.end37

BASIC BLOCK if.end37
%9022:	br	 if.end38

BASIC BLOCK if.end38
%9023:	br	 if.end39

BASIC BLOCK if.end39
%9024:	load	 lastnfa
%9025:	ret	 %9024

FUNCTION link_machines

BASIC BLOCK entry
%9026:	icmp	 first XXX
%9027:	br	 %9026 if.else if.then

BASIC BLOCK if.then
%9028:	br	 return

BASIC BLOCK if.else
%9029:	icmp	 last XXX
%9030:	br	 %9029 if.else3 if.then2

BASIC BLOCK if.then2
%9031:	br	 return

BASIC BLOCK if.else3
%9032:	sext	 first
%9033:	load	 finalst
%9034:	getelementptr	 %9033 %9032
%9035:	load	 %9034
%9036:	call	 %9035 last mkxtion
%9037:	sext	 last
%9038:	load	 finalst
%9039:	getelementptr	 %9038 %9037
%9040:	load	 %9039
%9041:	sext	 first
%9042:	load	 finalst
%9043:	getelementptr	 %9042 %9041
%9044:	store	 %9040 %9043
%9045:	sext	 first
%9046:	load	 lastst
%9047:	getelementptr	 %9046 %9045
%9048:	load	 %9047
%9049:	sext	 last
%9050:	load	 lastst
%9051:	getelementptr	 %9050 %9049
%9052:	load	 %9051
%9053:	icmp	 %9048 %9052
%9054:	br	 %9053 cond.false cond.true

BASIC BLOCK cond.true
%9055:	sext	 first
%9056:	load	 lastst
%9057:	getelementptr	 %9056 %9055
%9058:	load	 %9057
%9059:	br	 cond.end

BASIC BLOCK cond.false
%9060:	sext	 last
%9061:	load	 lastst
%9062:	getelementptr	 %9061 %9060
%9063:	load	 %9062
%9064:	br	 cond.end

BASIC BLOCK cond.end
%9065:	phi	 %9058 %9063
%9066:	sext	 first
%9067:	load	 lastst
%9068:	getelementptr	 %9067 %9066
%9069:	store	 %9065 %9068
%9070:	sext	 first
%9071:	load	 firstst
%9072:	getelementptr	 %9071 %9070
%9073:	load	 %9072
%9074:	sext	 last
%9075:	load	 firstst
%9076:	getelementptr	 %9075 %9074
%9077:	load	 %9076
%9078:	icmp	 %9073 %9077
%9079:	br	 %9078 cond.false27 cond.true24

BASIC BLOCK cond.true24
%9080:	sext	 first
%9081:	load	 firstst
%9082:	getelementptr	 %9081 %9080
%9083:	load	 %9082
%9084:	br	 cond.end30

BASIC BLOCK cond.false27
%9085:	sext	 last
%9086:	load	 firstst
%9087:	getelementptr	 %9086 %9085
%9088:	load	 %9087
%9089:	br	 cond.end30

BASIC BLOCK cond.end30
%9090:	phi	 %9083 %9088
%9091:	sext	 first
%9092:	load	 firstst
%9093:	getelementptr	 %9092 %9091
%9094:	store	 %9090 %9093
%9095:	br	 return

BASIC BLOCK return
%9096:	phi	 last first first
%9097:	ret	 %9096

FUNCTION copysingl

BASIC BLOCK entry
%9098:	call	 XXX mkstate
%9099:	br	 for.cond

BASIC BLOCK for.cond
%9100:	phi	 %9098 %9105
%9101:	phi	 XXX %9107
%9102:	icmp	 %9101 num
%9103:	br	 %9102 for.end for.body

BASIC BLOCK for.body
%9104:	call	 singl dupmachine
%9105:	call	 %9100 %9104 link_machines
%9106:	br	 for.inc

BASIC BLOCK for.inc
%9107:	add	 %9101 XXX
%9108:	br	 for.cond

BASIC BLOCK for.end
%9109:	ret	 %9100

FUNCTION dupmachine

BASIC BLOCK entry
%9110:	sext	 mach
%9111:	load	 lastst
%9112:	getelementptr	 %9111 %9110
%9113:	load	 %9112
%9114:	sext	 mach
%9115:	load	 firstst
%9116:	getelementptr	 %9115 %9114
%9117:	load	 %9116
%9118:	br	 for.cond

BASIC BLOCK for.cond
%9119:	phi	 %9117 %9179
%9120:	phi	 XXX %9127
%9121:	icmp	 %9119 %9113
%9122:	br	 %9121 for.end for.body

BASIC BLOCK for.body
%9123:	sext	 %9119
%9124:	load	 transchar
%9125:	getelementptr	 %9124 %9123
%9126:	load	 %9125
%9127:	call	 %9126 mkstate
%9128:	sext	 %9119
%9129:	load	 trans1
%9130:	getelementptr	 %9129 %9128
%9131:	load	 %9130
%9132:	icmp	 %9131 XXX
%9133:	br	 %9132 if.end25 if.then

BASIC BLOCK if.then
%9134:	sext	 %9127
%9135:	load	 finalst
%9136:	getelementptr	 %9135 %9134
%9137:	load	 %9136
%9138:	sext	 %9119
%9139:	load	 trans1
%9140:	getelementptr	 %9139 %9138
%9141:	load	 %9140
%9142:	add	 %9141 %9127
%9143:	sub	 %9142 %9119
%9144:	call	 %9137 %9143 mkxtion
%9145:	sext	 %9119
%9146:	load	 transchar
%9147:	getelementptr	 %9146 %9145
%9148:	load	 %9147
%9149:	icmp	 %9148 XXX
%9150:	br	 %9149 if.end land.lhs.true

BASIC BLOCK land.lhs.true
%9151:	sext	 %9119
%9152:	load	 trans2
%9153:	getelementptr	 %9152 %9151
%9154:	load	 %9153
%9155:	icmp	 %9154 XXX
%9156:	br	 %9155 if.end if.then18

BASIC BLOCK if.then18
%9157:	sext	 %9127
%9158:	load	 finalst
%9159:	getelementptr	 %9158 %9157
%9160:	load	 %9159
%9161:	sext	 %9119
%9162:	load	 trans2
%9163:	getelementptr	 %9162 %9161
%9164:	load	 %9163
%9165:	add	 %9164 %9127
%9166:	sub	 %9165 %9119
%9167:	call	 %9160 %9166 mkxtion
%9168:	br	 if.end

BASIC BLOCK if.end
%9169:	br	 if.end25

BASIC BLOCK if.end25
%9170:	sext	 %9119
%9171:	load	 accptnum
%9172:	getelementptr	 %9171 %9170
%9173:	load	 %9172
%9174:	sext	 %9127
%9175:	load	 accptnum
%9176:	getelementptr	 %9175 %9174
%9177:	store	 %9173 %9176
%9178:	br	 for.inc

BASIC BLOCK for.inc
%9179:	add	 %9119 XXX
%9180:	br	 for.cond

BASIC BLOCK for.end
%9181:	icmp	 %9120 XXX
%9182:	br	 %9181 if.end32 if.then31

BASIC BLOCK if.then31
%9183:	call	 XXX flexfatal
%9184:	br	 if.end32

BASIC BLOCK if.end32
%9185:	sub	 %9120 %9119
%9186:	add	 %9185 XXX
%9187:	add	 mach %9186
%9188:	sext	 mach
%9189:	load	 firstst
%9190:	getelementptr	 %9189 %9188
%9191:	load	 %9190
%9192:	add	 %9191 %9186
%9193:	sext	 %9187
%9194:	load	 firstst
%9195:	getelementptr	 %9194 %9193
%9196:	store	 %9192 %9195
%9197:	sext	 mach
%9198:	load	 finalst
%9199:	getelementptr	 %9198 %9197
%9200:	load	 %9199
%9201:	add	 %9200 %9186
%9202:	sext	 %9187
%9203:	load	 finalst
%9204:	getelementptr	 %9203 %9202
%9205:	store	 %9201 %9204
%9206:	sext	 mach
%9207:	load	 lastst
%9208:	getelementptr	 %9207 %9206
%9209:	load	 %9208
%9210:	add	 %9209 %9186
%9211:	sext	 %9187
%9212:	load	 lastst
%9213:	getelementptr	 %9212 %9211
%9214:	store	 %9210 %9213
%9215:	ret	 %9187

FUNCTION mkxtion

BASIC BLOCK entry
%9216:	sext	 statefrom
%9217:	load	 trans1
%9218:	getelementptr	 %9217 %9216
%9219:	load	 %9218
%9220:	icmp	 %9219 XXX
%9221:	br	 %9220 if.else if.then

BASIC BLOCK if.then
%9222:	sext	 statefrom
%9223:	load	 trans1
%9224:	getelementptr	 %9223 %9222
%9225:	store	 stateto %9224
%9226:	br	 if.end13

BASIC BLOCK if.else
%9227:	sext	 statefrom
%9228:	load	 transchar
%9229:	getelementptr	 %9228 %9227
%9230:	load	 %9229
%9231:	icmp	 %9230 XXX
%9232:	br	 %9231 lor.lhs.false if.then9

BASIC BLOCK lor.lhs.false
%9233:	sext	 statefrom
%9234:	load	 trans2
%9235:	getelementptr	 %9234 %9233
%9236:	load	 %9235
%9237:	icmp	 %9236 XXX
%9238:	br	 %9237 if.else10 if.then9

BASIC BLOCK if.then9
%9239:	call	 XXX flexfatal
%9240:	br	 if.end

BASIC BLOCK if.else10
%9241:	load	 eps2
%9242:	add	 %9241 XXX
%9243:	store	 %9242 eps2
%9244:	sext	 statefrom
%9245:	load	 trans2
%9246:	getelementptr	 %9245 %9244
%9247:	store	 stateto %9246
%9248:	br	 if.end

BASIC BLOCK if.end
%9249:	br	 if.end13

BASIC BLOCK if.end13
%9250:	ret	

FUNCTION finish_rule

BASIC BLOCK entry
%9251:	alloca	 XXX
%9252:	load	 num_rules
%9253:	call	 mach %9252 add_accept
%9254:	load	 linenum
%9255:	load	 num_rules
%9256:	sext	 %9255
%9257:	load	 rule_linenum
%9258:	getelementptr	 %9257 %9256
%9259:	store	 %9254 %9258
%9260:	load	 continued_action
%9261:	icmp	 %9260 XXX
%9262:	br	 %9261 if.end if.then

BASIC BLOCK if.then
%9263:	load	 num_rules
%9264:	sext	 %9263
%9265:	load	 rule_linenum
%9266:	getelementptr	 %9265 %9264
%9267:	load	 %9266
%9268:	add	 %9267 XXX
%9269:	store	 %9268 %9266
%9270:	br	 if.end

BASIC BLOCK if.end
%9271:	getelementptr	 %9251 XXX XXX
%9272:	load	 num_rules
%9273:	call	 %9271 XXX %9272 sprintf
%9274:	getelementptr	 %9251 XXX XXX
%9275:	call	 %9274 add_action
%9276:	icmp	 variable_trail_rule XXX
%9277:	br	 %9276 if.else if.then5

BASIC BLOCK if.then5
%9278:	load	 num_rules
%9279:	sext	 %9278
%9280:	load	 rule_type
%9281:	getelementptr	 %9280 %9279
%9282:	store	 XXX %9281
%9283:	load	 performance_report
%9284:	icmp	 %9283 XXX
%9285:	br	 %9284 if.end12 if.then8

BASIC BLOCK if.then8
%9286:	load	 err
%9287:	load	 num_rules
%9288:	sext	 %9287
%9289:	load	 rule_linenum
%9290:	getelementptr	 %9289 %9288
%9291:	load	 %9290
%9292:	call	 %9286 XXX %9291 fprintf
%9293:	br	 if.end12

BASIC BLOCK if.end12
%9294:	store	 XXX variable_trailing_context_rules
%9295:	br	 if.end29

BASIC BLOCK if.else
%9296:	load	 num_rules
%9297:	sext	 %9296
%9298:	load	 rule_type
%9299:	getelementptr	 %9298 %9297
%9300:	store	 XXX %9299
%9301:	icmp	 headcnt XXX
%9302:	br	 %9301 lor.lhs.false if.then17

BASIC BLOCK lor.lhs.false
%9303:	icmp	 trailcnt XXX
%9304:	br	 %9303 if.end28 if.then17

BASIC BLOCK if.then17
%9305:	call	 XXX add_action
%9306:	icmp	 headcnt XXX
%9307:	br	 %9306 if.else23 if.then19

BASIC BLOCK if.then19
%9308:	getelementptr	 %9251 XXX XXX
%9309:	call	 %9308 XXX XXX XXX headcnt sprintf
%9310:	getelementptr	 %9251 XXX XXX
%9311:	call	 %9310 add_action
%9312:	br	 if.end27

BASIC BLOCK if.else23
%9313:	getelementptr	 %9251 XXX XXX
%9314:	call	 %9313 XXX XXX trailcnt sprintf
%9315:	getelementptr	 %9251 XXX XXX
%9316:	call	 %9315 add_action
%9317:	br	 if.end27

BASIC BLOCK if.end27
%9318:	call	 XXX add_action
%9319:	br	 if.end28

BASIC BLOCK if.end28
%9320:	br	 if.end29

BASIC BLOCK if.end29
%9321:	load	 continued_action
%9322:	icmp	 %9321 XXX
%9323:	br	 %9322 if.then31 if.end32

BASIC BLOCK if.then31
%9324:	call	 XXX add_action
%9325:	br	 if.end32

BASIC BLOCK if.end32
%9326:	call	 XXX line_directive_out
%9327:	ret	

FUNCTION mark_beginning_as_normal

BASIC BLOCK entry
%9328:	sext	 mach
%9329:	load	 state_type
%9330:	getelementptr	 %9329 %9328
%9331:	load	 %9330
%9332:	switch	 %9331 sw.default XXX sw.bb XXX sw.bb1

BASIC BLOCK sw.bb
%9333:	br	 sw.epilog

BASIC BLOCK sw.bb1
%9334:	sext	 mach
%9335:	load	 state_type
%9336:	getelementptr	 %9335 %9334
%9337:	store	 XXX %9336
%9338:	sext	 mach
%9339:	load	 transchar
%9340:	getelementptr	 %9339 %9338
%9341:	load	 %9340
%9342:	icmp	 %9341 XXX
%9343:	br	 %9342 if.end19 if.then

BASIC BLOCK if.then
%9344:	sext	 mach
%9345:	load	 trans1
%9346:	getelementptr	 %9345 %9344
%9347:	load	 %9346
%9348:	icmp	 %9347 XXX
%9349:	br	 %9348 if.end if.then9

BASIC BLOCK if.then9
%9350:	sext	 mach
%9351:	load	 trans1
%9352:	getelementptr	 %9351 %9350
%9353:	load	 %9352
%9354:	call	 %9353 mark_beginning_as_normal
%9355:	br	 if.end

BASIC BLOCK if.end
%9356:	sext	 mach
%9357:	load	 trans2
%9358:	getelementptr	 %9357 %9356
%9359:	load	 %9358
%9360:	icmp	 %9359 XXX
%9361:	br	 %9360 if.end18 if.then15

BASIC BLOCK if.then15
%9362:	sext	 mach
%9363:	load	 trans2
%9364:	getelementptr	 %9363 %9362
%9365:	load	 %9364
%9366:	call	 %9365 mark_beginning_as_normal
%9367:	br	 if.end18

BASIC BLOCK if.end18
%9368:	br	 if.end19

BASIC BLOCK if.end19
%9369:	br	 sw.epilog

BASIC BLOCK sw.default
%9370:	call	 XXX flexerror
%9371:	br	 sw.epilog

BASIC BLOCK sw.epilog
%9372:	ret	

FUNCTION mkclos

BASIC BLOCK entry
%9373:	call	 state mkposcl
%9374:	call	 %9373 mkopt
%9375:	ret	 %9374

FUNCTION mkopt

BASIC BLOCK entry
%9376:	sext	 mach
%9377:	load	 finalst
%9378:	getelementptr	 %9377 %9376
%9379:	load	 %9378
%9380:	sext	 %9379
%9381:	load	 transchar
%9382:	getelementptr	 %9381 %9380
%9383:	load	 %9382
%9384:	icmp	 %9383 XXX
%9385:	br	 %9384 if.then land.lhs.true

BASIC BLOCK land.lhs.true
%9386:	sext	 mach
%9387:	load	 finalst
%9388:	getelementptr	 %9387 %9386
%9389:	load	 %9388
%9390:	sext	 %9389
%9391:	load	 trans1
%9392:	getelementptr	 %9391 %9390
%9393:	load	 %9392
%9394:	icmp	 %9393 XXX
%9395:	br	 %9394 if.then if.end

BASIC BLOCK if.then
%9396:	call	 XXX mkstate
%9397:	call	 mach %9396 link_machines
%9398:	br	 if.end

BASIC BLOCK if.end
%9399:	phi	 mach %9397
%9400:	call	 XXX mkstate
%9401:	call	 %9400 %9399 link_machines
%9402:	sext	 %9401
%9403:	load	 finalst
%9404:	getelementptr	 %9403 %9402
%9405:	load	 %9404
%9406:	call	 %9401 %9405 mkxtion
%9407:	ret	 %9401

FUNCTION mkposcl

BASIC BLOCK entry
%9408:	sext	 state
%9409:	load	 finalst
%9410:	getelementptr	 %9409 %9408
%9411:	load	 %9410
%9412:	sext	 %9411
%9413:	load	 transchar
%9414:	getelementptr	 %9413 %9412
%9415:	load	 %9414
%9416:	icmp	 %9415 XXX
%9417:	br	 %9416 if.else land.lhs.true

BASIC BLOCK land.lhs.true
%9418:	sext	 state
%9419:	load	 finalst
%9420:	getelementptr	 %9419 %9418
%9421:	load	 %9420
%9422:	sext	 %9421
%9423:	load	 trans1
%9424:	getelementptr	 %9423 %9422
%9425:	load	 %9424
%9426:	icmp	 %9425 XXX
%9427:	br	 %9426 if.else if.then

BASIC BLOCK if.then
%9428:	sext	 state
%9429:	load	 finalst
%9430:	getelementptr	 %9429 %9428
%9431:	load	 %9430
%9432:	call	 %9431 state mkxtion
%9433:	br	 return

BASIC BLOCK if.else
%9434:	call	 XXX mkstate
%9435:	call	 %9434 state mkxtion
%9436:	call	 state %9434 link_machines
%9437:	br	 return

BASIC BLOCK return
%9438:	phi	 state %9436
%9439:	ret	 %9438

FUNCTION mkor

BASIC BLOCK entry
%9440:	icmp	 first XXX
%9441:	br	 %9440 if.else if.then

BASIC BLOCK if.then
%9442:	br	 return

BASIC BLOCK if.else
%9443:	icmp	 second XXX
%9444:	br	 %9443 if.else3 if.then2

BASIC BLOCK if.then2
%9445:	br	 return

BASIC BLOCK if.else3
%9446:	call	 XXX mkstate
%9447:	call	 %9446 first link_machines
%9448:	call	 %9447 second mkxtion
%9449:	sext	 %9447
%9450:	load	 finalst
%9451:	getelementptr	 %9450 %9449
%9452:	load	 %9451
%9453:	sext	 %9452
%9454:	load	 transchar
%9455:	getelementptr	 %9454 %9453
%9456:	load	 %9455
%9457:	icmp	 %9456 XXX
%9458:	br	 %9457 if.else24 land.lhs.true

BASIC BLOCK land.lhs.true
%9459:	sext	 %9447
%9460:	load	 finalst
%9461:	getelementptr	 %9460 %9459
%9462:	load	 %9461
%9463:	sext	 %9462
%9464:	load	 trans1
%9465:	getelementptr	 %9464 %9463
%9466:	load	 %9465
%9467:	icmp	 %9466 XXX
%9468:	br	 %9467 if.else24 land.lhs.true13

BASIC BLOCK land.lhs.true13
%9469:	sext	 %9447
%9470:	load	 finalst
%9471:	getelementptr	 %9470 %9469
%9472:	load	 %9471
%9473:	sext	 %9472
%9474:	load	 accptnum
%9475:	getelementptr	 %9474 %9473
%9476:	load	 %9475
%9477:	icmp	 %9476 XXX
%9478:	br	 %9477 if.else24 if.then19

BASIC BLOCK if.then19
%9479:	sext	 %9447
%9480:	load	 finalst
%9481:	getelementptr	 %9480 %9479
%9482:	load	 %9481
%9483:	sext	 second
%9484:	load	 finalst
%9485:	getelementptr	 %9484 %9483
%9486:	load	 %9485
%9487:	call	 %9486 %9482 mkxtion
%9488:	br	 if.end54

BASIC BLOCK if.else24
%9489:	sext	 second
%9490:	load	 finalst
%9491:	getelementptr	 %9490 %9489
%9492:	load	 %9491
%9493:	sext	 %9492
%9494:	load	 transchar
%9495:	getelementptr	 %9494 %9493
%9496:	load	 %9495
%9497:	icmp	 %9496 XXX
%9498:	br	 %9497 if.else47 land.lhs.true30

BASIC BLOCK land.lhs.true30
%9499:	sext	 second
%9500:	load	 finalst
%9501:	getelementptr	 %9500 %9499
%9502:	load	 %9501
%9503:	sext	 %9502
%9504:	load	 trans1
%9505:	getelementptr	 %9504 %9503
%9506:	load	 %9505
%9507:	icmp	 %9506 XXX
%9508:	br	 %9507 if.else47 land.lhs.true36

BASIC BLOCK land.lhs.true36
%9509:	sext	 second
%9510:	load	 finalst
%9511:	getelementptr	 %9510 %9509
%9512:	load	 %9511
%9513:	sext	 %9512
%9514:	load	 accptnum
%9515:	getelementptr	 %9514 %9513
%9516:	load	 %9515
%9517:	icmp	 %9516 XXX
%9518:	br	 %9517 if.else47 if.then42

BASIC BLOCK if.then42
%9519:	sext	 second
%9520:	load	 finalst
%9521:	getelementptr	 %9520 %9519
%9522:	load	 %9521
%9523:	sext	 %9447
%9524:	load	 finalst
%9525:	getelementptr	 %9524 %9523
%9526:	load	 %9525
%9527:	call	 %9526 %9522 mkxtion
%9528:	br	 if.end

BASIC BLOCK if.else47
%9529:	call	 XXX mkstate
%9530:	call	 %9447 %9529 link_machines
%9531:	sext	 %9530
%9532:	load	 finalst
%9533:	getelementptr	 %9532 %9531
%9534:	load	 %9533
%9535:	sext	 second
%9536:	load	 finalst
%9537:	getelementptr	 %9536 %9535
%9538:	load	 %9537
%9539:	call	 %9538 %9534 mkxtion
%9540:	br	 if.end

BASIC BLOCK if.end
%9541:	phi	 %9522 %9534
%9542:	phi	 %9447 %9530
%9543:	br	 if.end54

BASIC BLOCK if.end54
%9544:	phi	 %9482 %9541
%9545:	phi	 %9447 %9542
%9546:	br	 if.end55

BASIC BLOCK if.end55
%9547:	br	 if.end56

BASIC BLOCK if.end56
%9548:	sext	 %9545
%9549:	load	 finalst
%9550:	getelementptr	 %9549 %9548
%9551:	store	 %9544 %9550
%9552:	br	 return

BASIC BLOCK return
%9553:	phi	 second first %9545
%9554:	ret	 %9553

FUNCTION mkrep

BASIC BLOCK entry
%9555:	sub	 lb XXX
%9556:	call	 mach %9555 copysingl
%9557:	icmp	 ub XXX
%9558:	br	 %9557 if.else if.then

BASIC BLOCK if.then
%9559:	call	 mach dupmachine
%9560:	call	 %9559 mkclos
%9561:	call	 %9556 %9560 link_machines
%9562:	call	 mach %9561 link_machines
%9563:	br	 if.end

BASIC BLOCK if.else
%9564:	call	 XXX mkstate
%9565:	br	 for.cond

BASIC BLOCK for.cond
%9566:	phi	 %9564 %9572
%9567:	phi	 lb %9574
%9568:	icmp	 %9567 ub
%9569:	br	 %9568 for.end for.body

BASIC BLOCK for.body
%9570:	call	 mach dupmachine
%9571:	call	 %9570 %9566 link_machines
%9572:	call	 %9571 mkopt
%9573:	br	 for.inc

BASIC BLOCK for.inc
%9574:	add	 %9567 XXX
%9575:	br	 for.cond

BASIC BLOCK for.end
%9576:	call	 %9556 %9566 link_machines
%9577:	call	 mach %9576 link_machines
%9578:	br	 if.end

BASIC BLOCK if.end
%9579:	phi	 %9562 %9577
%9580:	ret	 %9579

FUNCTION new_rule

BASIC BLOCK entry
%9581:	load	 num_rules
%9582:	add	 %9581 XXX
%9583:	store	 %9582 num_rules
%9584:	load	 current_max_rules
%9585:	icmp	 %9582 %9584
%9586:	br	 %9585 if.end if.then

BASIC BLOCK if.then
%9587:	load	 num_reallocs
%9588:	add	 %9587 XXX
%9589:	store	 %9588 num_reallocs
%9590:	load	 current_max_rules
%9591:	add	 %9590 XXX
%9592:	store	 %9591 current_max_rules
%9593:	load	 rule_type
%9594:	bitcast	 %9593
%9595:	load	 current_max_rules
%9596:	call	 %9594 %9595 XXX reallocate_array
%9597:	bitcast	 %9596
%9598:	store	 %9597 rule_type
%9599:	load	 rule_linenum
%9600:	bitcast	 %9599
%9601:	load	 current_max_rules
%9602:	call	 %9600 %9601 XXX reallocate_array
%9603:	bitcast	 %9602
%9604:	store	 %9603 rule_linenum
%9605:	load	 rule_useful
%9606:	bitcast	 %9605
%9607:	load	 current_max_rules
%9608:	call	 %9606 %9607 XXX reallocate_array
%9609:	bitcast	 %9608
%9610:	store	 %9609 rule_useful
%9611:	br	 if.end

BASIC BLOCK if.end
%9612:	load	 num_rules
%9613:	icmp	 %9612 XXX
%9614:	br	 %9613 if.end6 if.then5

BASIC BLOCK if.then5
%9615:	call	 XXX XXX lerrif
%9616:	br	 if.end6

BASIC BLOCK if.end6
%9617:	load	 linenum
%9618:	load	 num_rules
%9619:	sext	 %9618
%9620:	load	 rule_linenum
%9621:	getelementptr	 %9620 %9619
%9622:	store	 %9617 %9621
%9623:	load	 num_rules
%9624:	sext	 %9623
%9625:	load	 rule_useful
%9626:	getelementptr	 %9625 %9624
%9627:	store	 XXX %9626
%9628:	ret	

FUNCTION addsym

BASIC BLOCK entry
%9629:	call	 sym table_size hashfunct
%9630:	sext	 %9629
%9631:	getelementptr	 table %9630
%9632:	load	 %9631
%9633:	br	 while.cond

BASIC BLOCK while.cond
%9634:	phi	 %9632 %9644
%9635:	icmp	 %9634 XXX
%9636:	br	 %9635 while.end while.body

BASIC BLOCK while.body
%9637:	getelementptr	 %9634 XXX XXX
%9638:	load	 %9637
%9639:	call	 sym %9638 strcmp
%9640:	icmp	 %9639 XXX
%9641:	br	 %9640 if.then if.end

BASIC BLOCK if.then
%9642:	br	 return

BASIC BLOCK if.end
%9643:	getelementptr	 %9634 XXX XXX
%9644:	load	 %9643
%9645:	br	 while.cond

BASIC BLOCK while.end
%9646:	call	 XXX flex_alloc
%9647:	bitcast	 %9646
%9648:	icmp	 %9647 XXX
%9649:	br	 %9648 if.end5 if.then4

BASIC BLOCK if.then4
%9650:	call	 XXX flexfatal
%9651:	br	 if.end5

BASIC BLOCK if.end5
%9652:	sext	 %9629
%9653:	getelementptr	 table %9652
%9654:	load	 %9653
%9655:	icmp	 %9654 XXX
%9656:	br	 %9655 if.else if.then9

BASIC BLOCK if.then9
%9657:	getelementptr	 %9647 XXX XXX
%9658:	store	 %9654 %9657
%9659:	getelementptr	 %9654 XXX XXX
%9660:	store	 %9647 %9659
%9661:	br	 if.end12

BASIC BLOCK if.else
%9662:	getelementptr	 %9647 XXX XXX
%9663:	store	 XXX %9662
%9664:	br	 if.end12

BASIC BLOCK if.end12
%9665:	getelementptr	 %9647 XXX XXX
%9666:	store	 XXX %9665
%9667:	getelementptr	 %9647 XXX XXX
%9668:	store	 sym %9667
%9669:	getelementptr	 %9647 XXX XXX
%9670:	store	 str_def %9669
%9671:	getelementptr	 %9647 XXX XXX
%9672:	store	 int_def %9671
%9673:	sext	 %9629
%9674:	getelementptr	 table %9673
%9675:	store	 %9647 %9674
%9676:	br	 return

BASIC BLOCK return
%9677:	phi	 XXX XXX
%9678:	ret	 %9677

FUNCTION hashfunct

BASIC BLOCK entry
%9679:	br	 while.cond

BASIC BLOCK while.cond
%9680:	phi	 XXX %9694
%9681:	phi	 XXX %9688
%9682:	sext	 %9681
%9683:	getelementptr	 str %9682
%9684:	load	 %9683
%9685:	icmp	 %9684 XXX
%9686:	br	 %9685 while.end while.body

BASIC BLOCK while.body
%9687:	shl	 %9680 XXX
%9688:	add	 %9681 XXX
%9689:	sext	 %9681
%9690:	getelementptr	 str %9689
%9691:	load	 %9690
%9692:	zext	 %9691
%9693:	add	 %9687 %9692
%9694:	srem	 %9693 hash_size
%9695:	br	 while.cond

BASIC BLOCK while.end
%9696:	ret	 %9680

FUNCTION cclinstal

BASIC BLOCK entry
%9697:	call	 ccltxt copy_unsigned_string
%9698:	call	 %9697 XXX cclnum XXX XXX addsym
%9699:	ret	

FUNCTION ccllookup

BASIC BLOCK entry
%9700:	call	 ccltxt XXX XXX findsym
%9701:	getelementptr	 %9700 XXX XXX
%9702:	load	 %9701
%9703:	ret	 %9702

FUNCTION findsym

BASIC BLOCK entry
%9704:	call	 sym table_size hashfunct
%9705:	sext	 %9704
%9706:	getelementptr	 table %9705
%9707:	load	 %9706
%9708:	br	 while.cond

BASIC BLOCK while.cond
%9709:	phi	 %9707 %9719
%9710:	icmp	 %9709 XXX
%9711:	br	 %9710 while.end while.body

BASIC BLOCK while.body
%9712:	getelementptr	 %9709 XXX XXX
%9713:	load	 %9712
%9714:	call	 sym %9713 strcmp
%9715:	icmp	 %9714 XXX
%9716:	br	 %9715 if.then if.end

BASIC BLOCK if.then
%9717:	br	 return

BASIC BLOCK if.end
%9718:	getelementptr	 %9709 XXX XXX
%9719:	load	 %9718
%9720:	br	 while.cond

BASIC BLOCK while.end
%9721:	br	 return

BASIC BLOCK return
%9722:	phi	 %9709 XXX
%9723:	ret	 %9722

FUNCTION ndinstal

BASIC BLOCK entry
%9724:	call	 name copy_string
%9725:	call	 definition copy_unsigned_string
%9726:	call	 %9724 %9725 XXX XXX XXX addsym
%9727:	icmp	 %9726 XXX
%9728:	br	 %9727 if.end if.then

BASIC BLOCK if.then
%9729:	call	 XXX synerr
%9730:	br	 if.end

BASIC BLOCK if.end
%9731:	ret	

FUNCTION synerr

BASIC BLOCK entry
%9732:	store	 XXX syntaxerror
%9733:	call	 str pinpoint_message
%9734:	ret	

FUNCTION ndlookup

BASIC BLOCK entry
%9735:	call	 nd XXX XXX findsym
%9736:	getelementptr	 %9735 XXX XXX
%9737:	load	 %9736
%9738:	ret	 %9737

FUNCTION scextend

BASIC BLOCK entry
%9739:	load	 current_max_scs
%9740:	add	 %9739 XXX
%9741:	store	 %9740 current_max_scs
%9742:	load	 num_reallocs
%9743:	add	 %9742 XXX
%9744:	store	 %9743 num_reallocs
%9745:	load	 scset
%9746:	bitcast	 %9745
%9747:	load	 current_max_scs
%9748:	call	 %9746 %9747 XXX reallocate_array
%9749:	bitcast	 %9748
%9750:	store	 %9749 scset
%9751:	load	 scbol
%9752:	bitcast	 %9751
%9753:	load	 current_max_scs
%9754:	call	 %9752 %9753 XXX reallocate_array
%9755:	bitcast	 %9754
%9756:	store	 %9755 scbol
%9757:	load	 scxclu
%9758:	bitcast	 %9757
%9759:	load	 current_max_scs
%9760:	call	 %9758 %9759 XXX reallocate_array
%9761:	bitcast	 %9760
%9762:	store	 %9761 scxclu
%9763:	load	 sceof
%9764:	bitcast	 %9763
%9765:	load	 current_max_scs
%9766:	call	 %9764 %9765 XXX reallocate_array
%9767:	bitcast	 %9766
%9768:	store	 %9767 sceof
%9769:	load	 scname
%9770:	bitcast	 %9769
%9771:	load	 current_max_scs
%9772:	call	 %9770 %9771 XXX reallocate_array
%9773:	bitcast	 %9772
%9774:	store	 %9773 scname
%9775:	load	 actvsc
%9776:	bitcast	 %9775
%9777:	load	 current_max_scs
%9778:	call	 %9776 %9777 XXX reallocate_array
%9779:	bitcast	 %9778
%9780:	store	 %9779 actvsc
%9781:	ret	

FUNCTION scinstal

BASIC BLOCK entry
%9782:	load	 lastsc
%9783:	call	 XXX str %9782 printf
%9784:	load	 lastsc
%9785:	add	 %9784 XXX
%9786:	store	 %9785 lastsc
%9787:	load	 current_max_scs
%9788:	icmp	 %9785 %9787
%9789:	br	 %9788 if.end if.then

BASIC BLOCK if.then
%9790:	call	 scextend
%9791:	br	 if.end

BASIC BLOCK if.end
%9792:	call	 str copy_string
%9793:	load	 lastsc
%9794:	sext	 %9793
%9795:	load	 scname
%9796:	getelementptr	 %9795 %9794
%9797:	store	 %9792 %9796
%9798:	load	 lastsc
%9799:	sext	 %9798
%9800:	load	 scname
%9801:	getelementptr	 %9800 %9799
%9802:	load	 %9801
%9803:	load	 lastsc
%9804:	call	 %9802 XXX %9803 XXX XXX addsym
%9805:	icmp	 %9804 XXX
%9806:	br	 %9805 if.end6 if.then5

BASIC BLOCK if.then5
%9807:	call	 XXX str format_pinpoint_message
%9808:	br	 if.end6

BASIC BLOCK if.end6
%9809:	call	 XXX mkstate
%9810:	load	 lastsc
%9811:	sext	 %9810
%9812:	load	 scset
%9813:	getelementptr	 %9812 %9811
%9814:	store	 %9809 %9813
%9815:	call	 XXX mkstate
%9816:	load	 lastsc
%9817:	sext	 %9816
%9818:	load	 scbol
%9819:	getelementptr	 %9818 %9817
%9820:	store	 %9815 %9819
%9821:	load	 lastsc
%9822:	sext	 %9821
%9823:	load	 scxclu
%9824:	getelementptr	 %9823 %9822
%9825:	store	 xcluflg %9824
%9826:	load	 lastsc
%9827:	sext	 %9826
%9828:	load	 sceof
%9829:	getelementptr	 %9828 %9827
%9830:	store	 XXX %9829
%9831:	ret	

FUNCTION format_pinpoint_message

BASIC BLOCK entry
%9832:	alloca	 XXX
%9833:	getelementptr	 %9832 XXX XXX
%9834:	call	 %9833 msg arg sprintf
%9835:	getelementptr	 %9832 XXX XXX
%9836:	call	 %9835 pinpoint_message
%9837:	ret	

FUNCTION sclookup

BASIC BLOCK entry
%9838:	call	 str XXX XXX findsym
%9839:	getelementptr	 %9838 XXX XXX
%9840:	load	 %9839
%9841:	ret	 %9840

FUNCTION mkentry

BASIC BLOCK entry
%9842:	icmp	 totaltrans XXX
%9843:	br	 %9842 if.end7 if.then

BASIC BLOCK if.then
%9844:	icmp	 deflink XXX
%9845:	br	 %9844 if.else if.then2

BASIC BLOCK if.then2
%9846:	sext	 statenum
%9847:	load	 base
%9848:	getelementptr	 %9847 %9846
%9849:	store	 XXX %9848
%9850:	br	 if.end

BASIC BLOCK if.else
%9851:	sext	 statenum
%9852:	load	 base
%9853:	getelementptr	 %9852 %9851
%9854:	store	 XXX %9853
%9855:	br	 if.end

BASIC BLOCK if.end
%9856:	sext	 statenum
%9857:	load	 def
%9858:	getelementptr	 %9857 %9856
%9859:	store	 deflink %9858
%9860:	br	 return

BASIC BLOCK if.end7
%9861:	br	 for.cond

BASIC BLOCK for.cond
%9862:	phi	 XXX %9880
%9863:	icmp	 %9862 numchars
%9864:	br	 %9863 for.end for.body

BASIC BLOCK for.body
%9865:	sext	 %9862
%9866:	getelementptr	 state %9865
%9867:	load	 %9866
%9868:	icmp	 %9867 XXX
%9869:	br	 %9868 if.end19 if.then12

BASIC BLOCK if.then12
%9870:	sext	 %9862
%9871:	getelementptr	 state %9870
%9872:	load	 %9871
%9873:	icmp	 %9872 XXX
%9874:	br	 %9873 lor.lhs.false if.then17

BASIC BLOCK lor.lhs.false
%9875:	icmp	 deflink XXX
%9876:	br	 %9875 if.end18 if.then17

BASIC BLOCK if.then17
%9877:	br	 for.end

BASIC BLOCK if.end18
%9878:	br	 if.end19

BASIC BLOCK if.end19
%9879:	br	 for.inc

BASIC BLOCK for.inc
%9880:	add	 %9862 XXX
%9881:	br	 for.cond

BASIC BLOCK for.end
%9882:	icmp	 totaltrans XXX
%9883:	br	 %9882 if.end24 if.then21

BASIC BLOCK if.then21
%9884:	sext	 %9862
%9885:	getelementptr	 state %9884
%9886:	load	 %9885
%9887:	call	 statenum %9862 %9886 deflink stack1
%9888:	br	 return

BASIC BLOCK if.end24
%9889:	br	 for.cond25

BASIC BLOCK for.cond25
%9890:	phi	 numchars %9908
%9891:	icmp	 %9890 XXX
%9892:	br	 %9891 for.end41 for.body27

BASIC BLOCK for.body27
%9893:	sext	 %9890
%9894:	getelementptr	 state %9893
%9895:	load	 %9894
%9896:	icmp	 %9895 XXX
%9897:	br	 %9896 if.end39 if.then31

BASIC BLOCK if.then31
%9898:	sext	 %9890
%9899:	getelementptr	 state %9898
%9900:	load	 %9899
%9901:	icmp	 %9900 XXX
%9902:	br	 %9901 lor.lhs.false35 if.then37

BASIC BLOCK lor.lhs.false35
%9903:	icmp	 deflink XXX
%9904:	br	 %9903 if.end38 if.then37

BASIC BLOCK if.then37
%9905:	br	 for.end41

BASIC BLOCK if.end38
%9906:	br	 if.end39

BASIC BLOCK if.end39
%9907:	br	 for.inc40

BASIC BLOCK for.inc40
%9908:	add	 %9890 XXX
%9909:	br	 for.cond25

BASIC BLOCK for.end41
%9910:	mul	 totaltrans XXX
%9911:	mul	 numchars XXX
%9912:	icmp	 %9910 %9911
%9913:	br	 %9912 if.else100 if.then44

BASIC BLOCK if.then44
%9914:	load	 firstfree
%9915:	br	 while.cond

BASIC BLOCK while.cond
%9916:	phi	 %9914 %9921
%9917:	icmp	 %9916 %9862
%9918:	br	 %9917 while.end while.body

BASIC BLOCK while.body
%9919:	add	 %9916 XXX
%9920:	br	 for.cond47

BASIC BLOCK for.cond47
%9921:	phi	 %9919 %9929
%9922:	sext	 %9921
%9923:	load	 chk
%9924:	getelementptr	 %9923 %9922
%9925:	load	 %9924
%9926:	icmp	 %9925 XXX
%9927:	br	 %9926 for.end54 for.body51

BASIC BLOCK for.body51
%9928:	br	 for.inc52

BASIC BLOCK for.inc52
%9929:	add	 %9921 XXX
%9930:	br	 for.cond47

BASIC BLOCK for.end54
%9931:	br	 while.cond

BASIC BLOCK while.end
%9932:	br	 while.cond55

BASIC BLOCK while.cond55
%9933:	add	 %9916 %9890
%9934:	sub	 %9933 %9862
%9935:	add	 %9934 XXX
%9936:	load	 current_max_xpairs
%9937:	icmp	 %9935 %9936
%9938:	br	 %9937 while.end59 while.body58

BASIC BLOCK while.body58
%9939:	call	 expand_nxt_chk
%9940:	br	 while.cond55

BASIC BLOCK while.end59
%9941:	br	 for.cond60

BASIC BLOCK for.cond60
%9942:	phi	 %9862 %9997
%9943:	phi	 %9916 %9995
%9944:	icmp	 %9942 %9890
%9945:	br	 %9944 for.end99 for.body62

BASIC BLOCK for.body62
%9946:	sext	 %9942
%9947:	getelementptr	 state %9946
%9948:	load	 %9947
%9949:	icmp	 %9948 XXX
%9950:	br	 %9949 if.end96 land.lhs.true

BASIC BLOCK land.lhs.true
%9951:	sext	 %9942
%9952:	getelementptr	 state %9951
%9953:	load	 %9952
%9954:	icmp	 %9953 XXX
%9955:	br	 %9954 lor.lhs.false69 land.lhs.true71

BASIC BLOCK lor.lhs.false69
%9956:	icmp	 deflink XXX
%9957:	br	 %9956 if.end96 land.lhs.true71

BASIC BLOCK land.lhs.true71
%9958:	add	 %9943 %9942
%9959:	sub	 %9958 %9862
%9960:	sext	 %9959
%9961:	load	 chk
%9962:	getelementptr	 %9961 %9960
%9963:	load	 %9962
%9964:	icmp	 %9963 XXX
%9965:	br	 %9964 if.end96 if.then77

BASIC BLOCK if.then77
%9966:	add	 %9943 XXX
%9967:	br	 for.cond79

BASIC BLOCK for.cond79
%9968:	phi	 %9966 %9981
%9969:	load	 current_max_xpairs
%9970:	icmp	 %9968 %9969
%9971:	br	 %9970 land.end land.rhs

BASIC BLOCK land.rhs
%9972:	sext	 %9968
%9973:	load	 chk
%9974:	getelementptr	 %9973 %9972
%9975:	load	 %9974
%9976:	icmp	 %9975 XXX
%9977:	br	 land.end

BASIC BLOCK land.end
%9978:	phi	 XXX %9976
%9979:	br	 %9978 for.end87 for.body84

BASIC BLOCK for.body84
%9980:	br	 for.inc85

BASIC BLOCK for.inc85
%9981:	add	 %9968 XXX
%9982:	br	 for.cond79

BASIC BLOCK for.end87
%9983:	br	 while.cond88

BASIC BLOCK while.cond88
%9984:	add	 %9968 %9890
%9985:	sub	 %9984 %9862
%9986:	add	 %9985 XXX
%9987:	load	 current_max_xpairs
%9988:	icmp	 %9986 %9987
%9989:	br	 %9988 while.end94 while.body93

BASIC BLOCK while.body93
%9990:	call	 expand_nxt_chk
%9991:	br	 while.cond88

BASIC BLOCK while.end94
%9992:	sub	 %9862 XXX
%9993:	br	 if.end96

BASIC BLOCK if.end96
%9994:	phi	 %9992 %9942 %9942 %9942
%9995:	phi	 %9968 %9943 %9943 %9943
%9996:	br	 for.inc97

BASIC BLOCK for.inc97
%9997:	add	 %9994 XXX
%9998:	br	 for.cond60

BASIC BLOCK for.end99
%9999:	br	 if.end104

BASIC BLOCK if.else100
%10000:	load	 tblend
%10001:	add	 %10000 XXX
%10002:	icmp	 %10001 %9862
%10003:	br	 %10002 cond.false cond.true

BASIC BLOCK cond.true
%10004:	load	 tblend
%10005:	add	 %10004 XXX
%10006:	br	 cond.end

BASIC BLOCK cond.false
%10007:	br	 cond.end

BASIC BLOCK cond.end
%10008:	phi	 %10005 %9862
%10009:	br	 if.end104

BASIC BLOCK if.end104
%10010:	phi	 %9943 %10008
%10011:	sub	 %10010 %9862
%10012:	add	 %10011 %9890
%10013:	br	 while.cond107

BASIC BLOCK while.cond107
%10014:	add	 %10012 XXX
%10015:	load	 current_max_xpairs
%10016:	icmp	 %10014 %10015
%10017:	br	 %10016 while.end111 while.body110

BASIC BLOCK while.body110
%10018:	call	 expand_nxt_chk
%10019:	br	 while.cond107

BASIC BLOCK while.end111
%10020:	sext	 statenum
%10021:	load	 base
%10022:	getelementptr	 %10021 %10020
%10023:	store	 %10011 %10022
%10024:	sext	 statenum
%10025:	load	 def
%10026:	getelementptr	 %10025 %10024
%10027:	store	 deflink %10026
%10028:	br	 for.cond116

BASIC BLOCK for.cond116
%10029:	phi	 %9862 %10060
%10030:	icmp	 %10029 %9890
%10031:	br	 %10030 for.end141 for.body118

BASIC BLOCK for.body118
%10032:	sext	 %10029
%10033:	getelementptr	 state %10032
%10034:	load	 %10033
%10035:	icmp	 %10034 XXX
%10036:	br	 %10035 if.end138 if.then122

BASIC BLOCK if.then122
%10037:	sext	 %10029
%10038:	getelementptr	 state %10037
%10039:	load	 %10038
%10040:	icmp	 %10039 XXX
%10041:	br	 %10040 lor.lhs.false126 if.then128

BASIC BLOCK lor.lhs.false126
%10042:	icmp	 deflink XXX
%10043:	br	 %10042 if.end137 if.then128

BASIC BLOCK if.then128
%10044:	sext	 %10029
%10045:	getelementptr	 state %10044
%10046:	load	 %10045
%10047:	add	 %10011 %10029
%10048:	sext	 %10047
%10049:	load	 nxt
%10050:	getelementptr	 %10049 %10048
%10051:	store	 %10046 %10050
%10052:	add	 %10011 %10029
%10053:	sext	 %10052
%10054:	load	 chk
%10055:	getelementptr	 %10054 %10053
%10056:	store	 statenum %10055
%10057:	br	 if.end137

BASIC BLOCK if.end137
%10058:	br	 if.end138

BASIC BLOCK if.end138
%10059:	br	 for.inc139

BASIC BLOCK for.inc139
%10060:	add	 %10029 XXX
%10061:	br	 for.cond116

BASIC BLOCK for.end141
%10062:	load	 firstfree
%10063:	icmp	 %10010 %10062
%10064:	br	 %10063 if.end153 if.then143

BASIC BLOCK if.then143
%10065:	load	 firstfree
%10066:	add	 %10065 XXX
%10067:	store	 %10066 firstfree
%10068:	br	 for.cond145

BASIC BLOCK for.cond145
%10069:	load	 firstfree
%10070:	sext	 %10069
%10071:	load	 chk
%10072:	getelementptr	 %10071 %10070
%10073:	load	 %10072
%10074:	icmp	 %10073 XXX
%10075:	br	 %10074 for.end152 for.body149

BASIC BLOCK for.body149
%10076:	br	 for.inc150

BASIC BLOCK for.inc150
%10077:	load	 firstfree
%10078:	add	 %10077 XXX
%10079:	store	 %10078 firstfree
%10080:	br	 for.cond145

BASIC BLOCK for.end152
%10081:	br	 if.end153

BASIC BLOCK if.end153
%10082:	load	 tblend
%10083:	icmp	 %10082 %10012
%10084:	br	 %10083 cond.false156 cond.true155

BASIC BLOCK cond.true155
%10085:	load	 tblend
%10086:	br	 cond.end157

BASIC BLOCK cond.false156
%10087:	br	 cond.end157

BASIC BLOCK cond.end157
%10088:	phi	 %10085 %10012
%10089:	store	 %10088 tblend
%10090:	br	 return

BASIC BLOCK return
%10091:	ret	

FUNCTION tbldiff

BASIC BLOCK entry
%10092:	load	 numecs
%10093:	sub	 pr XXX
%10094:	mul	 %10092 %10093
%10095:	sext	 %10094
%10096:	getelementptr	 protsave XXX %10095
%10097:	load	 numecs
%10098:	br	 for.cond

BASIC BLOCK for.cond
%10099:	phi	 state %10108
%10100:	phi	 %10097 %10123
%10101:	phi	 ext %10120
%10102:	phi	 %10096 %10106
%10103:	phi	 XXX %10121
%10104:	icmp	 %10100 XXX
%10105:	br	 %10104 for.end for.body

BASIC BLOCK for.body
%10106:	getelementptr	 %10102 XXX
%10107:	load	 %10106
%10108:	getelementptr	 %10099 XXX
%10109:	load	 %10108
%10110:	icmp	 %10107 %10109
%10111:	br	 %10110 if.else if.then

BASIC BLOCK if.then
%10112:	getelementptr	 %10101 XXX
%10113:	store	 XXX %10112
%10114:	br	 if.end

BASIC BLOCK if.else
%10115:	load	 %10108
%10116:	getelementptr	 %10101 XXX
%10117:	store	 %10115 %10116
%10118:	add	 %10103 XXX
%10119:	br	 if.end

BASIC BLOCK if.end
%10120:	phi	 %10112 %10116
%10121:	phi	 %10103 %10118
%10122:	br	 for.inc

BASIC BLOCK for.inc
%10123:	add	 %10100 XXX
%10124:	br	 for.cond

BASIC BLOCK for.end
%10125:	ret	 %10103

FUNCTION mktemplate

BASIC BLOCK entry
%10126:	alloca	 XXX
%10127:	alloca	 XXX
%10128:	load	 numtemps
%10129:	add	 %10128 XXX
%10130:	store	 %10129 numtemps
%10131:	load	 numtemps
%10132:	load	 numecs
%10133:	mul	 %10131 %10132
%10134:	load	 numecs
%10135:	add	 %10133 %10134
%10136:	load	 current_max_template_xpairs
%10137:	icmp	 %10135 %10136
%10138:	br	 %10137 if.end if.then

BASIC BLOCK if.then
%10139:	load	 current_max_template_xpairs
%10140:	add	 %10139 XXX
%10141:	store	 %10140 current_max_template_xpairs
%10142:	load	 num_reallocs
%10143:	add	 %10142 XXX
%10144:	store	 %10143 num_reallocs
%10145:	load	 tnxt
%10146:	bitcast	 %10145
%10147:	load	 current_max_template_xpairs
%10148:	call	 %10146 %10147 XXX reallocate_array
%10149:	bitcast	 %10148
%10150:	store	 %10149 tnxt
%10151:	br	 if.end

BASIC BLOCK if.end
%10152:	br	 for.cond

BASIC BLOCK for.cond
%10153:	phi	 XXX %10182
%10154:	phi	 XXX %10180
%10155:	load	 numecs
%10156:	icmp	 %10153 %10155
%10157:	br	 %10156 for.end for.body

BASIC BLOCK for.body
%10158:	sext	 %10153
%10159:	getelementptr	 state %10158
%10160:	load	 %10159
%10161:	icmp	 %10160 XXX
%10162:	br	 %10161 if.else if.then7

BASIC BLOCK if.then7
%10163:	add	 %10133 %10153
%10164:	sext	 %10163
%10165:	load	 tnxt
%10166:	getelementptr	 %10165 %10164
%10167:	store	 XXX %10166
%10168:	br	 if.end17

BASIC BLOCK if.else
%10169:	trunc	 %10153
%10170:	add	 %10154 XXX
%10171:	sext	 %10154
%10172:	getelementptr	 %10127 XXX %10171
%10173:	store	 %10169 %10172
%10174:	add	 %10133 %10153
%10175:	sext	 %10174
%10176:	load	 tnxt
%10177:	getelementptr	 %10176 %10175
%10178:	store	 comstate %10177
%10179:	br	 if.end17

BASIC BLOCK if.end17
%10180:	phi	 %10154 %10170
%10181:	br	 for.inc

BASIC BLOCK for.inc
%10182:	add	 %10153 XXX
%10183:	br	 for.cond

BASIC BLOCK for.end
%10184:	load	 usemecs
%10185:	icmp	 %10184 XXX
%10186:	br	 %10185 if.end20 if.then19

BASIC BLOCK if.then19
%10187:	getelementptr	 %10127 XXX XXX
%10188:	load	 numecs
%10189:	call	 %10187 %10154 XXX XXX %10188 XXX mkeccl
%10190:	br	 if.end20

BASIC BLOCK if.end20
%10191:	load	 tnxt
%10192:	sext	 %10133
%10193:	getelementptr	 %10191 %10192
%10194:	load	 numtemps
%10195:	sub	 XXX %10194
%10196:	call	 %10193 %10195 comstate mkprot
%10197:	load	 firstprot
%10198:	getelementptr	 %10126 XXX XXX
%10199:	call	 state %10197 %10198 tbldiff
%10200:	getelementptr	 %10126 XXX XXX
%10201:	load	 numecs
%10202:	load	 numtemps
%10203:	sub	 XXX %10202
%10204:	call	 %10200 %10201 statenum %10203 %10199 mkentry
%10205:	ret	

FUNCTION mkprot

BASIC BLOCK entry
%10206:	load	 numprots
%10207:	add	 %10206 XXX
%10208:	store	 %10207 numprots
%10209:	icmp	 %10207 XXX
%10210:	br	 %10209 lor.lhs.false if.then

BASIC BLOCK lor.lhs.false
%10211:	load	 numecs
%10212:	load	 numprots
%10213:	mul	 %10211 %10212
%10214:	icmp	 %10213 XXX
%10215:	br	 %10214 if.else if.then

BASIC BLOCK if.then
%10216:	load	 lastprot
%10217:	load	 lastprot
%10218:	sext	 %10217
%10219:	getelementptr	 protprev XXX %10218
%10220:	load	 %10219
%10221:	store	 %10220 lastprot
%10222:	load	 lastprot
%10223:	sext	 %10222
%10224:	getelementptr	 protnext XXX %10223
%10225:	store	 XXX %10224
%10226:	br	 if.end

BASIC BLOCK if.else
%10227:	load	 numprots
%10228:	br	 if.end

BASIC BLOCK if.end
%10229:	phi	 %10216 %10227
%10230:	load	 firstprot
%10231:	sext	 %10229
%10232:	getelementptr	 protnext XXX %10231
%10233:	store	 %10230 %10232
%10234:	load	 firstprot
%10235:	icmp	 %10234 XXX
%10236:	br	 %10235 if.end10 if.then7

BASIC BLOCK if.then7
%10237:	load	 firstprot
%10238:	sext	 %10237
%10239:	getelementptr	 protprev XXX %10238
%10240:	store	 %10229 %10239
%10241:	br	 if.end10

BASIC BLOCK if.end10
%10242:	store	 %10229 firstprot
%10243:	sext	 %10229
%10244:	getelementptr	 prottbl XXX %10243
%10245:	store	 statenum %10244
%10246:	sext	 %10229
%10247:	getelementptr	 protcomst XXX %10246
%10248:	store	 comstate %10247
%10249:	load	 numecs
%10250:	sub	 %10229 XXX
%10251:	mul	 %10249 %10250
%10252:	br	 for.cond

BASIC BLOCK for.cond
%10253:	phi	 XXX %10265
%10254:	load	 numecs
%10255:	icmp	 %10253 %10254
%10256:	br	 %10255 for.end for.body

BASIC BLOCK for.body
%10257:	sext	 %10253
%10258:	getelementptr	 state %10257
%10259:	load	 %10258
%10260:	add	 %10251 %10253
%10261:	sext	 %10260
%10262:	getelementptr	 protsave XXX %10261
%10263:	store	 %10259 %10262
%10264:	br	 for.inc

BASIC BLOCK for.inc
%10265:	add	 %10253 XXX
%10266:	br	 for.cond

BASIC BLOCK for.end
%10267:	ret	

FUNCTION mv2front

BASIC BLOCK entry
%10268:	load	 firstprot
%10269:	icmp	 %10268 qelm
%10270:	br	 %10269 if.end26 if.then

BASIC BLOCK if.then
%10271:	load	 lastprot
%10272:	icmp	 qelm %10271
%10273:	br	 %10272 if.end if.then2

BASIC BLOCK if.then2
%10274:	load	 lastprot
%10275:	sext	 %10274
%10276:	getelementptr	 protprev XXX %10275
%10277:	load	 %10276
%10278:	store	 %10277 lastprot
%10279:	br	 if.end

BASIC BLOCK if.end
%10280:	sext	 qelm
%10281:	getelementptr	 protnext XXX %10280
%10282:	load	 %10281
%10283:	sext	 qelm
%10284:	getelementptr	 protprev XXX %10283
%10285:	load	 %10284
%10286:	sext	 %10285
%10287:	getelementptr	 protnext XXX %10286
%10288:	store	 %10282 %10287
%10289:	sext	 qelm
%10290:	getelementptr	 protnext XXX %10289
%10291:	load	 %10290
%10292:	icmp	 %10291 XXX
%10293:	br	 %10292 if.end19 if.then12

BASIC BLOCK if.then12
%10294:	sext	 qelm
%10295:	getelementptr	 protprev XXX %10294
%10296:	load	 %10295
%10297:	sext	 qelm
%10298:	getelementptr	 protnext XXX %10297
%10299:	load	 %10298
%10300:	sext	 %10299
%10301:	getelementptr	 protprev XXX %10300
%10302:	store	 %10296 %10301
%10303:	br	 if.end19

BASIC BLOCK if.end19
%10304:	sext	 qelm
%10305:	getelementptr	 protprev XXX %10304
%10306:	store	 XXX %10305
%10307:	load	 firstprot
%10308:	sext	 qelm
%10309:	getelementptr	 protnext XXX %10308
%10310:	store	 %10307 %10309
%10311:	load	 firstprot
%10312:	sext	 %10311
%10313:	getelementptr	 protprev XXX %10312
%10314:	store	 qelm %10313
%10315:	store	 qelm firstprot
%10316:	br	 if.end26

BASIC BLOCK if.end26
%10317:	ret	

FUNCTION find_table_space

BASIC BLOCK entry
%10318:	icmp	 numtrans XXX
%10319:	br	 %10318 if.else if.then

BASIC BLOCK if.then
%10320:	load	 tblend
%10321:	icmp	 %10320 XXX
%10322:	br	 %10321 if.end if.then2

BASIC BLOCK if.then2
%10323:	br	 return

BASIC BLOCK if.end
%10324:	load	 tblend
%10325:	load	 numecs
%10326:	sub	 %10324 %10325
%10327:	br	 if.end3

BASIC BLOCK if.else
%10328:	load	 firstfree
%10329:	br	 if.end3

BASIC BLOCK if.end3
%10330:	phi	 %10326 %10328
%10331:	br	 while.body

BASIC BLOCK while.body
%10332:	phi	 %10330 %10407
%10333:	br	 while.cond4

BASIC BLOCK while.cond4
%10334:	load	 numecs
%10335:	add	 %10332 %10334
%10336:	load	 current_max_xpairs
%10337:	icmp	 %10335 %10336
%10338:	br	 %10337 while.end while.body6

BASIC BLOCK while.body6
%10339:	call	 expand_nxt_chk
%10340:	br	 while.cond4

BASIC BLOCK while.end
%10341:	br	 while.body8

BASIC BLOCK while.body8
%10342:	phi	 %10332 %10362
%10343:	sub	 %10342 XXX
%10344:	sext	 %10343
%10345:	load	 chk
%10346:	getelementptr	 %10345 %10344
%10347:	load	 %10346
%10348:	icmp	 %10347 XXX
%10349:	br	 %10348 if.else19 if.then11

BASIC BLOCK if.then11
%10350:	sext	 %10342
%10351:	load	 chk
%10352:	getelementptr	 %10351 %10350
%10353:	load	 %10352
%10354:	icmp	 %10353 XXX
%10355:	br	 %10354 if.else16 if.then15

BASIC BLOCK if.then15
%10356:	br	 while.end26

BASIC BLOCK if.else16
%10357:	add	 %10342 XXX
%10358:	br	 if.end18

BASIC BLOCK if.end18
%10359:	br	 if.end20

BASIC BLOCK if.else19
%10360:	add	 %10342 XXX
%10361:	br	 if.end20

BASIC BLOCK if.end20
%10362:	phi	 %10357 %10360
%10363:	br	 while.cond21

BASIC BLOCK while.cond21
%10364:	load	 numecs
%10365:	add	 %10362 %10364
%10366:	load	 current_max_xpairs
%10367:	icmp	 %10365 %10366
%10368:	br	 %10367 while.end25 while.body24

BASIC BLOCK while.body24
%10369:	call	 expand_nxt_chk
%10370:	br	 while.cond21

BASIC BLOCK while.end25
%10371:	br	 while.body8

BASIC BLOCK while.end26
%10372:	icmp	 numtrans XXX
%10373:	br	 %10372 if.end30 if.then28

BASIC BLOCK if.then28
%10374:	add	 %10342 XXX
%10375:	store	 %10374 firstfree
%10376:	br	 if.end30

BASIC BLOCK if.end30
%10377:	getelementptr	 state XXX
%10378:	load	 numecs
%10379:	add	 %10342 %10378
%10380:	add	 %10379 XXX
%10381:	sext	 %10380
%10382:	load	 chk
%10383:	getelementptr	 %10382 %10381
%10384:	add	 %10342 XXX
%10385:	sext	 %10384
%10386:	load	 chk
%10387:	getelementptr	 %10386 %10385
%10388:	br	 for.cond

BASIC BLOCK for.cond
%10389:	phi	 %10377 %10393
%10390:	phi	 %10387 %10402
%10391:	icmp	 %10390 %10383
%10392:	br	 %10391 for.end for.body

BASIC BLOCK for.body
%10393:	getelementptr	 %10389 XXX
%10394:	load	 %10389
%10395:	icmp	 %10394 XXX
%10396:	br	 %10395 if.end43 land.lhs.true

BASIC BLOCK land.lhs.true
%10397:	load	 %10390
%10398:	icmp	 %10397 XXX
%10399:	br	 %10398 if.end43 if.then42

BASIC BLOCK if.then42
%10400:	br	 for.end

BASIC BLOCK if.end43
%10401:	br	 for.inc

BASIC BLOCK for.inc
%10402:	getelementptr	 %10390 XXX
%10403:	br	 for.cond

BASIC BLOCK for.end
%10404:	icmp	 %10390 %10383
%10405:	br	 %10404 if.else47 if.then46

BASIC BLOCK if.then46
%10406:	br	 return

BASIC BLOCK if.else47
%10407:	add	 %10342 XXX
%10408:	br	 if.end49

BASIC BLOCK if.end49
%10409:	br	 while.body

BASIC BLOCK return
%10410:	phi	 XXX %10342
%10411:	ret	 %10410

FUNCTION yylex

BASIC BLOCK entry
%10412:	load	 eofseen
%10413:	icmp	 %10412 XXX
%10414:	br	 %10413 if.else if.then

BASIC BLOCK if.then
%10415:	br	 if.end

BASIC BLOCK if.else
%10416:	call	 flexscan
%10417:	br	 if.end

BASIC BLOCK if.end
%10418:	phi	 XXX %10416
%10419:	icmp	 %10418 XXX
%10420:	br	 %10419 lor.lhs.false if.then2

BASIC BLOCK lor.lhs.false
%10421:	icmp	 %10418 XXX
%10422:	br	 %10421 if.end7 if.then2

BASIC BLOCK if.then2
%10423:	store	 XXX eofseen
%10424:	load	 sectnum
%10425:	icmp	 %10424 XXX
%10426:	br	 %10425 if.else5 if.then4

BASIC BLOCK if.then4
%10427:	call	 XXX synerr
%10428:	store	 XXX sectnum
%10429:	br	 if.end6

BASIC BLOCK if.else5
%10430:	br	 if.end6

BASIC BLOCK if.end6
%10431:	phi	 XXX XXX
%10432:	br	 if.end7

BASIC BLOCK if.end7
%10433:	phi	 %10431 %10418
%10434:	load	 trace
%10435:	icmp	 %10434 XXX
%10436:	br	 %10435 if.end57 if.then9

BASIC BLOCK if.then9
%10437:	load	 yylex.beglin
%10438:	icmp	 %10437 XXX
%10439:	br	 %10438 if.end13 if.then11

BASIC BLOCK if.then11
%10440:	load	 err
%10441:	load	 num_rules
%10442:	add	 %10441 XXX
%10443:	call	 %10440 XXX %10442 fprintf
%10444:	store	 XXX yylex.beglin
%10445:	br	 if.end13

BASIC BLOCK if.end13
%10446:	switch	 %10433 sw.default54 XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb XXX sw.bb15 XXX sw.bb20 XXX sw.bb22 XXX sw.bb24 XXX sw.bb26 XXX sw.bb31 XXX sw.bb33 XXX sw.bb46 XXX sw.bb48 XXX sw.bb50 XXX sw.bb52

BASIC BLOCK sw.bb
%10447:	load	 err
%10448:	call	 %10433 %10447 _IO_putc
%10449:	br	 sw.epilog56

BASIC BLOCK sw.bb15
%10450:	load	 err
%10451:	call	 XXX %10450 _IO_putc
%10452:	load	 sectnum
%10453:	icmp	 %10452 XXX
%10454:	br	 %10453 if.end19 if.then18

BASIC BLOCK if.then18
%10455:	store	 XXX yylex.beglin
%10456:	br	 if.end19

BASIC BLOCK if.end19
%10457:	br	 sw.epilog56

BASIC BLOCK sw.bb20
%10458:	load	 err
%10459:	call	 XXX %10458 fputs
%10460:	br	 sw.epilog56

BASIC BLOCK sw.bb22
%10461:	load	 err
%10462:	call	 XXX %10461 fputs
%10463:	br	 sw.epilog56

BASIC BLOCK sw.bb24
%10464:	load	 err
%10465:	call	 XXX %10464 _IO_putc
%10466:	br	 sw.epilog56

BASIC BLOCK sw.bb26
%10467:	load	 err
%10468:	call	 XXX %10467 fputs
%10469:	load	 sectnum
%10470:	icmp	 %10469 XXX
%10471:	br	 %10470 if.end30 if.then29

BASIC BLOCK if.then29
%10472:	store	 XXX yylex.beglin
%10473:	br	 if.end30

BASIC BLOCK if.end30
%10474:	br	 sw.epilog56

BASIC BLOCK sw.bb31
%10475:	load	 err
%10476:	call	 %10475 XXX XXX fprintf
%10477:	br	 sw.epilog56

BASIC BLOCK sw.bb33
%10478:	load	 yylval
%10479:	switch	 %10478 sw.default XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34 XXX sw.bb34

BASIC BLOCK sw.bb34
%10480:	load	 err
%10481:	load	 yylval
%10482:	call	 %10480 XXX %10481 fprintf
%10483:	br	 sw.epilog

BASIC BLOCK sw.default
%10484:	load	 yylval
%10485:	and	 %10484 XXX
%10486:	icmp	 %10485 XXX
%10487:	br	 %10486 if.then41 lor.lhs.false37

BASIC BLOCK lor.lhs.false37
%10488:	load	 yylval
%10489:	sext	 %10488
%10490:	call	 __ctype_b_loc
%10491:	load	 %10490
%10492:	getelementptr	 %10491 %10489
%10493:	load	 %10492
%10494:	zext	 %10493
%10495:	and	 %10494 XXX
%10496:	icmp	 %10495 XXX
%10497:	br	 %10496 if.then41 if.else43

BASIC BLOCK if.then41
%10498:	load	 err
%10499:	load	 yylval
%10500:	call	 %10498 XXX %10499 fprintf
%10501:	br	 if.end45

BASIC BLOCK if.else43
%10502:	load	 yylval
%10503:	load	 err
%10504:	call	 %10502 %10503 _IO_putc
%10505:	br	 if.end45

BASIC BLOCK if.end45
%10506:	br	 sw.epilog

BASIC BLOCK sw.epilog
%10507:	br	 sw.epilog56

BASIC BLOCK sw.bb46
%10508:	load	 err
%10509:	load	 yylval
%10510:	call	 %10508 XXX %10509 fprintf
%10511:	br	 sw.epilog56

BASIC BLOCK sw.bb48
%10512:	load	 err
%10513:	load	 yylval
%10514:	call	 %10512 XXX %10513 fprintf
%10515:	br	 sw.epilog56

BASIC BLOCK sw.bb50
%10516:	load	 err
%10517:	call	 %10516 XXX fprintf
%10518:	br	 sw.epilog56

BASIC BLOCK sw.bb52
%10519:	load	 err
%10520:	call	 %10519 XXX fprintf
%10521:	br	 sw.epilog56

BASIC BLOCK sw.default54
%10522:	load	 err
%10523:	load	 yylval
%10524:	call	 %10522 XXX %10433 %10523 fprintf
%10525:	br	 sw.epilog56

BASIC BLOCK sw.epilog56
%10526:	br	 if.end57

BASIC BLOCK if.end57
%10527:	ret	 %10433

FUNCTION warn

BASIC BLOCK entry
%10528:	load	 linenum
%10529:	call	 str %10528 line_warning
%10530:	ret	

FUNCTION build_eof_action

BASIC BLOCK entry
%10531:	alloca	 XXX
%10532:	br	 for.cond

BASIC BLOCK for.cond
%10533:	phi	 XXX %10579
%10534:	load	 actvp
%10535:	icmp	 %10533 %10534
%10536:	br	 %10535 for.end for.body

BASIC BLOCK for.body
%10537:	sext	 %10533
%10538:	load	 actvsc
%10539:	getelementptr	 %10538 %10537
%10540:	load	 %10539
%10541:	sext	 %10540
%10542:	load	 sceof
%10543:	getelementptr	 %10542 %10541
%10544:	load	 %10543
%10545:	icmp	 %10544 XXX
%10546:	br	 %10545 if.else if.then

BASIC BLOCK if.then
%10547:	sext	 %10533
%10548:	load	 actvsc
%10549:	getelementptr	 %10548 %10547
%10550:	load	 %10549
%10551:	sext	 %10550
%10552:	load	 scname
%10553:	getelementptr	 %10552 %10551
%10554:	load	 %10553
%10555:	call	 XXX %10554 format_pinpoint_message
%10556:	br	 if.end

BASIC BLOCK if.else
%10557:	sext	 %10533
%10558:	load	 actvsc
%10559:	getelementptr	 %10558 %10557
%10560:	load	 %10559
%10561:	sext	 %10560
%10562:	load	 sceof
%10563:	getelementptr	 %10562 %10561
%10564:	store	 XXX %10563
%10565:	getelementptr	 %10531 XXX XXX
%10566:	sext	 %10533
%10567:	load	 actvsc
%10568:	getelementptr	 %10567 %10566
%10569:	load	 %10568
%10570:	sext	 %10569
%10571:	load	 scname
%10572:	getelementptr	 %10571 %10570
%10573:	load	 %10572
%10574:	call	 %10565 XXX %10573 sprintf
%10575:	getelementptr	 %10531 XXX XXX
%10576:	call	 %10575 add_action
%10577:	br	 if.end

BASIC BLOCK if.end
%10578:	br	 for.inc

BASIC BLOCK for.inc
%10579:	add	 %10533 XXX
%10580:	br	 for.cond

BASIC BLOCK for.end
%10581:	call	 XXX line_directive_out
%10582:	load	 num_rules
%10583:	add	 %10582 XXX
%10584:	store	 %10583 num_rules
%10585:	load	 num_eof_rules
%10586:	add	 %10585 XXX
%10587:	store	 %10586 num_eof_rules
%10588:	ret	

FUNCTION format_synerr

BASIC BLOCK entry
%10589:	alloca	 XXX
%10590:	getelementptr	 %10589 XXX XXX
%10591:	call	 %10590 msg arg sprintf
%10592:	getelementptr	 %10589 XXX XXX
%10593:	call	 %10592 synerr
%10594:	ret	

FUNCTION line_pinpoint

BASIC BLOCK entry
%10595:	load	 err
%10596:	load	 infilename
%10597:	call	 %10595 XXX %10596 line str fprintf
%10598:	ret	

FUNCTION yyerror

BASIC BLOCK entry
%10599:	ret	

FUNCTION yy_init_buffer

BASIC BLOCK entry
%10600:	getelementptr	 b XXX XXX
%10601:	store	 file %10600
%10602:	getelementptr	 b XXX XXX
%10603:	load	 %10602
%10604:	getelementptr	 %10603 XXX
%10605:	store	 XXX %10604
%10606:	getelementptr	 b XXX XXX
%10607:	store	 XXX %10606
%10608:	getelementptr	 b XXX XXX
%10609:	load	 %10608
%10610:	getelementptr	 %10609 XXX
%10611:	store	 XXX %10610
%10612:	getelementptr	 b XXX XXX
%10613:	load	 %10612
%10614:	getelementptr	 %10613 XXX
%10615:	store	 XXX %10614
%10616:	getelementptr	 b XXX XXX
%10617:	load	 %10616
%10618:	getelementptr	 %10617 XXX
%10619:	getelementptr	 b XXX XXX
%10620:	store	 %10618 %10619
%10621:	icmp	 file XXX
%10622:	br	 %10621 cond.false cond.true

BASIC BLOCK cond.true
%10623:	call	 file fileno
%10624:	call	 %10623 XXX
%10625:	br	 cond.end

BASIC BLOCK cond.false
%10626:	br	 cond.end

BASIC BLOCK cond.end
%10627:	phi	 %10624 XXX
%10628:	getelementptr	 b XXX XXX
%10629:	store	 %10627 %10628
%10630:	getelementptr	 b XXX XXX
%10631:	store	 XXX %10630
%10632:	getelementptr	 b XXX XXX
%10633:	store	 XXX %10632
%10634:	ret	

FUNCTION yy_create_buffer

BASIC BLOCK entry
%10635:	call	 XXX yy_flex_alloc
%10636:	bitcast	 %10635
%10637:	icmp	 %10636 XXX
%10638:	br	 %10637 if.then if.end

BASIC BLOCK if.then
%10639:	call	 XXX yy_fatal_error
%10640:	br	 if.end

BASIC BLOCK if.end
%10641:	getelementptr	 %10636 XXX XXX
%10642:	store	 size %10641
%10643:	getelementptr	 %10636 XXX XXX
%10644:	load	 %10643
%10645:	add	 %10644 XXX
%10646:	call	 %10645 yy_flex_alloc
%10647:	getelementptr	 %10636 XXX XXX
%10648:	store	 %10646 %10647
%10649:	getelementptr	 %10636 XXX XXX
%10650:	load	 %10649
%10651:	icmp	 %10650 XXX
%10652:	br	 %10651 if.then5 if.end6

BASIC BLOCK if.then5
%10653:	call	 XXX yy_fatal_error
%10654:	br	 if.end6

BASIC BLOCK if.end6
%10655:	call	 %10636 file yy_init_buffer
%10656:	ret	 %10636

FUNCTION yy_load_buffer_state

BASIC BLOCK entry
%10657:	load	 yy_current_buffer
%10658:	getelementptr	 %10657 XXX XXX
%10659:	load	 %10658
%10660:	store	 %10659 yy_n_chars
%10661:	load	 yy_current_buffer
%10662:	getelementptr	 %10661 XXX XXX
%10663:	load	 %10662
%10664:	store	 %10663 yy_c_buf_p
%10665:	store	 %10663 yytext
%10666:	load	 yy_current_buffer
%10667:	getelementptr	 %10666 XXX XXX
%10668:	load	 %10667
%10669:	store	 %10668 yyin
%10670:	load	 yy_c_buf_p
%10671:	load	 %10670
%10672:	store	 %10671 yy_hold_char
%10673:	ret	

FUNCTION yyunput

BASIC BLOCK entry
%10674:	load	 yy_c_buf_p
%10675:	load	 yy_hold_char
%10676:	store	 %10675 %10674
%10677:	load	 yy_current_buffer
%10678:	getelementptr	 %10677 XXX XXX
%10679:	load	 %10678
%10680:	getelementptr	 %10679 XXX
%10681:	icmp	 %10674 %10680
%10682:	br	 %10681 if.end19 if.then

BASIC BLOCK if.then
%10683:	load	 yy_n_chars
%10684:	add	 %10683 XXX
%10685:	load	 yy_current_buffer
%10686:	getelementptr	 %10685 XXX XXX
%10687:	load	 %10686
%10688:	add	 %10687 XXX
%10689:	sext	 %10688
%10690:	load	 yy_current_buffer
%10691:	getelementptr	 %10690 XXX XXX
%10692:	load	 %10691
%10693:	getelementptr	 %10692 %10689
%10694:	sext	 %10684
%10695:	load	 yy_current_buffer
%10696:	getelementptr	 %10695 XXX XXX
%10697:	load	 %10696
%10698:	getelementptr	 %10697 %10694
%10699:	br	 while.cond

BASIC BLOCK while.cond
%10700:	phi	 %10693 %10709
%10701:	phi	 %10698 %10707
%10702:	load	 yy_current_buffer
%10703:	getelementptr	 %10702 XXX XXX
%10704:	load	 %10703
%10705:	icmp	 %10701 %10704
%10706:	br	 %10705 while.end while.body

BASIC BLOCK while.body
%10707:	getelementptr	 %10701 XXX
%10708:	load	 %10707
%10709:	getelementptr	 %10700 XXX
%10710:	store	 %10708 %10709
%10711:	br	 while.cond

BASIC BLOCK while.end
%10712:	ptrtoint	 %10700
%10713:	ptrtoint	 %10701
%10714:	sub	 %10712 %10713
%10715:	getelementptr	 %10674 %10714
%10716:	ptrtoint	 %10700
%10717:	ptrtoint	 %10701
%10718:	sub	 %10716 %10717
%10719:	getelementptr	 yy_bp %10718
%10720:	load	 yy_current_buffer
%10721:	getelementptr	 %10720 XXX XXX
%10722:	load	 %10721
%10723:	store	 %10722 yy_n_chars
%10724:	load	 yy_current_buffer
%10725:	getelementptr	 %10724 XXX XXX
%10726:	load	 %10725
%10727:	getelementptr	 %10726 XXX
%10728:	icmp	 %10715 %10727
%10729:	br	 %10728 if.end if.then18

BASIC BLOCK if.then18
%10730:	call	 XXX yy_fatal_error
%10731:	br	 if.end

BASIC BLOCK if.end
%10732:	br	 if.end19

BASIC BLOCK if.end19
%10733:	phi	 %10715 %10674
%10734:	phi	 %10719 yy_bp
%10735:	icmp	 %10733 %10734
%10736:	br	 %10735 if.end26 land.lhs.true

BASIC BLOCK land.lhs.true
%10737:	getelementptr	 %10733 XXX
%10738:	load	 %10737
%10739:	sext	 %10738
%10740:	icmp	 %10739 XXX
%10741:	br	 %10740 if.end26 if.then24

BASIC BLOCK if.then24
%10742:	getelementptr	 %10733 XXX
%10743:	store	 XXX %10742
%10744:	br	 if.end26

BASIC BLOCK if.end26
%10745:	trunc	 c
%10746:	getelementptr	 %10733 XXX
%10747:	store	 %10745 %10746
%10748:	store	 %10734 yytext
%10749:	ptrtoint	 %10746
%10750:	ptrtoint	 %10734
%10751:	sub	 %10749 %10750
%10752:	trunc	 %10751
%10753:	store	 %10752 yyleng
%10754:	load	 %10746
%10755:	store	 %10754 yy_hold_char
%10756:	store	 XXX %10746
%10757:	store	 %10746 yy_c_buf_p
%10758:	ret	

FUNCTION input

BASIC BLOCK entry
%10759:	load	 yy_hold_char
%10760:	load	 yy_c_buf_p
%10761:	store	 %10759 %10760
%10762:	load	 yy_c_buf_p
%10763:	load	 %10762
%10764:	sext	 %10763
%10765:	icmp	 %10764 XXX
%10766:	br	 %10765 if.end12 if.then

BASIC BLOCK if.then
%10767:	load	 yy_c_buf_p
%10768:	load	 yy_n_chars
%10769:	sext	 %10768
%10770:	load	 yy_current_buffer
%10771:	getelementptr	 %10770 XXX XXX
%10772:	load	 %10771
%10773:	getelementptr	 %10772 %10769
%10774:	icmp	 %10767 %10773
%10775:	br	 %10774 if.else if.then4

BASIC BLOCK if.then4
%10776:	load	 yy_c_buf_p
%10777:	store	 XXX %10776
%10778:	br	 if.end11

BASIC BLOCK if.else
%10779:	load	 yy_c_buf_p
%10780:	store	 %10779 yytext
%10781:	load	 yy_c_buf_p
%10782:	getelementptr	 %10781 XXX
%10783:	store	 %10782 yy_c_buf_p
%10784:	call	 yy_get_next_buffer
%10785:	switch	 %10784 sw.epilog XXX sw.bb XXX sw.bb8 XXX sw.bb10

BASIC BLOCK sw.bb
%10786:	call	 yywrap
%10787:	icmp	 %10786 XXX
%10788:	br	 %10787 if.end if.then6

BASIC BLOCK if.then6
%10789:	load	 yytext
%10790:	getelementptr	 %10789 XXX
%10791:	store	 %10790 yy_c_buf_p
%10792:	br	 return

BASIC BLOCK if.end
%10793:	load	 yyin
%10794:	call	 %10793 yyrestart
%10795:	call	 input
%10796:	br	 return

BASIC BLOCK sw.bb8
%10797:	load	 yytext
%10798:	getelementptr	 %10797 XXX
%10799:	store	 %10798 yy_c_buf_p
%10800:	br	 sw.epilog

BASIC BLOCK sw.bb10
%10801:	call	 XXX yy_fatal_error
%10802:	br	 sw.epilog

BASIC BLOCK sw.epilog
%10803:	br	 if.end11

BASIC BLOCK if.end11
%10804:	br	 if.end12

BASIC BLOCK if.end12
%10805:	load	 yy_c_buf_p
%10806:	load	 %10805
%10807:	zext	 %10806
%10808:	load	 yy_c_buf_p
%10809:	store	 XXX %10808
%10810:	load	 yy_c_buf_p
%10811:	getelementptr	 %10810 XXX
%10812:	store	 %10811 yy_c_buf_p
%10813:	load	 %10811
%10814:	store	 %10813 yy_hold_char
%10815:	br	 return

BASIC BLOCK return
%10816:	phi	 %10807 XXX %10795
%10817:	ret	 %10816

FUNCTION yy_fatal_error

BASIC BLOCK entry
%10818:	load	 err
%10819:	call	 %10818 XXX msg fprintf
%10820:	call	 XXX exit
%10821:	unreachable	

BASIC BLOCK return
%10822:	ret	

FUNCTION yy_get_previous_state

BASIC BLOCK entry
%10823:	load	 yytext
%10824:	load	 yy_start
%10825:	getelementptr	 %10823 XXX
%10826:	load	 %10825
%10827:	sext	 %10826
%10828:	icmp	 %10827 XXX
%10829:	br	 %10828 if.end if.then

BASIC BLOCK if.then
%10830:	add	 %10824 XXX
%10831:	br	 if.end

BASIC BLOCK if.end
%10832:	phi	 %10830 %10824
%10833:	load	 yytext
%10834:	getelementptr	 %10833 XXX
%10835:	br	 for.cond

BASIC BLOCK for.cond
%10836:	phi	 %10834 %10902
%10837:	phi	 %10832 %10900
%10838:	load	 yy_c_buf_p
%10839:	icmp	 %10836 %10838
%10840:	br	 %10839 for.end for.body

BASIC BLOCK for.body
%10841:	load	 %10836
%10842:	sext	 %10841
%10843:	icmp	 %10842 XXX
%10844:	br	 %10843 cond.false cond.true

BASIC BLOCK cond.true
%10845:	load	 %10836
%10846:	zext	 %10845
%10847:	zext	 %10846
%10848:	getelementptr	 yy_ec XXX %10847
%10849:	load	 %10848
%10850:	br	 cond.end

BASIC BLOCK cond.false
%10851:	br	 cond.end

BASIC BLOCK cond.end
%10852:	phi	 %10849 XXX
%10853:	trunc	 %10852
%10854:	sext	 %10837
%10855:	getelementptr	 yy_accept XXX %10854
%10856:	load	 %10855
%10857:	icmp	 %10856 XXX
%10858:	br	 %10857 if.end12 if.then11

BASIC BLOCK if.then11
%10859:	store	 %10837 yy_last_accepting_state
%10860:	store	 %10836 yy_last_accepting_cpos
%10861:	br	 if.end12

BASIC BLOCK if.end12
%10862:	br	 while.cond

BASIC BLOCK while.cond
%10863:	phi	 %10853 %10889
%10864:	phi	 %10837 %10880
%10865:	sext	 %10864
%10866:	getelementptr	 yy_base XXX %10865
%10867:	load	 %10866
%10868:	sext	 %10867
%10869:	zext	 %10863
%10870:	add	 %10868 %10869
%10871:	sext	 %10870
%10872:	getelementptr	 yy_chk XXX %10871
%10873:	load	 %10872
%10874:	sext	 %10873
%10875:	icmp	 %10874 %10864
%10876:	br	 %10875 while.end while.body

BASIC BLOCK while.body
%10877:	sext	 %10864
%10878:	getelementptr	 yy_def XXX %10877
%10879:	load	 %10878
%10880:	sext	 %10879
%10881:	icmp	 %10880 XXX
%10882:	br	 %10881 if.end32 if.then27

BASIC BLOCK if.then27
%10883:	zext	 %10863
%10884:	zext	 %10883
%10885:	getelementptr	 yy_meta XXX %10884
%10886:	load	 %10885
%10887:	trunc	 %10886
%10888:	br	 if.end32

BASIC BLOCK if.end32
%10889:	phi	 %10887 %10863
%10890:	br	 while.cond

BASIC BLOCK while.end
%10891:	sext	 %10864
%10892:	getelementptr	 yy_base XXX %10891
%10893:	load	 %10892
%10894:	sext	 %10893
%10895:	zext	 %10863
%10896:	add	 %10894 %10895
%10897:	zext	 %10896
%10898:	getelementptr	 yy_nxt XXX %10897
%10899:	load	 %10898
%10900:	sext	 %10899
%10901:	br	 for.inc

BASIC BLOCK for.inc
%10902:	getelementptr	 %10836 XXX
%10903:	br	 for.cond

BASIC BLOCK for.end
%10904:	ret	 %10837

FUNCTION yy_try_NUL_trans

BASIC BLOCK entry
%10905:	load	 yy_c_buf_p
%10906:	sext	 yy_current_state
%10907:	getelementptr	 yy_accept XXX %10906
%10908:	load	 %10907
%10909:	icmp	 %10908 XXX
%10910:	br	 %10909 if.end if.then

BASIC BLOCK if.then
%10911:	store	 yy_current_state yy_last_accepting_state
%10912:	store	 %10905 yy_last_accepting_cpos
%10913:	br	 if.end

BASIC BLOCK if.end
%10914:	br	 while.cond

BASIC BLOCK while.cond
%10915:	phi	 XXX %10941
%10916:	phi	 yy_current_state %10932
%10917:	sext	 %10916
%10918:	getelementptr	 yy_base XXX %10917
%10919:	load	 %10918
%10920:	sext	 %10919
%10921:	zext	 %10915
%10922:	add	 %10920 %10921
%10923:	sext	 %10922
%10924:	getelementptr	 yy_chk XXX %10923
%10925:	load	 %10924
%10926:	sext	 %10925
%10927:	icmp	 %10926 %10916
%10928:	br	 %10927 while.end while.body

BASIC BLOCK while.body
%10929:	sext	 %10916
%10930:	getelementptr	 yy_def XXX %10929
%10931:	load	 %10930
%10932:	sext	 %10931
%10933:	icmp	 %10932 XXX
%10934:	br	 %10933 if.end18 if.then13

BASIC BLOCK if.then13
%10935:	zext	 %10915
%10936:	zext	 %10935
%10937:	getelementptr	 yy_meta XXX %10936
%10938:	load	 %10937
%10939:	trunc	 %10938
%10940:	br	 if.end18

BASIC BLOCK if.end18
%10941:	phi	 %10939 %10915
%10942:	br	 while.cond

BASIC BLOCK while.end
%10943:	sext	 %10916
%10944:	getelementptr	 yy_base XXX %10943
%10945:	load	 %10944
%10946:	sext	 %10945
%10947:	zext	 %10915
%10948:	add	 %10946 %10947
%10949:	zext	 %10948
%10950:	getelementptr	 yy_nxt XXX %10949
%10951:	load	 %10950
%10952:	sext	 %10951
%10953:	icmp	 %10952 XXX
%10954:	zext	 %10953
%10955:	icmp	 %10954 XXX
%10956:	br	 %10955 cond.false cond.true

BASIC BLOCK cond.true
%10957:	br	 cond.end

BASIC BLOCK cond.false
%10958:	br	 cond.end

BASIC BLOCK cond.end
%10959:	phi	 XXX %10952
%10960:	ret	 %10959

FUNCTION yy_get_next_buffer

BASIC BLOCK entry
%10961:	load	 yy_current_buffer
%10962:	getelementptr	 %10961 XXX XXX
%10963:	load	 %10962
%10964:	load	 yytext
%10965:	getelementptr	 %10964 XXX
%10966:	load	 yy_c_buf_p
%10967:	load	 yy_n_chars
%10968:	add	 %10967 XXX
%10969:	sext	 %10968
%10970:	load	 yy_current_buffer
%10971:	getelementptr	 %10970 XXX XXX
%10972:	load	 %10971
%10973:	getelementptr	 %10972 %10969
%10974:	icmp	 %10966 %10973
%10975:	br	 %10974 if.end if.then

BASIC BLOCK if.then
%10976:	call	 XXX yy_fatal_error
%10977:	br	 if.end

BASIC BLOCK if.end
%10978:	load	 yy_current_buffer
%10979:	getelementptr	 %10978 XXX XXX
%10980:	load	 %10979
%10981:	icmp	 %10980 XXX
%10982:	br	 %10981 if.end6 if.then3

BASIC BLOCK if.then3
%10983:	load	 yy_c_buf_p
%10984:	load	 yytext
%10985:	ptrtoint	 %10983
%10986:	ptrtoint	 %10984
%10987:	sub	 %10985 %10986
%10988:	sub	 %10987 XXX
%10989:	icmp	 %10988 XXX
%10990:	br	 %10989 if.else if.then5

BASIC BLOCK if.then5
%10991:	br	 return

BASIC BLOCK if.else
%10992:	br	 return

BASIC BLOCK if.end6
%10993:	load	 yy_c_buf_p
%10994:	load	 yytext
%10995:	ptrtoint	 %10993
%10996:	ptrtoint	 %10994
%10997:	sub	 %10995 %10996
%10998:	trunc	 %10997
%10999:	br	 for.cond

BASIC BLOCK for.cond
%11000:	phi	 XXX %11010
%11001:	phi	 %10965 %11005
%11002:	phi	 %10963 %11007
%11003:	icmp	 %11000 %10998
%11004:	br	 %11003 for.end for.body

BASIC BLOCK for.body
%11005:	getelementptr	 %11001 XXX
%11006:	load	 %11001
%11007:	getelementptr	 %11002 XXX
%11008:	store	 %11006 %11002
%11009:	br	 for.inc

BASIC BLOCK for.inc
%11010:	add	 %11000 XXX
%11011:	br	 for.cond

BASIC BLOCK for.end
%11012:	load	 yy_current_buffer
%11013:	getelementptr	 %11012 XXX XXX
%11014:	load	 %11013
%11015:	icmp	 %11014 XXX
%11016:	br	 %11015 if.else16 if.then15

BASIC BLOCK if.then15
%11017:	store	 XXX yy_n_chars
%11018:	br	 if.end67

BASIC BLOCK if.else16
%11019:	load	 yy_current_buffer
%11020:	getelementptr	 %11019 XXX XXX
%11021:	load	 %11020
%11022:	sub	 %11021 %10998
%11023:	sub	 %11022 XXX
%11024:	br	 while.cond

BASIC BLOCK while.cond
%11025:	phi	 %11023 %11062
%11026:	icmp	 %11025 XXX
%11027:	br	 %11026 while.end while.body

BASIC BLOCK while.body
%11028:	load	 yy_current_buffer
%11029:	load	 yy_c_buf_p
%11030:	getelementptr	 %11028 XXX XXX
%11031:	load	 %11030
%11032:	ptrtoint	 %11029
%11033:	ptrtoint	 %11031
%11034:	sub	 %11032 %11033
%11035:	trunc	 %11034
%11036:	getelementptr	 %11028 XXX XXX
%11037:	load	 %11036
%11038:	mul	 %11037 XXX
%11039:	store	 %11038 %11036
%11040:	getelementptr	 %11028 XXX XXX
%11041:	load	 %11040
%11042:	getelementptr	 %11028 XXX XXX
%11043:	load	 %11042
%11044:	call	 %11041 %11043 yy_flex_realloc
%11045:	getelementptr	 %11028 XXX XXX
%11046:	store	 %11044 %11045
%11047:	getelementptr	 %11028 XXX XXX
%11048:	load	 %11047
%11049:	icmp	 %11048 XXX
%11050:	br	 %11049 if.then31 if.end32

BASIC BLOCK if.then31
%11051:	call	 XXX yy_fatal_error
%11052:	br	 if.end32

BASIC BLOCK if.end32
%11053:	sext	 %11035
%11054:	getelementptr	 %11028 XXX XXX
%11055:	load	 %11054
%11056:	getelementptr	 %11055 %11053
%11057:	store	 %11056 yy_c_buf_p
%11058:	load	 yy_current_buffer
%11059:	getelementptr	 %11058 XXX XXX
%11060:	load	 %11059
%11061:	sub	 %11060 %10998
%11062:	sub	 %11061 XXX
%11063:	br	 while.cond

BASIC BLOCK while.end
%11064:	icmp	 %11025 XXX
%11065:	br	 %11064 if.end42 if.then41

BASIC BLOCK if.then41
%11066:	br	 if.end42

BASIC BLOCK if.end42
%11067:	phi	 XXX %11025
%11068:	load	 yy_current_buffer
%11069:	getelementptr	 %11068 XXX XXX
%11070:	load	 %11069
%11071:	icmp	 %11070 XXX
%11072:	br	 %11071 if.else53 if.then44

BASIC BLOCK if.then44
%11073:	load	 yyin
%11074:	call	 %11073 _IO_getc
%11075:	icmp	 %11074 XXX
%11076:	select	 %11075 XXX XXX
%11077:	store	 %11076 yy_n_chars
%11078:	trunc	 %11074
%11079:	sext	 %10998
%11080:	load	 yy_current_buffer
%11081:	getelementptr	 %11080 XXX XXX
%11082:	load	 %11081
%11083:	getelementptr	 %11082 %11079
%11084:	getelementptr	 %11083 XXX
%11085:	store	 %11078 %11084
%11086:	br	 if.end66

BASIC BLOCK if.else53
%11087:	sext	 %10998
%11088:	load	 yy_current_buffer
%11089:	getelementptr	 %11088 XXX XXX
%11090:	load	 %11089
%11091:	getelementptr	 %11090 %11087
%11092:	sext	 %11067
%11093:	load	 yyin
%11094:	call	 %11091 XXX %11092 %11093 fread
%11095:	trunc	 %11094
%11096:	store	 %11095 yy_n_chars
%11097:	icmp	 %11095 XXX
%11098:	br	 %11097 if.end65 land.lhs.true

BASIC BLOCK land.lhs.true
%11099:	load	 yyin
%11100:	call	 %11099 ferror
%11101:	icmp	 %11100 XXX
%11102:	br	 %11101 if.end65 if.then64

BASIC BLOCK if.then64
%11103:	call	 XXX yy_fatal_error
%11104:	br	 if.end65

BASIC BLOCK if.end65
%11105:	br	 if.end66

BASIC BLOCK if.end66
%11106:	br	 if.end67

BASIC BLOCK if.end67
%11107:	load	 yy_n_chars
%11108:	icmp	 %11107 XXX
%11109:	br	 %11108 if.else78 if.then70

BASIC BLOCK if.then70
%11110:	sub	 %10998 XXX
%11111:	icmp	 %11110 XXX
%11112:	br	 %11111 if.else75 if.then74

BASIC BLOCK if.then74
%11113:	load	 yyin
%11114:	call	 %11113 yyrestart
%11115:	br	 if.end77

BASIC BLOCK if.else75
%11116:	load	 yy_current_buffer
%11117:	getelementptr	 %11116 XXX XXX
%11118:	store	 XXX %11117
%11119:	br	 if.end77

BASIC BLOCK if.end77
%11120:	phi	 XXX XXX
%11121:	br	 if.end79

BASIC BLOCK if.else78
%11122:	br	 if.end79

BASIC BLOCK if.end79
%11123:	phi	 %11120 XXX
%11124:	load	 yy_n_chars
%11125:	add	 %11124 %10998
%11126:	store	 %11125 yy_n_chars
%11127:	load	 yy_n_chars
%11128:	sext	 %11127
%11129:	load	 yy_current_buffer
%11130:	getelementptr	 %11129 XXX XXX
%11131:	load	 %11130
%11132:	getelementptr	 %11131 %11128
%11133:	store	 XXX %11132
%11134:	load	 yy_n_chars
%11135:	add	 %11134 XXX
%11136:	sext	 %11135
%11137:	load	 yy_current_buffer
%11138:	getelementptr	 %11137 XXX XXX
%11139:	load	 %11138
%11140:	getelementptr	 %11139 %11136
%11141:	store	 XXX %11140
%11142:	load	 yy_current_buffer
%11143:	getelementptr	 %11142 XXX XXX
%11144:	load	 %11143
%11145:	getelementptr	 %11144 XXX
%11146:	store	 %11145 yytext
%11147:	br	 return

BASIC BLOCK return
%11148:	phi	 XXX XXX %11123
%11149:	ret	 %11148

FUNCTION yywrap

BASIC BLOCK entry
%11150:	load	 num_input_files
%11151:	add	 %11150 XXX
%11152:	store	 %11151 num_input_files
%11153:	icmp	 %11151 XXX
%11154:	br	 %11153 if.else if.then

BASIC BLOCK if.then
%11155:	load	 input_files
%11156:	getelementptr	 %11155 XXX
%11157:	store	 %11156 input_files
%11158:	load	 %11156
%11159:	call	 %11158 set_input_file
%11160:	br	 return

BASIC BLOCK if.else
%11161:	br	 return

BASIC BLOCK return
%11162:	phi	 XXX XXX
%11163:	ret	 %11162

FUNCTION yyrestart

BASIC BLOCK entry
%11164:	load	 yy_current_buffer
%11165:	icmp	 %11164 XXX
%11166:	br	 %11165 if.then if.end

BASIC BLOCK if.then
%11167:	load	 yyin
%11168:	call	 %11167 XXX yy_create_buffer
%11169:	store	 %11168 yy_current_buffer
%11170:	br	 if.end

BASIC BLOCK if.end
%11171:	load	 yy_current_buffer
%11172:	call	 %11171 input_file yy_init_buffer
%11173:	call	 yy_load_buffer_state
%11174:	ret	

FUNCTION yy_switch_to_buffer

BASIC BLOCK entry
%11175:	load	 yy_current_buffer
%11176:	icmp	 %11175 new_buffer
%11177:	br	 %11176 if.end if.then

BASIC BLOCK if.then
%11178:	br	 return

BASIC BLOCK if.end
%11179:	load	 yy_current_buffer
%11180:	icmp	 %11179 XXX
%11181:	br	 %11180 if.end2 if.then1

BASIC BLOCK if.then1
%11182:	load	 yy_hold_char
%11183:	load	 yy_c_buf_p
%11184:	store	 %11182 %11183
%11185:	load	 yy_c_buf_p
%11186:	load	 yy_current_buffer
%11187:	getelementptr	 %11186 XXX XXX
%11188:	store	 %11185 %11187
%11189:	load	 yy_n_chars
%11190:	load	 yy_current_buffer
%11191:	getelementptr	 %11190 XXX XXX
%11192:	store	 %11189 %11191
%11193:	br	 if.end2

BASIC BLOCK if.end2
%11194:	store	 new_buffer yy_current_buffer
%11195:	call	 yy_load_buffer_state
%11196:	store	 XXX yy_did_buffer_switch_on_eof
%11197:	br	 return

BASIC BLOCK return
%11198:	ret	

FUNCTION yy_flex_alloc

BASIC BLOCK entry
%11199:	zext	 size
%11200:	call	 %11199 malloc
%11201:	ret	 %11200

FUNCTION yy_delete_buffer

BASIC BLOCK entry
%11202:	load	 yy_current_buffer
%11203:	icmp	 b %11202
%11204:	br	 %11203 if.end if.then

BASIC BLOCK if.then
%11205:	store	 XXX yy_current_buffer
%11206:	br	 if.end

BASIC BLOCK if.end
%11207:	getelementptr	 b XXX XXX
%11208:	load	 %11207
%11209:	call	 %11208 yy_flex_free
%11210:	bitcast	 b
%11211:	call	 %11210 yy_flex_free
%11212:	ret	

FUNCTION yy_flex_free

BASIC BLOCK entry
%11213:	call	 ptr free
%11214:	ret	

FUNCTION yy_flex_realloc

BASIC BLOCK entry
%11215:	zext	 size
%11216:	call	 ptr %11215 realloc
%11217:	ret	 %11216
