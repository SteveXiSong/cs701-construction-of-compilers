
BASIC BLOCK entry	1
%1:	add	 argv XXX
%2:	br	 L

BASIC BLOCK L	2
%3:	phi	 argv %5 %9
%4:	add	 %1 XXX
%5:	add	 %3 XXX
%6:	icmp	 %5 XXX
%7:	br	 %6 if.end if.then

BASIC BLOCK if.then	3
%8:	br	 L

BASIC BLOCK if.end	4
%9:	add	 %5 XXX
%10:	icmp	 %9 XXX
%11:	br	 %10 if.end5 if.then4

BASIC BLOCK if.then4	5
%12:	br	 L

BASIC BLOCK if.end5	6
%13:	ret	 XXX
before worklist algo: 
WL:[ 2 3 4 5 6  ]
worklist algo start...  
WL:[ 3 4 5 6  ]
WL:[ 4 5 6 3 4  ]
WL:[ 5 6 3 4 2  ]
WL:[ 6 3 4 2 5 6  ]
WL:[ 3 4 2 5 6 2  ]
WL:[ 4 2 5 6 2  ]
WL:[ 2 5 6 2  ]
WL:[ 5 6 2  ]
WL:[ 6 2  ]
WL:[ 2  ]
WL:[  ]
findBackedges ... 
Backedge: 
3->2
5->2
findNaturalLoops ... 
Natural loops(pre-combination): 
2: 2 3 
2 4 5 
combineLoops ... 
Natural loops(post-combination): 
2: Sorted natural loops: 
2: 4
Loop invariant: 
[ 4 ]
moveLoopInvInstOut ... 
pred num 3
adding preheader for loop with header L
