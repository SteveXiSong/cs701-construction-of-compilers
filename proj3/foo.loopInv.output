
BASIC BLOCK entry	1
%1:	icmp	 XXX XXX
%2:	br	 %1 if.else if.then

BASIC BLOCK if.then	2
%3:	add	 XXX XXX
%4:	br	 if.end

BASIC BLOCK if.else	3
%5:	add	 XXX XXX
%6:	br	 if.end

BASIC BLOCK if.end	4
%7:	phi	 %3 XXX
%8:	phi	 XXX %5
%9:	add	 XXX XXX
%10:	br	 while.cond

BASIC BLOCK while.cond	5
%11:	phi	 %7 %17
%12:	phi	 %9 %14
%13:	phi	 %8 %23
%14:	add	 %12 XXX
%15:	icmp	 %12 XXX
%16:	br	 %15 while.end9 while.body

BASIC BLOCK while.body	6
%17:	add	 %11 XXX
%18:	br	 while.cond5TRYTRY

BASIC BLOCK while.cond5TRYTRY	7
%19:	phi	 %26 %13
%20:	br	 while.cond5TRY

BASIC BLOCK while.cond5TRY	8
%21:	phi	 %19
%22:	br	 while.cond5

BASIC BLOCK while.cond5	9
%23:	phi	 %21
%24:	icmp	 %17 XXX
%25:	br	 %24 while.end while.body7

BASIC BLOCK while.body7	10
%26:	add	 %23 XXX
%27:	br	 while.cond5TRYTRY

BASIC BLOCK while.end	11
%28:	br	 while.cond

BASIC BLOCK while.end9	12
%29:	br	 while.cond10

BASIC BLOCK while.cond10	13
%30:	phi	 %11 %34 %38
%31:	phi	 %13 %31 XXX
%32:	icmp	 %30 XXX
%33:	br	 %32 while.end19 while.body12

BASIC BLOCK while.body12	14
%34:	add	 %30 XXX
%35:	icmp	 %34 XXX
%36:	br	 %35 if.else16 if.then15

BASIC BLOCK if.then15	15
%37:	br	 while.cond10

BASIC BLOCK if.else16	16
%38:	add	 %34 XXX
%39:	br	 if.end18

BASIC BLOCK if.end18	17
%40:	br	 while.cond10

BASIC BLOCK while.end19	18
%41:	add	 %31 XXX
%42:	ret	 XXX
before worklist algo: 
WL:[ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ]
worklist algo start...  
WL:[ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ]
WL:[ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 4  ]
WL:[ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 4 4  ]
WL:[ 6 7 8 9 10 11 12 13 14 15 16 17 18 4 4 5  ]
WL:[ 7 8 9 10 11 12 13 14 15 16 17 18 4 4 5 6 12  ]
WL:[ 8 9 10 11 12 13 14 15 16 17 18 4 4 5 6 12 7  ]
WL:[ 9 10 11 12 13 14 15 16 17 18 4 4 5 6 12 7 8  ]
WL:[ 10 11 12 13 14 15 16 17 18 4 4 5 6 12 7 8 9  ]
WL:[ 11 12 13 14 15 16 17 18 4 4 5 6 12 7 8 9 10 11  ]
WL:[ 12 13 14 15 16 17 18 4 4 5 6 12 7 8 9 10 11 7  ]
WL:[ 13 14 15 16 17 18 4 4 5 6 12 7 8 9 10 11 7 5  ]
WL:[ 14 15 16 17 18 4 4 5 6 12 7 8 9 10 11 7 5 13  ]
WL:[ 15 16 17 18 4 4 5 6 12 7 8 9 10 11 7 5 13 14 18  ]
WL:[ 16 17 18 4 4 5 6 12 7 8 9 10 11 7 5 13 14 18 15 16  ]
WL:[ 17 18 4 4 5 6 12 7 8 9 10 11 7 5 13 14 18 15 16 13  ]
WL:[ 18 4 4 5 6 12 7 8 9 10 11 7 5 13 14 18 15 16 13 17  ]
WL:[ 4 4 5 6 12 7 8 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 4 5 6 12 7 8 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 5 6 12 7 8 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 6 12 7 8 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 12 7 8 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 7 8 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 8 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 9 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 10 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 11 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 7 5 13 14 18 15 16 13 17 13  ]
WL:[ 5 13 14 18 15 16 13 17 13  ]
WL:[ 13 14 18 15 16 13 17 13  ]
WL:[ 14 18 15 16 13 17 13  ]
WL:[ 18 15 16 13 17 13  ]
WL:[ 15 16 13 17 13  ]
WL:[ 16 13 17 13  ]
WL:[ 13 17 13  ]
WL:[ 17 13  ]
WL:[ 13  ]
WL:[  ]

while.body 6:	while.body( 6 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.cond5TRYTRY 7:	while.body( 6 ) while.cond5TRYTRY( 7 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.cond5TRY 8:	while.body( 6 ) while.cond5TRYTRY( 7 ) while.cond5TRY( 8 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.cond5 9:	while.body( 6 ) while.cond5TRYTRY( 7 ) while.cond5TRY( 8 ) while.cond5( 9 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.body7 10:	while.body( 6 ) while.cond5TRYTRY( 7 ) while.cond5TRY( 8 ) while.cond5( 9 ) while.body7( 10 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.end 11:	while.body( 6 ) while.cond5TRYTRY( 7 ) while.cond5TRY( 8 ) while.cond5( 9 ) while.end( 11 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.end9 12:	while.end9( 12 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.cond10 13:	while.end9( 12 ) while.cond10( 13 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.body12 14:	while.end9( 12 ) while.cond10( 13 ) while.body12( 14 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
if.then15 15:	while.end9( 12 ) while.cond10( 13 ) while.body12( 14 ) if.then15( 15 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
if.else16 16:	while.end9( 12 ) while.cond10( 13 ) while.body12( 14 ) if.else16( 16 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
if.end18 17:	while.end9( 12 ) while.cond10( 13 ) while.body12( 14 ) if.else16( 16 ) if.end18( 17 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
while.end19 18:	while.end9( 12 ) while.cond10( 13 ) while.end19( 18 ) entry( 1 ) if.end( 4 ) while.cond( 5 ) 
entry 1:	entry( 1 ) 
if.then 2:	entry( 1 ) if.then( 2 ) 
if.else 3:	entry( 1 ) if.else( 3 ) 
if.end 4:	entry( 1 ) if.end( 4 ) 
while.cond 5:	entry( 1 ) if.end( 4 ) while.cond( 5 ) 

Backedge: 
10->7
11->5
15->13
17->13
Natural loops(pre-combination): 
7: 7 8 9 10 
13: 13 14 15 
13 14 16 17 
5: 6 7 8 9 10 11 5 
merging 2 loops with header while.cond10
Natural loops(post-combination): 
7: 7 8 9 10 
13: 5: 6 7 8 9 10 11 5 
Sorted natural loops: 
5: 7
13: 5
7: 4

while.body while.cond5TRYTRY while.cond5TRY while.cond5 while.body7 while.end while.cond 
while.cond10 while.body12 if.then15 if.else16 if.end18 
while.cond5TRYTRY while.cond5TRY while.cond5 while.body7 
Loop invariant: 
[ ]
[ ]
[ 24 ]
adding preheader for loop with header while.cond5TRYTRY

BASIC BLOCK entry	19
%43:	icmp	 para XXX
%44:	br	 %43 if.else if.then

BASIC BLOCK if.then	20
%45:	br	 if.end

BASIC BLOCK if.else	21
%46:	br	 if.end

BASIC BLOCK if.end	22
%47:	phi	 XXX XXX
%48:	ret	 %47
before worklist algo: 
WL:[ 20 21 22  ]
worklist algo start...  
WL:[ 21 22  ]
WL:[ 22 22  ]
WL:[ 22 22  ]
WL:[ 22  ]
WL:[  ]

entry 19:	entry( 19 ) 
if.then 20:	entry( 19 ) if.then( 20 ) 
if.else 21:	entry( 19 ) if.else( 21 ) 
if.end 22:	entry( 19 ) if.end( 22 ) 

Backedge: 
Natural loops(pre-combination): 
Natural loops(post-combination): 
Sorted natural loops: 

Loop invariant: 

BASIC BLOCK entry	23
%49:	br	 while.condTRYTRY

BASIC BLOCK while.condTRYTRY	24
%50:	phi	 XXX XXX
%51:	br	 while.condTRY

BASIC BLOCK while.condTRY	25
%52:	phi	 %50
%53:	br	 while.cond

BASIC BLOCK while.cond	26
%54:	phi	 %52
%55:	icmp	 %54 XXX
%56:	br	 %55 while.end while.body

BASIC BLOCK while.body	27
%57:	br	 while.condTRYTRY

BASIC BLOCK while.end	28
%58:	ret	
before worklist algo: 
WL:[ 24 25 26 27 28  ]
worklist algo start...  
WL:[ 25 26 27 28  ]
WL:[ 26 27 28 25  ]
WL:[ 27 28 25 26  ]
WL:[ 28 25 26 27 28  ]
WL:[ 25 26 27 28 24  ]
WL:[ 26 27 28 24  ]
WL:[ 27 28 24  ]
WL:[ 28 24  ]
WL:[ 24  ]
WL:[  ]

entry 23:	entry( 23 ) 
while.condTRYTRY 24:	entry( 23 ) while.condTRYTRY( 24 ) 
while.condTRY 25:	entry( 23 ) while.condTRYTRY( 24 ) while.condTRY( 25 ) 
while.cond 26:	entry( 23 ) while.condTRYTRY( 24 ) while.condTRY( 25 ) while.cond( 26 ) 
while.body 27:	entry( 23 ) while.condTRYTRY( 24 ) while.condTRY( 25 ) while.cond( 26 ) while.body( 27 ) 
while.end 28:	entry( 23 ) while.condTRYTRY( 24 ) while.condTRY( 25 ) while.cond( 26 ) while.end( 28 ) 

Backedge: 
27->24
Natural loops(pre-combination): 
24: 24 25 26 27 
Natural loops(post-combination): 
24: 24 25 26 27 
Sorted natural loops: 
24: 4

while.condTRYTRY while.condTRY while.cond while.body 
Loop invariant: 
[ 50 ]
adding preheader for loop with header while.condTRYTRY
